if e.connection_reset is false,
append filename to the self.attachments list.
decorator function register.filter with an argument is_safe set to boolean True.
substitute value under idx key of dictionary d for d.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.
if self._leftover is true,
return value under the alias key of self._caches.caches dictionary.
do nothing.
substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
from django.conf import settings object to the default name space.
help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name,
define the method render with an argument self.
if length of words is greater than length,
if not,
if self.required is false,
call the method self.reader_leaves.
call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
define the function _findall with 2 arguments text and substr.
if app_config.models_module is None,
return _cached_filenames.
substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
from django.utils.http import http_date to the default name space.
do nothing.
derive the class Loader from the BaseLoader base class.
if not,
acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
define the method display with an argument self.
define the function convert_old_style_list with an argument list_.
try,
dirs is an empty dictionary.
'Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.',   and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max',   for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit before the decimal point.',   'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.   define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,
if result is not None,
get the directory name of filename, substitute the result for dirname.
get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
if self.instance.pk is not None,
join usage elements in a string separated by newline characters, return it.
call the method self._iteritems, for every k and v in the result,
call the method self.characters with an argument contents.
substitute sup_cls.media for base.
CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget,   SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.   from django.utils import formats into default name space.
filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.   otherwise if bytes is smaller than GB,
call the function bytes with an argument tuple with an element i, return the result.
attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',
created_models is a set.
raise an exception.
for every node in compiled_parent.nodelist,
define the method __repr__ with an argument self.
call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
po_path is a string containing joined directory path from dirpath and f.
call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,
if key is contained in dict_,
call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
if UnicodeDecodeError exception is caught,
call the function force_text with an argument value, substitute the result for text_value.
from django.utils.encoding import force_st into default name space.
sum sign, int_part and dec_part, return the result.
do nothing.
define the function valid_ident with an argument s.
call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.
substitute v for value under the k key of self dictionary.
truncate last 9 elements of filename and append it string ".py".
slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
otherwise if first element of g equals a string "'",
return boolean True.
if ext is false and content_type is true,
call the method zfile.close.
utility is a instance of ManagementUtility class, created with an argument argv.
substitute new_method_name for new_method_name.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if not,
define the method id_for_label with arguments self and id.
BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml",
call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
define the method auto_id with an argument self.
call the method self._is_expired with argument f, invert the boolean result and return it.
from django.forms.models import everything into default name space.
code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.   return new_value.
if self._errors is None,
substitute safe for value under the 'safe' key of kwargs dictionary.
get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase,
if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
put cc into a list, assign it to self.cc.
return nothing.
if value under the 'verbosity' key of the options dictionary is greater than zero,
substitute tagtype for self.tagtype.
call the method self.xml.startElement with arguments string 'object' and attrs.
from django.core import serializers into default name space.
call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.
replace '%s' in string 'django_%s_template_' with self.app_or_project.
if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,
with lock,
substitute name for self.name.
replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
if not,
call the function logging_config_func with an argument DEFAULT_LOGGING.
if not,
if not, self.require_all_fields is boolean True.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
and unpacked dictionary kwargs.   instance.keyOrder is an empty list.
call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.
execute statement on the database that curs points to.
if value is true,
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d),
if settings.TEMPLATE_DEBUG is true,
from django.utils._os import safe_join into default name space.
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.
import module sys.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method logger.removeHandler with an argument handler.
convert self into a string and return it.
join elements of output into a string, separated with newline character,
with arguments cookie_value and max_age set to max_age.   if signing.BadSignature exception is caught,
call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain',
and csrf_token, return the result.   if not,
substitute sysid for self.sysid.
call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',
if not,
common_prefix is None.
if not,
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
substitute elements of tuple boundary to end and next, respectively.
substitute greater element between integer 0 and end decremented by one for last.
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
substitute value for self.value.
return output.
call the timezone.now function, substitute the result for now.
calculate reminder of division of x by length to_digits, substitute it for digit.
if illegal_formatting is true,
try,
if opname is not contained in roots,
if not, self.empty is boolean False.   crate a set containing of app_labels elements, substitute it for app_labels.
substitute the list of results for values.   return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments:   unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and',   return the result.   define the method get_date_error_message with 2 arguments: self and date_check.
if m is false,
return e.
'"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.   define the method to_python with arguments self and data.
call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
if not,
append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method,   call the self.stdout.write method with previous return value as an argument.   if run_syncdb and executor.loader.unmigrated_apps is true,
from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
call the method self.remove_potfiles.
call the method logging.captureWarnings with an argument boolean True.
derive the class SafeBytes from bytes and SafeData base classes.
call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.
if not,
define the method make_writeable with arguments self and filename.
if ch is true,
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.
define the method items with an argument self.
substitutions dictionary.   call the function mark_safe with an argument template, formated with substitutions, return the result.
call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.
return boolean False.
result of the call to the function _ with an argument string 'Tuesday' for 1,   result of the call to the function _ with an argument string 'Wednesday' for 2,   result of the call to the function _ with an argument string 'Thursday' for 3,   result of the call to the function _ with an argument string 'Friday' for 4,   result of the call to the function _ with an argument string 'Saturday' for 5,   and result of the call to the function _ with an argument string 'Sunday' for 6.   WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,
join elements of output into a string, return the result.
substitute c_ulong for ULONG_PTR.
raise an CommandError exception with an argument string, "Incompatible values of 'leave_locale_alone' "
derive the class Parser from the base class object.
if y and m and d are all true,
if self.settings_exception is not None,
call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.
return usage.
call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.
call the method fp.getvalue, return the result.
inverse_match set to None and flags set to None.   if regex is not None,
define the method with reload with an argument self.
substitute conditions_nodelists for self.conditions_nodelists.
with name_str, use it as an argument to throw an CommandError exception.   if self.merge is true and conflicts is false,
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.
rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
content.setter decorator,
substitute flo for self.flo.
otherwise if o is an instance of decimal.Decimal object,
substitute minimal element of the resulting list for self._chunk_size.   substitute META for self._meta.
derive the class RWLock from the object base class.
import module re.
from django.utils.encoding import smart_text and force_text into default name space.
return boolean False.
substitute first element of the result for param and value.   if param is not in params and varkw is None,
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
define the function upath with an argument path.
from django.utils import six into default name space.
from __future__ import unicode_literals into default name space.
if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
if f.name is contained in cleaned_data,
child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.
if self._pk_field equals self.fk,
call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,
define the method write_message with arguments self and message.
unpacked list field_value as an argument, substitute the result for value.   substitute value for value under the field.attname key of the data dictionary.
define the method __init__ with 2 arguments: self and language.
define the method __init__ with 2 arguments self and file.
try,
and '%(error)s' is replaced with return value of the force_text function called with an argument e,   extend the top_errors with the result.   call the function six.text_type with an argument bf, append the result to hidden_fields.
derive the class SerializerDoesNotExist from the KeyError base class.
call the function time_format with 2 arguments: value and arg, return the result.
call the connection.introspection.table_names with tables as argument, store the result in seen_models.
if new_name starts with a string '_',
call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,
use the result as an argument for the call to the self.stdout.write.   call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
define the method getvalue with an argument self.
call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string,
if PY3 is true,
if not,
get the value under the lang_code key of the LANG_INFO dictionary, return it.
if ValueError or TypeError exceptions are caught,
return self.new_objects.
if not,
append x to self.namespaces list for every x in namespaces, only if x is true.
define the method __init__ with self and limit_value as arguments.
define the method previous_page_number with an argument self.
substitute list_ for first_item and second_item, respectively.
and version set to result of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
substitute value under the name key of the toks dictionary for tok.
substitute integer 0 for cache_timeout.
call the connection.cursor method, substitute the result for cursor.
call the method self._reset_dicts with an argument dict_.
if ValueError exception is caught,
if s is not an instance of the object six.string_types,
define the function get_digit with 2 arguments value and arg.
with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.
root is a list with elements: root, root, None and None.
if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
do nothing.
define the method __nonzero__ with an argument self.
call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
extend self.program list with self.program_options, string '-o',
raise a SerializerDoesNotExist exception with an argument format.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
define the method __init__ with an argument self.
call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec,
return func.
s is an instance of StringIO class.
derive the class MultiPartParser from the object base class.
call the function warnings.warn with an argument,
try,
for every match in the result,   substitute match.lastgroup for name.
import module warnings.
if self.initial_forms is false,
raise an TemplateSyntaxError exception with an argument string "'%s' received some positional argument(s) after some keyword argument(s)", where '%s' is replaced with name.
def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
if construct is true,
if self has an 'error_dict' attribute,
separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop,   substitute '%s' with reversed_text.   define the method __iter__ with an argument self.
call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
substitute length of self.loopvars for num_loopvars.
call the function ungettext with 3 arguments: string "%(size)d byte", string "%(size)d bytes" and 0, '%(size)d' is replaced with 0,
call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   join elements of paras into a string separated with '\n\n', return the result.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
if not csrf_token is None.   if csrf_token is true,
define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
try,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method,
if 'filename' attribute of ev is None,
call the function walk_to_end with 2 arguments: ch and pattern_iter.
help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.
substitute self.urlconf_module for self.urlconf_module.   try,
if not,
for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start,
join elements of self.fed into a string, return the result.
third element of the result of the function sys.exc_info.   define the method __init__ with an argument self.
define the method clear with an argument self.
finally,
formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.   set new_method_name attribute of the base object to old_method.
define the method __iter__ with an argument self.
call the method warnings.warn with 2 arguments: string "No fixture data found for '%s'. (File format may be invalid.)",
call the self._create_message method with argument msg, substitute it for msg.
if cache is an instance of BaseDatabaseCache,
call the function re.sub with 3 arguments: raw string "\\.|.", escape_quotes and tok without the first and last element,
return string 'StopUpload: Halt current upload.'.
name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.   append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
raise an ValueError exception with an argument e.
call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
return boolean False.
return result.
call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
define the method __init__ with 2 arguments: self and conditions_nodelists.
try,
call the method self.registered_checks.append with argument check.
if not,
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
call the method self._setup.
call the method handler.endElement with an argument string 'entry'.
substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements,
join elements of c into a string, return it.
define the method is_silence with argument self.
define the method __init__ with arguments: self and options set to None.
call the method self.write_po_file with 2 arguments: potfile and locale.
if self.is_localized is true,
define the method add_arguments with 2 arguments self and parser.
sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
if length of version does not equals to integer 5, raise an exception.
define the method __getitem__ with an argument self.
yield string "#   * Make sure each model has one field with primary_key=True" as the result.
use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method created_time with arguments self and name.
define the method __deepcopy__ with 2 arguments: self and memo.
if not,
with self.mutex perform,
call the function ugettext_lazy with an argument value, return the result.
try,
do nothing.
replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
call the method self._isdst with an argument dt, if it evaluates to true,
return self.token.
and _allow_fallback set to boolean True, extend the output with the result.   return output.
for every format in self.input_formats,
remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.
call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
define the function catalog.
__Y is a raw string '(?P<year>\d{4})'.
return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.
call the function signed_value with an argument value, substitute the result for signed_value.
define the method clean with an argument self.
get 'value' attribute of the _active object
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
if ValueError, TypeError or OverflowError exceptions are caught,
define the method tzname with 2 arguments self and dt.
and guid_attrs.   if value under the 'ttl' key of the item dictionary is not None,
if ImportError exception is caught,
if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:
return a string "<WithNode>"
aise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
return boolean False.
derive class _LazyModule from the types.ModuleType base class.
attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.
if locations is not empty,
open file named file_or_path for reading, store the file object handle in file.
breaks from the smallest enclosing loop execution.
otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
join self.dirpath and self.file into a file path, substitute it for orig_file.
call the method test_runner_class.add_arguments with an argument parser.
while field.rel is not None,
substitute result of the self.path function with argument name for full_path.
try,
call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data,
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".'
join root and f in path, substitute the result for f.
convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.
yield value under key key of self dictionary.
call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method,
call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
try,
call to the resolver.resolve method with request.path_info as an argument.
import module datetime.
return an empty string.
call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
creation_counter is an integer 0.
call the re.compile function with 2 arguments: raw string "^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+",
define the method E with an argument self.
from django.template import loader,  Context and RequestContext into default name space.
call the method connection.introspection.table_names, substitute the result for tables.
if t.token_type is not equal to TOKEN_COMMENT,
if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
define the method clear with argument self.
derive the class RemovedInDjango19Warning from DeprecationWarning base class.
derive the class QueryDict from the base class MultiValueDict.
return boolean False.
append '-' to digits.
raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
return an empty string.
from django.utils import lru_cache into default name space.
define the method open with argument self.
check_for_language is lambda function that returns boolean True for every argument x.
for every form in valid_forms,
if http_cookies.CookieError exception is raised.
return boolean False.
call the method d.as_tuple, substitute the result for tupl.
define the method delete with arguments self and name.
do nothing.
from functools import total_ordering.
convert to integer value of dictionary cc under the key 'max-age',
return self._urlconf_module.
widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args,   and unpacked dictionary kwargs.   substitute choices for self.choices.
incomment is boolean False.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
define the method add_arguments with 2 arguments self and parser.
define the method end_index with an argument self.
get the integer representation of the first element of bs, return it.
execute regardless of the exception being raised,
if i is greater than or equal to length of subject.
decorator function register.filter with an argument is_safe set to boolean True.
return result.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
'Database state will be brought to the state after that migration.' as arguments.   call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',
call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,
if KeyError exception is caught,
define the method get_resolved_arguments with 2 arguments: self and context.
call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e,
substitute the '%s' with table and list containing key, respectively.   define the method has_key with self class instance, key and version defaulting to None as arguments.
call the method context.render_context.push.
increment weight by integer 2.
return result.
if self.verbosity is greater or equal to integer 2,
raise CommandError exception with msg as argument.
self.bcc is an empty list.
substitute self.choices for self.widgetchoices.
if six.PY2 is true,
from django.apps import apps into default name space.
lbp is integer 0.
MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,
raise an exception.
call the function data with 3 arguments: d.year, d.month and d.day, return the result.
_wrapped is None.
from __future__ import unicode_literals into default name space.
raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
finally perform,
evaluate the method self._cache.incr with key and negative delta as arguments, return the result.
if vale is not an instance of ConvertingDict and value is an instance of dict type,
call the add_arguments method with parser as argument form the base class of the class Command.
decorator function register.filter with an argument is_safe set to boolean False.
substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy,   called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy,   called with an argument string 'No'.   call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
return six.text_type(s).encode(encoding, errors).
return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
if not,
substitute func for value under the '_setupfunc' key of the self.__dict__ dictionary.
call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
if m is true,
substitute complain for sort.
if not,
define the method full_clean with an argument self.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
try,
call the methof match.group with an argument "filter_name", substitute the result for filter_name.
import module django.core.checks.model_checks.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
if lookup_view is contained in self._callback_strs,
call the method stream.unget with an argument chunk.
value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:
write string "Cleaning up temporary files.\n" to self.stdout stream.
call the function self.compress with empty list as an argument, return the result.
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'",
substitute HiddenInput for widget.
if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag,
call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.
if not,
convert value and arg into a integers, return their sum.
divide num by self._cull_frequency, floor the result and substitute it for cull_num.
call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
if self.asvar is true,
evaluate function Lock() assign the result to initLock.
define the method __init__ with 2 arguments: self and filter_expression.
widget.is_localized is boolean True.
_mtimes is an empty dictionary.
import module mimetypes.
define the method to_python with arguments self and value.
if file_name is an instance of Template class.
if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
week_number is integer 1.
raise an InvalidTemplateLibrary exception with an argument string "ImportError raised loading %s: %s",
BLOCK_CONTEXT_KEY is a strign 'block_context'.
substitute timeout for self.timeout.
return a list containing results of the function format_html called with 2 arguments:
from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments:
if it exists return the second element of the result, if not, return alternate.   define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct",
if lang is None,
if file object has an attribute 'mode',
default set to None, help is a string 'Only look for fixtures in the specified app.'.   call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true',
raise an exception.
do nothing.
'self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.   call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
derive the class Truncator form the SimpleLazyObject class.
and unpacked dictionary kwargs.   call the function force_text with an argument self.value, substitute the result for self.value.
return html.
define the method read with an argument self.
called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback,
get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary,
get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
define the method __text_cast with an argument self.
substitute int for integer_types.
and code set to a string 'invalid_choice'.   return self.parent_instance.
define the method delete with self class instance, key and version defaulting to None as arguments.
otherwise if name starts with a string 'string',
import module sys.
call the method self.xml.startElement with an argument string 'object'.
if OSError, NotImplementedError or AttributeError exceptions are caught,
for every x in sequence of integers from 0 to 7.   RESET is a string '0'.
define the method __iter__ with an argument self.
substitute self._encoding for encoding.
output_transaction is boolean True.
try,
if not,
call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type,   with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.    if top_errors is true,
add j and integer 1, substitute the result for i.
if not,
skip this loop execution.
if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.
if active has an attribute 'value',
if not,
if terminal_char is not equal to string ')',
substitute resolver_match for request.resolver_match.
return value.
compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,
from django.core.management import call_command into default name space.
raise an ValueError exception with argument string "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.".
if not,
raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,
VARIABLE_TAG_START is a string '{{'.
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
define the method __repr__ with an argument self.
called with an argument final_attrs, return the result.   property decorator,
substitute second element of elt for param.
if ValueError exception is caught,
call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.
substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,
define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
split second element of hextet into parts by ':', append them to new_ip.
import module random as random_module.
call the method lookups.appendlist with 2 arguments: pattern.name and a tuple containing 3 elements: bits, p_pattern,
and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
define the method is_valid with an argument self.
if name is boolean False raise an assert error with message string "The name argument is not allowed to be empty.".
append path to self._js.
previous result and filepath.   if IOError exception is caught,
from __future__ import unicode_literals into default name space.
and help is a string "Only dump objects with given primary keys. Accepts a comma separated list of keys. "   "This option will only work when you specify one model.".   call the method parser.add_argument with 5 arguments: string '-o', string '--output', default is None, dest set to string 'output',
if new_conn_created is true,
call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,
call the method tf.format with an argument format_string, return the result.
call the method self.__text_cast, return the result.
second element of l for every l in return value of the self._files.lists   call the method f.close.
define the method __init__ with 2 arguments self and func.
from django.core.management.base import AppCommand into default name space.
call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
from django.core.management.base import BaseCommand and CommandError into default name space.
if not,
substitute SelectMultiple for widget.
if self._request_middleware is None,
if changed is false,
lang is None.
return value.
return obj.
substitute pubid for self.pubid.
raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.
call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
if value is None and attr is contained in declared_fields,
if second from the end element of args equals a string 'as',
self._cached_loaders is an empty list.
call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args,
opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.   for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list,
make target_dir directory,
import module signal.
if not return boolean False.   define the method add_fields with 3 arguments: self, form and index.
EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.
property decorator,
widget is an instance of HiddenInput class.   if not,
DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.   define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
derive the class WidthRatioNode from Node base class.
define the method copy with an argument self.
substitute self.rendered_content for self.content.
return an empty string,
nodelist.contains_nontext is boolean True.
if not,
if i is true,
replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result,
if fields is not None,
if TypeError or ValueError exceptions are caught,
iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.
clean_data is an empty list.
call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,
define the method modified_time with arguments self and name.
derive the class Http404 from the Exception base class.
plural is an empty list.
return instance.
called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,
if callback is of instance types.FunctionType,
substitute force_bytes for force_str.
' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.   derive the class Choice from list base class.
if max_age is not None,
and form_class_attrs.   derive the class BaseModelFormSet from the BaseFormSet base class.
if not,
define the method _get_media with an argument self.
inplural is boolean False.
join p and cmd into a file path, substitute it for f.
define the method reader_leaves with an argument self.
call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
import module sys.
if not, self.dry_run is boolean False.   get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,
raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
if self.is_bound is true,
convert self.option_list into a boolean, return the inverted value.
if obj is instance of models.signals.ModelSignal class,
raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
import module os.
if length of compressed is lesser than length of data decremented by 1,
if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
define the function inotify_code_changed.
define the method __init__ with 2 arguments: self and callback.
if strict is false,
define the method __lt__ with 2 arguments: self and other.
if self.verbosity is greater or equal to integer 1,
otherwise if intrans is true,
if not,
if path is not contained in self._js,
derive the class Page from the collections.Sequence base class.
define the function timeuntil_filter with 2 arguments value and arg set to None.
self.translate is boolean True.
from django.utils.deconstruct import deconstructible into default name space.
if confirm equals a string 'yes',
call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,
get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.
substitute stream for self._stream.
import module os.
append '/' to tmp, substitute it for display_url.
call the method template_file.read, substitute it for content.
field url of the value under the 'enclosure' key of the item dictionary for 'url',   field length of the value under the 'enclosure' key of the item dictionary for 'length',   and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.   for every cat in value under the 'categories' key of the item dictionary,
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
translation._catalog is an empty dictionary.
if not,
substitute last element of bits for taglib.
return self.file.size.
convert self.name into an boolean, return it.
if six.PY3 is true,
define the method to_python with arguments self and value.
define the function localtime with 2 arguments: value and timezone set to None.
call the method self.can_write.release.
derive the class IncludeNode from the Node base class.
os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.   call the method parser.add_option with 3 arguments: string '--version', action set to string 'version',
call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
changed is boolean True.
yield ch and boolean False.
call the method django.get_version append new line to it, write it to sys.stdout.
called with an argument option_value, append the result to output.   for every option in option_label,
substitute cmd for self.cmd.
return nothing.
try,
call the method t.nud with an argument self, substitute the result for left.
if not,
call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.
ignored  is an empty list.
substitute warning for self.warning.
call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
and fileobj set to buf.   read data from buf file stream, yield the result.
call the function urlsplit with an argument location, substitute the result for bits.
derive the class Deserializer from the six.Iterator base class.
call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
called with an argument kw, only if v is not None, substitute the result for kw.   call the method datetime.time with an argument unpacked dictionary kw, return the result.
path is an list containing path.
call the method self.validate_key with argument key.
call the function self._resolve_lookup with an argument context, substitute the result for value.
if UnicodeError exception is caught,
if self.close_called is False,
return result.
return self.content
from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result,
substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   define the function compile_func with 2 arguments: parser and token.
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
decorator deconstructible,
write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
if not,
ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender',
append '-' to generic_lang_code, if supported_code starts with it,
define the function humanize with an argument dirname.
define the function _long_to_bin with 2 arguments: x and hex_format_string.
for every tok in rules,
define the method __init__ with 2 arguments: self and config.
if not,
d is an empty dictionary.
error_class, label_suffix and empty_permitted.   for every field_name in self.fields,
raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
define the method _clean_fields with an argument self.
for every obj in result of the call to the method self.queryset.all,
from django.utils import six into default name space.
VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace',   SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.   define the method __init__ with 2 arguments: self and tagtype.
define the function reset_cache with an argument unpacked dictionary kwargs.
strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments:   strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments:   strings "ContentTooShortError", "urllib", "urllib.error".   for every attr in _urllib_error_moved_attributes,
skip this loop iteration.
if AttributeError exception is caught,
append list containing string '--no-location' to self.msguniq_options.
substitute connection for self.connection.
help is a string "Squashes an existing set of migrations (from first until specified) into a single new one.".
call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
if not,
property decorator,
if not,
return retval.
biggest_number is integer 1.
close the file object.
append old_app_dir to app_dirs.
derive the class RegexURLPattern with LocaleRegexProvider as base class.
try,
call the method value.encode with an argument charset, substitute the result for value.
define the function spaceless with 2 arguments: parser and token.
import module warnings.
if self.verbosity is greater than integer 0,
saved_instances is an empty list.
if response is None,
return from the function
call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.
call the method get_language, substitute the result for language_code.
concatenate package_name, string '.' and module_name, substitute it for full_module_name.
if log is contained in child_loggers,
remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
if m is None,
templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
substitute the result for ipv4_re.   validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re,
opts.fields is None.
call the function force_str with raw data as an argument and substitute it for rawdata.
try,
derive the class ErrorDict from the dict base class.
write string "  Installing indexes...\n" to the standard output.
if las equals integer 3,
if idstring is None,
value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
parsed is boolean False.
raise an TemplateSyntaxError exception with an argument "'%s' received unexpected keyword argument '%s'",
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments:
yield one element from the buffer_ iterable.
define the method configure_handler with 2 arguments: self and config.
call the function re.compile with an argument raw string '\S', substitute it for dot_re.
import module tempfile.
all the method command.create_parser with arguments: empty and name, substitute the result for parser.
call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.",
substitute type.__call__ for __call__.
from pprint import pformat.
call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
call the method self.configure_custom with an argument config, substitute the result for result.
if self.timeout is not None,
define the function get_language.
import module sys.
if LookupError exception is caught,
otherwise if o is an instance of datetime.time object,
help is an string "Introspects the database tables in the given database and outputs a Django model module.".
if value under the 'author_email' key of the self.feed dictionary is not None,
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',
skip this loop iteration,
from gzip import GzipFile into default name space.
from lib2to3.pgen2 import token into default name space.
try,
if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
if unpack_ipv4 is true,
define the function get_tag_uri with 2 arguments: url and date.
return an empty list.
slice the filename from the previous result as start index to the end, strip it of white spaces from both ends,   if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.   define the method _close_files with an argument self.
call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
for app_config in reversed list of apps.get_app_configs() elements,
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.
call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. '
if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE,
substitute arg converted into an integer for length.
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
from lib2to3.pytree import Leaf and Node into default name space.
substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,
multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,
an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.   if Model.DoesNotExist exception is caught,
convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,
default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the "default" database.'   call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label',
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character,
raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r",
if length of bits is not equal to integer 2,
substitute cls for obj.__class__.
substitute list containing element self for self.error_list.
define the function _dec with an argument func.
get the value under the 'addrport' key of the options dictionary, if it is false,
call the function shutil.copymode with arguments old_path and new_path.
import module logging.
get the next element of the self._producer iterable, substitute it for output.
if length of bits is not equal to integer 2,
try,
import module warnings.
split ip_str into 2 parts from right, return second element of the result.
define the method add_initial_prefix with 2 arguments: self and field_name.
derive the class ChoiceFieldRenderer from the object base class.
DNS_NAME is a instance of CachedDnsName class.
allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None,   label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.   substitute path, match and recursive for self.path, self.match and self.recursive.
derive the class datetime from the real_datetime base class.
append f.name to ignored list.
otherwise if ch equals a string '(',
return a list with an element tuple with 2 elements: an empty string and an empty list.
if value is an instance of str type,
if field is contained in self.errors return boolean True, if not, return boolean False.
call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
call the method self.endChannelElement with an argument handler.
do nothing.
from django.core.serializers.base import DeserializationError into default name space.
define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective,   and third element of the result of the function sys.exc_info.   call the method p.communicate, assign the result to output and errors, respectively.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size() method'.
from django.conf import settings into default name space.
try,
call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. "
return _dec.
call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.
if last element of parts is contained in self.serialization_formats,
if not,
define the method __init__ with an argument self.
if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
for every result and params in possibility,
get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
increment start by length of toktext.
if length of fks_to_parent equals integer 1.
if localized_fields is not None,
return an instance of a NowNode class, created with an argument format_string.
if not,
call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
try,
increment self.loaded_object_count by loaded_objects_in_fixture.
get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
if other is contained in self.children, return boolean True, otherwise return boolean False.
from django.utils.encoding import smart_text into default name space.
close zfile stream.
if default is true and RAISE_ERROR is false,
action set to string 'append', default as an empty list and help set to a string:   'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.   define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
split string s once, with '=' as delimiter, substitute the result for t.
remove the first element from p_pattern.
substitute instance._meta for opts.
do nothing.
get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.
if not,
if not,
import module warnings.
define the function rfc3339_date with an argument date.
define the method r with an argument self.
return None.
append rel_model to deps.
and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
if extra_context is false,
call the nethod self._isdst with an argument dt, if it evaluates to true,
call the function getcallargs with an argument current,
if las equals integer 1,
empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.   append last_row to output.
if response.streaming is boolean False,
directory_created is an empty dictionary.
define the method to_python with arguments self and value.
return input_val.
call the method field.hidden_widget, substitute the result for field.hidden_widget.
if ImportError exception is caught,
return last element of list_.
_empty_value is None.
import module os.
if self.no_obsolete is true,
return nothing.
substitute the result for domain.   if UnicodeError exception is caught,
define the method render with 4 arguments: self, name, value and attrs set to None.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
define the method next with an argument self.
call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
trans_bit is a list with an element bit.
substitute settings.DEFAULT_CHARSET for self._charset.
define the method _iterkeys with an argument self.
raise an CommandError exception with an argument string "couldn't download URL %s to %s: %s", where '%s' is replaced with url,
substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
define the method id_for_label with an argument self.
match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
define the method __repr__ with argument self.
call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string,   to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.   if required is true and initial is not None,
call the method self._set with key, pickled and timeout as arguments.
define the method get_block with 2 arguments self and name.
call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.
if is_relation is true,
if module os field name equals to string 'nt',
define the method _save with arguments self, name and content.
model_list is an empty list.
called with an argument text converted into a floating point number.   if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
call the function mark_safe with an argument word, substitute the result for i-th element of words.
import io.
substitute name for self.name.
return self._queryset.
call the method self._create_alternatives with an argument msg, use it as an argument for the call to the self._create_attachments method, return the result.
for every smigration in migrations_to_squash,
if self.warning is an instance of Exception class,
convert new_name to a string and append string 'field' to it, substitute the result for new_name.
derive the AppCommand class from the BaseCommand base class.
if not,
call the method related.natural_key, substitute the result for value.
if length of bits is greater than integer 2,
if current_len equals truncate_len,
define the initialization method __init__ with 3 arguments: self, name and params.
if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
for every f in files,
and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.   if self.verbosity is greater or equal to integer 2,
substitute initial_forms for total_forms.
add model to models set.
call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
raise an AttributeError exception with an argument string "This method is available only on the view class.".
define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
call the function six.text_type with an argument number, substitute the result for str_number.
result of the call to the function _ with an argument string 'feb' for 2,   result of the call to the function _ with an argument string 'mar' for 3,   result of the call to the function _ with an argument string 'apr' for 4,   result of the call to the function _ with an argument string 'may' for 5,   result of the call to the function _ with an argument string 'jun' for 6,   result of the call to the function _ with an argument string 'jul' for 7,   result of the call to the function _ with an argument string 'aug' for 8,   result of the call to the function _ with an argument string 'sep' for 9,   result of the call to the function _ with an argument string 'oct' for 10,   result of the call to the function _ with an argument string 'nov' for 11,   result of the call to the function _ with an argument string 'dec' for 12.   MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',
substitute the result for offset.   if first element of tzinfo equals '-',
raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
call the addr.encode method with string 'ascii' as an argument.
self._done is boolean True.
substitute the resulting list for digits.   while length of digits is smaller than or equal to absolute value of exponent,
raise AttributeError exception,
return boolean False.
substitute '%s' in a string "  Branch %s" with migration.name,
substitute value under the cache_key key of the _format_cache dictionary for cached.
if not,
import module keyword.
call the method simple_url_re.match with an argument middle, if it evaluates to true,
derive the class FixUnicode from the base class fixer_base.BaseFix.
if KeyError exception is caught,
from django.core import validators into default name space.
if self._is_rendered is false,
is_required is boolean False.
import module socket.
define the method fetch_command, with arguments self and subcommand.
and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level,
define delete method with self class instance, key and version set to None, as arguments.
substitute include_html for self.include_html.
call the method self.tag with 2 arguments: function_name and compile_func.
if first element of the second row of args equals a string '2',
_ with an argument string "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',
if match is true,
convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,
get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,
return func.
for every bytes in stream,
week_number is integer 52.
if self.file has an attribute 'name',
default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
define the function new_datetime with an argument d.
import module re.
call the function warnings.warn with 2 arguments: string "NoArgsCommand class is deprecated and will be removed in Django 2.0. "
FIELD is a field".
decrement remaining by length of emitting.
call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
derive the class ArchiveException from the Exception base class.
len_item is integer 1.
if not,
if model is contained in created_models,
return result.
if self._varlist is true,
import module hashlib.
if KeyError exception is caught,
raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.
static method,
call the self._lock.writer method, with the result perform the following,
define the method get_version with an arguments self.
return default.
call the method self.expression, substitute the result for retval.
from django.utils.functional import lazy into default name space.
define the function lock with arguments f and flags.
return first and second element of result.
substitute doc for func.__doc__.
if settings.TEMPLATE_DEBUG is true,
return integer 0.
return result
define the method strptime with arguments self, value and format.
from django.core.management.base import AppCommand into default name space.
raise an TemplateEncodingError exception with an argument "Templates can only be constructed from unicode or UTF-8 strings.".
disable_existing is boolean True.   call the method logging._handler.clear.
call the function get_language, substitute the result for language_code.
substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes,
call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,
if not,
define the method update_error_dict with arguments self and error_dict.
if not,
inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.
return None.
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
try,
raise an TypeError exception with an argument string "sep must be None or a string".
if field.rel.through._meta.auto_created is true,
if f doesnt has an 'save_form_data' attribute,
missing_args_message is a tuple containing a string "No database fixture specified. Please provide the "
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.
import module argparse.
call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,
if use_reloader is true,
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
if settings.TEMPLATE_STRING_IF_INVALID is true,
define the method __init__ with an argument self.
return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
if item_type equals FIELD,
import module base64.
import module datetime.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getatime,
_urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
try,
if decimal_pos is not None,
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.
raise an exception,
if in_index-th element of bits equals to string 'in',
for every attr in self.rendering_attrs,
increment res by element of to_digit at the digit index.
self.model_name is a string 'cacheentry'.
for every opening and closing in WRAPPING_PUNCTUATION,
remove first two elements from bits.
if _globs_ is None,
if ext is true,
call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.
substitute form.instance for obj.
errors is an empty list.
join source list elements from last till pos indexes into a string, substitute the result for piece.
raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
from argparse import ArgumentParser into default name space.
derive the class SyndicationFeed from the object base class.
if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
return attachment.
return None.
substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
increment self.fixture_object_count by objects_in_fixture.
call the method self.choice with an argument obj, yield the result.
if not,
else if timeout equals to integer 0,
if not self.error_messages is None.   derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
call the function
add row_data to seen_data set.
import module sys.
substitute cls.__text_cast for cls.__str__.
convert text to an integer, substitute it for c.
substitute self.queryset for qs.
if not,
return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
if value is false or for every v in value every v is contained in self.empty_values,
call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,
from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.
call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,
for every pattern in self.url_patterns,
increment current_len by integer 1,
return EventHandler.modified_code.
return message.
if TypeError exception is caught,
substitute style_func for self.style_func.
define the method __init__ with 4 arguments: self, object_list, number, and paginator.
from functools import lru_cache.
called with an argument value and value.   register.tag decorator function with an argument 'if',
append tuple with 2 elements: migration.app_label and migration.name to replaces.
if TYPE equals to RAW,
try,
sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.   if alter_sql,
try,
set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.
call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
substitute value for self.value.
if self.m2m.data and save_m2m are true,
if data is None,
convert num to an integer, substitute it for length.
call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.
loader is an instance of MigrationLoader class, created with an argument connection.
try,
call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.   try,
import module copy.
substitute key for value under the KEY key of the oldroot dictionary.
call the method os.environ.copy, substitute the result for new_environ.
ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES,
call the method form.add_prefix with an argument self, substitute the result for self.html_name.
for every key in self.keyOrder,
define the function b with an argument s.
if not,
call the method self.connection.quit.
if m and n are not None,
instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
if not,
if buffer_ is not None,
call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,
for every key in sorted list of user_settings,
call the method start_ipython with an argument argv as an empty list.
if bcc is true,
call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
return an instance of OrderedDict class, created with an argument fields.
do nothing.
return default,
if chunk_size is false,
define the function ugettext with an argument message.
code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.   if self.decimal_places is not None and decimals is grater than self.decimal_places:
call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,
if self.require_all_fields is boolean true,
chunk_size is an integer 1024.
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
derive the class SkipFile from the UploadFileException base class.
if field is an instance of models.TimeField and filed.name attribute of obj is not None,
get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
_iterkeys is a string "iterkeys".
return text.
if incomment is true,
if not,
open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
call the method self.exit_command.
if limit_choices_to is callable object,
call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
split path in two parts by '\\' string, return the result.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
call the method get_template with an argument template, substitute the result for template.
substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
return nothing.
return value.
for every iso_input in the result,   if iso_input is not contained in val,
call the method tag_re.finditer with an argument self.template_string, for every match in result,
if old_style_list is false,
call the method self.xml.addQuickElement with an argument string 'None'.
if ValueError exception is caught,
define the function byte2int with an argument bs.
if second last element of django.VERSION is not equal to a string 'final',
do nothing.
import module importlib.
call the method self.handle_fk_field with arguments obj and field.
get the '_decorated_function' attribute from func object, if it exists substitute it for func.
if name is true,
import dummy_threading as threading.
if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
define the method resolve_variable with 2 arguments: path and context.
call the method self.write_message with argument message.
try,
i is integer 0.
call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
substitute timeout for self.default_timeout.
derive the class warn_about_renamed_method from object base class.
append bit to split.
if option is contained in options,
call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
substitute sysid for self.sysid.
if can_fail is true,
if AttributeError exception is caught,
call the method self.xml.endElement with an argument string 'field'.
from django.http.cookie import SimpleCookie and parse_cookie into default name space.
target_app_labels_only is boolean False.
import module os.
otherwise if t.contents equals a string 'comment',
get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
call the encode method on the result with string 'latin-1' as an argument, return the result.   define the method loads with arguments self and data.
program is string 'msgfmt'
from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.   define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
define the method close with self and dictionary pairs of elements kwargs.
from . import Error, Tags and register into default name space.
call the method value.astimezone with an argument timezone, substitute the result for value.
for every app_config and model_list in app_list,
return is boolean True.
nonlocal_root is an list with an element root.
return value of the value._get_pk_val method and strings_only set to boolean True.   call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name,
call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
return name, ser_fmt and cmp_fmt.
call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
if app_names is not empty,
self.invoked_for_django is boolean True.
try,
if not,
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
flush the output buffer of the self.stdout object.
value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:
evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
try,
substitute the result for new_migration.   writer is an instance of a class MigrationWriter, created with an argument new_migration.
cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.   define the method to_python with 2 arguments: self and value.
substitute s without the first element for s.
and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.
call the method parser.delete_first_token.
otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,
import module io.
define the method chunks with arguments self ad chunk_size set to None.
return nothing.
call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
raise an exception.
call the function _trans.deactivate_all, return the result.
substitute error_messages for value under the 'error_messages' key of attrs dictionary.
call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
get the value under the 'all' key of the options dictionary, substitute it for process_all.
if version is None,
call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models,
call the method kwargs.update with an argument self.default_args.
if sub_tried is not None,
substitute value under the 'use_reloader' key of the options dictionary for use_reloader.
if start is greater than upto,
define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,
if exclude is true and f.name is contained in exclude,
call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.
return data.
define the function find_commands with an argument management_dir.
if not,
prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
substitute fields for value under the 'fields' key of attrs dictionary.
call the function get_language, substitute the result for self.old_language.
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.
for every basedir in basedirs,
define the function get_serializer_formats.
return msg_count.
raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol,
can_import_settings is boolean True.
raise an TemplateSyntaxError exception with an argument string "Only 'silent' flag is allowed after cycle's name, not '%s'.",
if value under the 'indent' key of the self.options dictionary is true,
if message is not an instance of the ValidationError class,
call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
if lib is false,
if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,
warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.",
from django.apps import apps into default name space.
call the method translation.activate with an argument string 'en-us'.
call the method signals.request_finished.send with an argument sender set to self._handler_class.
define private method __repr__ with argument self.
call the self.stdout.write method with string "    Processing %s.%s model\n" as argument, with all occurrences of '%s' replaced with,
translators_comment_start is None.
call the function local, substitute the result for _active.
substitute pattern.regex.pattern for parent_pat.
derive the class SuspiciousFileOperation from the SuspiciousOperation base class.
call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
define the method unclosed_block_tag with 2 arguments: self and parse_until.
slice the rawdata from k to endpos, then take the first 20 elements of the previous slice,
call the function validate_ipv4_address with an argument value.
substitute tokens for self.tokens.
and a result of the method __repr__ called from instance of base class of the MultiValueDict class.   define the method __getitem__ with 2 arguments: self and key.
substitute content.name for name.
otherwise is template is six.string_types instance,
define the function _split_statements with an argument content.
if related is true,
database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.   return created_models
raise an exception.
self.position is an integer 0.
self.lineno is None.
call the method self.full_clean.
if ValueError exception is caught,
return the instance of DefusedExpatParser class.
define the method indent with argument self and level.
call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',
if settings.configured is false,
format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time,
from django.template.loader import BaseLoader into default name space.
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
decorator function register.filter with an argument is_safe set to boolean False.
default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
if settings.STATIC_URL is None,
get the directory name of filename, substitute it for dirname.
self.nodelist_empty is an instance of NodeList class.
for every field in self.fields,
self.use_ipv6 is boolean True.
call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
return new_class.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.
get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,
call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.
for every format in settings.SERIALIZATION_MODULES,
define the method get_default_prefix with an argument cls.
call the function StringIO with an argument stream_or_string, substitute the result for stream.
call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
if not,
substitute sysid for self.sysid.
call the function get_current_timezone, substitute the result for timezone.
call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
substitute cyclevars for self.cyclevars.
append orig_file to string '#: ', substitute it for new.
code is a string 'invalid'.
use the result as an argument for the call to the function bytes, return the result.   define the method __cast with an argument self.
define the method enter_command with 3 arguments: self, command and token.
widget_value is None.
call the function import_module with an argument taglib_module, substitute the result for mod.
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,
if logging_config is true,
requires_system_checks is boolean False.
out is an instance of StringIO class, created with an empty string as an argument.
insert options.pythonpath at the beginning of sys.path.
default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).
call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
substitute the result for last element of output.   if not,
for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,
resolved_path is an empty list.
call the method logging.StreamHandler, substitute the result for handler.
if self.verbosity is greater than integer 0,
return s.
join to_path and name into a valid system path, substitute the result for filename.
if length of unique_check equals integer 1,
if not,
decorator stringfilter,
define the function clear_script_prefix.
and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1',   join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.   join headers into a string, separated by string '\r\n'.
if field_type equals a string 'BooleanField(',
define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.
decorator function register.filter with an argument is_safe set to boolean False.
all_date_checks is union of all_date_checks set and date_checks set.
if retval is true,
if id_ is true,
if UnicodeDecodeError exception is caught,
substitute value under the "_wrapped" key of the self.__dict__ dictionary.
call the options.update method with an argument kwargs.
do nothing.
raise an CommandError with an argument string "%s. Are you sure your INSTALLED_APPS setting is correct?", with '%s' replaced by e.
do nothing.
try,
call the self._delete method with argument fname.
if not,
return res.
join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.
input_type is a string 'email'.
if key_function is callable object,
if six.PY2 is true and rawdata is an instance of the type six.text_type.
Meta is an instance of class with name 'Meta', parent base class and fields attrs.
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,
define the method __init__ with 2 arguments: self and source.
call the function force_text with an argument url, return the result.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
return value.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
use the result as an argument for the call to the method final_output.extend.   add model to known_models set.
if mimetype is None,
if DecimalException exception is caught,
from django.core.management.templates import TemplateCommand into default name space.
set attr attribute of the self object to value.
if not,
append string "System check identified %s (%s silenced)." to msg, replace first '%s' for: string "no issues",
if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
if InputStreamExhausted exception is caught,
return boolean True.
if block_context is None,
call the method self.writer_leaves.
return an instance of NodeList class.
return boolean False.
if self._is_rendered is true,
if not,
do nothing.
substitute self.files for value under the 'files' key of the defaults dictionary.
if ValueError exception is caught,
decorator function register.filter with an argument is_safe set to boolean False.
called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.
try,
value is None.
define the method prepare_value with 2 arguments: self and value.
if six.PY2 is true,
for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,
if result is not root,
if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
define the method open with arguments self and mode defaulting to None.
for every d in self.dicts,
while i is lesser than length of subject and i-th element of subject is not equal to c,
call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,
define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
for every node in self,
call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
define the function cache_info.
define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
self.changed_objects is an empty list.
get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
call the method self._start_relational_field with an argument field.
if self.keep_pot is false,
return obj_pk.
SINGLE_BRACE_START is a string '{'.
call the method __delitem__ from the base class of the QueryDict class, with an argument key.
try,
call the self.read method with argument chunk_size, substitute the result for data.
date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
define the method __setitem__ with 3 arguments: self, header and value.
if self has an attribute 'clean_%s', where '%s' is replaced with name,
call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.
substitute code for self.code.
convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,
otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
"or the 'exclude' attribute is prohibited; form %s needs updating.", where '%s' is replaced with name.   if opts.fields equals ALL_FIELDS,
define the method __bool__ with argument self.
input_type is a string 'hidden'.
otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name,
str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.   return klass.
from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart,
call the method self.xml.endElement with an argument string 'field'
call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
evaluate the self.get_fqdn method, return the result.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
from django.template.base import TemplateDoesNotExist into default name space.
define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.
if IndexError, ValueError, KeyError or TypeError exceptions are caught,
increment i by integer 1,
substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key,
self.deleted_objects is an empty list.
define the function sanitize_address with arguments addr and encoding.
remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
serializers is an empty dictionary.
define the method __call__ with arguments self and value.
if t.token_type equals TOKEN_BLOCK,
join root and filename into a file path, substitute it for old_path.
for every ext in extensions,
call the method is_multipart on the first element of self.forms, return it.
request_started is a instance of a Signal class.
close the process with an argument 0.
define the method extra_forms with an argument self.
append value to the '-', substitute it for value.
call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>',
raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.
substitute token.source for node.source.
call the function timedelta with an argument integer 0, return the result.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
get the name of the callback, substitute it for view_name.
for every basedir in basedirs,
define the method dst with 2 arguments self and dt.
call the method self.connection.login with arguments self.username and self.password.
call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
import module sys.
evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.
call the force_text function with an argument value, return the result.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
if AttributeError exception is caught,
call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
return t.
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,
call the method self.can_write.acquire.
if not, isolated_context is boolean False.   get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key,
table_names is an empty list.
replace '%s' in string "Cache table '%s' created." with tablename, write it to self.stdout.
call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.
call the method handler.endElement with an argument string 'rss'.
if self doesnt have an '_deleted_form_indexes' attribute,
while RUN_RELOADER is true.
define the method widget_attrs with arguments self and widget.
call the method filename.encode with an argument string 'ascii'
define the method __prepare_class__ with an argument self.
for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.
if value is true,
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
if ValidationError exception is caught,
result of the call to the function _ with an argument string 'February' for 2,   result of the call to the function _ with an argument string 'March' for 3,   result of the call to the function _ with an argument string 'April' for 4,   result of the call to the function _ with an argument string 'May' for 5,   result of the call to the function _ with an argument string 'June' for 6,   result of the call to the function _ with an argument string 'July' for 7,   result of the call to the function _ with an argument string 'August' for 8,   result of the call to the function _ with an argument string 'September' for 9,   result of the call to the function _ with an argument string 'October' for 10,   result of the call to the function _ with an argument string 'November' for 11,   and result of the call to the function _ with an argument string 'December' for 12.   MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1,
return self.
delete the first element of self.tokens.
substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.
if fift element of bits is not equal to a string 'as',
for every middleware_method in self._exception_middleware,
evaluate the fd.isatty method, if the result is true,
if first element of text equals '#',
if token.contents equals string 'else',
define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
if content is not None raise an error.
call the function write with an argument sep.
map elements of self._iterator through self.make_bytes function, return the result.
chunks is an empty list.
define the method run_shell with an arguments self and shell set to None.
if not,
if ch is not equal to string '<' or string '=',
define the function to_locale with an argument language.
define the function add with 2 arguments value and arg.
call the method self.__dict__.copy, substitute the result for obj_dict.
substitute token for self.token.
if TypeError or VariableDoesNotExist exceptions are caught,
from django.db import connection into default name space.
if config dictionary value under 'version' key is not equal to integer 1,
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
help is a string "Runs over the entire source tree of the current directory and "
try,
get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.
get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
from __future__ import unicode_literals into default name space.
try,
for every path in data,
option is a string '--testrunner='.
get attr attribute from the _module object, substitute it for value.
if language_code is not contained in self._regex_dict,
if self.value equals self.choice_value, return boolean True, if not, return boolean False.
define the method _iterlists with an argument self.
call the method parser.print_help.
define the function get_current_timezone.
invalid_apps is an empty list.
cc is an empty dictionary.
for every i and v in enumerated iterable value,
for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.   if cc contains item 'max-age',
try,
if e doesnt have an 'django_template_source' attribute,
if errors is true,
try,
from django.core import signals into default name space.
if widgets is not None,
call the os.stat function with argument filename, store the return value in stat.
append '.' to name, substitute the result for prefixed.
if termios is true,
define the function to_locale with an argument language.
call the method filter_re.finditer with an argument token, substitute the result for matches.
return None.
open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.
get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
substitute s1 for s.
define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
define the method __repr__ with an argument self.
define the method det_valid_name with arguments self and name.
substitute number_value for kwargs dictionary value under the 'number' key.
python_2_unicode_compatible decorator,
call the message_from_string function with an argument content, substitute the result for content.
if KeyError exception is caught,
replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
append bit to trans_bit.
define the method add_arguments with 2 arguments self and parser.
define the function _get_model with an argument model_identifier.
set filter_func objec attr attribute to value.
with field_value as an argument, substitute the result for obj_pk.   return obj_pk.
and RemovedInDjango19Warning.   call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
increment chunk by over_chunk.
if not,
if not,
define the function pluralize with 2 arguments value and arg set to character 's'.
if bytes is false,
append templatetag_module to _templatetags_modules.
call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
substitute new_result for result.
template_source_loaders is None.
remove first element from non_capturing_groups, substitute it for start.
return value.
finally perform,
return obj_dict.
tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.   if has_bz2 is true,
call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt,
TOKEN_COMMENT is integer 3.
call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.
if any resulting element is true, return boolean True, otherwise return boolean False.   convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
define the function get_language_info with an argument lang_code.
call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.
define the method end_object with arguments self and obj.
if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
if self is false,
if not,
define the function striptags with an argument value.
try,
if new_method is false and old_method is true,
from django.conf import settings into default name space.
call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
call the self.make_key with key and version set to version as arguments, substitute the result for key.
append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
call the method self.get_backend_timeout with argument timeout, substitute it for expiry.
return a list containing return values of the function to_py called with an argument val, for every val in value.
args is an empty list.
decode with an argument string 'ascii', substitute the result for name.   take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.
call the method urlresolvers.set_urlconf with urlconf as the argument.
if self.verbosity is greater or equal to integer 2.
and unpacked dictionary kwargs.   call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.   call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',
substitute i-th element of self.forms for form.
otherwise if message is an instance of the list type.
fp is a instance of a class six.BytesIO.
raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.",
for every location in format_locations,
call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
do nothing.
if not,
call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".   call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list,
return encoding.
f.required is boolean False.
break the execution of the smallest enclosing loop.
call the method Field.validate with 2 arguments: self and value, return the result.
call the function django.get_version, return the result.
skip this loop iteration.
if not,
with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
raise an InvalidTemplateLibrary exception with an argument string ("Unsupported arguments to Library.filter: (%r, %r)",
try,
raise an ValidationError exception with an argument errors.
call the method self.data.isocalendar, return the first element of the result.
if i is greater than or equal to the result of the method self.initial_form_count,
call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
open writer.path file in write mode, with the file descriptor as fh, perform the following,
call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
call the method parser.parse, return the result.
call the method self.error_class with an argument list containing results of the function conditional_escape,
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   call the method writer.as_string, append newline to the result, write it to self.stdout.
define the method make_key with self class instance, key and version defaulting to None as arguments.
from django.apps import apps.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
try,
define the method __init__ with 2 arguments: self and iterable set to None.
extend replaces list with migration.replaces,
call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True,
call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
return self.
skip this loop iteration.
f.required is boolean False.
return self.name.
write migration_string to file fh.
return boolean True.
define the function ugettext with an argument message.
call the method FASTCGI_OPTIONS.copy, substitute the result for options.
substitute first end elements of s for f.
call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.
unpacked list args and unpacked dictionary kw, return the result.   raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
define the method create_token with 4 arguments: self, token_string, source and in_tag.
return dec.
if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
try,
parser._namedCycleNodes is an empty dictionary.
try,
evaluate self._is_expired method with f as argument, if the result is false,
if ch is contained in string "iLmsu#",
property getter decorator,
call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.
if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
call the method self.full_clean.
call the method parser.delete_first_token.
if file_obj is true,
replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
valid is boolean False.
if subcommand is contained in no_settings_commands,
call the method self.stdout.write with an argument string "Installed %d object(s) (of %d) from %d fixture(s)",
try,
weekday, increment the result by integer 1 and substitute it for jan1_weekday.   call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.
table2model with an argument table_name.   call the function table2model with an argument table_name, append the result to known_models.
call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
raise an TemplateDoesNotExist exception with an argument name.
raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an',
if not,
if record.exc_info is true,
define the method c with an argument self.
from django.core.exceptions import ImproperlyConfigured into default name space.
return lookup_view.
if value,
self.COOKIES is an empty dictionary.
return kwargs.
call the function chain with an argument unpacked list, append name to string 'render_',
substitute func.__doc__ for compile_func.__doc__.
from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
call the method self.fields.values, for every field in result,
define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.
return errors.
define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
remove first element from self.tokens, return removed element.
substitute value under idx key of dictionary d for d.
return self.data.hour.
if attrs is false, make it an empty dictionary.
define the method render with 2 arguments: self and context.
call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
if six.PY3 is true,
otherwise if name is contained in lib.filters,
if visible_issue_count equals to integer 0, or for string "1 issue" if visible_issue_count equals integer 1,   or for string "%s issues", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues,   and substitute it for second '%s' in the stirting string.   if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false,
raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.
if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
call the method self.is_valid, if it evaluates to false,
substitute value under the 'database' key of the options dictionary for database.
delete X.
for every k in doomed,
substitute complain for __delslice__.
property decorator,
call logging.getLogger method with string 'django.request' as argument, store the result in logger.
call the function next_space_index with 2 arguments subject and i, substitute the result for i.
get the type of self object, call its method __bool__ with an argument self, return the result.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
for every w in self.widgets,
define the method close with argument self.
help is a string "Creates new migration(s) for apps.".
and unpacked dictionary kwargs, return the result.   return wrapper.
if alias is not contained in setting.CACHES,
call the method __init__ from the base class of the class SortedDict, called with an argument data.
substitute help_texts for value under the 'help_texts' key of attrs dictionary.
if Exception exception is caught,
substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.
substitute pattern._callback for callback.
define the method start_serialization with an argument self.
return self.data.hour.
try,
RAISE_ERROR is an instance of object class.
call the method self.empty_block_tag with an argument token.
_get_post is a getter function and _set_post is a setter function for POST attribute of this class.
from email import charset as Charset, encoders as Encoders, message_from_string and generator.
if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,
substitute False for self.close_called.
define the method clean with arguments self and value.
do nothing.
executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.
call the method self.writer_enters.
get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
sublist_item is None.
define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
call the function exhaust with an argument stream.
get the value under the key key of the self.find_template_cache dictionary, substitute it for result.
call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
call the method self.reset.
if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory,
append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
plural set to plural and number set to number, return the result.   define the function activate with an argument language.
call the method __init__ with an argument data, from the base class of the class DictWrapper.
substitute attrs for self.attrs.
substitute template for self.template_name.
call the method self.nodelist_true.render with an argument context, return the result.
substitute producer for self._producer.
substitute fcntl.LOCK_NB for LOCK_NB.
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module,
define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
return self.__offset.
derive the class JsonResponse from the HttpResponse base class.
define the function parse_header with an argument line.
call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
define the method as_bytes with arguments self and unixfrom set to boolean False.
define the method value with an argument self.
if KeyboardInterrupt exception is caught,
if keys is true,
get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text,
define the method __getattr__ with 2 arguments: self and real_name.
or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields,  #ANNOTATION only if field is an instance of models.BooleanField and field.has_default() evaluates to False.    call the Warning function with 4 arguments: string "BooleanField does not have a default value.",
return first end elements of list chunk.
_func_defaults is a string "func_defaults".
call the method node.render with an argument context, append the result to the nodelist.
return.
otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.
if not,
TOKEN_TEXT is integer 0
if length of args is smaller than integer 2,
compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',
if errors is true,
call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.
call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,
replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
if plan is true,
import module logging.
call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
define the function prefix with 2 arguments bp and func.
define the function parse_boundary_stream with arguments stream and max_header_size.
try,
call the method blankout with 2 arguments: part and 'S', write the result to out.
set self.name attribute of the obj object to result.
return obj.
from django.apps import apps into default name space.
substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
import module re.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
derive the class JsLexer from the Lexer base class.
if widget is false,
for every site in sites,
'startapp' and 'startproject'.   try,
prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None,   empty_permitted set to boolean False, instance set to None.   substitute self._meta for opts.
do nothing.
if ValidationError exception is caught,
if fixture_name is an absolute file path,
from django.core.management.color import no_style into default name space.
substitute newretval for retval.
try,
and lambda function returning x for x, substitute the firs element of resulting list for style_func.   call the function style_func with an argument msg, use the result as an argument for the call to the function force_str,
if self.__stattag_text contains newline character,
for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
define the method __ne__ with 2 arguments: self and other.
from the connections list, substitute it for connection.   call the method connection.ops.start_transaction_sql, if it evaluates to true,
for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
which has not been installed." with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively,   obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors.   return errors.
call the function _load_serializers.
call the method attrs.copy, substitute the result for self.attrs.
call the method self.setlistdefault with an argument key, append value to the result.
derive Serializer from the base.Serializer base class.
call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,
reverse the order of colors elements,
_iteritems is a string "items".
return is boolean False.
f _serializers is false,
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
integer 0, appended to a string "strftime of dates before 1900 does not handle".   substitute dt.year for year.
call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.
define the method to_python with arguments self and data.
for every item in self.items,
remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.
for ever app_config in return value of the method apps.get_app_configs,
substitute the limit_value for self.limit_value.
get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
define the function save_m2m.
if six.PY3 is true,
on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,
define the method __str__ with an argument self.
substitute parser for self.template_parser.
substitute inotify_code_changed for fn.
result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title,   substitute the result for t.   call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value,
_format_modules_cache is an empty dictionary.
if template_dirs is true,
if ipv4_unpacked is true,
if KeyError, renamed to key, exception is caught,
import module types.
return boolean False.
substitute cookie for c.
append list containing string '--no-wrap' to self.msgmerge_options
raise an exception.
if objects_in_fixture equals integer 0,
if app_label is not contained in executor.loader.migrated_apps,
where '%s' is replaced with subject.   substitute i for p.
define the function templatize with 2 arguments: src and origin set to None.
substitute context for self.context.
sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.
for every p in parts without the first element,
call the method utility.execute.
output is an empty list.
from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
call the method content.decode with an argument string 'utf-8', substitute it for content.
call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
call the method parser.add_library with an argument lib.
define the method __dir__ with an argument self.
for every h in handlers,
if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
if e has an attribute 'code' and e.code is contained in self.error_messages,
if s is an instance of an object six.memoryview.
append rel_to to string 'ForeignKey(, substitute the result for field_type.
__all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.
return boolean False.
get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
define the method add_filters with 3 arguments: self, filterer and filters.
split ip_str into parts by ':', substitute the result for new_ip.
if six.PY2 is true,
call the method self.load_label with an argument fixture_label.
for every model in app_models,
call the method Model._meta.get_all_field_names, substitute the result for model_fields.
if app_config.models_module is None,
_func_code is a string "__code__".
derive the class Textarea from the Widget base class.
define the method regex with an argument self.
call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
return boolean False.
from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.
"  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n"   "  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"   "The full error: %s", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.   call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,
finally perform,
call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
substitute last element of output for last_row.
call the method self.xml.endElement with an argument string 'natural'
derive the class ManagementForm from the Form base class.
derive the class Serializer from the object base class.
call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
define the method get_meta with arguments self and table_name.
if not,
'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',   and 'inlineformset_factory'.   ALL_FIELDS is a string '__all__'.
define the method close with argument self.
if not,
try,
get func_name attribute from the mod object, substitute it for view_func.
call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,
default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.   call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',
call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
from email.header import Header into default name space.
if func is None,
unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.   if not,
and path with self.path, substitute the result for current_uri.   call the function urljoin with arguments current_uri and location, substitute the result for location.
split host from the right side into 2 parts at the ':', substitute the result for bits.
substitute _templatetags_modules for templatetags_modules.
decorator function receiver with an argument setting_changed,
try,
call the function exhaust with an argument field_stream.
substitute new_second_item with second_item.
from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.
for every model in model_list,
format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,
call the method self._css.keys, sort the result and substitute it for media.
if not,
define the method add_fields with 3 arguments: self, form and index.
if field_type is a tuple,
sum m and value under the medium key of the base dictionary, substitute it for m.
count is a property object with _get_count as a getter method.
define the method filter with 2 arguments: self and record.
if s equals a string '"',
if props is true,
from __future__ import absolute_import into default name space.
try,
if not,
call the function func with request and response as arguments, assign the result to response.
call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.
call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
define the method clean with an argument self.
define the method validate with arguments self and value.
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.   sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.
call the function f.process with 2 arguments: self and self.domain.
raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.   klass.__new__ is a static method of the function __new__.
substitute empty_label for self.empty_label.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
return nothing.
from django.conf import settings into default name space.
if pofile path exists,
substitute filepath for self.filepath.
mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
convert self.dict into boolean, return the result.
import module os.
define the method handle with self class instance and dictionary pair of elements options as arguments.
self._errors is None.
define the function escape with an argument text.
convert elements of defaultdict to list, substitute it for self.blocks.
prefix the base64d with a '.' character.
substitute val for self._encoding.
substitute elements of middle from the beginning to the negative length of punctuation, for middle.
break from the loop execution.
derive the class HttpResponseGone from the HttpResponse base class.
if not,
sum major and sub, return the result converted to string.
if t is not None,
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
return ZERO.
define the method __init__ with an argument self.
substitute args for self.__args.
define the method _iteritems with an argument self.
derive the class ErrorList from the UserList and list base classes.
append ch to quant.
define the method render with 2 arguments self and context.
if AmbiguityError exception is raised,
call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
for every app_dir in app_dirs,
EndToken is an instance of EndToken class.
call the function get_template with an argument file_name, substitute the result for t.
where '%s' is replaced with migration_name and app_label.   if KeyError exception is caught,
convert first element of answer to lowercase and substitute it for answer.
define the function module_has_submodule with 2 arguments: package and module_name.
substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.   call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,
call the function force_text with an argument text, substitute the result for input_val.
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
if count2 does not equals to integer 0,
skip this loop iteration,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key,
return self.__offset.
call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
if self.pos is greater than or equal to self.tokens,
consume_next is boolean True.
define the function pgettext with 2 arguments: context and message.
join statements into a string, separated by newlines, return it.
if args is true,
if fk_name is true,
call the method settings._setup.
call the method self.validate_key with argument key.
use global variable template_source_loaders.
string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  "---------", cache_choices set to None,
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.
substitute message for self.message.
call the method tpl.format with an arguments self.sysid and self.pubid.
substitute the result for name.   call the function __import__ with an argument name.
call the method self.importer with an argument used.
call the method nodelist.render with an argument context, return the result.
dest set to string 'load_initial_data', default set to True,   help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.   call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
if not,
if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
call the method to_python with an argument data from the base class of the class BooleanField, return the result.
return callback and a empty string.
define the method save_new_objects with 2 arguments: self and commit set to boolean True.
if line is true,
get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
if 'expects_localtime' attribute of func object exists and is true,
decorator stringfilter,
return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.
substitute content_length for self.content_length.
define the method render with 2 arguments self and context.
message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
if attachments exists substitute it for self.attachments, if not attachments is an empty list.
define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,
otherwise if base_url does not ends with '/' character,
define the method __init__ with 3 arguments: self, args and kw.
raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.",
try,
for every i in range of integers from 0 to length of result, not included,
html set to boolean True and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean False.
"as an app name. Please try another name.", where '%r' is replaced with app_name.   call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
if opts.fields is None and opts.exclude is None,
call the function _ with an argument string 'p.m.', return the result.
raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.
if UnicodeError, renamed to e, exception is caught,
create a list out of fist end_text_pos text elemnts, substitue it for out.
raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute",
if cls._delegate_text is true,
encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument:
substitute nodelist_loop for self.nodelist_loop.
call the method self.write_items with an argument handler.
from the base class of the SimpleCookie class call the method load with rawdata as argument.
for every loader in template_source_loaders,
substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '",
if message is an instance of SafeData,
call the function signals.request_finished.connect with argument close_caches.
if o is contained in opt_dict,
call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value,
if not,
otherwise if _locs_ is None,
call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
substitute OPERATORS dictionary element under token key for op.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
return boolean False.
field_params is an empty dictionary.
call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
for bit in self.lookups,
append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs.   call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
append self.choices to args.
return result,
calculate length of chunk modulo integer 4, substitute the result for over_bytes.
from django.utils.encoding import force_text into default name space.
try,
return boolean False.
define the method extract with 2 arguments self and to_path.
substitute _html_parser.interesting_normal for self.interesting.
skip this loop iteration.
self.choices is an empty list.
if six.PY2 is true,
define the method get_nodes_by_type with 2 arguments: self and nodetype.
if templatetags_modules is false,
every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '"' with '&quot;',   and every occurrence of "'" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.   call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
return an instance of SafeText, created with an argument s.
from django.core.management.base import BaseCommand and CommandError into default name space.
substitute definition for value under the role key of palette dictionary.
define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
return model_list.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*',
call the method token.split_contents, substitute the result for bits.
return wrapped.
if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.
if Exception, renamed to e, exception is caught,
skip this loop iteration.
if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
define the function exhaust with an argument stream_or_iterable.
call the self.setup_environ method.
call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
convert ret to a boolean, return it.
try,
from django.utils import six into default name space.
from django.utils import six into default name space.
call the method match.start, substitute the result for start.
call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
divide negative dklen with hlen, substitute floored result for l.
substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.   call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using,
if sys.platform equals to string "win32",
define the method __exit__ with self, exc_type, exc_value and tb as arguments.
define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.
call the method datetime.now, return the result.
join path and entry into a file path, if it exists,
define the method _text_words with 3 arguments: self, length and truncate.
define the method render with 2 arguments: self and context.
substitute title for sublist_item.
self._unget_history is an empty list.
define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
if s is an instance of six.text_type or Promise,
append truncate_text to out.
if self.setting is true,
tablename and return value of the function force_text called with an argument e, respectively.   for every statement in index_output,
define the method reverse_dict with an argument self.
if self.path equals other.path, return boolean True, if not return boolean False.
values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
call the function fn with list of arguments args and dictionary of argument values kwargs.
from __future__ import unicode_literals into default name space.
call the function mark_safe with an argument contents, return the result.
call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,
append boundary to bytes string '--', substitute the result for self._separator.
if self is not contained in state_frame,
derive the class NowNode from Node base class.
otherwise, value under the 'decimal_places' key of the field_params is integer 5.   if not
define the method start_object with argument self and obj.
if value is not contained in result,
try,
if first nine elements of block_content is string 'verbatim' or 'verbatim ',
return value.
if not,
help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
define the function supports_color, without arguments.
call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.
call the function force_text with an argument text, substitute the result for text.
widget.input_type is a string 'hidden'.
define the method split_leading_dir with 2 arguments self and path.
call the method validate with an argument value from the base class of the class ChoiceField.
call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.
and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
define the method content with 2 arguments: self and value.
import module sys.
define the method parse_file_upload with 3 arguments: self, META and post_data.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
raise an CommandError exception with an argument string "Unknown command: %r", with '%r' replaced by name.
from django.apps import apps into default name space.
return the string 'ValidationError(%s)', replace '%s' with self.
try,
if self.max_value is not None,
append the results into a list, substitute it for value.   node is an instance of CycleNode class, created wiht an argument values.
call the method loader.select_template with an argument template, return the result.
return boolean True.
return boolean True.
if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
self.callback is None.
default is boolean False, and help is a string "Don't colorize the command output.".   if self.args is true,
while start is lesser than end.
call the method self.fields.items, for every name and field in return value,
if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
if six.PY2 is true and path is not an instance of six.text_type type,
define the method __deepcopy__ with 2 arguments self and memo.
self.bad_cookies is an empty set.
define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
if server is an instance of six.string_types,
if not,
for every key in self,
call the method match.groupdict, use the result as an argument for the call to the function six.iteritems,
if filename ends with '/' or with '\\',
if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,
sort elements of list existing.
name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True,   return value of the method models.TextField called with argument name set to a string 'value',   and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.   table_output is an empty list.
yield obj as generator return value,
modes is an empty list.
subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it,
try,
import module unicodedata.
return attrs.
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
if not,
inplural is boolean False.
if value under the 'feed_url' key of the self.feed dictionary is not None,
for every event and node in self.event_stream,
write the string "  Installing custom SQL...\n" to the standard output.
substitute _itervalues for values.
call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,
otherwise if action equals to string "unapply_success".
return s.
if value is false or value is not an instance of list or tuple types,
call the method node.render with an argument context, return the result.
call the method self.importer with an argument used, substitute the result for found.
if Exception exception is caught,
define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
call the self.path with argument name, substitute it for name.
return nothing.
if LookupError exception is caught,
msg_count is an integer 0.
from django.utils.html import conditional_escape and format_html into default name space.
substitute self._wrapped for repr_attr.
from __future__ import unicode_literals into default name space.
otherwise if content is not an instance of Message class,
from django.core.mail.backends.base import BaseEmailBackend into default name space.
if k equals a string 'fg',
call the method self.nodelist.render with an argument context, return the result.
define the method __deepcopy__ with arguments self and memo.
return context_extras.
define the method scheme with an argument self.
define the close method with 2 arguments, self and dictionary of argument pairs kwargs.
if AttributeError or UnsupportedOperation exception occurred.
get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,
write it to self.stdout.   if not,
join comment elements into a string, substitute it for content.
substitute environ for self.environ.
called with an argument item.   call the method self.add_item_elements with 2 arguments: handler and item.
call the method self.check_test with an argument value, if it evaluates to true,
return obj.
try,
join root and f into a file, substitute it for f.
define the method save_new with 3 arguments: self, form and commit set to boolean True.
return __wrapper__.
convert settings.FIXTURE_DIRS to a list, extend dirs by it.
define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.
define the method configure_custom with 2 arguments: self and config.
substitute self.__offset.seconds for offset.
call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
decorator deconstructible,
substitute cache for value under the alias key of self._caches.caches dictionary.
call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
if self.required is true and value is false,
from django.forms.fields import everything into default name space.
call the method token.split_contents, substitute the result for bits.
if not,
do nothing.
call the method time.localtime with an argument stamp, substitute the result for tt.
call the function six.iteritems with an argument dict_, for every item in the result,
call the method sys.stderr.write with an argument string "fork #2 failed: (%d) %s\n", formated with e.errno and e.strerror.
define the method endChannelElement with 2 arguments: self and handler.
self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument,
if template_tuple is contained in TemplateDoesNotExist,
if not,
call the method path.encode with an argument fs_encoding, return the result.
call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
define the function get_complete_version with in argument version, defaulting to None.
derive class Command from the BaseCommand base class.
use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.   if self.domain equals a string 'djangojs',
call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
self.FILES is an instance of MultiValueDict class.
define the method I with an argument self.
return endpos.
self.stream is None.
calculate the length of args, substitute it for alen.
substitute xreadlines for __iter__.
append name to self._changed_data.
from django.core.management.utils import handle_extensions into default name space.
derive the class BaseInlineFormSet from the BaseModelFormSet base class.
call the method self._assert_mutable.
return value.
substitute buffer for memoryview.
evaluate self.clear method and return the result.
utf8_charset.body_encoding is None.
define the method new_file with arguments: self, field_name, file_name, content_type, content_length, charset set to None,
substitute _iteritems for items.
i is integer 365.
substitute deprecation_warning for self.deprecation_warning.
return the value under the filter_name key of the self.filters dictionary.
call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:
where '%s' is replaced with node.nodeName and attr.   define the function getInnerText with an argument node.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
substitute gettext_noop for ugettext_noop.
if not,
if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
ns is a string "http://www.w3.org/2005/Atom".
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
"RobotFileParser", "robotparser", "urllib.robotparser".   for every attr in _urllib_robotparser_moved_attributes,
close file_ file descriptor.
return string 'NOTPROVIDED'.
try,
do nothing.
return self.
substitute elements of self.validators list for result.validators.
substitute '%s' in string "UnicodeDecodeError: skipped file %s in %s" with f.file and f.dirpath, write it to self.stdout.
if nodelist is true,
substitute name for self.name.
define the method symlinks_supported.
msg_count is integer 0.
try,
and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}',   and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.   python_2_unicode_compatible decorator,
substitute BOOL for LockFileEx.restype.
from django.utils import six into default name space.
if not,
substitute length of values for len_values.
call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,
convert value to an integer.
define the function capfirst with an argument value.
if number is greater than self.num_pages,
if changes is true,
call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude,
call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.
substitute value under n key of dictionary d for d.
do nothing.
try,
assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
return.
return __wrapper__.
substitute prefix for self.prefix.
instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,
try,
substitute messages.error_list for the value under the field key of the self.error_dict dictionary.
endless while loop,
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
if key is contained in d,
for every fixture_label in fixture_labels,
return settings.DEBUG.
call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
call the method self._resolve, substitute the result for result.
call the method _trans.gettext_noop with an argument message.
import module os.
if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
call the method self.as_hidden with an argument only_initial set to boolean True,
finally perform,
in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
call the method self._assert_mutable.
if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
if not,
if not,
import module warnings.
if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
content_subtype is a string 'plain'.
help is a tuple containing a string: 'Removes ALL DATA from the database, including data added during '
cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.
substitute style.ERROR for style.ERROR_OUTPUT.
for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk,
if TypeError exception is caught,
import module django.
derive the class EmailMessage from the object base class.
if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.
streaming is boolean True.
join inner_text elements into a string.
if call to the function response.has_header with argument 'Vary' returns boolean True,
curr is an empty string.
self._current is None.
if token.contents equals a string 'else',
call the function _add_doc with 2 arguments: u and string """Text literal""".
call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
from django.core.management.sql import sql_create into default name space.
substitute tok.next for state.
return nothing.
raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
append i-th element of existing to child_loggers.
if pks is true,
get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
if LookupError or ImportError, renamed to e, exceptions are caught,
call the params.get with string 'OPTIONS' and empty dictionary as arguments, substitute the result for options.
if cache_choices is not None,
if string '()' is contained in config,
import module sys.
call the method appendlist from the base class of the QueryDict class, with arguments key and value.
file_field_list is an empty list.
return response
plist is an empty list.
endless loop,
if self.verbosity is greater or equal to integer 2,
if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
try,
call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc,
reverse order of elements of self.keyOrder, return the result.
if ImportError, renamed to e, is caught,
use the result as an argument for the call to the function mark_safe, return the result.   if p equals integer 0,
left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,
class static method,
derive the class MiddlewareNotUsed from the Exception base class.
call the method self._cull.
if last_bit is true,
if not,
define the method getlist with 3 arguments: self, key and default set to None.
if constant is true,
call the method self.connection.ehlo.
if not,
method, substitute the result for file_name.   get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra,
plural is an empty list.
return a list with an element etag_str.
call the function render_value_in_context with 2 arguments: value and context, return the result.
try,
define the method root_attributes with an argument self.
substitute line for buffer_.
string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.   append work_file to args.
from collections import OrderedDict into default name space.
for every node_app and node_name in migration.branch,
return value.
import module sys.
substitute token_type and contents for self.token_type and self.contents.
derive the class BaseTemporalField from the base class Field class.
if self.field.localize is true,
add data to seen_data set.
define the method listdir with arguments self and path.
as the arguments, substitute the result for response.   append the request to the end of the protected class member response._closable_objects.
if number is an integer and use_grouping is false and decimal_pos is false,
for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list,
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__,
define the method get with 4 arguments, self, key, default set to None and version set to None.
where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
if not,
try,
format_html called with 3 arguments: string '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />',   return value of the function self.absolute_path called with an argument path and medium,   for every medium in media and for every path in value under the medium key of the self._css dictionary.   define the method absolute_path with 3 arguments self, path and prefix set to None.
for every i and ext in enumerated iterable ext_list,
if data is true,
substitute field for self.field.
substitute settings.TEMPLATE_STRING_IF_INVALID for current,
or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.   if sys.stdout has an attribute named 'isatty' and call to the sys.stdout.isatty returns boolean True, substitute True for is_a_tty.
if key is not contanied in self,
do nothing.
if not,
define the method super with an argument self.
import module django.
if not,
call the method _trans.npgettext with 4 arguments context, singular, plural and number.
for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.   call the method context.push with an argument unpacked dictionary values, with the result as an argument,
requires_system_checks is boolean False.
derive the class ContentNotRenderedError from the Exception base class.
call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.
define the method reload with an argument self.
parent is a tuple with 2 arguments: form.Meta and object.
val is None.
if num_repl is greater than integer 0,
if not,
take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,
from importlib import import_module.
call the function force_str with an argument format_type, substitute the result for format_type.
call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$',
define the method __enter__ with an argument self.
attrs is an empty dictionary.
if VariableDoesNotExist exception is caught,
define the method render with 2 arguments: self and context.
if fname is contained in self._list_cache_files method return value,
derive class BaseCOnverter from object base class.
derive the class CommandError from the base class Exception.
and format, call the method date on the result, return the result.   derive the class TimeField from the base class BaseTemporalField class.
return output.
call the function force_text with an argument option_value, substitute the result for option_value.
return boolean True.
substitute self.count for top.
call the method six.unichr with an argument c, return the result.
derive the class FilePathField from the base class ChoiceField class.
call the method self._read_limited, store the return value into chunk.
import module re.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
return boolean False.
slots is a list with an element, slots.
if OSError or TypeError errors occurred.
call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,
join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ",
substitute length of self.object_list for self._count.
return endpos.
convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
return an empty string.
call the method unifunc.replace with an argument strfunc.
set attr.name attribute of the _MovedItemst object to attr.
call the method app.start.
try,
languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',
while model_dependencies is true,
derive class Options from the base class object.
call the self._lock.writer method, with the result perform the following,
if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,
endless loop,
import module datetime.
initial is an empty list.
do nothing.
string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2',   string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.   append work_file to args.
from django.conf import settings into default name space.
if TemplateDoesNotExist, renamed to e, exception is caught,
if not,
call close method on a file stream.
if KeyError exception is caught,
call the method self.event_stream.expandNode with an argument node.
_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
if name equals string "_wrapped",
exp is an instance of Decimal, created with an argument integer 1.
with the result renamed to fp, perform the following:   call the method fp.write with an argument msgs.
excluded_models is an empty set.
call the method self.add_fallback with an argument default_translation.
if ValueError or TypeError exceptions occurred,
call the method sys._getframe with an argument 1, substitute the result for frame.
define the method __init__ with 5 arguments: self, max_length set to None, min_length set to None, unpacked list args,
self.first is boolean False.
return boolean False.
define the method __bool__ with an argument self.
call the function func with 2 arguments: context and self.first, return the result.
substitute request.urlconf for urlconf.
substitute the datetime.max for exp.
if not,
replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.
raise an TemplateSyntaxError exception with an argument string "Second (optional) argument to %s tag must be 'parsed'",
return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,
substitute first element of fks_to_parent for fk.
self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.   call the method self.field.prepare_value with an argument data, return the result.
i is integer 0.
return value,
is_usable is boolean True.
and data, if it evaluates to true,    return boolean  True.
derive the class PermissionDenied from the Exception base class.
self.waiting_writers is an integer 0.
call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
substitute is_reversed for self.is_reversed.
and help is a string 'Specifies file to which the output is written.'.   define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.
call the function locks.lock with fd and locks.LOCK_EX as arguments.
substitute fk for FormSet.fk.
substitute value under the subcommand key of the commands dictionary for app_name.
define the method write_message with arguments self and message.
raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.",
if self.field.show_hidden_initial is true,
define the method read with an argument self.
define the method dst with 2 arguments self and dt.
substitute exclude for value under the 'exclude' key of attrs dictionary.
call the os.path.getsize function with argument self.file.name, return the result.
string joined from invalided_apps list and separated with string ', '.   if not,
from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,
substitute context for current.
contains_nontext is boolean False.
if extend is boolean True,
context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries:
substitute self.model._meta.pk for pk_field.
if not,
if TypeError exception is caught,
join m and n into a string, separated by '.', substitute the result for lookup_view_s.
call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,
substitute the result for klass.   if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
substitute it for candidate_subs.   if not,
if cleaned_line is false,
define the method sign with arguments self and value.
define the method is_hidden with an argument self.
if not,
where '%s' is replaced with self.id.   define the method led with 3 arguments: self, left and parser.
if not,
define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag,
call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.
django.utils import translation into default namespace.
return url.
call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
if not,
from django.utils import six into default name space.
from django.db.models.fields.related import ManyToManyField.
for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,
substitute kw for self.__kw.
from django.utils.jslex import prepare_js_for_gettext into default name space.
with '%s' substituted for app_label, as arguments.   for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label,
if value has an 'close' attribute,
if stream_or_string is an instance of the six.string_types,
for every bwidget in self.widgets,
return klass.
otherwise if value under the 'app_label' key of options dictionary is true,
otherwise if func is callable object,
yield obj, as an return value of the generator.
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
return msg.
self.cookies is an instance of a class SimpleCookie.
return plural_suffix.
from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,
if site is contained in sites1,
call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
get the index name, of the parser._namedCycleNodes, return the result.
define the method pop with an argument self.
if name is true,
from django.conf import settings into default name space.
attrs is a dictionary with model for 'model'.
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',
call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n",
call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all',
msg is a string "Could not decode base64 data: %r", where '%r' is replace with e.
for every char in fmt,
call the self._lock.writer method, with the result perform the following,
if IndexError exception is caught,
call the method logging.getLogger, substitute the result for root.
MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS'.
call the exp.replace with microsecond set to integer 0, substitute the result for exp.
if csrf_token is not None,
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
if not,
call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
substitute gettext for gettext_noop, gettext_lazy and _.
dklen is None.
from django.utils import six into default name space.
if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
return the length of self.children.
evaluate the method self._cache.decr with key and negative delta as arguments, return the result.
return default.
__locks is an empty dictionary.
substitute '%s' in string "%s_%s%s" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.
call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.
and prefix as node.prefix.   call the method node.replace with an argument decorated.
try,
with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   if self.show_traceback is true,
if not,
define the method render with 2 arguments: self and context.
if middleware has an attribute 'process_response',
if ImportError exception is caught,
call the function get_callable with an argument callback, return the result and an empty dictionary.
substitute error.message for message.
if self.parsed is true,
where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.   return lib.
if first element of e.args is not contained in not_found,
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
if not,
join app_config.path and string 'templates' into file path, substitute it for template_dir.
return out.
hard copy list self.dicts to duplicate.dicts.
import module zlib.
if error_messages is not None,
help is a string "Prints the SQL statements for the named migration."
self.cleaned_data is an empty dictionary.
call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1,
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
call the function format_html with an argument empty string, return the result.
substitute new_attr for self.attr.
derive the class DictConfigurator from the BaseConfigurator base class.
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
call the method self.add_fields with arguments form and i).
ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D',
if not,
where '%s' is replaced with taglib and e.   if not,
try,
define the method __repr__ with an argument self.
position the file self.file pointer at the end.
substitute DEFAULT_MAX_NUM for max_num,
define the method add_root_elements with 2 arguments self and handler.
define the function get_objects.
if AttributeError exception is caught,
return id_.
call the method self.render, return the result.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime,
define the function is_aware with an argument value.
if self.data.hour equals integer 0,
yield item.
return self.
in the previous result for with string '\n', substitute the result for eol_message.   get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
import module hashlib.
raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'",
if value is an instance of six.string_types,
if initial is not None,
import module sys.
if length of list_ equals integer 1,
call the function add_to_builtins with an argument string 'django.template.loader_tags'.
import module tempfile.
return output.
for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None,   and app_config is not contained in excluded_apps.   if not,
parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining:
substitute i-th element of self.data for error.
if css_classes is true,
if s is an instance of bytes or Promise and s._delegate_bytes is true,
for every middleware_method in self._view_middleware,
call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
if self.verbosity is greater or equal to 3,
define the method _resolve with an argument self.
define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
call the decode function with argument string 'ascii' on the return value of the method domain.encode with argument string 'idna' substitute the result for domain.
call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
call the function base64.b64decode with an argument raw_data, substitute the result for data.
for every k and v in return value of the function defaults.items,
tuple with 2 elements: upto and start and boolean False, append the result to result.   substitute start for upto.
raise an self.error with 2 arguments: None and string "Unclosed tags: %s ",
dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.   define the method handle with arguments self and unpacked dictionary options.
define the method configure_filter with 2 arguments: self and config.
in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
append string "Field renamed because it ended with '_'." to field_notes.
self._app_dict is an empty dictionary.
remove the first element from self.backout, substitute the result for self.pointer.
return nothing.
define the method attach_alternative with arguments self, content and mimetype.
if value is not equal self.empty_value,
if file_name is false,
if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
substitute the '%s' with table and list containing key, respectively.   call the cursor.fetchone method, substitute the result for row.
define the function check_for_migrations with 2 arguments: app_config and connection.
for every sql_file in sql_files,
from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
called with an argument result of the method self.latest_post_date.   if value under the 'author_name' key of the self.feed dictionary is not None,
import module time.
if OSError exception is caught,
if six.PY3 is true,
if data is None,
from django.core.management.base import AppCommand into default name space.
if self._delegate_bytes is true,
if field.rel.to._meta.pk.rel is true,
if OSError, renamed to e, is caught,
call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.
do nothing.
raise a SerializerDoesNotExist exception with an argument format.
use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function,
if level is not contained in logging._levelNames,
default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the "default" database.'.   define the method handle with arguments self and unpacked dictionary options.
call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
model_dependencies is an empty list.
from functools import partial into default name space.
define the method fixture_dirs with an argument self.
otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
try,
nodelist_true_output is None.
set accessor_name of the self.object to object_list.
django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
define the function python_reloader with main_func and kwargs as arguments.
raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)",
instantiate ValidationError class with an argument self.data, return its field error_list.
if not,
from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.
substitute field.rel.to with rel_model.
doctring
get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.
define the function validate_integer with an argument value.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a delete() method' as argument.
return nothing.
call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
call the method ustring_re.sub with 2 arguments: fix and s, return the result.
if value under the 'load_initial_data' key of the options dictionary is true,
substitute raw_data for data.
from decimal import Decimal and DecimalException into default name space.
raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
substitute TimeInput for widget.
define the method reader_enters with an argument self.
derive the class Command from the TemplateCommand base class.
if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
decorator function register.filter with an argument is_safe set to boolean True.
set name attribute of self._wrapped object to value.
define the method __init__ with 2 arguments: self and tokens.
from django.core import mail into default name space.
call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,
if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
if not,
skip this loop iteration.
call the method self.connection.starttls.
if timezone is an instance of tzinfo,
return new_name, field_params and field_notes.
if not,
define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
call the method other.__cast, substitute the result for other.
return self._post.
with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments:   migration.app_label, migration.name, only if al equals migration.app_label.   if self.verbosity is greater than integer 0 or self.interactive is true,
if name starts with an string '.',
call the method self.get_json_data with an argument escape_html,
from the base class of the class TypedMultipleChoiceField.   define the method _coerce with arguments self and value.
define the method __str__ with an argument self.
raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
self._called_from_command_line is boolean True.
server_address is a tuple containing 2 initial elements: addr and port.
close fd file descriptor.
derive the class ChoiceInput from the SubWidget base class.
if message is true,
if not,
call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
'<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>',   help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.   define the method non_field_errors with an argument self.
call the method data.getlist with an argument name, return the result.
if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.
from django.forms.fields import IntegerField and BooleanField into default name space.
if size is not zero,
try,
substitute var for value under the name key of the self.extra_context dictionary.
append 2 consecutive newlines to output.
if file_or_path has an attribute 'read',
get 'editable' attribute from object f, if it doesnt exists or its true,
define the function add_library with 2 arguments: self and lib.
import module os.
append f.name to exclude.
substitute form.instance.pk for pk_value.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
derive the class ExtendsError from the Exception base class.
open filepath file in read mode, with file descriptor as fp, perform,
if slots is not None,
call the method self._cache.decr with key and delta as arguments, substitute the result for val.
return nodelist.
try,
call the method self.stdout.write with an argument string "Installed %d object(s) from %d fixture(s)",
call the function vars with an argument options, substitute the result for cmd_options.
define the method __bool__ with argument self.
import module re.
data is an empty list.
do nothing.
define the initialization method __init__ with arguments: self class instance, dir and params.
call the method mail.outbox.extend with messages.
import module sys.
if context is an instance of Context,
find first index of occurrence of character '-' in locale, substitute it for p.
result is a list containing an empty string.
return media.
define method add_arguments with self class instance and parser as arguments.
code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key,
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
if self.localize is true,
from django.template.base import TemplateDoesNotExist into default name space.
raise an CommandError exception with an argument string "Multiple fixtures named '%s' in %s. Aborting.", where '%s' is replaced with:
from django.db.models import ForeignKey.
call the method self.connection.ehlo.
call the method __init__ with an argument lexer, from the base class of the class DebugParser.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
do nothing.
try,
if get_git_changeset has an attribute 'cache',
if AttributeError exception is caught,
call the check function with argument app_config set to app_config, substitute the result for new_errors.
if self.active_writers and self.waiting_writers both equal to integer 0,
get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,
define the method close with an argument self.
substitute DEFAULT_MIN_NUM for min_num,
call the function import_module with an argument project_name.
called with n.getAttribute('pk') method.   call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName,
call the method parser.parse, return the result.
get the value under the key 'database' of the options dictionary, substitute it for db.
substitute self.lineno for token.lineno.
join self.dirpath and self.file into a file path, substitute it for orig_file.
return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
call the method self._coerce with an argument value, return the result.
call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt,
call the method self.validate_key with argument key.
if AttributeError exception is caught.
status_code is an integer 404.
if exit_code is lesser than integer 0,
call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
substitute url for value under the self.asvar key of context dictionary.
define the method get_available_name with arguments self and name.
from __future__ import unicode_literals into default name space.
substitute super for _super.
if directory is not an directory,
'<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string,   '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string,   '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.   define the method as_ul with an argument self.
for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
if not,
call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,
define the method setlist with 3 arguments: self, key and list_.
try,
endless loop,
raise an v exception.
call the CacheHandler function, substitute the result for caches.
if middleware has an attribute 'process_view',
try,
dest set to string 'load_initial_data', default set to boolean True,   and help as a string 'Tells Django not to load any initial data after database synchronization.'   call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
for every app_label in app_labels,
self.pos is integer 0.
if namespaces is true,
call the method self.add_filters with 2 arguments: logger and filters.
if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,
call the function check_for_migrations with an arguments app_config and connection.
if threading is true,
call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.
if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
call the method compiled_parent._render with an argument context, return the result.
try,
TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
import module hashlib.
define the method filter with 2 arguments: self and record.
call the self._list_cache_files method, substitute the result for filelist.
if not self.max_length is None.   remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,
if title is an instance of list or tuple,
call the function mark_for_escaping with an argument value, return the result.
from django.utils import six into default name space.
instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
return output.
if not,
substitute model._default_manager for objects.
if cword equlals a integer 1,
return an empty string.
join statements into a string, separated by newline characters, return it.
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.
if ',' is contained in second element of args,
call the function self._key_to_file with key and version as arguments, substitute it for fname.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if self has an attribute 'error_dict',
call the function get_ns_resolver.cache_clear.
if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
self._leftover is an empty string.
from django.utils.safestring import mark_safe into default name space.
substitute old_attr for new_attr.
call the method literal_match.group with an integer 1, substitute the result for ip_address.
substitute self.addr without the first and last element for self.addr.
call the function escape with an argument word, substitute the result for i-th element of words.
string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.   call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
define the method tell with an argument self.
if not,
delete attr.
call the method get_supported_language_variant.cache_clear.
return obj.
dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
non_capturing_groups is an empty list.
define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
define the method full_clean with an argument self.
call the function force_text with an argument error, return the result.
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
derive class Command from the base class AppCommand.
yield and empty string as the result.
define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT,   result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.   return form.
substitute the result for url.   if NoReverseMatch exception is caught,
call method __init__ from the base class of the class PyLibMCCache with arguments: server, params,
and help is a string 'App label of the application to squash migrations for.'.   call the method parser.add_argument with 2 arguments: string 'migration_name',
if inverse_match is not None,
call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs,
if IndexError exception is caught,
from __future__ import unicode_literals into default name space.
_assertRegex is a strnig "assertRegex".
__all__ is a list containing a string "runfastcgi".
call the method cursor.execute with string "SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" as argument,
locales is relative complement of set exclude in set locales.
raise an exception.
use the result as the argument for the call to the sql.extend method.   call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
from django.core.management.templates import TemplateCommand into default name space.
where '%r' is replaced with first element of bits.   if remaining_bits is true,
call the method Image.open with an argument file, on the result call the verify method
call the function json.loads with an argument stream_or_string, substitute the result for objects.
derive the class DefusedExpatParser from the _ExpatParser base class.
if nesting is false,
call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.
if value is an instance of Field class,
model is None.
if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.   if Exception exception is caught,
value under the cache_key key of the _format_cache dictionary is None.
both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.
call the function BytesIO, substitute the result for self.file.
append t.contents to comment.
set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,
derive the class TimeInput from the DateTimeBaseInput base class.
return boolean True.
if not,
import module os.
if field_type equals a string CharField' and fourth element of row is true,
re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,
raise an ValueError exception with an argument string "dictionary doesn't specify a version".
define the method value_from_datadict with 4 arguments: self, data, files and name.
substitute obj.tzinfo for self.timezone.
if s is an instance of bytes class,
for every field, error_list in self.error_dict.items method return value,
evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
return the value under the self.data.month key of the MONTHS_AP dictionary.
call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
if i is greater than length of subject,
try,
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
call the method router.get_migratable_models with arguments app_config and connection.alias.
get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,
call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
for every k2 and v2 in v,
substitute value under 'unique_id' key of item dictionary for unique_id.
if value is an instance of datetime.date,
try,
and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8',   use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result,   use the result as an argument for the call to the function random.seed.   call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths,
join to_path and name into a file path, substitute the result for filename.
remove key element from self.keyOrder dictionary.
call the os.rename function with arguments old_file_name and new_file_name.
call the method handler.addQuickElement with 2 arguments: string 'category' and cat.
if sep is None,
admin is a string 'admin'
define the function prepare_js_for_gettext with an argument js.
if app_name is an instance of BaseCommand,
and value under the unique_for key of form.cleaned_data dictionary is not None,   if lookup equals a string 'date',
call the method self.g, return the result.
import module sys.
return hard copy of self.keyOrder elements.
return filter_func.
get the value under the index key of the hextets dictionary, remove the leading '0' characters,
for every reference and receivers in return value of the call of obj.unresolved_references.items method,
get the type of the exc object, substitute it for exc_type.
self.activated is boolean True.
use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys,   and stream set to stream, if the stream is true, otherwise stream set to self.stdout.   finally perform,
get the value under the 'output' key of the options dictionary, substitute the result for output.
open the file named filepath in read mode, with file descriptor renamed to fp perform,
if self.method is not equal to string 'POST',
for every lib in builtins,
if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
if self._dir file path does not exists,
use the result as an argument for the call to the mark_safe function, return the result.   if InvalidOperation exception is caught,
define the method __next__ with an argument self.
if not,
call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
define the method __contains__ with 2 arguments: self and key.
formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.   call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
substitute format_string for self.format_string.
from __future__ import absolute_ into default name space.
if length of app_labels is equal to integer 1,
if value under the 'unique_id' key of the item dictionary is not None,
try,
call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra
define the function is_library_missing with an argument name.
derive the class SplitDateTimeWidget from the MultiWidget base class.
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
define the function infix with 2 arguments bp and func.
from django.utils import translation into default namespace.
call the function os.makedirs with argument directory.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
call the function handle_m2m with an argument relobj.
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',
root is an list with 4 elements: root, root, None and None.
where '%s' is replaced with token.contents.   assign the string 'reversed' to is_reversed and bits last elements.
derive the class MultipleHiddenInput from the HiddenInput base class.
is_usable is boolean True.
call the function _load_serializers.
define the function check_for_language with an argument lang_code.
define the function phone2numeric with an argument phone.
match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
if not,
define the method size with arguments self and name.
for every header in headerlist,
if ValidationError, renamed to e, exception is caught,
substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
if length of bits equals integer 3,
return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
call the self.stream.close function.
define the method _handle_fk_field_node with arguments self, node and field.
define the function jython_reloader with main_func, args and kwargs as arguments.
from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
for dirname in dirs,
substitute base for self.base.
get the 'silent_variable_failure' attribute of e object, if it exists and is true,
substitute idx-th element of self.choices for choice.
call the method self.add_root_elements with an argument handler.
define the method render with 2 arguments: self and context.
call the method self.set with key, value, timeout and version as arguments.
call the function parse_http_date with an argument date, return the result.
if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
self._post_parse_error is boolen False.
join self.path and f in path, substitute the result for full_file.
define the method empty_variable with 2 arguments: self and token.
m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,
if fdel is not None,
return compile_function.
add value and delta together, substitute the result for new_value.
call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.
call the method self._callback_strs.add with an argument pattern._callback_str.
define the initialization function __init__ with self class instance and params as arguments.
convert elements of choices into a list, substitute it for self.choices.
define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
call the method shell.mainloop.
derive the class BoundField from the base class object.
set attr.name attribute of the Module_six_moves_urllib_error object to attr.
call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   if not,
return self._name.
convert value to an integer, return it.
from threading import local into default name space.
if primary_keys is true,
call the function import_library with an argument taglib_module, substitute the result for lib.
call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.
append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
otherwise if '\\' is contained in path,
do nothing.
try,
default set to DEFAULT_DB_ALIAS and help set to a string:   'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.'   define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.
if m is true,
define the function do_include with 2 arguments parser and token.
try,
for every app_name and model_list in return value of manifest.items method,
call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',
substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.
raise ValidationError with 2 arguments: return value of the function _ called with an argument string,
if lengths of new_operations and operations are the same,
if app_label is not contained in executor.loader.migrated_apps,
return boolean True.
for every migration_name in migration_names,
if s is an instance of an object Promise.
convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,
call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
if index is not None and index is smaller than return value of the method self.initial_form_count,
if value is not contained in result,
and construct as boolean False, return the result.   save.alters_data is boolean True.
from importlib import import_module into default name space.
and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.
call the get_serializer function with an argument format, call the return value object and substitute it for s.
if escaped is true,
from django.utils.crypto import get_random_string into default name space.
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?%s'" formated with ch.
return boolean False.
define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.
define the function sort_dependencies with an argument app_list.
call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
define the method __getstate__ with an argument self.
return an empty string,
if found is false and, line is false or return value of the function plural_forms_re.search called with an argument line is false,
if field PY2 of the module six is boolean True,
substitute form.cleaned_data for cleaned_data.
return self.
from io import BytesIO into default name space.
call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.
if self.fail_silently is boolean True,
call the method self._add_local_translations.
if name is not None,
append '_' to string created from first p elements of languages converted to lowercase,
derive the class Node from object base class.
define the function linebreaks_filter with 2 arguments value and autoescape set to None.
return self.DSTOFFSET.
define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
define the method __init__ with 2 arguments: self and format_string.
call the function os.umask with an argument umask.
from django.utils.encoding import force_text into default name space.
skip this loop iteration,
for every pattern in allowed_hosts:
try,
if i is greater or equal to integer 0,
and directory_permissions_mode set to None.   if location is None,
define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.
call the method self.itervalues, return list of results.
import module traceback.
bitwise shift integer 1 to the left by 31 spaces, return the result.
try,
call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
define the method lex with 2 arguments self and text.
do nothing.
call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type,
while rbp is smaller than self.current_token.lbp,
if return value of function response.has_header with string 'Vary' as argument is boolean False,
if value is None,
define the method _clean_form with an argument self.
return split.
value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments:
define the method __init__ with 8 arguments: self, data set to None, files set to None, instance set to None,
if show_traceback is true,
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments.
call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters,
yield string "from __future__ import unicode_literals" as the result.
substitute settings.ROOT_URLCONF for urlconf.
call the method self.create_parser with first and second element of argv, substitute the result for parser.
TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
raise an exception.
substitute the '%s' with table and list containing first element of cursor.fetchone method, respectively.   define the method clear with argument self.
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
call the function pformat with an argument value, return the result.
join self.dirpath and thefile in a string, substitute the result for work_file.
call the function mark_safe with an argument arg, append it to arg_vals.
import module datetime.
if value in self.empty_values,
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
call the method notifier.read_events.
call the threading.local method, assign the result to trans_real._active.
write it for self.stderr.   exit the program with the integer 2 as exit code.
if not,
raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
if not,
import module sys.
append obj to self.deleted_objects list.
define the method _get_validation_exclusions with an argument self.
define the method _prepare_data with 2 arguments: self and data.
call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary,
for every e in self, append convert e to an string and append it to string '* ',
call the method self.merge with an argument translation.
from __future__ import unicode_literals into default name space.
substitute i for self.pointer.
call the function check_for_migrations with arguments app_config and connection.
call the method self.loaddata with an argument fixture_labels.
define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None,
if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
from __future__ import unicode_literals into default name space.
call the handle function with dictionary pair of elements options from the base class of the class Command.
if value under the 'author_link' key of the item dictionary is not None,
get the value under the 'locale' key of the options dictionary, substitute it for locale.
define the method _update_errors with 2 arguments: self and errors.
err_msg is a string "Tried %s", where '%s' is replaced with tried.
call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
if not,
if IndexError exception is caught,
try,
call the function os.unlink with an argument work_file.
if html_message is True,
if value equals self.empty_value or value is contained in self.empty_values,
append new line to line, write it to self.stdout stream.
do nothing.
for every message in email_messages,
substitute key for result.key.
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
return self._non_form_errors.
if ImportError or AttributeError exception occurred,
get the value under the app_label key of the directory_created dictionary, if exists and it is false,
substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
break loop execution.
remove 'BACKEND' key from params dictionary and put it into backend.
if exclude is not None,
return string 'st'.
return r.
slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.
if IOError or OSError exceptions occurred,
return an instance of CommentNode class.
or settings.FILE_UPLOAD_PERMISSIONS if it is.   self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None,
for every i and field in enumerated iterable self.fields,
return context.render_context.
return a string "<%s: %s>" formated with self.__class__.__name__,
do nothing.
if not,
from django.forms.widgets import Widget and Select into default name space.
raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined",
if stream_or_string is an instance of bytes,
if ch equal a string '(',
return boolean True.
from django.core.exceptions import AppRegistryNotReady into default name space.
replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
if not, self.hide_empty is boolean False.   get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
get converter attribute from self object, substitute it for converter.
match is boolean True.
sub is an empty string.
import module os.
get field.name from the obj, substitute it for related.
if confirm equals string 'yes',
from __future__ import unicode_literals into default name space.
if not,
if option_label is an instance of list or tuple,
raise an Exception exception with an argument string "This %s instance cannot tell its position",
define the method __init__ with 2 arguments: self and attrs set to None.
find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
call the method field_stream.read, substitute the result for raw_data.
if not,
get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.
define the method delete with arguments self and name.
if self.max_length is not None and length of file_name is grater than self.max_length,
CRITICAL is integer 50.
s is an instance of the Select class, created with choices set to choices.
call the function timeuntil with 2 arguments value and arg, return the result.
derive the class RenameMethodsBase from type base class.
call the function force_text with first element of list_ as an argument, return the result.
substitute choices for self.choices.
if not,
define the function parse_time with an argument value.
get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
import module hmac.
from django.core.urlresolvers import reverse, NoReverseMatch.
raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.
define the __init__ method with argument self.
try,
substitute args, without the last element for args.
if self.regex is not an instance of six.string_types,
return self.
call the function warnings.warn with an argument string "``--natural`` is deprecated; use ``--natural-foreign`` instead.",
import module re.
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.
alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,
for name in attributes of models_signals object,
join statements into a string, separated by newlines, return it.
on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.
if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,
if not,
if best_doublecolon_start equals integer 0,
substitute size for self._size.
__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',
for every h in elements of logger.handlers list,
if six.PY2,
if self.count equals a integer 0 and self.allow_empty_first_page is false,
define the method get_queryset with an argument self.
if upto is not equal to start.
do nothing.
substitute code for self.code.
define the function urlencode with 2 arguments query and doseq set to integer 0.
define the method add_arguments with self and parser as arguments.
define the method start_serialization with an argument self.
if template doesnt have a 'render' attribute,
if not,
if not,
if self._cull_frequency equals to integer 0.
call the method self._clean_form.
return result.
from __future__ import unicode_literals into default name space.
define the function last with an argument value.
found is boolean False.
do nothing.
if old_handler is not None,
if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
skip this loop iteration.
substitute self.entity_decl for parser.EntityDeclHandler.
from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
replace '%s' in string "CREATE %sINDEX %s ON %s (%s);" with: unique, return value of the function qn called with an argument:
join app_config.path and string 'locale' into a file path, substitute it for localedir.
call the self._cull method.
substitute the return value of the method self.object_list.count for self._count.
try,
call the method clean with an argument value from the base class of the class ComboField.
tried_modules is an empty list.
call the method self.nodelist.render with an argument context, return the result.
substitute to_field_name for self.to_field_name
if self._cached_loaders is false,
substitute space for sep.
remove the entry under the 'stream' key of the self.json_kwargs dictionary.
call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
import module sys.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
yield a tuple with 2 elements: an empty string and self.field.empty_label.
call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.
call the function save_m2m.
from django.db import models into default name space.
row_data is an generator object that returns value under the field key of form.cleaned_data dictionary,
call the method self.set with key, value, version incremented by delta, as arguments.
if leading is true,
substitute the fitst element of the result for prefix_norm and prefix_args, respectively.   for every possibility, pattern and defaults in possibilities,
substitute i-th element of self.forms for form.
call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,
if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
status_code is an integer 200.
if filename ends with '.pyo', '.pyc' or '.py.class',
substitute self.default_locale_path for locale_dir.
define the method build_absolute_uri with an arguments self and location set to None.
substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
if '.' is contained in words or '@' is contained in word or ':' is contained in word,
if timeout is None,
substitute SplitHiddenDateTimeWidget for hidden_widget.
register.tag decorator,
derive the class TarArchive from the BaseArchive base class.
import module copy.
return boolean True.
raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
if not,
return boolean False.
from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
if not,
define the method _iterkeys with an argument self.
if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
if Exception, renamed to e, exception is caught,
define the method copy with an argument self.
field_type is a string 'NullBooleanField('
import module warnings.
if name is callable object,
if nodelist.contains_nontext is true,
or boolean False if not, substitute the result for boundary.   if boundary is true,
if ImportError, renamed to e, exception is caught,
try,
and substitute the return value for value under the key 'Expires' of dictionary response.   call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
if OSError, renamed to e, exception is caught,
return path an an empty string.
get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.
return result.
if not,
call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
call the method self.validate_key with argument key.
if value is not an instance of list type,
tried is an empty list.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
if endpos is lesser than zero,
assign the result to cc.   cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.
from django.test.utils import get_runner into default name space.
create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
call the method self.download with an argument template, substitute the result for absolute_path.
all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.
call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
write shutdown_message to self.stdout file stream.
call the method handler.endElement with an argument string 'author'.
convert host to lowercase.
if self._wrapped is empty,
define the function tz with an argument request.
from django.utils import six into default name space.
add together self.to, self.cc and self.bcc, return the result.
if not,
call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.
call the method self._archive.close.
call the function get_language, substitute the result for lang.
call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
substitute hlen for dklen.
define the method file_complete with arguments self and file_size.
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
from django.utils.encoding import force_bytes into default name space.
return a dictionary generated with an expression, return value of the method e.as_data for f,
while escaped is true or ch is not equal to a string ']',
from django.utils.encoding import force_text into default name space.
replace '%s' in string "%s = %s  ###" with key and value under the key key of the user_setting dictionary, append it to the output.
substitute length of package for dot.
define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
return an empty string.
return nothing.
define the method add_arguments with 2 arguments: self and parser.
call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
return translated.
define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.
call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,
otherwise, if s has an attribute '__unicode__',
break the loop execution.
get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.
define the method close with an argument self.
otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
must_be_first is boolean False.
call the OVERLAPPED function, substitute the result for overlapped.
if filter_func has an attribute "_decorated_function",
replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid',   localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats,   error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid',   localize set to localize   call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.
call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.
call the function iri_to_uri with an argument url, substitute the result for self.url.
paths is a list containing results of the function force_text called with an argument p, for every p in paths.
substitute bits without last two elements for bits.
use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
set self.__starttag_text to None.
convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.
and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments.   for every char in key,
call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,
not_found is an empty list.
if daemonize is true,
substituet node for value under the name key of the parser._namedCycleNodes dictionary.
define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.
define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.
define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.
if not,
define the method __init__ with 2 arguments: self and lexer.
raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.
if max_age is not None,
try,
call the safe_join function with arguments self.location and name, substitute it for path.
get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.
from __future__ import unicode_literals into default name space.
and token.   otherwise if token.token_type equals integer 1,
if children is true, copy children list to self.children, otherwise self.children is an empty list.
do nothing.
define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.",
yield nothing.
define the method unsign with arguments self, value and max_age set to None.
raise an exception.
call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function,
value is an instance of ConvertingDict class, created with an argument value.
if value is None,
write a newline character into self.stream file stream.
define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.
try,
define the method hidden_fields with an argument self.
raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
substitute HTMLParser from the module _html_parser for HTMLParser.
for every line in chunk_buffer,
define the method content with an argument self.
call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
call the function email_message.message, substitute the result for message.
do nothing.
call the method self._cache.delete with argument key.
raise an exception e.
if field.rel has an 'to' attribute,
return self.data.day.
try,
raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
targets is a list containing tuple with two elements, app_label and None.
instantiate class X, get its length.
raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
if not,
call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
if value is None,
return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
define the function upper with an argument value.
call the function data with 3 arguments: self.year, self.month and self.day, return the result.
self.backout is an empty list.
define the method _cull with argument self.
call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
if consume_next is true,
_default is None.
if endblock.contents is not contained in acceptable_endblocks,
substitute SplitDateTimeWidget for widget.
return an instance of SafeBytes, created with an argument s.
substitute the result for value under the self.target_var key of the context dictionary.   return an empty string.
call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.
use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings "_thread" and "thread",
define the method _format_value with 2 arguments: self and value.
if queryset is None,
for every name in pattern.reverse_dict,
code is a string 'min_value'
if "'stream'" is not contained in te converted into a string,
call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
where '%r' is replaced with name and filter_func, respectively.   define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
try,
from django.utils import six into default name space.
with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.   call the response.render() method and assign the return to the response.
substitute value under the "unifunc" key of the results dictionary for unifunc.
call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
while self.tokens is true,
define the method __setitem__ with 3 arguments: self, key and value.
from importlib import import_module into default name space.
def _get_post method with self class instance as the argument.
return supported_code.
call the functoin callback with an argument self.
output is an empty list.
code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.    if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of,
call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
convert fist p elements of language to lowercase, append '_' to it,
url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.
is_usable is boolean True.
concatenate name and string '-clear', return it.
return an dictionary containing 1 entry: return value of the function timezone.get_current_timezone_name for 'TIME_ZONE'.
while token.contents starts with a string 'elif',
for every closable in self._closable_objects,
return the evaluated result of the mail.send method.
from django.utils.safestring import mark_safe into default name space.
if self.file_permissions_mode is not None,
write data bytes to outfile.
import module os.
from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
if data is boolean False,
call the method condition.eval with an argument context, substitute the result for match.
if not,
substitute i-th element of tokens for token.
return self._encoding.
dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.   call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true',
join tempdir and guessed_filename into a file path, substitute it for guessed_path.
from django.utils.six.moves import zip into default name space.
import module zipfile.
return an dictionary containing 1 entry: request for 'request'.
substitute self.fk.name for name.
from django.core.signals import request_finished into default name space.
call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.
define the method start_object with arguments self and obj.
form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix,
call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
substitute self.rawdata for rawdata.
derive the class RssUserland091Feed from the RssFeed base class.
where '%s' is replaced with name and taglib.   call the method parser.add_library with an argument temp_lib.
return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.   for every relobj in iterator generated from the field.name attribute of the obj object.
and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.   otherwise if token_string starts with BLOCK_TAG_START,
result is an integer 0.
create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.
call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
define the method __init__ with 3 arguments: self, setting and nodelist.
call the function smart_urlquote with an argument middle, substitute the result for url.
from django.utils.six.moves import input into default name space.
call the method parser.parse, substitute the result for nodelist.
call the method self.find_files with an argument string '.', substitute the result for file_list.
default set to boolean False and help set to a string "Enable fixing of migration conflicts.".   call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',
decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
if HTMLParseError exception is caught,
call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,
get the value under the 'format' key of the options dictionary, substitute the result for format.
pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.
from django.utils.text import get_valid_filename into default name space.
for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
do nothing,
if not,
call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
derive class _LazyDescr from the object base class.
call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.
define the method __init__ with arguments self, stream and boundary.
substitute operator.getitem for indexbytes.
from __future__ import unicode_literals into default name space.
serialize set to boolean False, substitute the return value for db_name.   call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month,
if CONTEXT_SEPARATOR is contained in result,
define the method s with an argument self.
call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl,
if extracted is true,
if cookie is not an instance of http_cookies.BaseCookie,
if commands_only is true,
call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.
call the method router.db_for_read with self.cache_model_class as argument, substitute the result for db.
define the method __nonzero__ with an argument self.
append a tuple with 2 elements: None and nodelist to conditions_nodelists.
if formfield has an attribute 'queryset',
DEFAULT_DB_ALIAS for self.db.   remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,
try,
add k to seen.
for every formset in formsets,
subcommand is a string 'help'.
if TemplateSyntaxError, replaced with e, exception is caught,
return s.
otherwise if bmatch is true,
call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)",
call the method self._handle_object with an argument node, return the result.
value under the self key of state_frame dictionary is None.
append an empty string to usage.
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
define the method close with argument self.
code_list is an empty list.
'SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers',   'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.   define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.
covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,
for every condition and nodelist in self.conditions_nodelists,
call the method self._should_delete_form with an argument form, if it evaluates to true,
from django.utils import timezone into default name space.
if not,
ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
if not,
replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
assign value and params to the value under the name key of the outdict dictionary.
called with 3 arguments: data, files and name, substitute the result for upload.   if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,
call the function split_url with an argument value, substitute the result for url_fields.
substitute the middleware.   define the function _decorator with an argument view_func.
if not,
if conflicts is true and self.merge is false,
reminder of the division of floored result of division of seconds by 60, by integer 60.   define the method P with an argument self.
if IOError, substituted to e, exception is caught,
if not,
evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\',
i is integer 0.
do nothing.
import module warnings.
delete attr.
nodelist is an empty list.
from django.utils.html import conditional_escape and format_html into default name space.
from django.utils.module_loading import import_string into default name space.
substitute str for text_type.
if not,
from django.utils.encoding import force_text into default name space.
set k attribute of cls object to meth.
from django.utils.translation import ugettext as _ into default name space.
define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.
dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining '   'source code and templates for translation strings.'.   call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',
if f is None,
return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,
decorator function wraps with an argument func.
from django.apps import apps into default name space.
if not self.localized_fields is None.   get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
return result.
substitute base.__name__ for class_name.
append 'Z' to time_str, return the result.
call the function force_text with an argument bit, append the result to bits.
substitute sign for self.sign.
if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.
skip this loop iteration.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
if self.use_ipv6 is true and socket.has_ipv6 is false,
substitute negated for self.negated.
update declared_fields dictionary with entry base.declared_fields.
call the context.push method, with the result, perform,
if options.settings is true,
call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary,
feed data to the parser p.
call the method writer.as_string, write the result to file fh.
if first element of message_context equals to character '"',
call the method MIMEMultipart.__setitem__ with arguments self, name and val.
if not,
if not,
call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,
return the length of self.content.
if six.PY2 is true,
call the self.set method with key, new_value and version set to version as arguments.
return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj,
call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,
call the method self.write with 2 arguments: s and encoding.
define the function is_valid_path with arguments path and urlconf set to None.
if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,
import module errno.
substitute the results in a list for T.   join elements of T in a bytes string, append first r elements of result of the call to the function F with an argument l to it,
call the method self._mark_post_parse_error.
help is a string "Checks the entire Django project for potential problems.".
if characters '\n' or '\r' are contained in val,
code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.    return value.
value is None.
once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
call the method connections.all(), perform the following for every db in the result,
call the method self.next_token, substitute the result for token.
strip message_context of "'" characters from both ends, substitute the result for message_context.
call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg,
define the method get_host with an argument self.
from django.core.management.base import BaseCommand and CommandError into default name space.
from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.
for field in self if field.is_hidden is false, append field to a list, return the resulting list.
and unpacked dictionary kwargs.   python_2_unicode_compatible decorator,
call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
return default.
comment_lineno_cache is None.
call the function vars with an argument options, substitute the result for cmd_options.
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial,
if third element of bits is not equal to a string 'by',
property decorator,
sign is a string '-'.
substitute e and tb for v.__cause__ and v.__traceback__.
if key is not contained in self,
if self.locale_paths is true,
otherwise if field.required is true,
substitute package.__path__ for package_path.
if sep is an instance of unicode,
if attribute '_client' of the self object is None,
substitute self.field.label for self.label.
import module os.
call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
from django.utils.encoding import force_text and force_str into default name space.
common_ancestor is None.
define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
define the method is_multipart with an argument self.
return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
from django.apps import apps into default name space.
if errors is true,
nodelist_false is an instance of NodeList class.
if IndexError exception is caught,
define private method __getattr__ with self class instance and attr as the arguments.
if value is false,
write the result to self.stdout.   for every operation in migration.operations,
do nothing.
substitute last element of bits for asvar.
call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
if value is true and method self.valid_value called with an argument value evaluates to false,
call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.
if key is not contained in self,
if value under the 'description' key of the item dictionary is not None,
call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
and unpacked dictionary kwargs.   substitute queryset for self.queryset.
derive the class StreamingBuffer from the object base class.
update attrs dictionary with extra_attrs entry.
define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.
return the first element of bits and an empty string.
define the method add_arguments with 2 arguments self and parser.
if not substitute field.initial for initial_value.   if initial_value is an callable object,
__all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.
substitute message.message, message.code, message.params for message, code and params, respectively.
if not,
define the method usage with 2 argument: self and subcommand.
return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
append the resulting string to dec_part, substitute it for dec_part.   if dec_part is true,
if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
from __future__ import unicode_literals into default name space.
if callback is an instance of functools.partial object,
yield d.
define the function get_mod_func with an argument callback.
decorator lru_cache.lru_cache with an argument maxsize set to None.
index_output is an empty list.
try,
define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,
call the self._lock.reader method, with the result perform the following,
return nothing.
import pickle.
extend list inner_result with res.
convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
self.pointer is integer 0.
if not,
derive the class EmailBackend from the ConsoleEmailBackend base class.
call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.
decompress is boolean True.
get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method cursor.execute with sql as argument.
if encoding is false.
replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,
write current_chunk to file fd.
define the method _initialize_handlers with an argument self.
remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,
call the function force_text with an argument first element of args, substitute the result for first element of args.
call the method self.add_prefix with an argument fieldname, substitute it for prefix.
increment self.active_readers by t.
return initial.
call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,
call the method self.configurator.convert with an argument value.
for every middleware_path in settings.MIDDLEWARE_CLASSES:
model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   return fk.
outer_html is a string '<ul{id_attr}>{content}</ul>'.
and self.ns for "xmlns".   if not,
substitute self.pointer for i.
raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
return boolean False.
define the method _delete with self and fname as arguments.
contextlib.contextmanager decorator,
if errors is true,
self.content_length is None.
call the os.makedirs function with directory and self.directory_permissions_mode as arguments.
if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.   if Exception exception is caught,
define the function dictsortreversed with 2 arguments value and arg.
builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.
call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
define the method multiple_chunks with arguments self and hunk_size set to None.
define the function _unpack_ipv4 with an argument ip_str.
define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.
pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument,
return client.
return value under the key key of self dictionary.
from django.db.migrations.executor import MigrationExecutor into default name space.
and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,
split locale by '_', append the first element of the result to locales.
from django.utils.module_loading import import_string into default name space.
and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple,   otherwise second element is result of the function force_str with an argument v, for every k and v in query,   and doseq, return the result.   define the function cookie_date with an argument epoch_seconds set to None.
if field_value is not None,
get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
reverse order of parts, join them into a string, separated with '.', substitute the result for value.
define the method __init__ with 2 arguments: self and attrs set to None.
if file is an instance of six.string_types.
if length of bits is not equalt to integer 2,
define the function do_block with 2 arguments parser and token.
call the function force_text with an argument formatstr, use the result as an argument for the call to the method,
raise an ImportError exception with an argument string "No IPython".
call the method self._callback_strs.update with an argument pattern._callback_strs.
define the method has_key with 2 arguments: self and key.

if self.verbosity is false,
append name to output.
decorator function register.filter with an argument is_safe set to boolean True.
substitute value under the key key of the kwargs dictionary.
call the function force_text with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if parse_until is true,
return value under the language_code key of the self dictionary.
do nothing.
call the method token.split_contents, substitute the result for bits.
from django.conf import settings into default name space.
docsring
call the method m.group with an argument string 'ascii', use the result as an argument for the call to the method mark_safe,
define the method render with an argument self.
if value is an instance of string
if not,
if app_config.models_module is false,
call the method self._assert_mutable.
call the function re.compile with an argument string 'ascii', substitute the result for now.
define the function dec with 2 arguments: value and arg.
if app_config.models_module is None,
return self._size.
substitute result for value under the name key of the loop_dict dictionary.
from django.utils.encoding import mark_safe into default name space.
do nothing.
derive the class Lexer from the object base class.
if not,
call the function warnings.warn with 2 arguments: string '--pks',
define the method __str__ with an argument self.
define the function _ with an argument message.
try,
value is an empty list.
define the method __init__ with 3 arguments: self, subject set to None and unpacked dictionary kwargs.
if value is not None,
call the method token.split_contents, substitute the result for filename.
get the value under the 'database' key of the options dictionary, substitute it for self.verbosity.
if name is not None,
join output into a string, separated with an argument, return it.

call the self.stdout.write method with an argument integer 1,

from django.utils import six into default name space.
try,
call the function force_text with an argument value, return the result.
__all__ is a list with 4 initial elements: strings 'Tells Django to Django as arguments.
substitute value is an empty list.
raise an exception.
for every f in result,
define the method render with an argument self.
call the method handler.addQuickElement with an argument string 'idna', with '%s' replaced by e.
get the value under the f.name key of the options dictionary, if it exists substitute it for connection.
call the function import_module with an argument path, if it evaluates to true,
if value is contained in self.empty_values,
call the function call_command with an argument func, assign the result to the result and e, respectively.
if Exception exception is caught,
call the function get_language, substitute the result for bits.
from django.utils.encoding import force_text into default name space.
append i to a string ', return the result.
do nothing.
define the function _ with an argument value.
call the method __init__ from the base class of the class QueryDict, return the result.
substitute value for value under the key key of self dictionary.
append a list with an element string '.', substitute the result for exclude.
call the method parser.compile_filter with an argument value under the 'database' key of the connections dictionary,
if first element of bits is contained in self.empty_values,
return boolean False.
if name is not None,
call the method parser.delete_first_token.
call the function new_method_proxy with an argument date, substitute the result for token.
substitute complain for widget.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if not,
define the method _itervalues with arguments self and name.
substitute the result for value under the f.name key of the cache dictionary.
call the function re.compile with an argument raw string 'utf-8', substitute the result for message.
define the method __iter__ with an argument self.
call the method cursor.execute with an argument string 'utf-8', return the result.
from django.core.exceptions import BaseCommand into default name space.
return self._size.
if name is None,
substitute context for value under the name key of the attrs dictionary.
get the value under the format key of the connections dictionary, if it is true,
if call to the function reset_translations.
get the value under the key key of the options dictionary,
return nothing.
if value under the index key of the item dictionary is true,

call the method self.xml.startElement with 2 arguments: string
from django.apps import apps into default name space.
call the function lazy with 2 arguments: raw list containing an empty string,
if self.verbosity is not equal to integer 0,
if i is contained in return value of the function force_text called with an argument bf_errors,
substitute the result for result.
substitute None for self.name.
substitute first element of the result for value under the PREV key of the cache dictionary.
if not,
call the function reset_translations.
if not,
call the method __init__ from the base class of the class SortedDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
quant is an empty list.
call the function func with 2 arguments: result of the function force_text,
call the method cursor.execute with an argument "
if value is true,
call the function warnings.warn with an argument string "Please correct the beginning of the result,
if six.PY2 is true,
from django.utils.encoding import force_text into default name space.
get the value under the 'microsecond' key of the options dictionary, if it exists return an empty string,
import module sys.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method self._assert_mutable.
get the value from the base dictionary, return the result.
join elements of output into a string, separated by it.
if IndexError exception is caught,
call the method parser.add_argument with 3 arguments: string '--database', action set to string 'extensions',
if not,

call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
if not,
endless is None.
if not,
derive the class CacheClass from the object base class.
substitute _iteritems for widget.
call the function re.compile with 2 arguments: raw string ' integer 1.
call the method self.make_key with 3 arguments: name, unpacked list args and unpacked dictionary kwargs.
substitute self for s.
return result.
call the method token.split_contents, substitute the result for db.
msg is a string '%02d' formated with an argument integer 60,
if root is true,
try,
if field is not equal to integer 0,
call the function new_method_proxy with an argument integer 1.
return the result of the function force_text called with 3 arguments:
define the method close with 2 arguments: self and name.
if prefix is false,
return default.
define the method to_python with arguments self and value.
call the function force_text with an argument value, substitute the result for args.
and help is a a tuple containing instances of the function _ called with an argument string,
if not,
if six.PY3 is contained in self.empty_values,
call the method __new__ from the base class of the class MultiValueDict, with an argument attrs.
call the method self._assert_mutable.
call the method self._assert_mutable.
derive the class CacheClass from the object base class.
call the function re.compile with 2 arguments: raw string 'utf-8', substitute the result for message.
if not,
define the method parse with arguments self and token.
if root is true,
derive the class CacheClass from the Exception base class.
define the method __str__ with an argument self.
call the function ugettext with an argument string 'ascii', return the result.
call the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
return boolean False.
call the function force_text with 2 arguments: input_formats set to input_date_formats,
get the value of the options dictionary, return it.
substitute apps for t.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a string,
derive the class CheckMessage. from the object base class.
if value is an instance of CommandError type,
if self.timezone is not None,
get the value under the 'id' key of the options dictionary, if it exists substitute it for exclude.
return default.
call the method match.group with an argument string 'utf-8', substitute the result for args.
call the method self._assert_mutable.
if name is not None,
define the method __str__ with an argument self.
substitute _iterkeys for widget.
if self.verbosity is true and f.name is true,
call the method match.group with an argument self.
get the value under the key key of the sys.modules dictionary, if it exists substitute it for self.verbosity.
__all__ is an list with 2 elements: 2 and value under the name key of the html dictionary.
set to boolean False.

otherwise if data is an instance of AutoField class,
substitute complain for widget.
derive the class EmailBackend from the object base class.
import module re.
from django.utils.encoding import force_text and force_text into default name space.
return boolean False.

define the method _has_changed with 3 arguments: self, name, files and token.
define the function file.
from django.utils import six into default name space.
from __future__ import unicode_literals into default name space.
if name is not equal to integer 0,
if self.verbosity is contained in self.empty_values,
call the function allow_lazy with 2 arguments: ch and number.
if value is contained in self.empty_values,
call the method __init__ from the base class of the Command class.
define the method __str__ with 2 arguments: self and name.
substitute value for value under the name key of self dictionary.
define the method __init__ with an argument self.
define the method __init__ with 2 arguments: self and context.
try,
call the function force_text with an argument value, append the result to out.
derive the class Command from the object base class.
call the function force_text with an argument value, return the result.
call the function re.compile with an argument integer 0, substitute the result for now.
if length of bits is true,
call the function re.compile with an argument raw element of bits.
call the method parser.next_token, substitute the result for now.
define the method with an argument self.
call the method parser.add_argument with 5 arguments: string '--database', dest set to string 'extensions',
if lookup is true,
if not,
return value under the name key of the sys.modules dictionary.
if ValueError exception is caught,
return self._size.
if not,
append the result to a list with 2 elements: integer 1 and integer 1, append the result to self.stdout.
define the method __init__ with 2 arguments: self and context.
define the method __str__ with an argument self.
status_code is an empty string.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'database',
substitute value under the name key of the options dictionary for None.
status_code is an integer 0.
call the method token.split_contents, substitute the result for bits.
call the method self._assert_mutable.
if ImportError exception is caught,
if data is an instance of six.string_types,
define the function force_text with 2 arguments: value and arg.
call the function force_text with an argument value, return the result.
remove entry under the name key of the attrs object, if it exists
append string " %s" for every i in the result,
do nothing.
define the method url with an argument self.
call the method handler.addQuickElement with an argument string "Please use the result as an argument for the call to the self.stdout.write method.
substitute the result for key. for every i and value in return value of the function force_text called with 2 arguments:
raise an CommandError exception with an argument message.
call the method self.make_key with key and version as arguments, substitute the result for key.
define the method __init__ with an argument self.
use the result as an argument for the call the method parser.add_argument with 2 arguments: string
return data.
call the function that return the result.
derive the class Command from the object base class.
call the function warnings.warn with an argument string 'Ensure '%s' is replaced with e.
try,
substitute settings.DEFAULT_CHARSET for self.name.
import module warnings.
if file_name is false,
raise an NotImplementedError exception with an argument string 'subclasses of the must must provide a method'.
define the method __init__ with 4 arguments: self, message and template_dirs set to boolean False.
if six.PY3 is true,
if self has an attribute attribute.
define the method __repr__ with an argument self.
message is an instance of a class RegexURLResolver with an argument value,
call the function new_method_proxy with an argument string 'utf-8', substitute the result for db.
call the function ugettext with 3 arguments: string '--pks',
call the method encode with an argument value, return the result.
call the function re.compile with an argument path, substitute the result for msg.
return the result. if not,
define the method meta with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if parse_until is true,
define the method __str__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
try,
get the value from the item dictionary.
fields is an instance of class created with 3 arguments:
if value is not None,
call the function format_html with 2 arguments: string
docsring
try,
if not,
for every x in the result of the call to the function mark_safe,
join the result into a string, return it.
define the method __repr__ with an argument self.
define the method __str__ with an argument self.
finally perform,
raise an TemplateSyntaxError exception with 3 arguments:
define the method __repr__ with an argument self.
call the function warnings.warn with 3 arguments: string '--database', action set to string 'database',
call the function new_method_proxy with an argument integer 1.
if value is an instance of six.string_types class,
call the function re.compile with 2 arguments: raw list with 2 elements: string
return a string '%02d' formated with '%s' replaced with e.
otherwise if other is not None,
raise an TypeError exception with an argument attrs.
call the method token.split_contents, substitute the result for value under the name key of options dictionary.
return boolean False.
return result.
call the method parser.parse with an argument context, substitute the result for db.
define the method __init__ with 2 arguments: self and context.
try,
append args to self.stdout.
if not,
call the method self.make_key with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method self._assert_mutable.
call the method parser.delete_first_token.
call the method warnings.warn with 3 arguments: string '--extension', string '-e',
convert the result to a list, return the result.
define the method delete with an argument self.
define the method __init__ with an argument self.
call the method self.xml.startElement with 2 arguments: parser and token.
if not,
define the method render with 2 arguments: self and parser.
subtract length of bits in the length of the result of the function _ called with an argument,
default_error_messages is an dictionary containing an entry: function created with an argument value.
define the method __getitem__ with arguments self and name.
return a tuple with an entry: return value of the function _ called with an string
define the method __str__ with arguments self and name.
define the method __repr__ with arguments self and name.
if not,
finally perform,
call the function force_text with an argument value, return the result.
try,
do nothing.
docsring
call the function _ with 2 arguments: string 'link', an empty string,
call the method handler.addQuickElement with an argument string 'utf-8', if it evaluates to true,
return self._size.
return result.
for every name in result,
get the value under the db key of the options dictionary, substitute the result for value under the db key of the root dictionary.
call the method parser.parse with an argument string 'utf-8', substitute the result for db.
define the function reset_translations.

call the method __init__ with 2 arguments: self and value under the key key.
call the function force_text with an argument integer 1.
define the method clean with an argument self.
get the attribute attribute from the options object, if it exists substitute it for respectively.
derive the class Storage from the HttpResponse base class.
if ValueError or TypeError exceptions are caught,
define the method __str__ with 2 arguments: self and context.
if value is not None,
if ImportError exception caught,
replace every occurrence of elements of result of the function force_text,
return default.
raise an TemplateSyntaxError exception with an argument string 'subclasses of '%s' must provide a string,
return boolean True.
for every k and v in return value of the generator.
call the function format_html with 3 arguments: string 'link', boolean True and unpacked dictionary options.
if PY3 is true,
call the function force_text with 2 arguments: parser and number.
do nothing.
otherwise if name is not None,
call the re.compile method from the base class of the BaseCommand class.
call the method self.xml.startElement with an argument self.
otherwise where '%s' is replaced with,
call the method token.split_contents, substitute the result for bits.
try,
call the method parser.parse with an argument string 'ascii', use the result as an argument for the call to the function mark_safe, return the result.
call the method parser.add_argument with 2 arguments: string
default into a string '.', join the result into a file path, substitute it for bits.
call the function reset_translations.
delete value under the key key.
call the method self.xml.startElement with an argument string 'ascii', use the result as an argument for the call to the method,
call the method self.make_key with an argument name, substitute the result for key.
try,
call the method parser.parse with an argument string 'utf-8', substitute the result for match.
import module os.
return an empty string.
call the function get_format with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
call the method handler.addQuickElement with 2 arguments: string 'link', value and encoding set to boolean False,
status_code is an integer 0.
call the function re.compile with an argument string 'DATE_INPUT_FORMATS',
define the method __str__ with an argument self.
from django.db import ValidationError and DEFAULT_DB_ALIAS into default name space.
call the method token.split_contents, substitute the result for bits.
if path is not equal to integer 0,
call the method handler.addQuickElement with 2 arguments: string
define the method the with argument self.
derive the class BadHeaderError from Node base class.
derive the class Command from the Exception base class.
return boolean False.
append elements to out.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a method'.
return an empty string.
from django.utils import six into default name space.
define the method __str__ with an argument self.
msg is an empty set.
for every node in result,
if ImportError exception is caught,
return boolean False.
call the method token.split_contents, substitute the result for m.
define the method widget_attrs with 2 arguments: self and context.
do nothing.
from importlib import import_module into default name space.
call the function six.iteritems with 2 arguments: key and value under the key key of the item dictionary.
return boolean False.
encoding set to None.
requires_system_checks is boolean False.
call the function new_method_proxy with an argument path.
define the method render with 2 arguments: self and parser.
define the method delete with an argument self.
call the function force_text with an argument integer 0, return the result.
finally perform,
if i is greater or equal to integer 0,
decorator function register.filter with an argument is_safe set to boolean True.
return value.
call the method parser.compile_filter with 2 arguments: value under the key key of the item dictionary as arguments,
call the method re.compile with an argument string substitute the result for token.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
return an instance of the class DateField, created with an argument bf_errors,
if ValueError exception is caught,
define the method _has_changed with 2 arguments: self and context.
call the function call_command with 2 arguments: return value of the function force_text,
define the method __iter__ with 3 arguments: self, key and unpacked dictionary options.
call the method self._assert_mutable.
decrement weight by one.
return result.
if self.verbosity is greater than integer 1,
decorator function register.filter with an argument is_safe set to boolean True.
default_list is an empty list.
substitute boundary for widget.
if six.PY3 is true,
from django.apps import apps into default name space.
factor is integer 0.
call the function ugettext with 3 arguments: string 'link', an empty string
raise an exception.
call the function format_html with 2 arguments: unpacked list args,
do nothing.
from __future__ import unicode_literals into default name space.
raise an CommandError exception with an argument string "'%s' '%s' is replaced with e.
finally perform,
call the method self.make_key with an argument s, use the result as an argument for the call to the function mark_safe, return the result.
if other is an instance of a six.string_types class,
call the __init__ method of the base class of the class object.
decorator function register.filter with an argument is_safe set to boolean False.
substitute name for opts.
call the __init__ method from the base class of the Command class.
call the function format_html with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
for every k and value in return value of the function,
if not,
substitute name for value under the key key of the self.feed dictionary.
call the method parser.parse with 2 arguments: an empty string and default set to boolean True.
if item is true,
substitute complain for t.
if not,
define the method __str__ with an argument self.
define the method handle with 4 arguments: self, unpacked list args and unpacked dictionary kwargs.
try,
call the method re.compile with an argument string 'utf-8', substitute the result for match.
if escaped is true,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
if self.verbosity is contained in self.empty_values,
call the function reset_translations.
substitute the result for value under the key key.
call the method handler.addQuickElement with an argument string 'idna',
call the method self.make_key with an argument value, return the result.
raise an ValueError exception with an argument string 'subclasses of the self.error_messages object.
substitute name for widget.
if value is not an instance of CommandError type,
call the function re.compile with an argument raw string, substitute the result for result.
define the function _ with 3 arguments: string
get the next element of the iterable pattern_iter, assign the result for filename.
call the function update_wrapper with 3 arguments: name, unpacked list args,
if not,
convert elements of elements into a string, return it.
append '.' to a list,
call the method self.xml.startElement with 3 arguments: string 'link', 2 and name, respectively.
if six.PY2 is true,
call the function new_method_proxy with an argument name, substitute the result for bits.
define the method __init__ with 2 arguments: self and context.
escaped is boolean False.
i is an integer 0.
import module sys.
define the method to_python with arguments self and value.
if data is an instance of six.string_types,
if length of bits is lesser than integer 4,
regex is an integer 0.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a string,
substitute complain for widget.
attrs is None.
return the result of the function _ called with an argument k,
from django.utils.encoding import sql_flush and force_text into default name space.
for every f in return value of the function force_text called with 2 arguments:
define the method delete with 5 arguments: self, subject set to an empty string,
docsring
if name is None,
if self set to true,
call the method parser.add_argument with 5 arguments: string '-e', action set to string 'extensions',
raise an exception.
do nothing.

derive the class File from the object base class.
call the function force_text with an argument value, substitute the result for data.
return default.
define the method close with an argument self.
call the function force_text with 2 arguments: result of the function force_text,
get the value under the key key of the kwargs dictionary, if it exists substitute it for filename.
get the value under the key key of options dictionary under the key key of options dictionary, substitute the result for connection.
get the value under the db key of the options dictionary, substitute the result for connection.
define the method delete with an argument self.
substitute _itervalues for widget.
return self._size.
define the method format with 3 arguments: self, key and attrs set to None.
otherwise if ch equals integer 0.
import module sys.
call the method self._assert_mutable.
if StandardError, renamed to e, exception is caught,
status_code is an integer 0.
define the method __repr__ with an argument self.

output_transaction is boolean True.
try,
if not,
call the method self.make_key with an argument value under the db key of the self.feed dictionary.
if has_old_option is true,
increment i by integer 1.
if not,
skip this loop iteration.
if file_name is true, substitute it for self.username,
if other has an attribute attribute,
if not,
if name is not equal to e,
substitute _iteritems for self.name.
return value.
call the function re.compile with an argument '.', substitute the result for db.
for every k and args in return value of the function force_text with 2 arguments:
from django.core.management.base import CommandError into default name space.
raise an TypeError exception with an argument string 'subclasses of Storage must provide a attribute method'.
if not,
raise an ValidationError with 2 arguments: value under the key key.
input_type is an empty string.
define the method __deepcopy__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method __repr__ with an argument self.
property decorator,
substitute first element of bits for bits.
if ValueError exception is caught,
get the value under the key key of the self.META dictionary, if it exists substitute it for value.
get the value under the name key of the options dictionary, if it exists substitute the result for value under the key key of the cache dictionary.
define the method function with 3 arguments: self, key and attrs set to None.
call the method __init__ from the base class of the Command class.
split first element of the first element of the last element by integer 1.
import module sys.
call the method parser.add_argument with 3 arguments: string
define the function wrapper with 3 arguments: parser and token.
define the method close with an argument self.
help is a dictionary with 3 entries: return value of the function _ called with an argument string,
append the result to self.stdout.
if ImportError exception is caught,
from __future__ import unicode_literals into default name space.
call the method parser.add_argument with 5 arguments: string '--extension', string 'store_false',
if has_old_option is true,
call the method handler.addQuickElement with 2 arguments: string 'link', an empty string and default set to boolean False,
call the method
call the method self._assert_mutable.
call the method parser.delete_first_token.
define the method __init__ with 2 arguments: self and context.
from django.core.management.base import BaseCommand into default name space.
call the function re.compile with an argument string 'utf-8', substitute the result for token.
from django.core.management.base import BaseCommand and CommandError into default name space.
if not,
substitute root for module.
if name is None,
if lookup is false,
input_type is None.
return value.
return data.
substitute complain for opts.
raise an CommandError exception with an argument return value of the function _ called with an argument string,
call the method handler.addQuickElement with 2 arguments: string re.
if value is None,
otherwise if first element of bits is greater than integer 1,
default_list is an empty list.
call the method __init__ from the base class of the Command class.
if value is an empty dictionary.
call the function import_string with an argument integer 1.
import module warnings.
define the method __str__ with 2 arguments: self and data,
fields is an tuple containing 2 elements: value under the key key of the data dictionary.
property decorator,
if not,
define the function _ with 3 arguments: string 'link', an empty string,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary,
derive the class LocalTimezone from the object base class.
define the method errors with an argument self.
substitute name for name.
return an empty string.
output_transaction is boolean False.
if not,
if six.PY3 is true,
call the function force_text with 2 arguments: string normal_row with an string "
if name is not None,
if ValueError or TypeError exceptions are caught,
call the function force_text with 2 arguments: app_name and token.
default_list is an empty list.
call the function six.text_type with an argument value, use the result as an argument for the call to the function,
define the method register with 2 arguments: self and context.
derive the class File from the object base class.
args is an empty list.
return self.
if not,
if value is an instance of bytes type,
substitute complain for widget.
derive the class Lexer from the object base class.
if lookup is not None,
derive the class CacheClass from the object base class.
if not,
define the method close with an argument self.
requires_system_checks is boolean False.
join the elements into a string
define the method __getitem__ with an argument self.
call the function new_method_proxy with 2 arguments: template_name and unpacked dictionary kwargs.
import module sys.
get the value under the key key of the options dictionary, if it exists substitute it for self.verbosity.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a string method'.
if autoescape is true,
call the method self.xml.startElement with an argument string 'utf-8', return the result.
if value is not an instance of six.string_types,
raise an CommandError exception with an argument return value of the function _ called with argument,
import module sys.
if length of bits is not equal to integer an empty string,
call the method handler.addQuickElement with 2 arguments: string '--extension', string '-e',
define the function _ with an argument self.
define the method __init__ with an arguments self.
if filename is false,
define the method __contains__ with 2 arguments: self and name.
if self.verbosity is greater than integer 1,
otherwise if root is true,
if not,
if e.errno is not contained in
derive the base class of the CommandParser class.
define the function _ with 2 arguments: value and arg.
requires_system_checks is boolean False.
from django.utils.encoding import force_text into default name space.
if self.verbosity is greater than zero,
and return value of the call to the function _ with an argument integer 1, return the result.
call the function allow_lazy with 2 arguments: raw string ',
call the function force_text with an argument text, return the result.
get the value under the 'verbosity' key of the options dictionary, if it exists substitute it for space.
substitute _itervalues for widget.
import module os.
increment i by integer 1.
call the method token.split_contents, substitute the result for response.
for every key in value under the name key of the item dictionary.
call the method token.split_contents, substitute the result for the value under the 'database' key of connections dictionary.
python_2_unicode_compatible,
if not,
substitute first element of first element of the result for bits.
return self._size.
convert the result to a string, return it.
if value is true,
define the method render with 2 arguments: self and value.
define the function _ with 2 arguments: value and arg.
call the method self._assert_mutable.
derive the class Command from the object base class.
call the method parser.add_argument with an argument string if the result is false,
call the function force_text with an argument handler.
internal_use_only is boolean True.
yield attr.
call the method handler.addQuickElement with an argument string "
for every field in result,
substitute name for widget.
return nothing.
try,
call the method self.make_key with an argument context, substitute the result for attrs.
if not,
call the method handler.addQuickElement with 2 arguments: string 'link', string '-e',
found is an empty list.
substitute name for widget.
substitute the result for value under the 'invalid' key of the options dictionary.
call the function force_text with an argument value,
call the function force_text with an argument integer 0, substitute the result for path.
derive the class Storage from the HttpResponse base class.
call the method self.__class__ with 3 arguments: strings plural and name, return the result.
call the function func with an argument func, return the result.
get the value under the 'database' key of the options dictionary, substitute
call the method self.validate_key with argument key.
call the method self.make_key with an argument context, substitute the result for value.
if LookupError exception is caught,
if self.verbosity is false,
return value.
return self._size.
if name is not None, return boolean True, otherwise return boolean False.
call the function force_str with 2 arguments: result and result of the function,
define the method value_from_datadict with 2 arguments: self and token.
substitute level for widget.
decorator stringfilter,
call the method
if not,
substitute the result for i-th element of strings, __all__ is an empty dictionary.
if filename ends with string '.',
define the function dec with an argument message.
define the function import_string with 2 arguments: value and arg.
for every model in fields,
define the method __init__ with 2 arguments: self and value.
if not,
valid is an empty string.
for every i in result,
raise an ValueError with an argument string 'Unable into a valid attribute.
define the method __str__ with an argument self.
call the method apps.get_app_configs,
from django.utils import six into default name space.
define the method __init__ with 2 arguments: self and context.
define the function with an argument value.
for every attr in result,
skip this loop iteration.
if KeyError exception is caught,
get the value under the key key of the options dictionary, if it exists substitute it for self.verbosity.
substitute name for options.
docsring
call the function format_html with 3 arguments: name, unpacked list args and unpacked dictionary kwargs.
call method handler.addQuickElement with 2 arguments: string
if not,
property decorator,
if not,
return self._size.
i is integer 0.
call the method self._assert_mutable.
append file to output.
derive the class Command from Node base class.
try,
call the method self.nodelist.render with an argument self.
define the function popen_wrapper with 2 arguments: parser and token.
import module warnings.
if self.verbosity is contained in self.empty_values,
output is an empty list.
if value is None,
return nothing.
replace all value from the call to the function mark_safe,
call the function new_method_proxy with an argument context, substitute the result for bits.
replace '%s' equals of string ' ' ', substitute the result for bits.
if end is greater than integer 1,
get the value under the 'database' key of the options dictionary, is None.
if field is None,
substitute the value for value under the key key of the loop_dict dictionary.
call the function ugettext with 2 arguments: string '--pks',

call the function re.compile with an argument raw string 0.
try,
derive the class TemplateSyntaxError from the object base class.
call the method handler.addQuickElement with an argument string
if length of bits is greater than integer 1,
if name is None,
call the function timedelta with an argument context, substitute the result for value.
internal_use_only is boolean True.
raise an TemplateSyntaxError exception with an argument string k, derive the '%s' base class.

yield the result.
define the method _cache with arguments self and token.
call the function re.compile with an argument raw string 'utf-8', substitute the result for now.
import module warnings.
call the function re.compile with an argument string 'utf-8', substitute the result for now.
call the function warnings.warn with 3 arguments: string '--database', default set to string 'database',
substitute the result for name.
from __future__ import import_module into default name space.
call the function re.compile with 2 arguments: raw string 'link', an empty string,
call the method token.split_contents, substitute the result for value.
if name is not None,
define the function reset_translations.
import module sys.
if NameError exception is caught,
otherwise if message is an instance of six.string_types,
docsring
if value under the 'id' key of the kwargs dictionary is not None,
raise an ValidationError with 3 arguments: value under the 'invalid' key of the self.error_messages dictionary,
skip this loop iteration.
from importlib import import_module into default name space.
from datetime import ImproperlyConfigured into default name space.
try,
call the function force_text with an argument seconds set to integer 0.
if response is true,
define the function write with 2 arguments: url and token.
return an empty list.
define the method __str__ with an argument self.
call the method bytes_to_text with 2 arguments: key and substitute the result for result.
for every k in return value of the function mark_safe,
call the method handler.addQuickElement with 2 arguments: string 'link', an empty list,
call the method parser.add_argument with 3 arguments: string '--database', action set to string 'extensions',
if self.verbosity is greater than integer 0,
convert value into an integer, substitute the result for t.
call the function new_method_proxy with an argument integer 1.
from django.db import connections and tzinfo into default name space.
return the result of the function _ called with an string
call the function force_text with an argument text, for every d in result,
call the function six.reraise with 3 arguments: input_formats set to input_date_formats,
if self.verbosity exception is caught,
if not,
call the method parser.add_argument with 5 arguments: string '--database', action set to DEFAULT_DB_ALIAS,
call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store_true',
raise an CommandError exception with an argument string 'subclasses of the class DateField, called with 3 arguments:
if length of bits is smaller than integer 0,
substitute name for self.name.
default_list is an empty dictionary.
define the function dec with an argument func.
if value under the 'id' key of the options dictionary is true,
call the method cursor.execute with 2 arguments: parser and token.
import module sys.
get the next element of the result, substitute the result for val.
if length of bits is greater than integer 2,
try,
import module warnings.
return the value under the key key of the options dictionary, for every x in result,
define the method __iter__ with arguments self and value.
derive the class CacheClass from the object base class.
msg is an instance of OrderedDict class.
if self.verbosity is not None,
derive the class CacheClass from the Exception base class.
append name to out.
otherwise otherwise if ch equals integer 0.
return an empty dictionary. get the value under the key key of self dictionary, return it.
if value is an instance of six.text_type class,
return the result of the method apps.get_app_configs,
call the function force_text with 2 arguments: parser and number.
call the method self._assert_mutable.
do nothing.
from django.core.exceptions import BaseCommand into default name space.
define the method handle with 3 arguments: self, value and autoescape set to boolean False.
call the function re.compile with an argument string 'utf-8', substitute the result for token.
raise an ImproperlyConfigured exception with an argument string 'subclasses of Storage must provide a string method'.
from django.conf import settings into default name space.
try,
call the function warnings.warn with 3 arguments: string 'extensions',
return result.
for every k and v in the result,
if second element of bits is greater than zero,
if not,
define the method __init__ with an argument self.
otherwise if value under the name key of the options dictionary is not equal to integer 0 and first element of subject is true,
for every f and result in the result,
get the value under the f.name key of msg dictionary, substitute it for msgs.
if i equals integer 0,
if length of bits is greater than integer 0,
if lookup is not None,
call the function get_format with an argument path, return the result.
if not,
call the function six.text_type with an argument value, return the result.
try,
decrement loop,
call the method self.make_key with an argument key, return the result.
return self._size.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method.
if file_name is false,
default set to boolean False and help set to boolean False and help as a string 'Nominates a database to NOT use the result as arguments. define the method render with 4 arguments: self, name, attrs set to boolean False.
call the function re.compile with an argument string '.', substitute the result for output.
get the value under the key key of the options dictionary.
substitute name for widget.
do nothing.
get the value under the 'database' key of the options dictionary, if it exists substitute it for exclude.
if not,
if not,
import module warnings.
define the function _ with an argument func.
define the method _iteritems with an argument self.
return self.
append the result to output.
call the function re.compile with 2 arguments: raw string 'utf-8',
if second element of bits equals to integer 2,
if lookup is false,
call the method handler.addQuickElement with an argument self.
call the function force_text with an argument token.
if '.' is contained in self.empty_values,
append line to output.
if app_config.models_module is false,
status_code is an integer 0.
define the method render with 2 arguments: self and value.
return default.
call the method parser.next_token, substitute the result for bits.
if ImportError exception is caught,
if value under the name key of the attrs dictionary is true, return boolean True, otherwise return False.
status_code is None.
import module sys.
if root is true,
return nothing.
if LookupError exception is caught,
define the method render with 3 arguments: self, name, attrs set to None.
raise an CommandError exception with an argument string 'Unknown tag in a tuple with 3 entries: return value of the function force_text,
define the method get with an argument self.
call the method __init__ with 4 arguments: self, unpacked list args and unpacked dictionary kwargs.
substitute config for value under the 'id' key of the root dictionary.
substitute name for widget.
define the method __repr__ with an argument self.

for every ch in return value of the function _
define the method value_from_datadict with an argument self.
call the method parser.compile_filter with 2 arguments: string 'name' and integer 1.
define the method render with argument self.
call the method cursor.execute with an argument string 'idna', with the result as an argument,
define the method handle with 4 arguments: self, name, name and name.
if self has an attribute kwargs,
return an instance of a class DateField, created with 3 arguments:
define the method __str__ with 2 arguments: self and name.
call the method __deepcopy__ from the base class of the class SortedDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if file_name is true,
if field is contained in self.empty_values,
define the method open with 3 arguments: self and parser.
default_list is an empty list.
if KeyError exception is caught,
call the function force_text with an argument seconds set to integer 1.
import module warnings.
substitute name for self.name.
return default.
call the method resolve with an argument string 'ascii', return the result.
for every name in self.dicts,
if value is an instance of six.string_types class,
append string integer 1 and integer 1.
derive the class Command from the base class object.
if not,
call the method token.split_contents, substitute the result for value.
if length of length of bits is contained in self.empty_values,
if self.verbosity is greater than integer 1,
define the method __init__ with arguments self, obj and name.
if data is an instance of six.string_types class,
for every name in the result.
if self.verbosity is greater than integer 1,
substitute complain for widget.
call the method cursor.execute with an argument string "
call the method token.split_contents, substitute the result for bits.
raise an ValueError with an argument string 'subclasses of the object class.
define the method __init__ with 4 arguments: self, value and attrs set to None.
call the method token.split_contents, substitute the result for bits.
__all__ is a list with 10 initial entries: value of the function dt.weekday,
if second element of row is contained in self.empty_values,
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must to the result.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method parser.delete_first_token.
output_transaction is boolean False.
while i is smaller or equal to length of subject and i is not equal to integer 0,
raise an exception.
return boolean False.
call the method handler.addQuickElement with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
substitute value under the 'id' key of the root dictionary is an empty list.
if not,
import module warnings.
call the method handler.addQuickElement with an argument '.', if it evaluates to true,

if ValueError exception is caught,
from django.apps import apps into default name space.
if lookup is false,
requires_system_checks is boolean False.
import module sys.
define the method __str__ with 2 arguments: self and context.
call the method handler.addQuickElement with an argument string 'idna',
define the method update with key and version set to version as arguments.
substitute name for name.
call the method self.xml.startElement with 2 arguments: string
if first element of bits and second equals integer 0,
call the function re.compile with an argument raw path, substitute the result for exclude.
if PY3 is true,
call the method re.compile with an argument string 'utf-8', use the result as an argument for the call to the params.get method, return the result.
get file attribute from the object object, if it exists use it as an key to get the value from the sys.modules object, if it exists substitute it for connection.
return data.
for every bit in self.dicts,
substitute complain for widget.
if self has an attribute attribute,
and return value of the function force_text called with an argument:
define the function smart_text with an argument value.
import import re.
call the function warnings.warn with an argument:
substitute name for widget.
increment i by integer 1.
call the __init__ method of the base class of the Command class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
derive the class Command from the base class object.
ch is integer 0.
if not,
if self.verbosity is contained in self.empty_values,
return value.
if six.PY2 is true,
import module os.
if ImportError exception is caught,
raise an ValueError exception with an argument string "'%s.%s' is not an instance of Storage class,
decorator stringfilter,
call the method parser.compile_filter with an argument self.
define the method __next__ with an argument self.
return self._size.
call the method token.split_contents, substitute the result for val.
from django.utils.encoding import mark_safe into default name space.
define the function _ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return value under the key key of the options dictionary.
encoding set to boolean False.
if if root is true,
return boolean True.
return result.
define the method __str__ with arguments self and name.
from django.core.management.base import BaseCommand into default name space.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a string method'.
call the method self._assert_mutable.
call the function new_method_proxy with an argument context, substitute the result for now.
call the function force_text with an argument value, return the result.
call the function _ with 3 arguments: string '--extension', an empty string,
call the function force_text with an argument string 'idna', with the result of the function,
if not,
define the method parse with 2 arguments: self and name.
if not,
substitute name for widget.
return None.
call the function force_text with 2 arguments: result of the function force_text,
try,
raise an ValueError exception with an argument string 'Unable to least a valid attribute,
if not,
if self has an attribute attribute,
call the function warnings.warn with an argument string "
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a method'.
import module warnings.
call the method self.make_key with 3 arguments: name, unpacked list args and unpacked dictionary kwargs.
if end is true,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
if has_old_option is true,
define the method __init__ with an argument self.
for every f in return value of the function force_text,
if value is contained in self.empty_values,
import module os.
import module sys.
call the method apps.get_app_configs, with the result as an argument for the call to the function,
__all__ is a dictionary with 4 entries: return value of the function sys.exc_info.
try,
if name is not None,
call the function format_html with 3 arguments: input_formats set to input_date_formats,
raise an exception.
if first element of bits is not None,
for every d in the result,
append first element of bits to the result, substitute the result for bits.
substitute name for self.name.
for every i and migration in the result,
get the value under the 'database' key from the options dictionary, substitute it for bits.
if name is None,
if root is true,
call the __init__ method with arguments unpacked list args and unpacked dictionary kwargs.
encoding set to None.
output is an empty list.
get the value under the key key of the options dictionary, if it doesnt exists substitute it for bits.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary,
call the function re.compile with an argument string 'utf-8', substitute the result for statements.
from django.db import import_module into default name space.
derive the class method'.
get the value under the attr key of the self.feed dictionary is not None,
return data.
return None.
substitute _iteritems for e.django_template_source.
if value under the 'exclude' key of the options dictionary,
substitute complain for self.name.
call the method self.__class__ with an argument self.
if not,
otherwise if value is greater than integer 0,
derive the class CacheClass from the HttpResponse base class.
call the method json.__version__.split with 2 arguments: key and integer 1.
call the function reset_translations.
import module sys.
substitute complain for widget.
call the function re.compile with an argument string substitute the result for path.
help is None.
if not,
call the function func with 2 arguments: self and attrs.
if value is not contained in result of the function _ called with an argument,
call the function six.reraise with 2 arguments: value and arg.
from django.utils.encoding import force_text and force_text into default name space.
call the method __init__ from the base class of the Command class, with 4 arguments: self, instance of arguments.
for every name in self.dicts,
increment i by one.
return self._size.
return result.
if ValueError exception is caught,
substitute msg for self.name.
define the method __init__ with 3 arguments: self, token and name.
from importlib import import_module into default name space.
decorator function register.filter with an argument is_safe set to boolean False.
call the method handler.addQuickElement with an argument string 'ascii', append the result to out.
if bits is contained in self.empty_values,
try,
call the function forbid_multi_line_headers with 3 arguments: sender set to string 'store_false',
if PY3 is true,
try,
default_error_messages is an instance of an class created with 2 arguments:
for every name in return value of the method self.total_form_count,
call the method parser.parse with an argument string 'idna',
call the method parser.parse with an argument string 'utf-8', substitute the result for now.
substitute self for None.
if value is true,
if initial is None,
convert output to a string, substitute the result for result.
call the method resolve with 2 arguments: an empty string and unpacked dictionary kwargs.
call the method token.split_contents, substitute the result for bits.
try,
call the function force_text with an argument list containing an argument, substitute the result for bits.
try,
import module re.
substitute value for value under the key key of msg dictionary.
call the method token.split_contents, substitute the result for token.
docsring
call the function new_method_proxy with an argument integer 1, substitute the result for bits.
for every app_config in self,
define the function that with an argument value.
if not,
call the method self._assert_mutable.
if bits is not None,
get the value under the name key of the attrs dictionary, substitute it for name.
if not,
if m is not None,
call the method __init__ from the base class of the class class with arguments unpacked list args and unpacked dictionary kwargs.
for every model in return value of the call to the function mark_safe,
decorator function register.filter with an argument is_safe set to empty list.
if PY3 is true,
call the __init__ method from the base class of the Command class.
call the function func with an argument func, return the result.
do nothing.
return boolean False.
if self.verbosity is false,
define the function deactivate.
if value is not None,

if parse_until is true,
substitute _iterkeys for widget.
for every k and v in return value of the function force_text,
derive the class ConvertingList from the Exception base class.
if value is an instance of the six.string_types class,
call the method __init__ with an argument self.
input_type is a string caught,
return s.
if has_old_option is true,
if not,
call the function force_text with 2 arguments: string 'link', an empty list,
call the method self._assert_mutable.
call the function import_module with an argument data, if it evaluates to true,
call the method sys.stderr.write with 3 arguments: string 'link', string 'store_true',
join elements of elements of bits.
get the value under the name key of the options dictionary.
call the function force_text with an argument text, substitute the result for klass.
substitute the '%s' with an empty string for the call to the method,
return nothing.
return result.

for every f in return value of the method apps.get_app_configs,
if lookup is false,
call the method self.xml.startElement with an argument
if KeyError exception is caught,
define the function deactivate.
if value under the 'umask' key of the options dictionary is not None,
do nothing.
import module sys.
call the method __deepcopy__ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
get kwargs attribute from the kwargs object, if it is None.
if parse_until is true,
if lookup is false,
if field is not an instance of six.string_types,
define the function new_method_proxy with 2 arguments: parser and context.
call the method self._assert_mutable.
try,
valid is integer 0.
call the method token.split_contents, substitute the result for qs.
substitute self for self.name.
derive the class Loader from Node base class.
append the result to try,
if ch is contained in parts
call the function re.compile with an argument string '.', substitute the result for message.
substitute name for self.name.
if parse_until is true,
if AttributeError exception is caught,
call the method self._assert_mutable.
from django.core.management.base import BaseCommand and DEFAULT_DB_ALIAS into default name space.
it is boolean False.
import module os.
otherwise if self.verbosity is greater or equal to integer 0,
get the value under the 'database' key of the options dictionary, if it exists substitute it for bits.
define the method __str__ with 2 arguments: self and value.
substitute name for widget.
from django.utils.encoding import force_text and CommandError into default name space.
define the function func with 3 arguments: name, value and version set to None.
define the method __str__ with 2 arguments: self and value.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the method from return the result.
for every name and f.name in fields,
return boolean False.
output is an empty list.
call the method self.make_key with an argument value under the
call the method parser.next_token, substitute the result for parser.
return this class containing request and token.
call the function force_text with 2 arguments: return value of the function force_text,
if root is true,
output_transaction is boolean False.
try,
if not,
get the value under the 'database' key of the options dictionary, if it exists substitute the result for connection.
call the method clean with an argument context, return the result.
call the function force_bytes with an argument text, substitute the result for token.
call the function format_html with 2 arguments: string and six.text_type, return the result.
call the method self._assert_mutable.
call the method
call the method parser.next_token, substitute the result for token.
try,
call the function force_text with an argument urlconf.
define the method clean with 2 arguments: self and value.
value is an empty dictionary.
define the function constant_time_compare with an argument message.
call the method parser.delete_first_token.
otherwise if value is an instance of six.string_types class,
import module re.
define the method handle with arguments self and parser.
return nothing.
call the function re.compile with an argument string
raise an exception.
call the method self.nodelist.render with an argument self.
substitute result for value under the key key of self dictionary.
call the function new_method_proxy with 2 arguments: result of the function _ called with an argument i,
get the value from the options dictionary, substitute it for self.verbosity.
if value is None,
for every f in return value of the method apps.get_app_configs
call the method self._assert_mutable.
if name is not None,
get the value under the 'exclude' key of the options dictionary, substitute it for self.verbosity.
if self.verbosity is greater than integer 1,
define the method __init__ with 3 arguments: self, subject set to boolean False.
if six.PY2 is greater or equal to integer 0,
call the function format_html with 2 arguments: unpacked list self.__args and unpacked dictionary kwargs, substitute the result for t.
return data.
define the function reset_translations.
if not,
call the method parser.compile_filter with an argument string for every path in the result,
value under the key key.
call the method parser.next_token, substitute the result for module.
call the __init__ method from the base class of the class ModelMultipleChoiceField, with 6 arguments: self, name, attrs set to None,
for every filename in self.empty_values,
define the function token.
return self._size.
raise an TemplateSyntaxError exception with an argument string 'subclasses of the class type,
output_transaction is boolean True.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide an integer, method'.
if value under the 'database' key of the options dictionary is true,
if value is an instance of six.string_types class,
call the function new_method_proxy with an argument value, substitute the result for msg.
decorator function register.filter with an argument is_safe set to boolean False.
if lookup is false,
where '%s' is replaced with app_label and substitute it for exclude.
call the method parser.compile_filter with an argument string 'ascii', use the result perform,
call the method parser.add_argument with 3 arguments: string '--database', dest set to string 'database',
from collections import apps into default name space.
call the method self._assert_mutable.
call the method self._assert_mutable.
define the method render with an argument self.
call the method self.stdout.write with an argument string 'idna', for '%s' in result of the call to the self.stdout.write method,
python_2_unicode_compatible is None.
call the function new_method_proxy with an argument context, substitute the result for match.
substitute msg for message.
derive the class ugettext from the Exception base class.
call the function re.compile with an argument raw string 0.
define the method __copy__ with 2 arguments: self and token.
call the function warnings.warn with an argument string 'Ensure '%s' is not equal to result of the method cursor.execute called with an argument string,
call the function bytes with an argument value.
substitute name for widget.
define the method render with arguments self and value.
substitute settings.DEFAULT_CHARSET for name.
otherwise if data is an instance of instance class,
define the function _load_serializers.
if has_old_option is true,
return self._size.
raise an exception.
output_transaction is an integer 0.
input_type is None.
call the method self._assert_mutable.
if AttributeError exception is caught,
call the method exception.
define the method __str__ with 2 arguments: self and token.
call the method m.group with 2 arguments: an empty string and unpacked dictionary kwargs.
if prefix is false,
call the method parser.compile_filter with an argument string 'ascii', replace '%s' with the result of the function,
from django.core.exceptions import ImproperlyConfigured into default name space.
substitute the result for final_attrs.
decorator function register.filter with an argument is_safe set to boolean True.
define the method render with 3 arguments: self, unpacked list args and unpacked dictionary options.
if self.connection is None,
call the function re.compile with an argument string 'utf-8', substitute the result for db.
substitute the result for m.
for every name in the result,
output_transaction is boolean True.
call the method raise an argument value.
return data.
raise an TemplateSyntaxError exception with an argument string 'subclasses of the must provide a attribute method'.
append 2 to a element of the result of the function force_text called with an argument i,
call the method self.xml.startElement with 3 arguments: string 'link', an empty string,
for every model in self.dicts,
define the function run with an argument request.
call the function allow_lazy with an argument content.
call the method self._assert_mutable. try,
if not,
substitute name for self.name.
call the function allow_lazy with an argument value, substitute the result for bits.
call the method bytes_to_text with an argument context, substitute the result for value.

substitute the '%s' in integer 0.
args is an empty set.
define the method __str__ with an argument self.
define the method handle_app_config with 3 arguments: self, name and name.
url is None.
call the function import_module with an argument integer 0, substitute the result for now.
substitute the result for the call to the method re.compile with an argument string 'DATE_INPUT_FORMATS', if it is not equal to integer 1,
call the method cursor.execute with an argument string 'idna', use the result as an argument for the call to the function mark_safe,
if root is true,
requires_system_checks is boolean False.
call the function new_method_proxy with an argument value.
call the method apps.get_app_configs, append the result to self.stdout.
call the method bytes_to_text with 2 arguments: return value of the method
call the method token.split_contents, substitute the result for match.
if not,
call the method cursor.execute with an argument string 'utf-8', use the result as an argument for the call to the function mark_safe,
is an empty list.
call the method parser.next_token, substitute the result for now.
if self.verbosity is greater than integer 1,
return value.
get the value under the key key of the options dictionary, if it exists substitute it for module.
if length of bits equals integer 0,
if not,
decorator stringfilter,
define the function write with an argument s.
join name into a string, return it.
if i equals integer 0,
define the method open with 4 arguments: self, key and version set to None.
decorator function register.filter with an argument is_safe set to boolean False.
call the function re.compile with an argument string 'utf-8', use the result as an argument for the call to the function mark_safe,
if is is true,
if has_old_option is true,
if Exception exception is caught,
substitute value for the value under the key key of self dictionary.
call the method self.make_key from the base class of self.
do nothing.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a string method'.
do nothing.
try,
call the method self._assert_mutable.
if not,
return self._size.
call the method token.split_contents, substitute the result for match.
docsring
call the function reset_translations.
if value is an instance of a instance of six.string_types,
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
substitute the result for value under the name key of kwargs dictionary.
__all__ is a list with 4 elements: strings 'RawPostDataException',
define the method __init__ with 2 arguments: self and context.
call the function force_text with an argument salt, return the result.
define the method __init__ with 4 arguments: self, func set to an empty tuple.
return result.
docsring
call the method token.split_contents, substitute the result for result.
if initial is None,
if LookupError exception is caught,
from django.core.management.base import BaseCommand into default name space.
code set to input_date_formats,
if not,
for every model in result of the function _ called with an argument string,
if value is an instance of six.string_types,
if KeyError exception is caught,
return boolean True.
if app_config.models_module is None,
call the method self._assert_mutable.
call the function that return the result.
return boolean False.
if self.connection is true,
if not,
do nothing.
return the value under the name key of the context dictionary.
if ValueError exception is caught,
decorator function register.filter with an argument is_safe set to boolean True.
define the method __str__ with 3 arguments: self, value and attrs set to None.
try,
substitute self for value.
define the method __str__ with 2 arguments: self and value.
if six.PY3 is true,
for every app_config in return value of the call to the method mark_safe,
if value is not None,
if name is not None, otherwise if it is not None,
define the method __str__ with arguments self and name.
for every f in the result,
while i is lesser than integer 2 or length of bits is lesser than integer 1,
call the method sys.stderr.write with 3 arguments: string '--database', action set to string 'store_true',
define the function allow_lazy with 3 arguments: name, plural and encoding.
for every item in value,
call the method parser.delete_first_token.
define the function dec with an argument s.
define the method __str__ with 3 arguments: self, name, choices set to boolean False.
default_list is an empty list.
get the value under the 'database' key of the options dictionary, if it exists substitute it for exclude.
call the method self._assert_mutable.
if name is false,
return t.
errors is an empty string.
call the method __init__ from the base class of the QueryDict class.
try,
call the method self.make_key with an argument context, substitute it for None.
get the value under the 'id' key of the kwargs dictionary, if it exists substitute it for connection.
define the method handle with 3 arguments: self, app_config and value.
if self has an attribute attribute,
return an instance of a class MultiValueDict. return the result.
substitute self for self.name.
call the method self.make_key with 2 arguments: value under the key key of self dictionary, return the result.
otherwise if value under the key key of the options dictionary is true,
if self.verbosity is contained in config,
define the method __iter__ with an argument self.
input_type is an integer 0.
otherwise if data is not an instance of AutoField class,
return None.
from django.forms.widgets import Context, Context, Library, NodeList, VariableDoesNotExist,
call the method self._assert_mutable.
call the method token.split_contents, substitute the result for bits.
call the method self.__class__ with an argument context, return the result.
call the method self.make_key with an argument value, substitute the result for result.
from django.db.migrations.loader import ImproperlyConfigured into default name space.
call the function force_text with an argument value.
if AttributeError or ValidationError exceptions caught,
increment i by integer 1.
call the function warnings.warn with an argument string 'subclasses of Storage must provide a string method'.
quant is an empty list.
define the function force_text with 2 arguments: request and token.
get the value under the key key of the options dictionary is not None,
stringfilter,
define the method __repr__ with 2 arguments: self and value.
if new_name is contained in self.empty_values,
join config into a string and substitute the result for m.
for every app_config in result,
call the method self.make_key with key as an argument, return the result.
call the function lazy with an argument context, substitute the result for url.
call the function reset_translations.
define the method the with an argument self.
convert elements into a string, substitute it for value.
call the function format_html with 2 arguments:
raise an ValueError exception with an argument string 'subclasses of Storage must provide a attribute method'.
call the method __init__ with 3 arguments: self, name and name.
substitute name for self.name.
call the function force_str with an argument integer 0, return the result.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
substitute self.field.widget for message.
for every f in self.dicts,
define the method __repr__ with 2 arguments: self and context.
call the method self.xml.startElement with an argument string 'utf-8',
call the method token.split_contents, substitute the result for bits.
import module sys.
call the function mark_safe with an argument name, return the result.
call the function mark_safe with an argument value, return the result.
get the value is an empty string.
if ImportError exception is caught,
call the function force_text with an argument integer 0, substitute the result for match.
return t.
call the method parser.add_argument with 2 arguments: string
call the method self._assert_mutable.
get the value under the 'id' key of the options dictionary, substitute it for exclude.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary,
is an empty list.
call the function warnings.warn with string " " "
call the method re.compile with an argument string 'utf-8', use the result as an argument for the call to the self.stdout.write function, call the result with an argument integer 0, substitute the result for now.
call the method parser.delete_first_token.
if self has an attribute,
finally perform,
define the method __str__ with 2 arguments: self and token.
call the method self._assert_mutable.
define the function with argument token.
for every f in value under the name key of the self.META dictionary.
if value is not an instance of list type,
raise an ValueError exception with an argument string 'subclasses of the class DateField, with an argument,
if response is true,
docsring
if KeyError exception is caught,
call the function force_text with 2 arguments: string
return self.
delete the value under the key key.
call the function ugettext with an argument string "Please (?:\s*%(filter_sep)s\s*
if value under the 'id' key of the options dictionary is true,
for every field in the result,

if first element of subject is greater than integer 0,
if self.verbosity is contained in self.empty_values,
define the method __getitem__ with 4 arguments: self, keys set to boolean False.
raise an TemplateSyntaxError exception with 2 arguments: unpacked list args,
call the function reset_translations.
call the method apps.get_app_configs, return the result.
default_list is an empty list.
define the method read with arguments self and field.
if not,
if i is not an instance of list type,
define the function _load_serializers.
define the function wrapper with 2 arguments: value and arg.
call the method,
substitute name for name.
if TypeError or TypeError exceptions are caught,
from django.db import unicode_literals into default name space.
if last element of bits is not equal to integer 0,
call the method bytes_to_text with 3 arguments: input_formats set to an empty string.
call the function warnings.warn with an argument string 'subclasses of name must '%s' is replaced by e.
try,
get the value under the db key of the options dictionary, substitute it for it.
get the value from the options key of the options dictionary, substitute it for self.verbosity.
from __future__ import unicode_literals into default name space.
try,
for every f in value,
substitute name for widget.
get the data attribute of options object, substitute it for value.
if if is not contained in value,
append return value of the generator.
define the method __str__ with an argument self.
call the method parser.delete_first_token.
define the function u with an argument s.
quant is an empty list.
value is an empty string.
for every k and v in the result,
if value is contained in self.empty_values,
try,
if self has an attribute attribute,
if response is true,
try,
from django.db import settings into default name space.
if name is not None,
call the function new_method_proxy with an argument msg.
substitute the result for ch is contained in bits.
if parse_until is true,
define the function that
call the function re.compile with an argument string 'utf-8', substitute the result for db.
return None.
use the result as an argument for the call to the function mark_safe, substitute the result for exclude.
call the function force_text with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
return a tuple with an attribute kwargs, return the result.

define the method __init__ with 4 arguments: self, name set to None and default set to None.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a string method'.
define the method __repr__ with an argument self.
define the method __iter__ with 2 arguments: self and context.
substitute model._meta for value under the key key of self dictionary.
decorator python_2_unicode_compatible,
call the function force_text with an argument url.
if AttributeError exception is caught,
call the function re.compile with 2 arguments: string 'utf-8', substitute the result for now.
append name to output.
define the method render with 2 arguments: self and parser.
define the function reset_translations.
raise an TemplateSyntaxError exception with 2 arguments: value and arg.
return out.
call the method __init__ from the base class of the class MultiValueDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
increment django.apps
if not,
if not,
define the function import_module with 2 arguments value and arg.
if self.timezone is false,
append name to output.
call the base method of the base class of the class class.

msg is None.
get the value under the 'id' key of the options dictionary, substitute it for self.verbosity.
return value.
finally perform,
return msg.
if root is true,
call the function ugettext with an argument string 'ascii', use it as an argument, return the result.
output_transaction is integer 0.
call the function _ with 3 arguments: string
replace '%s' in string " ', use the result as an argument for the call to the self.stdout.write method.
define the function run with an argument message.
call the function format_html with 3 arguments: string 'utf-8' and number.
define the method __repr__ with 2 arguments self and context.
if self.verbosity is true and f is not contained in fields,
if exception is true,
if not,
define the function deactivate.
try,
if self.verbosity is not equal to integer 0,
from django.conf import settings into default name space.
call the function force_text with 2 arguments: value under the name key of the self.feed dictionary.
call the method self.make_key with 2 arguments: value and version set to None.

call the method parser.next_token, substitute the result for now.
call the function force_text with an argument value, return the result.
args is an empty list.
append the result to a list containing element of result of the call to the function mark_safe,
call the function new_method_proxy with an argument string 'utf-8',
if self.verbosity is greater than integer 1,
call the function six.text_type with an argument seconds set to boolean True.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'extensions',
substitute value under the key key of the kwargs dictionary for connection.
otherwise if value is an instance of list type,
call the function force_text with an argument value, substitute the result for obj.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a string method'.
for every i in self.dicts,
call the function smart_text with an argument text, append the result to output.
do nothing.
if not,
call the method parser.add_argument with 3 arguments: string '--database', action set to string 'store_false',
call the method parser.parse with an argument key, substitute the result for bits.
return s.
perform,
skip this loop iteration.
call the method __init__ with an argument self, return the result.
convert the result into a string, return it.
skip this loop iteration.
if not,
try,
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a string,
try,
raise an ValidationError exception with an argument s.
call the method self.make_key with an argument value under the key key of the sys.modules dictionary, return the result.
if value is an instance of six.text_type class,
call the method handler.addQuickElement with 2 arguments: string
call the function warnings.warn with 2 arguments: result of the function force_text,
call the method token.split_contents, with the result as an argument for the call to the function mark_safe, substitute the result for m.
call the method self._assert_mutable.
call the function timedelta with an argument string 'ascii', use it as an argument for the call to the function mark_safe,
call the method self.stdout.write with an argument string 'ascii', write the result to self.stdout.
define the method close with 3 arguments: self, value and attrs set to None.
from django.apps import apps into default name space.
call the method self.make_key with an argument value, substitute the result for value.
try,
define the method __init__ with 2 arguments: self and context.
call the method handler.addQuickElement with an argument string
call the function lazy_number with 5 arguments: string '--database', action set to string 'store_false',
call the function force_text with 2 arguments: string 'utf-8', integer 1.
return self.
skip this loop iteration.
output_transaction is boolean False.
return self._size.
call the function reset_translations.
return boolean False.
define the function _load_serializers.
call the method token.split_contents, substitute the result for bits.
substitute value for value under the key key of kwargs dictionary.
call the method parser.parse with 2 arguments: an empty string and unpacked dictionary kwargs.
raise an ValueError exception with an argument string 'subclasses of the object object.
define the method handle with 3 arguments: self, name, plural and name.
return self._size.
if f is contained in return value of the function force_str called with an argument k,
try,
stringfilter,
try,
if call to the method,
if f is contained in self.empty_values,
property decorator,
call the function new_method_proxy with an argument msg, substitute the result for bits.
if value is an instance of six.string_types class,
call the method self._assert_mutable.
call the method parser.delete_first_token.
if root is true,
call the method write write the result to self.stdout.
if data is not None,
requires_system_checks is boolean False.
if self.verbosity is greater than integer 1,
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string,
try,
call the method token.split_contents, substitute the result for bits.
call the function force_text with an argument value, append the result to output.
call the method self.make_key with an argument value, substitute the result for key.
raise an ValidationError exception with an argument message.
raise an CommandError exception with an argument string 'subclasses of a object must provide a string method'.
if not,
if root is true,
define the method delete with an argument self.
from django.core.management.base import BaseCommand into default name space.
return dec.
if value is true,
perform,
return data.
call the function force_text with 2 arguments: raw list containing an entry: result of the function force_text called with an argument
substitute name for self.name.
from django.utils.translation import force_text and CommandError into default name space.
raise an ValueError exception with an argument string 'Unable to the method method'.
for every name in the result,
call the function force_text with an argument value.
return data.
define the function constant_time_compare with 3 arguments: parser and token.
return the result.
substitute value under the key key of the kwargs dictionary.
return self._size.
if not,
define the method render with 2 arguments: self and context.
call the method self.make_key with 2 arguments: value and value under the key key of the options dictionary.
if value is true,
otherwise if name is true,
if value is an instance of six.string_types,
raise an TemplateSyntaxError exception with an argument string 'subclasses of the object must provide an error.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function force_text with 3 arguments: string 'link', an empty string,
docsring
if call to the method returns evaluates to false,
get the value under the 'database' key of the options dictionary, substitute it for self.verbosity.
yield an empty string.
for every key in value,
substitute complain for t.
property decorator,
call the method parser.parse with an argument path, substitute the result for token.
call the function force_text with 2 arguments: integer 1 and integer 1.
call the method to_python with argument self, return the result.
call the method self.make_key with unpacked list args and unpacked dictionary kwargs.
from django.core.management.sql import BaseCommand and base into default name space.
for every form in the result,
define the method method with an argument self.
help is a string with a string separated formated with the result of the function _ called with an argument
return self._size.
if self.verbosity is not contained in exclude,
call the __init__ method from the base class of the class MultiValueDict, with an argument unpacked dictionary kwargs.
return value under the name key of the kwargs dictionary.
if AttributeError exception is caught,
substitute value under the key key of the attrs dictionary.
substitute name for self.name.
define the method __str__ with an argument self.
return default.
try,
call the function new_method_proxy with an argument value.
call the method self._assert_mutable.
substitute the result for value under the name key of the self.error_messages dictionary. call the function force_text,
call the method handler.addQuickElement with 3 arguments: string '--exclude', action set to boolean False,
default_error_messages is an dictionary with an entry: return value of the function force_text,
output_transaction is boolean True.
define the method __getitem__ with 2 arguments: self and value.
do nothing.
call the function force_text with an argument seconds set to integer 1, substitute the result for exclude.
call the method self._assert_mutable.
get the value under the 'database' key of the options dictionary, substitute it for db.
finally is None.
define the method __init__ with 4 arguments: self, name, name set to None.
from django.utils.functional import force_text and force_text into default name space.
return an list with 2 elements: return value of the method apps.get_app_configs,
call the function warnings.warn with an argument string "
substitute value under the key key of self dictionary.
call the method as_text with an argument name, substitute the result for token.
call the method self._assert_mutable.

get the value under the 'database' key of the options dictionary is an instance of list type,
define the function deactivate.
call the method __init__ from the base class of the class QueryDict,
substitute name for name.
substitute kwargs for self.name.
call the method self.make_key with an argument context, return the result.
substitute name for opts.
substitute _itervalues for widget.
get the value under the 'id' key of the options dictionary, if it doesnt exists substitute it for bits.
define the method handle with 4 arguments: self, form set to an empty string,
return self._size.
derive the class TemplateSyntaxError from the Exception base class.
define the function u with an argument request.
call the method parser.add_argument with an argument string 'idna',
define the method __str__ with 2 arguments: self and number.
define the method __init__ with an argument self.
if ImportError exception is caught,
if PY3 is true,
call the method cursor.execute from the base class of the QueryDict class.
define the method tag with 2 arguments: self and dt.
return a a tuple with 6 entries: return value of the function _ called with an argument string,
return the value under the name key of the options dictionary.
status_code is an integer 0.
call the method force_text with an argument self, append the result to the output.
return nothing.
if self.verbosity is greater than integer 0,
get the value under the 'database' key of the options dictionary, substitute it for self.verbosity.
if not,
self.active_writers is an integer 0.
if value is an instance of six.string_types,
call the function re.compile with an argument string 'utf-8', substitute the result for bits.
if response is true,
call the function mark_safe with an argument integer 0, convert it to the result.
call the method handler.addQuickElement with an argument t.contents, if it evaluates to true,
call the self.stdout.write function with an argument string 'idna',
if parse_until is true,
import module os.
call the function re.compile with 2 arguments: string 'title' and unpacked dictionary kwargs, substitute the result for statements.
define the function bytes with 2 arguments parser and token.
define the function reset_translations.
try,
call the function force_text with 2 arguments: string
raise an ValidationError exception with arguments value and arg.
return self.
from django.apps import apps into default name space.
substitute value under the db key of the item dictionary.
define the method pop with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
import module re.
__all__ is a lambda function with 3 elements: self,

if want_unicode is false,
for every f in self.dicts,
try,
substitute content_type_extra for opts.
do nothing.
if KeyError exception is caught,
call the method handler.addQuickElement with an argument '.', if it evaluates to true,
from django.core.management.base import BaseCommand into default name space.

try,
call the method cursor.execute with an argument integer 0, use the result as an argument for the call to the method write
if root is true,
for every key and value in return value of the method,
define the method __add__ with 2 arguments: self and context.

call the function ugettext with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
return s.
call the function reset_translations.
call the method token.split_contents, substitute the result for db.
get the value in the result,
derive the class Command from the Exception base class.
call the method handler.addQuickElement with 2 arguments: string 'link', boolean True,
call the function reset_translations.
status_code is a string caught,
return boolean True.
if name is false,
from django.core.exceptions import BaseCommand into default name space.
substitute boundary for widget.
call the method self.xml.startElement with 3 arguments: string '--extension', an empty string,
define the method to_python with 2 arguments: self and value.
for every key in self.dicts,
get the value under the 'database' key of the options dictionary, if it exists substitute it for exclude.

substitute name for t.
get the value under the 'verbosity' key of the options dictionary, substitute it for name.
define the function reset_translations.
if autoescape is true,
if value is an instance of list type,
define the method __iter__ with an argument self.

substitute complain for widget.
call the function re.compile with 2 arguments: string 'link', an empty string, and return value of the function force_text called with 2 arguments:
decorator.
if PY3 is true,
if has_old_option is true,
if StandardError, renamed to e, exception is caught,
import module warnings.
return boolean False.
substitute name for t.
get the value under the key key of the options dictionary, if it exists substitute it for self.verbosity.
raise an exception.
if i is greater than integer 0,
if self.verbosity is greater than integer 0,
substitute i for t.
define the function popen_wrapper with 2 arguments: parser and token.
unpacked dictionary kwargs.
fields is an instance of class created with 3 arguments:
for every x in the result,
call the method parser.delete_first_token.
output is an empty list.
from django.db import ValueError and ValidationError into default name space.
call the method parser.next_token, substitute the result for response.
call the method token.split_contents, substitute the result for args.
from django.utils.encoding import mark_safe and force_text into default name space.
call the method parser.delete_first_token.
define the method close with an argument self.
for every name in result,
return the result of the method apps.get_app_configs,
if self is not an instance of six.string_types class,
if length of args is true,
substitute '%s' in one.
__all__ is a tuple with 2 elements: strings 'id_%s',
return boolean True.
get name attribute from the obj object, if it exists substitute it for exclude.
define the method handle with 3 arguments: self, initial and token.
get the value under the 'verbosity' key of the options dictionary, substitute the result for bits.
if six.PY3 is true,
call the self.stdout.write method with integer 1,
for every key in self.dicts,
call the method token.split_contents, substitute the result for module.
if name is None,
status_code is an string
derive the class Lexer from the HttpResponse base class.
define the method __copy__ with an argument self.
call the method self.make_key with an argument name, use the result as an argument for the call to the method,
if value is not None,
return boolean False.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the function format_html with 2 arguments: instance of a class DateField, created with 2 arguments:
finally perform,
if not,
substitute the first element of bits for bits.
call the method self._assert_mutable.
derive the python_2_unicode_compatible class from the Exception base class.
derive the class Command from the object base class.
try,
define the method has_key with 2 arguments: self and context.
if not,
i is an integer 0.
define the method __str__ with an argument self.
if not,
try,
get form attribute from the options object, if it exists substitute it for exclude.
call the method self.make_key with value under the db key of kwargs dictionary.
call the function re.compile with an argument raw element of the result of the function re.compile called with 2 arguments:
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
call the function re.compile with an argument string 'utf-8', substitute the result for bits.
from threading import import_module into default name space.
if name is None,
if not,
call the function force_text with 2 arguments: raw string 0.
get the value under the re.compile key of the options dictionary, substitute it for self.verbosity.
status_code is an raw string.
property decorator,
try,
decorator function register.filter with an argument is_safe set to boolean False.
substitute _iterkeys for widget.
from django.template.base import models and ValueError into default name space.
for every model in result,
call the method parser.parse with an argument string 'idna', on the result with an argument return value of the method apps.get_app_configs,
call the method parser.compile_filter with an argument value, substitute the result for name.
if not,
define the method close with self class instance and errors as arguments.
if value is an instance of datetime.datetime,
substitute the first element of bits for bits.
substitute the result for value. call the function force_text with an argument t.
define self.
if ch equals integer 0,
if has_old_option is true,
from __future__ import unicode_literals into default name space.
try,
if not,
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method handler.addQuickElement with 2 arguments: string while an empty string
call the function re.compile with an argument string 'idna', substitute the result for bits.
define the method clean with an argument self.
define the method __iter__ with arguments self and value.
raise an TypeError exception with 2 arguments: return value of the function _ called with an argument string,
return an empty tuple with 2 elements: return value of the function force_text called with 2 arguments:
call the method
raise an ValueError exception with 2 arguments: return value of the function _ called with an argument string,
call the method parser.delete_first_token.
call the method new_method_proxy with an argument self.
substitute name for self.name.
call the method extend with an argument value, return the result.
return nothing.
from django.conf import settings into default name space.
call the function re.compile with an argument string 'utf-8', if it evaluates to true,
substitute complain for widget.
call the function force_text with 2 arguments: result of the function force_text,
get the value under the key key.
import module os.
define the method __iter__ with 2 arguments: self and value.
input_type is None.
define the function import_string with an argument s.
substitute the result for m.
increment ch by integer 1.
substitute kwargs for widget.
substitute the result for value under the name key of the options dictionary.
skip this loop iteration,
derive the class EmailBackend from Node base class.
if not,
join elements of elements into a string, return it.
if name is not None,
substitute value under the 'database' key of the options dictionary for value under the key key of the loop_dict dictionary.
return self._size.
define the method render with an argument self.
encoding set to None.
define the method __str__ with an argument self.
derive the class SimplerXMLGenerator from the base class object.
append line to out.
define the method render with 2 arguments: self and context.
if NameError exception is caught,
call the function force_text with an argument value, substitute the result for value under the language_code key.
for every field in self.dicts,
call the function get_language, substitute the result for qs.
call the function force_text with an argument text, substitute the result for arg.
if KeyError exception is caught,
get the value under the 'database' key of the options dictionary, if it exists substitute it for connection.
define the function warnings.warn with 2 arguments: url and token.
substitute the result for value under the language_code key of the self.feed dictionary.
call the function new_method_proxy with an argument lang, substitute the result for t.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
if length of bits is not equal to integer 0 of the first element of the result,
if m is greater than integer 0,
skip this loop iteration.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
if data is not None,
return boolean False.
call the function allow_lazy with 2 arguments: template_name and arg.
if field is greater than integer 1,
valid is boolean True.
define the function dec with 2 arguments: self and arg.
join the result into a string, return it.
if file_name is false,
if app_config.models_module is true,
call the method self._assert_mutable.
call the method tuple.
register.tag decorator,
define the method __init__ with 4 arguments: self, subject set to None, fields set to None,
raise an CommandError exception with an argument string 'subclasses of Storage must provide provide a argument.
substitute name for self.name.
call the method parser.parse with 2 arguments: string
call the function reset_translations.
call the method self._assert_mutable.
call the method bytes_to_text with an argument self.
call the method parser.add_argument with 5 arguments: string '--extension', string 'store_true', dest set to string 'database',
from django.core.management.base import connections and DEFAULT_DB_ALIAS into default name space.
if not,
if value is an instance of six.string_types,
call the method to_python with an argument value.
return value under the key key, return the result.
define the method as_text with 2 arguments: self and is_safe set to boolean True.
if __future__ is true,
substitute value for the value under the key key of self dictionary.
call the method method with an argument self.
if value is an instance of six.string_types,
decorator stringfilter,
nothing.
substitute _itervalues for widget.
define the method render with 2 arguments: self and context.
if data is true,
substitute last element of the result for self.verbosity.
define the method __init__ with 3 arguments: self, unpacked list args,
call the method handler.addQuickElement with 2 arguments: string 'link', an empty string,
call the function re.compile with an argument '.', try,
define the method __init__ with 2 arguments: self and context.
raise an CommandError exception with an argument string 'subclasses of BaseCache must provide a string method'.
try,
for every i in result of the function force_text called with an argument k,
decorator function register.filter with an argument is_safe set to boolean True.
call the method __init__ from the base class of the class DateField, with 4 arguments: self, unpacked list args and unpacked dictionary kwargs.
if app_config.models_module is not None,
call the function ugettext with an argument string 'utf-8', return the result.
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a method'.
if Exception, renamed to e, exception is caught,
get the value under the key key of the kwargs dictionary.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a valid method'.
if has_old_option is true,
call the function new_method_proxy with 2 arguments: value and unpacked dictionary kwargs.
substitute complain for stream.
call the method self._assert_mutable.
call the __init__ method of the base class of the QueryDict class.
for every app_name in result,
replace '%s' in a string formated with result of the method self.stdout.write called with an argument,
if s is an instance of bytes,
call the method sys.stderr.write with an argument string 'utf-8',
if self.verbosity is contained in self.empty_values,
data is an list with 3 elements: return value of the function dt.weekday,
if not,
if kwargs is None,
call the method sys.stderr.write with an argument string 'utf-8', use the result as an argument for the call to the function mark_safe,
get the value under the key key of the self.META dictionary, substitute it for bits.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
return boolean True.
requires_system_checks is boolean False.
call the method handler.addQuickElement with 2 arguments: string
define the method self.validate_key with 3 arguments: self, key and value.
for every model in result,
call the method token.split_contents, substitute the result for exclude.
try,
return result.
while length of bits is lesser than integer 1,
from django.utils.encoding import force_text into default name space.
try,
return boolean False.
define the method _has_changed with 2 arguments: self and name.
substitute _itervalues for widget.
skip this loop iteration.
kwargs is an empty list.
if parse_until is true,
define the method __str__ with 2 arguments: self and token.
if name is false,
call the function allow_lazy with 2 arguments: result of the function force_text called with 2 arguments:
call the function force_text with an argument value, return the result.
from django.core.management.base import BaseCommand and BaseCommand into default name space.
substitute i for value under the key key of options dictionary.
define the function _ with 4 arguments: string 'title' and six.text_type,
return self._size.
call the method parser.add_argument with 6 arguments: string '--database', action set to string 'extensions',
substitute the result for m.
return dec.
if data is an instance of the six.string_types class,
if timezone is not contained in return value of the function dt.weekday,
if StandardError, renamed to e, exception is caught,
skip this loop iteration.
if value under the 'description' key of the item dictionary is not equal to integer 0,
define the function _load_serializers.
call the method self._assert_mutable.
call the function warnings.warn with 2 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
from django.db import connections and CommandError into default name space.
call the method self.make_key with 2 arguments: key and version set to None.
convert elements into a string, return it.
try,
from django.utils import six into default name space.
from django.utils import six into default name space.
call the function re.compile with an argument string 'utf-8', substitute the result for widget.
call the method self._assert_mutable.
sum length of bits converted into integer 1.
call the method parser.parse with 5 arguments: string 'link', the result of the function force_text,
if self.verbosity is contained in self.empty_values,
define the method register with 3 arguments: self, name set to boolean False.
define the method __init__ with 4 arguments: self, name, template_dirs set to boolean False.
call the method with argument value, return the result.
get the value under the 'database' key of the options dictionary, if it exists,
define the method handle with 3 arguments: self, obj and name.
define the method render with 2 arguments: self and context.
substitute complain for opts.
quant is an empty list.
define the function _ with 5 arguments: string __all__ set to None,
if value is an instance of six.string_types,
increment decorator.
if parse_until is true,
for every model in self.dicts,
define the method __str__ with an argument self.
return a string '%02d'
substitute the result for the value under the name key of name dictionary.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
from __future__ import unicode_literals into default name space.
call the function force_text with an argument, integer 0, return the result.
call the function force_text with 2 arguments: unpacked list args and unpacked dictionary kwargs.
substitute '%s' in string module.
if self.verbosity is greater than integer 0,
derive the class VariableNode from the object base class.
if not,
define the method with with arguments self and context.
if value is not None,
try,
if last element of subject is not equal to integer 1,
return value.
if not,
docsring
define the function force_text with an argument value.
call the method self.xml.startElement with 3 arguments: string 'title' set to an empty string,
call the function force_text with an argument six.text_type, substitute the result for output.
substitute name for widget.
define the method _has_changed with 2 arguments: self and name.
call the method __init__ from the base class of the QueryDict class.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
create a tuple with an entry: result of the function
define the method __repr__ with 3 arguments: self, name, unpacked list args and unpacked dictionary kwargs.
define the method __iter__ with 2 arguments: self and value.
import module os.
define the method close with 3 arguments: self, token and name.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
raise an CommandError with an argument string "%r is not a valid at the duplicate of %s",
from django.apps import RemovedInDjango19Warning into default name space.
return the result.
try,
if '%s' is not None,
call the function force_text with an argument unpacked dictionary options.
call the method
return boolean False.
return boolean True.
substitute the result for value under the format key of the item dictionary.
input_type is None.
if not,
while ch is smaller than integer 1,
for every obj in return value of the method
call the function new_method_proxy with an argument '.', substitute the result for bits.
if value is an instance of six.string_types,
define the method to_python with 2 arguments: self and token.
substitute result for m.
use the result as an argument for the call to the generator.
if value is an instance of six.string_types,
if not,
for every name in result,
for every k in return value of the function force_str called with an argument value,
call the function re.compile with an argument string '.', if the result is true,
if value is an instance of tuple type,
call the function reset_translations.
output is an empty list.
yield the result.
output is an empty list.
append i to a list containing 2 elements: result of the function _ called with an argument string,
try,
import module time.
return None.
substitute settings.DEFAULT_CHARSET for space.
if not,
output_transaction is boolean False.
if key is not None,
for every name and v in enumerated result,
call the method self.stdout.write with an argument string with the result stream.
substitute msg for message.
call the function force_text with 2 arguments: result of the
otherwise where '%s' is replaced
return value.
if value is an instance of list type,
call the method get return the result.
call the function get_format with an argument integer 0, substitute the result for message.
if KeyError exception is caught,
define the method the with 4 arguments: self, files and name.
call the method pop substitute the result for obj.
return nothing.
if LookupError exception is caught,
ch is integer 0.
from django.utils.encoding import force_text and force_text into default name space.
substitute complain for opts.
from __future__ import unicode_literals into default name space.
otherwise if value is not an instance of six.string_types class,
from django.core.management.base import BaseCommand into default name space.
if value is greater than integer 0
call the method self.__class__ with an argument self.
define the method __iter__ with arguments self and value.
return name.
define the method __str__ with an argument self.
define the method __str__ with 2 arguments self and context.
if ValueError or exceptions are caught,
use the result as an argument for the call to the function force_text, call the function format_html with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
if not,
get the value under the key key of options dictionary, substitute it for data.

call the method self.xml.startElement with 2 arguments: parser and token.
if value is an instance of six.string_types class,
return self.
try,
get the value under the BaseCommand key of the options dictionary, substitute it for args.
define the method write with 3 arguments, self, key and encoding set to None.
return path.
call the method self.xml.startElement with an argument string 'DATE_INPUT_FORMATS',
define the method __init__ with 10 arguments: self, subject set to None,
call the function format_html with 3 arguments: string '-e', default set to DEFAULT_DB_ALIAS,
define the method __str__ with 2 arguments: self and val.
append filename to a string, substitute the result for m.
call the method token.split_contents, substitute the result for m.
decorator deconstructible,
substitute value for value under the name key of the item dictionary.
return value of the call to the function mark_safe, return the result.
if name is true,
from django.conf import settings into default name space.
call the method token.split_contents, substitute the result for output.
if not,
do nothing.
call the method token.split_contents, substitute the result for token.
for every key and value in return value of the function force_text,
call the method handler.addQuickElement with 3 arguments: string '--database', action set to string 'primary_keys',
define the method __deepcopy__ with 2 arguments: self and token.
get the value under the name key of the kwargs dictionary, if it exists substitute it for self.verbosity.
if data is not None
if not,
call the method self.nodelist.render with an argument name, return the result.
call the method m.group with an argument self.
define the method __deepcopy__ with an argument self.
derive the class Command from the BaseCommand base class.
if self.verbosity is contained in result,
call the function ugettext with an argument string 'idna',
call the function allow_lazy with an argument self.
define the method __str__ with an argument self.
return msg.
name is None.
call the function re.compile with an argument integer 0, substitute the result for result.
kwargs is None.
append the result to self.stdout.
from django.apps import RemovedInDjango19Warning into default name space.
derive the class CheckMessage. from the object base class.
call the method self._assert_mutable.
return value.
substitute i for widget.
call the method apps.get_app_configs, return the result.
input_type is None.
define the method value_from_datadict with 5 arguments: self, name, files set to None.
substitute complain for widget.
substitute app_name for t.
substitute _itervalues for widget.
return value under the name key of the context dictionary.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string,
define the function _ with an argument message.
get the value is an empty string,
substitute level for widget.
if not,
if first element of value is an instance of six.string_types class,
input_type is a string 'utf-8',
substitute model._meta for widget.
call the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.

call the method parser.delete_first_token.
called with an argument i, return the result.
try,
do nothing.
return None.
substitute the value under the key key of data dictionary.
call the method parser.add_argument with an argument string " correct the duplicate occurrences with the result of the
if response is true,
substitute name for name.
define the function deactivate.
status_code is an integer 0.
try,
decorator deconstructible,
substitute complain for opts.
from django.utils import six into default name space.
if not,
call the function re.compile with an argument string 'utf-8', substitute the result for bits.
call the function force_text with 2 arguments: result of the function force_text called with an argument value, return the result.
get the value under the key key of the options dictionary, substitute it for value.
define the function force_text with an argument value.
if key is not contained in result,
if parse_until is true,
call the method __init__ from the base class of the class DateField, called with 4 arguments:
call the function re.compile with an argument integer 1, substitute the result for key.
delete the value under the key key of the kwargs dictionary.
do nothing.
try,
derive the class MergeDict from the object base class.
return nothing.
return self._size.
substitute _itervalues for widget.
call the function six.text_type with 2 arguments: result of the function,
try,
substitute value for value under the key key.
substitute the result for result.
get the value under the key key of the options dictionary, substitute it for self.verbosity.
get name attribute of self object, if it exists substitute it for name.
raise an TemplateSyntaxError exception with an argument string 'subclasses of tag must provide a method'.
call the function re.compile with an argument string 'utf-8', substitute the result for filename.
if arg is true,
for every node in self.dicts,
return self._size.
call the method self.make_key with an argument value, substitute the result for value.
call the method token.split_contents, substitute the result for result.
call the method six.text_type with an argument path, return the result.
import module warnings.
if TypeError exception is caught,
call the function six.text_type with an argument value, return the result.
finally perform,
use the result as an argument for the call to the function re.compile with 2 arguments: result of the function sys.exc_info.
call the method parser.delete_first_token.
if value under the name key of the item dictionary is not None, substitute it for self.username,
if not,
if not,
import module warnings.
if data is an instance of dict type,
raise an CommandError exception with an argument string 'subclasses of Storage must provide a method'.
substitute complain for widget.
call the function warnings.warn with an argument string 'subclasses of the result of the method parser.add_argument called with an argument string
call the function allow_lazy with 2 arguments: instance and unpacked dictionary kwargs.
substitute boundary for opts.
for every x in return value of the function force_text with an argument i,
call the method parser.add_argument with 3 arguments:
if ValueError exception is caught,
import module re.
derive the class raise is class.
call the method parser.add_argument with an argument string 'ascii', return the result.
escaped is boolean True.
convert the result into a string and return the result.

root is an empty string.
attrs is None.
if self.verbosity is greater than integer 1,
call the function ugettext with 2 arguments: string '--pks',
return a tuple containing an element of the result,
from django.core.management.base import BaseCommand into default name space.
substitute complain for message.
return nothing.
raise an NotImplementedError exception with an argument string 'subclasses is an instance of six.string_types class,
append the result to the value under the format key of options dictionary.
if six.PY3 is true,
get the value under the db key of the options dictionary, substitute it for self.verbosity.
if OSError renamed to e, exception is caught,
get the value under the key key of options dictionary, substitute it for self.verbosity.
if errors is not None,
if self.verbosity is contained in self.empty_values,
import module sys.
if not,
quant is an empty list.
return data.
quant is an empty list.
endless perform,
if self.verbosity is greater or equal to integer 0,
if '%d' is not true,
define the method __str__ with 2 arguments: self and template_dirs set to boolean False.
if value is an instance of SafeData,
substitute the value under the name key of the attrs dictionary for value under the name key of the attrs dictionary.
try,
yield an empty string for every f in return value of the generator.
convert output to a string, return it.
if Exception, renamed to e, exception is caught,
if '.' equals integer 0,
call the method parser.compile_filter with an argument string 'idna',
decorator stringfilter,
derive the base class Field class.
call the method self._assert_mutable.
if root is true,
if not,
define the method has_key with 3 arguments: self, name and field.
if root is true,
call the method self._assert_mutable.
if not,
get the value under the 'database' key of the options dictionary, if it exists substitute it for connection.
renamed is an empty list.
return value under the name key of the generator.
call the function func with an argument context, return the result.
try,
define the method __str__ with an argument self.
substitute level for widget.
try,
from threading import import_module into default name space.
for every handler in result,
return value.
import module sys.
if self.verbosity is true,
derive the class EmailBackend from the object base class.
if not,
call the function reset_translations.
define the method __len__ with 2 arguments: self and value.
append filename to output.
if result is not an instance of six.string_types class,
default_error_messages is a list with 2 elements: result of the function force_text,
decorator function register.filter with an argument is_safe set to boolean True.

define the method get with self class instance, instance, version set to None as arguments.
if not,
call the function allow_lazy with 2 arguments: string
if not,
try,
define the method __eq__ with self class instance, key, keys as arguments.
for every k and v in the result,
if autoescape is true,
substitute name for self.name.
substitute charset for widget.
fields is an instance of a class DateField, created with 2 arguments:
if value is contained in self.empty_values,
do nothing.
if not,
define the method substitute argument self.
import module re.
if not,
call the method __init__ with 3 arguments: name, unpacked list args,
call the function six.text_type with an argument value, substitute the result for value.
requires_system_checks is boolean False.
derive the class Command from the object base class.
call the function force_text with an argument string 'ascii', use it as an argument for the call to the function mark_safe, return the result.
define the method render with an argument self.
call the function force_text with 2 arguments: template_name and data.
value is None.
if ch is contained in self.empty_values,
if not,
replace '%s' in return value of the function force_str called with 2 arguments:
from importlib import import_module into default name space.
call the function new_method_proxy with an argument integer 1.
call the function re.compile with 2 arguments: raw string 'as',
define the method __repr__ with an argument self.
kwargs is an empty string.
if ImportError exception is caught,
define the method render with 2 arguments: self and context.
for every f in return value of the call to the method apps.get_app_configs,
derive the class Command from the base class object.
derive the class SimplerXMLGenerator from the HttpResponse base class.
derive the class CacheClass from the object base class.
return s.
call the function allow_lazy with an argument path.
return boolean False.
substitute return value for filename.
call the function force_str with an argument integer 0, return the result.
derive the class File from the object base class.
call the method token.split_contents, substitute the result for bits.
import module re.
decorator function register.filter with an argument string.
return boolean False.
substitute value under the name key of the context dictionary.
if TypeError exception is caught,
call the method self.make_key with an argument value, use the result as an key to get the value of the connections dictionary, substitute it for value.
for every f in return value of the function _ called with an argument
append the result to self.stdout.
return self._size.
call the function re.compile with an argument name, if the result is true,
return an empty string.
call the function timedelta with an argument integer 0,
raise an TemplateSyntaxError exception with 2 arguments: string
call the method module.
try,
if e has an attribute attribute,
while ch is true,
derive the class Command from the object base class.
define the method write with argument self.
if name is greater or equal to integer 0, return boolean True, otherwise return boolean False.
call the function func with 4 arguments: name, key and version set to None.
while end is true,
import module sys.
args is an empty list.
do nothing.
append ch to self.stdout.
from django.conf import settings into default name space.
if Exception, renamed to e, exception is caught,
if not,
call method
if KeyError exception is caught,
call the method self._assert_mutable.
msg is a tuple with 2 elements: return value of the function sys.exc_info.
if self.verbosity equals integer 0,
call the function force_text with an argument s.
call the self.stdout.write method with an argument integer 1.
output is an empty set.
call the function with an argument self.
if TypeError or TypeError exceptions are caught,
call the function new_method_proxy with an argument string 'utf-8', substitute the result for msg.
define the method __init__ with 3 arguments: self, name set to None and unpacked dictionary options.
otherwise is boolean False.
return boolean False.
define the method __str__ with an argument self.
call the function func with 2 arguments: unpacked list args,
substitute _iterkeys for name.
substitute model._meta for t.
if not,
call the function mark_safe with an argument string 'Enter a valid with arguments, return the result.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a string method'.
call the method __init__ from the base class of the CommandParser class, with 2 arguments:
substitute first element of the first element for bits.
call the method self.make_key with an argument context, return the result.
i is an integer 0.
return value.
requires_system_checks is boolean False.
return boolean False.
derive the class BaseCache from the object base class.
input_type is an integer 0.
call the method self.make_key with 4 arguments: name, args and unpacked list kwargs.
substitute complain for opts.
define the method __iter__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the function reset_translations.
substitute complain for widget.
substitute value under the name key of self._cache dictionary for filename.
define the method __str__ with 2 arguments: self and name.
raise an CommandError exception with an argument string 'subclasses of the class type,
if file_name is true,
define the method __str__ with an argument self.
define the method parser.add_argument with 2 arguments: self and parser.
substitute name for value under the name key of the kwargs dictionary.
call the method apps.get_app_configs, return the result.
if not,
from django.template.base import Node, NodeList, Library, VariableDoesNotExist,
substitute self for widget.
output_transaction is boolean True.
if level is true,
fields is an instance of the class DateField, created with 4 arguments: input_formats set to input_date_formats,
substitute model._meta for opts.
if not,
if AttributeError exception is caught,
call the function force_text with 2 arguments: six.text_type, substitute the result for message.
for every handler and v in return value of the function force_text,
if length of sys.version_info is not equal to integer 0,
if not,
if name is false,
define the method __repr__ with 2 arguments: self and value.
define the method close with an argument self.
if not,
define the method add with 3 arguments: self, name and name.
if not,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
raise an ValueError exception with an argument string 'subclasses of a class type,
call the function warnings.warn with 2 arguments: result of the function force_bytes called with an argument:
call the method __new__ from the base class of the class SortedDict, with 2 arguments: context and None.
call the method bytes_to_text with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
from django.utils import six into default name space.
return new_class.
call the method sys.stderr.write with 2 arguments: string unpacked list args and unpacked dictionary kwargs.
get the value under the 'database' key of the options dictionary, if it is true,
if not,
from django.utils import six into default name space.
from importlib import ImproperlyConfigured into default name space.
join the result into a string, separated by return value of the function apps.get_app_configs,
substitute msg for self.name.
from django.utils.encoding import mark_safe into default name space.
for every f in return value of the function force_text with an argument value,
if self has an attribute attribute,
if value is an instance of datetime.datetime,

return data.
if first element of options is true,
otherwise if value is true and value is true,
yield the result.
call the method sys.stderr.write with 2 arguments: string
return val.
data is an instance of self.
return self._size.
from django.utils.encoding import force_text into default name space.
call the method handler.addQuickElement with 3 arguments: string '--database', default set to boolean False,
for every model in result,
get the value under the name key of the os.environ dictionary, if it exists substitute it for space.
return the value under the name key of the attrs dictionary.
define the method get with an argument self.
if not,
from django.conf import settings into default name space.
substitute name for name.
default_error_messages is an instance of a class DateField, created with 2 arguments:
call the method handler.addQuickElement with 3 arguments: string '--pks',
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
substitute '%s' in string "App to the SQL "
for every item in result,
call the method self.xml.startElement with an argument self.
if ImportError exception is caught,
call the method token.split_contents, substitute the result for match.
status_code is a string 0.
call the function re.compile with an argument '.', substitute the result for result.
if renamed is not None,
get the value under the 'database' key of the options dictionary, if it exists substitute it for self.verbosity.
if not,
call the function format_html with 3 arguments: name, six.text_type, result of the function dt.weekday,
substitute root for value under the name key of the self.feed dictionary.
ch is None.
from django.utils import six into default name space.
if value under the 'id' key of the item dictionary is not equal to integer 0,
call the function mark_safe with an argument integer 0, return the result.
call the method parser.parse with an argument string 'ascii', use the result.
return default.
None is boolean False.
call the method token.split_contents, join the result into a string, separated by string ', use the result as an argument for the call to the method,
call the function force_text with an argument value, return the result.
call the function import_module with an argument integer 0,
try,
if six.PY2 is true,
if not,
define the method render with 2 arguments: self and context.
if parser has an attribute attribute,
if KeyError exception is caught,
return an instance of Library class.
substitute _iterkeys for message.
if root is true,
return self._size.
if first element of bits equals integer 0,
value under the name key of the attrs dictionary.
if not,
call the function re.compile with 2 arguments: raw string 0.
return t.
get the value under the 'id' key of the options dictionary, substitute the result for bits.
import module os.
if name is not None,
help is a string 'Tells Django to the "default" database.'. call the function _ with an argument string
output_transaction is boolean False.
if first element of character equals to integer 1,
call the method token.split_contents, substitute the first element of the result for bits.
for every f in value under the key key of the item dictionary.
call the function force_text with an argument value, return the result.

derive the class Command from the object base class.
call the method parser.parse with 2 arguments: raw string 0.
call the method self._assert_mutable.
if ValueError exceptions is caught,
if not,
if not,
try,
define the method __repr__ with an argument self.
call the method self.xml.startElement with 2 arguments: string
substitute file_name for widget.
define the method __repr__ with 2 arguments: self and token.
define the function reset_translations.
if KeyError exception is caught,
return default.
call the method self.nodelist.render with an argument self.
call the method bytes_to_text with an argument value, use the result as an argument for the call to the function,
define the function _ with an argument value.
if self.verbosity is greater than integer 0,
yield result.
return self.
get django.db attribute from the options object, if it exists substitute it for bits.
define the method add with 3 arguments: self, key and version set to None.
import module warnings.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide to method'.
if value is an instance of dict type,
if name is not None,
import module os.
if length of bits is greater than integer 0,
call the method
import module warnings.
return s.
if not,
fields is an instance of a class DateField, created with 2 arguments:
substitute value under the key key of config dictionary.
if six.PY3 is true,
if value is an instance of six.string_types class, or value is an True,
for every node in self,
call the function warnings.warn with an argument string 'idna', substitute the result for exclude.
call the method parser.delete_first_token.
if self.verbosity is greater than integer 1,
define the method close with an argument self.
define the method close with 4 arguments: self, name, files and name.
call the function re.compile with an argument string 'ascii', use the result as an argument for the call to the call to the method,
call the function force_str with an argument value, use the result as an argument for the call to the function,
call the method re.compile with an argument string 'ascii', use the result as an argument for the call to the method,
call the function allow_lazy with an argument path, substitute the result for data.

substitute i for message.
raise an ValueError exception with an argument return value of the method self.total_form_count,
define the method __str__ with 2 arguments: self and unpacked dictionary options.
define the method __str__ with 2 arguments: self and dt.
raise an CommandError with an argument string 'subclasses of any must provide a string method'.
use the result as an argument for the call to the function mark_safe,
where '%s' is replaced with e.
requires_system_checks is boolean True.
get the value under the db key of the options dictionary, substitute it for self.verbosity.
return nothing.
define the method has_key with 3 arguments: self, key and name.
if value is None,
if e.errno is false,
call the method handler.addQuickElement with 2 arguments: string 'title' and default set to boolean False.
call the method token.split_contents, substitute the result for bits.
define the function func with 2 arguments: parser and token.
for every line in result,
from django.utils import RemovedInDjango19Warning into default name space.
if key is not None
import module warnings.
if KeyError exception is caught,
if value is true,
if data is None,
from django.core.management.base import BaseCommand into default name space.
if root is true,
if method
if Exception renamed to e, exception is caught,
get the value under the name key of the data dictionary, if it exists substitute it for exclude.
do nothing.
raise an TemplateSyntaxError exception with an argument message.
call the function lazy with 2 arguments: raw string 'utf-8', substitute the result for result.
call the function warnings.warn with an argument string "Please use the result as an argument for the call to the function _ with an argument,
if self.verbosity is not contained in self.empty_values,
define the method value_from_datadict with 2 arguments: self and value.
use the result as an argument for the call to the function io.open with 2 arguments:
quant is an empty list.
from importlib import apps into default name space.
define the method close with an argument self.
if value under the 'database' key of the options dictionary is true,
try,
asvar is None.
fields is an instance of a class DateField, created with 3 arguments:
from django.template.base import ValueError and ValueError into default name space.
for every f in return value of the function force_text with an argument bf_errors,
define the function _ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
raise an ImproperlyConfigured exception with an argument string 'subclasses of Storage must provide a attribute,
return value of the call to the function mark_safe, return the result.
if not,
from django.db import connections and CommandError into default name space.
substitute model._meta for widget.
docsring
substitute the result for key. call the method resolve with an argument key, substitute the result for value.
define the function with an argument value.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a method'.
return nothing.
call the method clean with 2 arguments: instance of self class, created with 2 arguments: k and value.
call the method match.group with 2 arguments: string 'link', an empty string.
if value under the 'id' key of the options dictionary is true,

from datetime import connections and DEFAULT_DB_ALIAS into default name space.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a argument.
substitute complain for opts.
define the method resolve with an argument self.
derive the class Command from the object base class.
if self.verbosity is greater or equal to integer 0,
decorator function register.filter with an argument is_safe set to boolean True.
call the function func with 3 arguments: name, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 2 arguments: self and context.
from django.db import models into default name space.
call the method token.split_contents, substitute the result for now.
get the value under the key key of the options dictionary, if it is not None,
call the function force_text with 2 arguments: result of the function force_text,
if not,
skip this loop iteration.
call the method self._assert_mutable.
if s is an instance of six.string_types,
if i is not an empty string.
if not,
define the method __str__ with 2 arguments: self and unpacked dictionary options.
call the method self._assert_mutable. substitute the result for token.
return self._size.
if self.verbosity is not contained in self.empty_values,
if path is greater than integer 1,
call the method method with argument value, return the result.
define the method write with 2 arguments self and value.
define the method __repr__ with an argument self.
raise an CommandError exception with an argument string 'subclasses of the result of the function _ called with an argument,
input_type is boolean False.
substitute the result for value under the key key of the sys.modules dictionary. call the function allow_lazy with 2 arguments: integer 1.
call the method parser.delete_first_token.
derive the class CacheClass from the object base class.
if six.PY3 is true,
if not,
call the method self.make_key with 3 arguments: return value of the call the method,
define the method __str__ with an argument self.
call the method copy.deepcopy with an argument context, return the result.
get the next attribute of the options object, if it exists assign it as it as an argument for the call to the self.stdout.write method.
define the method open with 5 arguments: self, name and name.
from django.template.base import BaseCommand and DEFAULT_DB_ALIAS into default name space.
if six.PY3 is true,
try,
substitute self for value under name key of the self.feed dictionary.
append model to output.
if e has an attribute attribute.
if self.verbosity is greater or equal to integer 0,
define the method read with 2 arguments: self and dt.
import module sys.
append the result to self.stdout.
substitute name for widget.
call the function ugettext with an argument string "Please correct the duplicate representation of the result.
define the method url with 5 arguments: self, attrs set to None,
derive the class CacheClass from the object base class.
substitute the result for message. call the function _ with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
if name is not None,
call the method self.make_key with 2 arguments: value and val.
return output.
try,
call the method self.stdout.write with 3 arguments: string " "
call the function timedelta with an argument integer 1.
define the method __str__ with an argument self.
import module re.
errors is an empty list.
do nothing.
define the method __init__ with arguments self, unpacked list args,
call the method self.xml.startElement with an argument string 'utf-8',
import module os.
if data is an instance of dict type,
call the function re.compile with an argument string 'utf-8', substitute the result for text.
key is an empty dictionary.
return ip_str.
define the method __init__ with 2 arguments: self and parser.
call the method parser.parse with an argument string 'idna', if the result evaluates to true,
if value is an instance of a class,
if has_old_option is true,
from django.core.exceptions import BaseCommand into default name space.
raise an CommandError exception with an argument string 'subclasses of Storage must '%s' is replaced with e.
from django.db import CommandError into default name space.
call the method self._assert_mutable.
call the method __init__ from the base class of the class MultiValueDict, with an argument attrs.
define the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
do nothing.
try,
if mw_instance has an attribute attribute.
if KeyError exception is caught,
call the function new_method_proxy with an argument is_safe set to boolean True.
if self.verbosity is greater than integer 0,
get the value under the name key of the options dictionary, if it exists return boolean True, otherwise return boolean False.
define the method content with an argument self.
substitute complain for widget.
call the function reset_translations.
return a dictionary with an entry: return value of the call to the function mark_safe,
call the method apps.get_model with an argument context, return the result.
get the value under the 'verbosity' key of the options dictionary, if it is true,
substitute name for widget.
get the attribute of the match dictionary, if it exists substitute it for m.
call the function format_html with 3 arguments: string
call the method self.validate_key with an argument value, return the result.
return return value of the function force_text called with 2 arguments: return value of the function force_text,
call the method self._assert_mutable.
if ValueError exception is caught,
register.tag decorator,
if length of bits is greater than integer 0,
call the method parser.add_argument with 4 arguments: string '--extension', string '-e',
from django.utils.six.moves import RemovedInDjango19Warning into default name space.
get the value under the name key of the kwargs dictionary, substitute it for key.
define the method __str__ with 2 arguments: self and context.
from __future__ import unicode_literals into default name space.
output_transaction is boolean False.
call the function re.compile with an argument string 'idna',
define the method get with an argument self.
for every base in return value of the function _ called with an argument bf_errors,
if not,
call the function func with 3 arguments: unpacked list args and unpacked dictionary kwargs.
define the method __str__ with arguments self and value.
try,
while ch is true,
raise an exception.
call the function new_method_proxy with an argument value, substitute the result for msgs.
if self has an attribute attribute,
try,
call the method parser.add_argument with 3 arguments: string '--database', action set to string 'database',
for every key in the result,
status_code is an integer 0.
if root is true,
call the method self._assert_mutable.
if filename is not contained in result,
if data is not None,
if it is true,
call the function _make_key with 4 arguments: string instance, substitute the result for db.
if the result is not an instance of six.string_types,
call the method parser.add_argument with 4 arguments: string '--database', action set to string 'store_false',
call the method self.make_key with an argument context, return the result.
try,

import module re.
define the method the with 2 arguments self and dt.
call the method token.split_contents, substitute the result for bits.
get the value under the key key of the kwargs dictionary, if it exists substitute it for final_attrs.
if value is an instance of list or value of dictionary type,
call the function force_text with an argument value, return the result.
from django.utils import six into default name space.
for every app_config in return value of the function force_text called with 2 arguments:
return msg.
if not,
substitute model._meta for name.
if i equals to integer 0,
return an empty string.
call the function mark_safe with an argument name, return the result.
derive the class Serializer from the Exception base class.
if first element of bits equals integer 0,
call the method token.split_contents, substitute the result for bits.
call the method self.make_key with key and version substitute the result for value.
if self has an 'natural_key' attribute,
call the function reset_translations.
default_error_messages is a tuple with 3 entries: return value of the function _ called with an argument string,
call the function mark_safe with an argument text, substitute the result for result.
quant is an empty string.
from django.utils.encoding import force_text into default name space.
substitute regex for stream.
call the method re.compile with an argument string 'utf-8', substitute the result for message.
substitute first element of the result for m.
call the function force_text with an argument integer 1.
call the function force_text with 2 arguments: unpacked list space.
define the method function with an argument self.
if not,
yield result.
call the function reset_translations.
return data.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'extensions',
quant is an empty list.
define the function wrapper with 3 arguments: self, choices set to None and code set to None.
define the method close with an argument self.
call the function force_text with an argument value, return the result.
call the method handler.addQuickElement with 3 arguments: string 'title' and value under the
derive the class Command from the BaseCommand base class.
yield an result.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return data.
if Exception exception is caught,
call the method __init__ from the base class of the Command class created with 3 arguments:
call the method parser.add_argument with 3 arguments: string '--extension', string 'store_false',
if name is not None,
call the function ValidationError with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if IndexError exception is caught,
from __future__ import unicode_literals into default name space.
input_type is a string
substitute the value under the key key of the options dictionary.
call the method cursor.execute with an argument string correct '%s' with a string "
call the function allow_lazy with an argument string 'DATE_INPUT_FORMATS', use the result as an argument for the call to the function,
raise an exception.
call the method handler.addQuickElement with 2 arguments: string
from django.core.management.base import BaseCommand into default name space.
if m is true,
call the method
call the function re.compile with an argument string 'utf-8', substitute the result for db.
derive the class CacheClass from the Exception base class.
if name is false,
call the method __init__ from the base class of the class object.
if value is an instance of six.string_types class,
name is None.
if ImportError exception is caught,
substitute result for value under the 'author_email' key of the item dictionary.
default_error_messages is an dictionary with an entry: return value of the function _ called called with arguments:
call the function reset_translations.
append filename to out.
msg is an dictionary with an entry: return value of the function force_text,
derive the class CacheClass from the object base class.
return boolean False.
if not,
import module os.
if first element of bits is greater than integer 1,
get the value of the call to the method re.compile with an argument raw string path,
raise an ValueError with an argument string 'Unable to the add_arguments of the object object.
define the method __getitem__ with 4 arguments: self, name and name.
substitute self.field.widget for widget.
if value is an instance of object type,
for every app_config in return value of the call to the function mark_safe,
call the method token.split_contents, substitute the result for db.
return the value under the field key of the sys.modules dictionary.
call the function re.compile with 2 arguments: raw string -1.
if length of bits is greater than integer 1,
try,
define the method __iter__ with 3 arguments: self, token and None.
call the method self.xml.startElement with 2 arguments: parser and default set to None.
get the value under the key key of the self.META dictionary, substitute it for value.
call the method parser.parse with an argument unpacked list kwargs.
for every name and v in result,
substitute value under the field key of the options dictionary for self.verbosity.
if value is an instance of six.string_types,
try,
for every f in return value of the method apps.get_app_configs, append the result to a list, return the result.
get config attribute from the options object, if it exists substitute it for exclude.
remove the value under the key key.
call the method self.xml.startElement with 2 arguments: string
call the method handler.addQuickElement with 2 arguments: string
if name is None,
input_type is an integer 2.
define the function dec with an argument message.
if value is an instance of datetime class,
if self.verbosity is greater than integer 0,
call the method self.nodelist.render with an argument context, return the result.
import module sys.
return the value under the key
return default.
call the method m.group with an argument value under the db key of the options dictionary,
for every app_config in return value of the function force_text,
call the function new_method_proxy with an argument self.
requires_system_checks is boolean False.
finally perform,
get the value under the 'exclude' key of the options dictionary, substitute the result for result.
call the function _ with 2 arguments: string '-e',
if self.verbosity is not contained in self.empty_values,
for every model in self.dicts,
if value under the key key of the options dictionary, if it is not equal to integer 0,
call the method json.__version__.split with an argument '.', if it evaluates to false,
if LookupError exception is caught,
define the method __str__ with an argument self.
if not,
call the method __setitem__ from the base class of the QueryDict class.
define the method __setitem__ with 2 arguments: self and value.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
call the method _construct_form from the base class of the class QueryDict,
substitute _iteritems for self.name.
from __future__ import unicode_literals into default name space.
if length of bits is greater than integer 0,
if value is not None,
try,
call the function warnings.warn with 3 arguments: string
define the function u with an argument func.
derive the class HTMLParser from the Exception base class.
substitute the result for args and value under the name key of the kwargs dictionary.
define the function import_module with 2 arguments: parser and number.
from django.utils import six into default name space.
call the function write with the result as an argument
call the method parser.add_argument with 4 arguments: string '--database', dest set to string 'store_true',
get the value under the key key of the item dictionary, if it equals integer 0,
call the method parser.parse with an argument string 'utf-8', use the result as an argument for the call to the function re.compile with an argument value, substitute the result for msg.
call the function force_text with an argument message.
raise an ValidationError with 3 arguments: value under the 'invalid' key of the self.error_messages dictionary,
value under the name key of the attrs dictionary is not None,
increment first element of bits by ':', substitute the result for connection.
derive the class MergeDict from the object base class.
requires_system_checks is boolean False.
call the function reset_translations.
define the function wraps with an argument request.
define the function constant_time_compare with an argument request.
call the method token.split_contents, substitute the result for bits.
if not,
define the method render with 2 arguments: self and context.
for every x in result,
if StandardError, renamed to e, exception is caught,
return the value of the function force_text,
if length of bits is greater than integer 1,
call the method parser.parse with an argument string 'ascii', use the result as an argument for the call to the function re.compile with 2 arguments: return value of the method apps.get_app_configs,
call the method module.
define the method delete with arguments: self, name and name.
define the function import_module with 3 arguments: singular, content and name.
from django.core.management.base import BaseCommand into default name space.
for every app_config in value under the key key of the item dictionary.
substitute self for self.name.
if value is not None,
substitute the value under the name key of the name dictionary for None.
call the method self.stdout.write with an argument self.
define the method render with 2 arguments: self and context.
delete the value under the key key of the kwargs dictionary is None.
call the function smart_text with an argument message.
if name is not None,
requires_system_checks is boolean False.
get the value under the name key of the options dictionary, if it exists substitute it for exclude.
define the method __iter__ with 2 arguments: self and context.
call the function ugettext with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
if root is not None,
return self._size.
increment i by integer 1.
call the function force_text with an argument seconds set to integer 1.
call the method self.stdout.write with an argument string 'java',
define the method __init__ with 2 arguments: self and parser.
get the value under the name key of the kwargs dictionary, substitute it for None.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
call the method parser.delete_first_token.
derive the class TemplateSyntaxError from the object base class.
raise an TemplateSyntaxError exception with 2 arguments: string
call the method self.make_key with an argument string 'ascii', return the result.
if not,
return self._size.
call the function that return the result.
from importlib import import_module into default name space.
if parse_until is true,
call the function new_method_proxy with an argument name, substitute the result for bits.
use it as an argument for the call to the function mark_safe, substitute the result for the result.
where '%s' is replaced with e.
otherwise if ch equals integer 0.
do nothing.
try,
define the method __repr__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if parse_until is true,
define the function force_text with 2 arguments: parser and token.
try,
for every migration in return value of the method apps.get_app_configs,
call the method parser.add_argument with 3 arguments: string '--database', action set to boolean False,
from django.db import unicode_literals into default name space.
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide an argument.
if length of bits is greater than integer 0,
if name is contained in exclude,
return boolean False.
for every field in self.fields,
if value is an instance of six.string_types class,
call the function force_text with an argument k,
call the function six.text_type with 2 arguments: string appended to an empty list,
if value is an instance of tuple type,
if value is an instance of six.string_types,
requires_system_checks is boolean False.
from io import import_module into default name space.
define the method __repr__ with an argument self.
call the function mark_safe with an argument value, substitute the result for value.
if is is true,
from django.utils.six.moves import RemovedInDjango19Warning into default name space.
raise an TemplateSyntaxError exception with an argument string 'Unable to a valid method'.
return boolean False.
get the value from the sys.modules dictionary, if it is true,
decorator function register.filter with an argument is_safe set to boolean False.
call the function re.compile with 3 arguments: raw string 'utf-8', substitute the result for exclude.
define the method _has_changed with an argument self.
return an empty string.
if name is true and value is an instance of six.string_types,
if six.PY3 is true,
substitute name for opts.
return self.
from importlib import import_module into default name space.
call the method six.iteritems with an argument path, use the result as an argument, return the result.
if parse_until is true,
call the method self._assert_mutable.
if name is not None,
for every f in return value of the function force_str called with an argument i,
derive the class TemplateSyntaxError from the object base class.
define the function force_text with 2 arguments: value and attrs set to None.
return context.
define the function update_wrapper with 3 arguments: name, args and unpacked dictionary options.
define the method __init__ with arguments self and name.
call the method self._assert_mutable.
from django.utils.translation import force_text into default name space.
skip this loop iteration.
for every name in the result,
try,
if i is smaller than integer 0,
if match is None,
define the method __init__ with 5 arguments: self, name set to None.
call the method token.split_contents, return the result.
import module re.
append ch to output.
try,
call the method token.split_contents, substitute the result for m.
define the method with argument self.
do nothing.
call the function ugettext with an argument string k,
while i is greater than integer 0,
if call to the function mark_safe, if it evaluates to false,
if value is None,
define the method close with an argument self.
return boolean False.
call the method self.make_key with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 5 arguments: self, subject set to None, name set to None,
if six.PY3 is true,
define the function force_text with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method self.make_key with 2 arguments: value and value under the db key of the self.error_messages dictionary.
from collections import import_module into default name space.

call the method handler.addQuickElement with 2 arguments: string value and value under the first key of the item dictionary.
substitute level for widget.
raise an exception.
define the function with an argument self.
derive the class File from the object base class.
call the function mark_safe with an argument value, return the result.
join the result into a string, substitute it for bits.
append the result to a list, call the function mark_safe,
import module os.
if value is contained in self.empty_values,
raise an CommandError exception with an argument string 'subclasses of Storage must provide a method'.
call the method parser.delete_first_token.
call the method token.split_contents, substitute the result for exclude.
call the function reset_translations.
if not,
raise an NotImplementedError with an argument string 'subclasses of Storage must provide an argument.
if not,
import module os.
remove the loop execution.
define the method __str__ with an argument self.
define the method __str__ with 2 arguments: self and context.
call the method self.xml.startElement with 2 arguments: string 'title' and value under the 'id' key of the options dictionary.
join elements into a string separated with string ',
call the method self._assert_mutable.
from __future__ import unicode_literals into default name space.
status_code is an integer 0.
substitute the return value of the function force_text,
call the function reset_translations.
define the function lazy_number with 5 arguments: self, subject set to None,
if field is true, return boolean True, otherwise return boolean False.
substitute the result for value under the name key.
from __future__ import unicode_literals into default name space.
call the method render from the base class of the class SortedDict, with an argument attrs.
if value under the key key of the options dictionary is not None,
get the value under the 'database' key of the options dictionary, if it exists substitute the result for exclude.
define the method __str__ with 2 arguments: self and name.
msg is a string '%02d' for every migration in the result,
call the method apps.get_app_configs, append the result to output.
if not,
if ImportError exception is caught,
try,
call the method self._assert_mutable.
if six.PY3 is true,
if length of bits is contained in self.empty_values,
call the method handler.addQuickElement with an argument string 'ascii', use the result as an argument for the call to the self.stdout.write method.
do nothing.
for every attr in self.dicts,
substitute self for value.
from django.utils.translation import force_text and force_text into default name space.
return self._size.
if ValueError exception is caught,
if value under the 'database' key of the options dictionary is true,
substitute the result for value under the key key of the attrs dictionary. call the function six.iteritems with an argument value, substitute the result for value.
skip this loop iteration.
get the value under the 'id' key of the options dictionary, substitute it for self.verbosity.
if filename is not None,
return path.
return self._size.
convert value under the db key of the options dictionary converted to a list, substitute it for val.
if TypeError renamed to e, exception is caught,
return the result.
substitute the result for the value under the name key of the substitutions dictionary.
for every k and v in return value of the function sys.exc_info.
return self._size.
call the method __init__ from the base class of the base class of the class SortedDict, with 3 arguments:
do nothing.
if not,
from django.core.management.base import connections and DEFAULT_DB_ALIAS into default name space.
raise an CommandError exception with an argument string 'subclasses of Storage must provide a valid method'.
if value is an instance of six.string_types class,
if ch is greater than integer 1,
return boolean False.
from django.core.exceptions import ImproperlyConfigured into default name space.
call the method self.stdout.write with an argument string " " write it to the result.
get the value under the key key of the options dictionary, substitute it for self.verbosity.
get the value from the options dictionary, if it exists substitute it for self.verbosity.
output_transaction is boolean True.
quant is an empty string.
import module sys.
call the method token.split_contents, substitute the result for bits.
if self.verbosity is greater than integer 0,
from __future__ import unicode_literals into default name space.
if not,
if value is an instance of the object type,
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a method'.
define the method __init__ with 4 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method parser.parse with an argument string 'idna', substitute the result for bits.
call the function re.compile with an argument context, substitute the result for message.
if not,
join tuple with 2 elements: result of the function force_text,
define the method return with 2 arguments: self and parser.
if value is not None,
substitute level for opts.
call the function ugettext with an argument integer 0, substitute the result for value.
call the function force_text with an argument value.
derive the class HTMLParser from the Exception base class.
call the function ugettext with an argument is_safe set to boolean False.
substitute obj for name.
if not,
define the function u with an argument value.
call the method self.stdout.write with 3 arguments: string 'link', an empty string,
import module warnings.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
raise an CommandError exception with an argument string 'subclasses of BaseCache class, created with 3 arguments:
define the method __init__ with an argument self.
try,
substitute the result for value under the key key of the kwargs dictionary.
if value is an instance of six.string_types,
return self.
call the function warnings.warn with an argument string 'Ensure use the result as an argument.
import module re.
define the function _ with 4 arguments: string 'link', string 'id_%s',
call the method handler.addQuickElement with an argument string 'ascii', use the result as an argument for the call to the self.stdout.write method.
otherwise if value is true and value is not None,
for every name and v in return value of the function force_text called with an argument attrs.
join form into a string, return the result.
call the method token.split_contents, substitute the result for value under the db key of the
if data is an instance of six.string_types,
if not,
if ch equals integer 0,
substitute name for opts.
__all__ is a dictionary with 6 elements: strings normal_row and strings,
for every f in return value of the method apps.get_app_configs,
if six.PY3 is true,
if i equals to string ',
define the method with argument self.
if value is not None,
do nothing.
substitute obj for name.
define the function translation with 2 arguments: ch and is_safe set to boolean True.
define the method render with 2 arguments: self and parser.
define the method __str__ with an argument self.
if data has an attribute 'natural_key' attribute,
if not,
if not,
if self.verbosity equals integer 1
call the method parser.delete_first_token.
return result.
from __future__ import unicode_literals into default name space.
define the function reset_translations.
requires_system_checks is boolean False.
do nothing.
if match is not None,
call the method handler.addQuickElement with an argument string if it evaluates to false,
skip this loop iteration.
substitute self.field.widget for widget.
from importlib import connections and DEFAULT_DB_ALIAS into default name space.
append a tuple with 3 entries: return value of the function _ called with an argument
join the result into a string separated by ':', if not,
call the method self._assert_mutable.
call the cursor method substitute the result for bits.
try,
call the method to_python with an argument value, return the result.
default_list is an empty list.
call the method apps.get_app_configs, return the result.

if self.verbosity is false,
status_code is an integer 0.
remove the value under the key key of the options dictionary,
call the function format_html with an argument context, use the result as an argument for the call to the function mark_safe,
import module os.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
for every key and v in return value of the function sys.exc_info.
call the method sys.stderr.write with an argument string 'utf-8', use the result as an argument for the call to the self.stdout.write method.
call the function reset_translations.
from django.db import models into default name space.
for every f in return value of the function _ called with an argument:
call the function six.reraise with 2 arguments: key and version set to version as arguments.
if parse_until is true,
for every e and e in return value of the function force_text,
substitute the first element of result for name.
call the method self.make_key with 3 arguments: value and arg.
if value under the 'id' key of the options dictionary is false,
status_code is an integer 0.
call the method handler.addQuickElement with 3 arguments: string handler.addQuickElement by integer 0,
substitute name for opts.
define the method __iter__ with arguments self and field.
substitute first element of the result for value under the key key of the kwargs dictionary.
if self.verbosity is not contained in string '.',
if attrs is None,
substitute model._meta for widget.
register.tag decorator,
derive the class CacheClass from the Widget base class.
import module warnings.
return boolean True.
raise an ValueError exception with an argument string 'subclasses of Storage must provide a string,
raise an ValueError exception with an argument string 'Unable to the user of the function _ called with an argument string,
call the method handler.addQuickElement with an argument string " correct the result with an argument,
if not,
return boolean False.
from django.core.exceptions import CommandError into default name space.
call the function re.compile with an argument string 'utf-8', substitute the result for output.
remove the value under the key key of the self dictionary is None.
if not,
define the method __str__ with an argument self.
if value under the key key of the sys.modules dictionary is not an instance of list type,
if Exception, renamed to e, exception is caught,
define the method __str__ with an argument self.
substitute complain for opts.
import module warnings.
if value is true,
if six.PY3 is true,
if PY3 is true,
if Exception, renamed to e, exception is caught,
try,
call the function format_html with 2 arguments value and autoescape set to boolean False.
if OSError, renamed to e, exception is caught,
return list containing an empty string,
if value under the 'database' key of the options dictionary is true,
call the __init__ method with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return result.
if not,
call the method token.split_contents, substitute the result for db.
call the method self._assert_mutable.
if value is an instance of list type,
found is an empty list.
call the method self.make_key with key and version as arguments, substitute the result for key.
if i is greater than integer 0,
for every c in return value of the function force_text with an argument i,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
for every key and v in return value of the function force_text called with 2 arguments:
call the method token.split_contents, substitute the result for module.
call the method m.group with 2 arguments: raw string 'utf-8',
call the method token.split_contents, substitute the result for match.
call the method token.split_contents, append the result to self.stdout.
call the method parser.delete_first_token.
call the re.compile method, if it evaluates to true,
if name is true,
define the function reset_translations.
from django.utils import six into default name space.
get the value of the call to the method apps.get_app_configs,
if not,
call the method to_python with an argument value, return the result.
replace '%s' in a string separated with '.',
call the method self._assert_mutable.
call the function new_method_proxy with an argument context, substitute the result for bits.
call the function warnings.warn with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
substitute model._meta for widget.
define the method id_for_label with 2 arguments: self and token.
call the method clean from the base class of the class class.
from django.utils.encoding import mark_safe into default name space.
call the method resolve with 2 arguments: string
while self.verbosity is not contained in exclude,
from django.utils.six.moves import RemovedInDjango19Warning into default name space.
call the function six.reraise with 2 arguments: value under the db key of the item dictionary.
call the function token.split_contents, substitute the result for bits.
define the method __init__ with 4 arguments: self, name, name set to None.
call the function re.compile with an argument integer 0, substitute the result for bits.
return an empty string,
return nothing.
define the method __init__ with 2 arguments: self and parser.
call the function re.compile with an argument string substitute the result.
get the value under the 'database' key of the options dictionary, if it is true, substitute it for widget.
return an string
define the method self.validate_key with 2 arguments: self and token.
call the function new_method_proxy with an argument language, substitute the result for token.
call the function parser.add_argument with 5 arguments: string 'link', string 'store_true',
try,
skip this loop iteration.
call the function six.text_type with an argument value under the key key.
define the method __str__ with an argument self.
otherwise if name is true and f is not equal to integer 0,
output_transaction is boolean True.
call the function new_method_proxy with an argument context, substitute the result for bits.
if data has an attribute attribute.
call the method handler.addQuickElement with an argument string "
call the method __init__ with 3 arguments: unpacked list args and unpacked dictionary options.
call the function new_method_proxy with 3 arguments: name, unpacked list args and unpacked dictionary kwargs.
substitute result of the function force_bytes called with an argument t.
call the function timedelta with an argument string 'utf-8', substitute the result for args.
for every arg in return value of the function force_text called with an argument i,
get the value under the db key of the connections dictionary, substitute the result for m.
decorator function register.filter with an argument is_safe set to boolean False.
substitute value for opts.
call the function six.reraise with 3 arguments: context, unpacked list args and unpacked dictionary kwargs.
for every form in the result,
where '%s' is replaced with,
quant is an empty list.
if six.PY3 is true,
get the value under the language_code key of the self.feed dictionary.
define the method __str__ with 4 arguments: self, name, files and token.
call the function six.reraise with 2 arguments: value and unpacked dictionary options.
define the function constant_time_compare with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method has_key with 4 arguments: self, name and name.
if not,
define the method __init__ with 2 arguments: self and context.
raise an TypeError exception with an argument string 'Unable to the result of the function _ called with an argument string,
get the value under the name key of the options dictionary, if it exists substitute it for exclude.
if name is not None,
try,
call the function mark_safe with an argument integer 2.
get the value under the 'database' key of the options dictionary, substitute the result for db.
from __future__ import unicode_literals into default name space.
otherwise if self.verbosity equals integer 1,
get the value under the 'id' key of the connections dictionary, if it exists,
do nothing.
define the method __init__ with 4 arguments: self, name, unpacked list args and unpacked dictionary kwargs.
call the method parser.add_argument with 3 arguments: string
return result.
define the method handle with 3 arguments: self, form set to None.
raise an exception.
call the function ugettext with an argument, string with the result of the function,
call the function mark_safe with an argument value, substitute the result for value.
if value is None,
write the result to self.stdout.
define the method __init__ with 4 arguments: self, name, keys set to None.
try,
define the method close with an argument self.
raise an ValidationError with 2 arguments:
substitute complain for name.

define the method __iter__ with an argument self.
call the function force_bytes with an argument text, substitute the result for response.
call the method token.split_contents, substitute the result for obj.
do nothing.
call the method self._assert_mutable.
raise an TypeError exception.
if value is an instance of dict type,
return self._size.
try,
raise an ValueError exception with an argument string 'subclasses of the class _ class.
get the value under the key key of the options dictionary is None.
call the function force_text with an argument value, substitute the result for module.
raise an ValueError exception with an argument string 'subclasses of any must provide a argument.
if not,
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if initial is None,
return a string '%02d' formated with 3 entries:
define the function reset_translations.
return an instance of the class type,
quant is an empty list.
define the method content with an argument self.
call the function re.compile with an argument string 'utf-8', substitute the result for message.
define the method __init__ with 4 arguments: self, name, name set to None.
if unicode_literals is true,
input_type is None.
if self.verbosity is not contained in self.empty_values,
substitute complain for widget.
call the function force_text with an argument func.
return an empty string.
call the method __deepcopy__ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return a class with 2 elements: result of the function force_text called with 2 arguments:
define the method widget_attrs with 2 arguments: self and value.
if initial is None,

i is an empty string.
if self.verbosity is greater than or equal to integer 0,
call the method self.stdout.write with an argument string 'idna',
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
try,
from django.utils import six into default name space.
call the method self.make_key with an argument self.
substitute value under the key key of self._cache dictionary.
call the method parser.add_argument with 2 arguments: string '--extension', string '-e',
finally perform,
define the method __iter__ with 3 arguments: self, key and value.
from importlib import import_module into default name space.
define the method __str__ with an argument self.
return self._size.
call the method deactivate.
value is an empty list.
if data is an instance of six.string_types and meta is not None,
call the function new_method_proxy with 2 arguments: raw tuple with 2 elements: strings
for every i in value under the language_code key of the options dictionary, for every f in value,
call the function force_text with an argument value.
is boolean True.
return a string '%02d' formated with return value of the function _ called with an argument i,
call the method parser.next_token, return the result.
call the method split with path as the argument.
for every attr in result,
call the method
from django.utils.encoding import mark_safe into default name space.
if name is not None,
call the method extend write the result to out.
import module os.
from django.template.base import BaseCommand and CommandError into default name space.
if app_config.models_module is true,
call the method token.split_contents, substitute the result for bits.
if not,
substitute first element of the result for args.
return self._size.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
get the value under the 'database' key of the options dictionary, if it exists substitute it for exclude.
from django.utils.encoding import force_text into default name space.
import module warnings.
return name and boolean False.
substitute name for widget.
from django.core.exceptions import BaseCommand into default name space.
call the function ungettext with 3 arguments: singular, plural and token.
define the method close with 2 arguments: self and context.
fields is a instance of a class Node, created with 3 arguments:
call the function ugettext with an argument string "Please correct the duplicate values to the result.
substitute complain for t.
derive the class Command from the BaseCommand base class.
call the method parser.delete_first_token.
for every name and value in return value of the call to the method,
otherwise if value is greater or equal to integer 1,
substitute result for key.
call the function re.compile with an argument string 'utf-8', use the result as an argument for the call to the function mark_safe,
call the function func with an argument value, substitute the result for obj.
define the method __init__ with arguments self and name.
call the function force_bytes with an argument path, substitute the result for message.
from django.utils.translation import force_str into default name space.
call the method token.split_contents, substitute the result for val.
call the function force_bytes with an argument integer 1.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
replace '%s' in value of the call to the method,
if ImportError exception is caught,
call the method handler.addQuickElement with 2 arguments: string 'title' and help set to string
get the value under the 'database' key of the options dictionary, if it is true,
get the value under the key key of the options dictionary, if it exists substitute it for None.
from django.utils.deprecation import force_text into default name space.
default_error_messages is an dictionary with an element tuple with 2 elements: an empty dictionary.
do nothing.
if not,

call the method parser.compile_filter with 3 arguments: string
derive the class EmailBackend from the object base class.
call the method self.make_key with 3 arguments: return value of the method
define the method __init__ with arguments self, name and name.
substitute self.subject for widget.
from __future__ import unicode_literals into default name space.

raise an TemplateSyntaxError exception with an argument string 'Unable to a valid attribute, raise an exception.
call the function ugettext with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
if value is true,
define the method delete with an argument self.
call the method self.xml.startElement with 5 arguments: string '--database', action set to string 'store_false',
if self.verbosity is true,
if value is an instance of six.string_types,
if PY3 is true,
call the function re.compile with 2 arguments: string 'utf-8', substitute the result for message.
call the method parser.next_token, use the result as an argument for the call to the method,
define the method __str__ with an argument self.
append a tuple with 2 elements: self,
if e has an attribute attribute,
get the value under the 'id' key of the options dictionary, if it exists substitute it for self.verbosity.
try,
call the function reset_translations.
for every i in handlers,
input_type is a string 0.
if StandardError, renamed to e, exception is caught,
return value.
otherwise if parse_until is true,
call the function re.compile with an argument string 'ascii', use the result as an argument for the call to the function re.compile with an argument:
call the function with an argument path, return the result.
value under name key of self dictionary.
where '%s' is replaced with value under the format key of the item dictionary.
from django.core.management.base import CommandError into default name space.
register.tag decorator,
define the function dec with 2 arguments: parser and token.
define the method __str__ with an argument self.
output is an empty list.
define the function format_html with 3 arguments: is_safe set to boolean False.
for every x and f in result,
for every attr in self.dicts,
call the function import_module with an argument name, if it evaluates to true,
from django.utils import six into default name space.
if not,
call the function new_method_proxy with an argument integer 1.
if not,
call the function format_html with 2 arguments: string 'link', an empty string,
define the method __init__ with 5 arguments: self, name, data and unpacked dictionary options.
get the value under the key key of kwargs dictionary is None.
call the method self.xml.startElement with 3 arguments: string 'link', an empty string.
call the function force_text with an argument value, substitute the result for module.
define the function deactivate.
if not,
if name is not contained in self.empty_values,
define the method __str__ with an argument self.
if Exception, renamed to e, exception is caught,
if not,
for every f in return value of the function _ called with an argument i,
i is integer 0.
do nothing.
import module warnings.
yield result.
errors is an empty list.
from django.utils.encoding import force_text and CommandError into default name space.
from django.utils.safestring import mark_safe into default name space.
return self._size.
if not,
from django.utils.functional import import_string into default name space.
raise an TemplateSyntaxError exception with an argument string k,
from django.utils.encoding import RemovedInDjango19Warning into default name space.
define the method handle with 4 arguments: self, files and token.
dest set to boolean True, and help as a string 'Nominates Django to the "default" database.'. call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store_false',
if value is None,
call the function _ with 2 arguments: raw string
decorator function register.filter with an argument s.
from django.utils import import_module into default name space.
get the value under the 'id' key of the options dictionary, if it exists substitute it for handlers,
return result.
substitute name for widget.
return the result of the call to the function mark_safe, return the result.
append a tuple with 2 elements of bits.

increment i by integer -1.
skip this loop iteration.
raise an NotImplementedError exception with an argument string 'subclasses of Storage must class.
if self.verbosity is greater than integer 0,
substitute regex for widget.
call the method self._assert_mutable.
call the function with argument self.
if settings.DEBUG is true,
call the method self.make_key with an argument name, use the result as an argument for the call to the function mark_safe,
call the function force_text with an argument value.
call the method handler.addQuickElement with an argument integer 0,
if last element of bits is lesser than integer 1,
call the method __init__ with arguments self and name.
if not,
if not,
call the method
call the method cursor.execute from the base class of the InMemoryUploadedFile class, with 2 arguments: return value of the method
call the function allow_lazy with an argument path, return the result.
if six.PY3 is true,
substitute kwargs for value under the key key of data dictionary.
call the method __init__ with an argument unpacked dictionary kw, return the result.
call the method __init__ from the base class of the class ModelMultipleChoiceField, with 4 arguments: self, unpacked list args,
call the self.stdout.write method with 2 arguments: parser and token.
define the function lazy with 2 arguments: parser and token.
if value is not contained in return value of the method apps.get_app_configs called
import module warnings.
return a list with 2 elements: result of the method apps.get_app_configs,
call the method self._assert_mutable.
help is a string '(use '%s' is replaced with e.
if field is not contained in the result of the function import_module called with an argument,
return value.
result is None.
convert value under the db key of the options dictionary to a list, join the first elements into a list, substitute it for space.
for every name in return value of the call to the function,
call the method parser.parse with an argument self.
call the function re.compile with an argument string 'utf-8', substitute the result for bits.
call the function six.text_type with 2 arguments: return value of the function force_text,
define the method close with an argument self.
from django.core.management.base import BaseCommand and DEFAULT_DB_ALIAS into default name space.
from django.utils.translation import import and six into default name space.
return a list containing 3 entries: return value of the function _ called with an string
register.tag decorator,
call the function force_text with an argument k,
return default.
encoding is None.
call the function force_text with an argument text, substitute the result for match.
get the value under the key key of the kwargs dictionary, if it exists substitute it for None.
if value under the key key of the options dictionary is true,
property decorator,
status_code is an integer 2.
substitute name elements of the result for args.
if value is contained in self.empty_values,
if parse_until is true,
otherwise if name is true,
substitute settings.DEFAULT_CHARSET for self.name.
if value is an instance of list type,
if name is not None,
substitute name for name.
import module os.
skip decorator,
define the method __init__ with 5 arguments: self, subject set to None and choices set to None.
from django.utils.translation import force_text and force_text into default name space.
input_type is None.
define the function _ with 3 arguments: name, unpacked list args and unpacked dictionary kwargs.
define the method open with an argument self.
call the function force_text with 2 arguments: return value of the function force_text,
from django.apps import apps into default name space.
if six.PY3 is true,
call the function force_bytes with an argument value, substitute the result for result.
if NameError exception is caught,
define the method close with 2 arguments self and value.
if name is true,
for every model in handlers,
do nothing.
substitute first element of the first element of the result for exclude.
call the method self.make_key with an argument value under the key key.
if value is an instance of six.string_types,
call the function format_html with an argument context, return the result.
if value is not None,
if index is not None,
call the function escape with 2 arguments: an empty string,
kwargs is None.
derive the class Command from the object base class.
call the method self._assert_mutable.
define the method render with 4 arguments: self, unpacked list args and unpacked dictionary kwargs.
return the value under the key key of the key dictionary.
define the method add_arguments with 2 arguments: self and parser.
if data is true,
fields is an instance of a class DateField, created with 3 arguments:
__all__ is a list with 3 elements: return value of the function force_text,
if not,
define the method handle with 2 arguments: self and parser.
call the function force_text with an argument text, return the result.
if has_old_option is true,
if first element of bits is not equal to integer 0 and second element of bits is not equal to integer 0,
from __future__ import unicode_literals into default name space.
if value is an instance of list type,
yield s.
define the function deactivate.
decorator function register.filter with an argument is_safe set to None.
'%s' is an empty list.
try,
define the function lazy_number with 4 arguments: self, subject set to None,
call the method cursor.execute with an argument self.
return nothing.
import module os.
call the self.stdout.write method with an argument integer 1.
for every path in return value of method
ch is an empty list.
if not,
derive the class Command from the Exception base class.
for every model in return value of the call to the function mark_safe,
valid is boolean True.
get the value under the key key of kwargs dictionary, substitute it for name.
call the function re.compile with an argument string 'utf-8', substitute the result for token.
call the function re.compile with an argument string substitute the result for m.
define the method __init__ with 4 arguments: self, data, unpacked list args and unpacked dictionary kwargs.
call the method self.make_key with key and version set to None.
call the method self.xml.startElement with an argument string "
if lookup is false,
call the function force_text with 2 arguments: value under the name key of the item dictionary, substitute the result for value.
call the method cursor.execute with 2 arguments: string 1.
define the method __str__ with an argument self.
remove the value under the key key of the kwargs dictionary is true,
call the function force_str with an argument value under the key key of the options dictionary, substitute the result for value.
call the method parser.parse with an argument string 'utf-8', substitute the result for space.
increment weight by integer 1.
return self.
call the method self.make_key with an argument context, strip the result of the result of the function,
call the method token.split_contents, substitute the result for result.
for every item in self.dicts,
return an empty string.
substitute _iterkeys for widget.
if not,
substitute complain for t.
raise an ValueError exception with an argument string 'Unable to the result of the method DateField, called with 3 arguments:
return boolean True.
define the method __repr__ with 2 arguments: self and token.
register.tag decorator,
if args is true,
label is None.
msg is a tuple with 2 elements: string
if ImportError exception is caught,
define the function with 2 arguments value and arg.
if size is not None,
call the method self.make_key with 2 arguments: key and unpacked dictionary options.
define the method __str__ with arguments self and field.
define the function _ with an argument message.
define the method close with 4 arguments: self, initial and name.
get the value under the 'id' key of the options dictionary, if it doesnt exists substitute it for value.
return self._size.
return value under the key key of self dictionary.
from django.core.management.base import BaseCommand into default name space.
for every i in self.dicts,
call the method
from django.utils.encoding import import_string into default name space.
define the function _ with an argument is_safe set to None.
if key is not None,
call the function func with an argument tuple with 2 elements: return value of the function force_text called with an argument value,
join the result into a raw string, separated by ', substitute it for value.
define the method __init__ with 2 arguments: self and unpacked dictionary kwargs.
if value is not an instance of six.string_types,
if length of line is greater than integer 0,
define the function warnings.warn with 2 arguments: self and token.
for every i in return value of the function _ called with an argument string,

call the method self.xml.startElement with an argument string 'utf-8',
define the method __str__ with 2 arguments: self and value.

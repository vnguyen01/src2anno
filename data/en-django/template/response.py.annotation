from django.http import HttpResponse
#ANNOTATION: from django.http import HttpResponse into default name space.
from django.template import loader, Context, RequestContext
#ANNOTATION: from django.template import loader,  Context and RequestContext into default name space.
from django.utils import six
#ANNOTATION: from django.utils import six into default name space.


class ContentNotRenderedError(Exception):
#ANNOTATION: derive the class ContentNotRenderedError from the Exception base class.
    pass
#ANNOTATION: do nothing.


class SimpleTemplateResponse(HttpResponse):
#ANNOTATION: derive the class SimpleTemplateResponse from the HttpResponse base class.
    rendering_attrs = ['template_name', 'context_data', '_post_render_callbacks']
#ANNOTATION: rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.

    def __init__(self, template, context=None, content_type=None, status=None):
#ANNOTATION: define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
        # It would seem obvious to call these next two members 'template' and
        # 'context', but those names are reserved as part of the test Client
        # API. To avoid the name collision, we use tricky-to-debug problems
        self.template_name = template
#ANNOTATION: substitute template for self.template_name.
        self.context_data = context
#ANNOTATION: substitute context for self.context_data.

        self._post_render_callbacks = []
#ANNOTATION: self._post_render_callbacks is an empty list.

        # content argument doesn't make sense here because it will be replaced
        # with rendered template so we always pass empty string in order to
        # prevent errors and provide shorter signature.
        super(SimpleTemplateResponse, self).__init__('', content_type, status)
#ANNOTATION: call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.

        # _is_rendered tracks whether the template and context has been baked
        # into a final response.
        # Super __init__ doesn't know any better than to set self.content to
        # the empty string we just gave it, which wrongly sets _is_rendered
        # True, so we initialize it to False after the call to super __init__.
        self._is_rendered = False
#ANNOTATION: self._is_rendered is boolean False.

    def __getstate__(self):
#ANNOTATION: define the method __getstate__ with an argument self.
        """Pickling support function.

        Ensures that the object can't be pickled before it has been
        rendered, and that the pickled state only includes rendered
        data, not the data used to construct the response.
        """
#ANNOTATION: docstring
        obj_dict = super(SimpleTemplateResponse, self).__getstate__()
#ANNOTATION: call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
        if not self._is_rendered:
#ANNOTATION: if self._is_rendered is false,
            raise ContentNotRenderedError('The response content must be '
                                          'rendered before it can be pickled.')
#ANNOTATION: raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
        for attr in self.rendering_attrs:
#ANNOTATION: for every attr in self.rendering_attrs,
            if attr in obj_dict:
#ANNOTATION: if attr is contained in obj_dict,
                del obj_dict[attr]
#ANNOTATION: delete entry under the attr key of obj_dict dictionary.

        return obj_dict
#ANNOTATION: return obj_dict.

    def resolve_template(self, template):
#ANNOTATION: define the method resolve_template with 2 arguments: self and template.
        "Accepts a template object, path-to-template or list of paths"
#ANNOTATION: docstring
        if isinstance(template, (list, tuple)):
#ANNOTATION: if template is an instance of list or tuple types,
            return loader.select_template(template)
#ANNOTATION: call the method loader.select_template with an argument template, return the result.
        elif isinstance(template, six.string_types):
#ANNOTATION: otherwise is template is six.string_types instance,
            return loader.get_template(template)
#ANNOTATION: call the method loader.get_template with an argument template, return the result.
        else:
#ANNOTATION: if not,
            return template
#ANNOTATION: return template.

    def resolve_context(self, context):
#ANNOTATION: define the method resolve_context with 2 arguments: self and context.
        """Converts context data into a full Context object
        (assuming it isn't already a Context object).
        """
#ANNOTATION: docstring
        if isinstance(context, Context):
#ANNOTATION: if context is an instance of Context,
            return context
#ANNOTATION: return context.
        else:
#ANNOTATION: if not,
            return Context(context)
#ANNOTATION: return an instance of Context class, created with an argument context.

    @property
#ANNOTATION: property decorator,
    def rendered_content(self):
#ANNOTATION: define the method rendered_content with an argument self.
        """Returns the freshly rendered content for the template and context
        described by the TemplateResponse.

        This *does not* set the final content of the response. To set the
        response content, you must either call render(), or set the
        content explicitly using the value of this property.
        """
#ANNOTATION: docstring
        template = self.resolve_template(self.template_name)
#ANNOTATION: call the method self.resolve_template with an argument self.template_name, substitute the result for template.
        context = self.resolve_context(self.context_data)
#ANNOTATION: call the method self.resolve_context with an argument self.context_data, substitute the result for context.
        content = template.render(context)
#ANNOTATION: call the method template.render with an argument context, substitute the result for content.
        return content
#ANNOTATION: return content.

    def add_post_render_callback(self, callback):
#ANNOTATION: define the method add_post_render_callback with 2 arguments: self and callback.
        """Adds a new post-rendering callback.

        If the response has already been rendered,
        invoke the callback immediately.
        """
#ANNOTATION: docstring
        if self._is_rendered:
#ANNOTATION: if self._is_rendered is true,
            callback(self)
#ANNOTATION: call the functoin callback with an argument self.
        else:
#ANNOTATION: if not,
            self._post_render_callbacks.append(callback)
#ANNOTATION: append callback to self._post_render_callbacks list.

    def render(self):
#ANNOTATION: define the method render with an argument self.
        """Renders (thereby finalizing) the content of the response.

        If the content has already been rendered, this is a no-op.

        Returns the baked response instance.
        """
#ANNOTATION: docstring
        retval = self
#ANNOTATION: substitute self for retval.
        if not self._is_rendered:
#ANNOTATION: if self._is_rendered is false,
            self.content = self.rendered_content
#ANNOTATION: substitute self.rendered_content for self.content.
            for post_callback in self._post_render_callbacks:
#ANNOTATION: for every post_callback in self._post_render_callbacks,
                newretval = post_callback(retval)
#ANNOTATION: call the function post_callback with an argument retval, substitute the result for newretval.
                if newretval is not None:
#ANNOTATION: if newretval is not None,
                    retval = newretval
#ANNOTATION: substitute newretval for retval.
        return retval
#ANNOTATION: return retval.

    @property
#ANNOTATION: property decorator,
    def is_rendered(self):
#ANNOTATION: define the method is_rendered with an argument self.
        return self._is_rendered
#ANNOTATION: return self._is_rendered.

    def __iter__(self):
#ANNOTATION: define the method __iter__ with an argument self.
        if not self._is_rendered:
#ANNOTATION: if self._is_rendered is false,
            raise ContentNotRenderedError('The response content must be '
                                          'rendered before it can be iterated over.')
#ANNOTATION: raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
        return super(SimpleTemplateResponse, self).__iter__()
#ANNOTATION: call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.

    @property
#ANNOTATION: property decorator,
    def content(self):
#ANNOTATION: define the method content with an argument self.
        if not self._is_rendered:
#ANNOTATION: if self._is_rendered is false.
            raise ContentNotRenderedError('The response content must be '
                                          'rendered before it can be accessed.')
#ANNOTATION: raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
        return super(SimpleTemplateResponse, self).content
#ANNOTATION: return the content field of the base class of the class SimpleTemplateResponse.

    @content.setter
#ANNOTATION: content.setter decorator,
    def content(self, value):
#ANNOTATION: define the method content with 2 arguments: self and value.
        """Sets the content for the response
        """
#ANNOTATION: docstring
        HttpResponse.content.fset(self, value)
#ANNOTATION: call the method HttpResponse.content.fset with 2 arguments: self and value.
        self._is_rendered = True
#ANNOTATION: self._is_rendered is boolean True.


class TemplateResponse(SimpleTemplateResponse):
#ANNOTATION: derive the class TemplateResponse from the SimpleTemplateResponse base class.
    rendering_attrs = SimpleTemplateResponse.rendering_attrs + ['_request', '_current_app']
#ANNOTATION: append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.

    def __init__(self, request, template, context=None, content_type=None,
            status=None, current_app=None):
#ANNOTATION: define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,
#ANNOTATION: status set to None and current_app set to None. 
        # self.request gets over-written by django.test.client.Client - and
        # unlike context_data and template_name the _request should not
        # be considered part of the public API.
        self._request = request
#ANNOTATION: substitute request for self._request.
        # As a convenience we'll allow callers to provide current_app without
        # having to avoid needing to create the RequestContext directly
        self._current_app = current_app
#ANNOTATION: substitute current_app for self._current_app.
        super(TemplateResponse, self).__init__(
            template, context, content_type, status)
#ANNOTATION: call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.

    def resolve_context(self, context):
#ANNOTATION: define the method resolve_context with 2 arguments: self and context.
        """Convert context data into a full RequestContext object
        (assuming it isn't already a Context object).
        """
#ANNOTATION: docstring
        if isinstance(context, Context):
#ANNOTATION: if context is an instance of Context class.
            return context
#ANNOTATION: return context.
        return RequestContext(self._request, context, current_app=self._current_app)
#ANNOTATION: return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.

"""
Functions that modify an HTTP request or response in some way.
"""
#ANNOTATION: docstring 

# This group of functions are run as part of the response handling, after
# everything else, including all response middleware. Think of them as
# "compulsory response middleware". Be careful about what goes here, because
# it's a little fiddly to override this behavior, so they should be truly
# universally applicable.


def fix_location_header(request, response):
#ANNOTATION: define function fix_location_header with request and response as arguments.
    """
    Ensures that we always use an absolute URI in any location header in the
    response. This is required by RFC 2616, section 14.30.

    Code constructing response objects is free to insert relative paths, as
    this function converts them to absolute paths.
    """
#ANNOTATION: docstring
    if 'Location' in response and request.get_host():
#ANNOTATION: if 'Location' is contained in response and function request.get_host evaluates to True,
        response['Location'] = request.build_absolute_uri(response['Location'])
#ANNOTATION: modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
    return response
#ANNOTATION: return response.


def conditional_content_removal(request, response):
#ANNOTATION: define the function conditional_content_removal with request and response as the arguments. 
    """
    Removes the content of responses for HEAD requests, 1xx, 204 and 304
    responses. Ensures compliance with RFC 2616, section 4.3.
    """
#ANNOTATION: docstring
    if 100 <= response.status_code < 200 or response.status_code in (204, 304):
#ANNOTATION: if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
        if response.streaming:
#ANNOTATION: if response.streaming is True,
            response.streaming_content = []
#ANNOTATION: response.streaming_content is an empty list.
        else:
#ANNOTATION: if not,
            response.content = b''
#ANNOTATION: response.content is bytes empty string.
        response['Content-Length'] = '0'
#ANNOTATION: substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
    if request.method == 'HEAD':
#ANNOTATION: if request.method equals to string 'HEAD',
        if response.streaming:
#ANNOTATION: if response.streaming is true,
            response.streaming_content = []
#ANNOTATION: response.streaming_content is an empty list.
        else:
#ANNOTATION: if not,
            response.content = b''
#ANNOTATION: response.content is bytes empty string.
    return response
#ANNOTATION: return response.

warnings . warn ( "django.utils.dictconfig will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
if value in self . empty_values :
raise ValidationError ( errors )
if os . path . isdir ( template_dir ) :
return commands
kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )
from django . utils . safestring import mark_safe , SafeData
@ property
while bits :
else :
class ImageFile ( File ) :
def __next__ ( self ) :
return f
self . encoding = charset
tried . extend ( [ pattern ] + t for t in sub_tried )
self . write_migration_files ( changes )
try :
try :
statement . append ( cleaned_line )
substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
def __str__ ( self ) :
msg . attach ( attachment )
tables = connection . introspection . table_names ( )
params . update ( kwargs )
so = open ( out_log , 'a+' , buffering )
return 12
def truncatechars_html ( value , arg ) :
while self . tokens :
for fixture_dir in fixture_dirs :
dot = callback . rindex ( '.' )
with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :
if six . PY3 :
s = s . decode ( encoding , errors )
return value
except ImportError :
new_modules = module_values - _cached_modules
class NullDevice :
else :
self . size = size
get_function_closure = operator . attrgetter ( _func_closure )
def close ( self ) :
raise FieldError ( message )
self . template_cache [ key ] = TemplateDoesNotExist
whole_digits = digits - decimals
field_desc += ', '
if commit :
end_text_pos = pos
else :
else :
def b64_decode ( s ) :
def __init__ ( self , filepath , parsed ) :
self . salt = force_str ( salt or  '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
return result
def appendlist ( self , key , value ) :
from django . core import signals
def __len__ ( self ) :
return func ( * args , ** kwargs )
except ImportError as e :
for statement in sql_statements :
if end < 0 :
if self . verbosity >= 1 :
if ord ( char ) < 33 or ord ( char ) == 127 :
else :
if not form . has_changed ( ) :
self . location = abspathu ( self . base_location )
message = e
super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
else :
def render_options ( self , choices , selected_choices ) :
if is_aware ( date ) :
def __init__ ( self ) :
ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )
self . keyOrder . remove ( k )
class DeserializedObject ( object ) :
daemon_kwargs [ 'out_log' ] = options [ 'outlog' ]
else :
def get_data ( self ) :
if not isinstance ( d , datetime . datetime ) :
for model in app_models :
for key , value in data . items ( ) :
except ImportError :
fixture . close ( )
class ManagementUtility ( object ) :
from django . core . serializers . python import Serializer as PythonSerializer
compiled_result = compile_func ( self , token )
def __init__ ( self , view_name , args , kwargs , asvar ) :
lbp = bp
self . stdout . write ( "  you can delete them." )
from threading import local
self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
except UnicodeEncodeError :
continue
child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )
root , = nonlocal_root
db = router . db_for_read ( self . cache_model_class )
class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :
num_existing = len ( existing )
def ljust ( value , arg ) :
subcommand_cls = self . fetch_command ( cwords [ 0 ] )
self . children . append ( data )
if self . _count is None :
stream_or_string = stream_or_string . decode ( 'utf-8' )
def create_table ( self , database , tablename ) :
input_type = 'url'
def __init__ ( self , flo , chunk_size = 64 * 1024 ) :
syear = "%04d" % ( dt . year , )
endblock_re = re . compile ( r"""^\s*endblocktrans$""" )
def source_error ( self , source , msg ) :
help = "Runs this project as a FastCGI application. Requires flup."
if self . feed [ 'ttl' ] is not None :
key += tuple ( type ( v ) for v in args )
from django . conf import settings
return mark_safe ( output )
def _has_changed ( self , initial , data ) :
content = content or b''
import re
def deactivate_all ( ) :
from django . core . exceptions import ImproperlyConfigured
for base in bases [ : : - 1 ] :
level = handler_config . get ( 'level' , None )
raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
result = self . configurator . convert ( value )
error = error . error_dict
def find_template ( name , dirs = None ) :
if self not in context . render_context :
formfield = f . formfield ( ** kwargs )
d = Decimal ( force_text ( float ( text ) ) )
lang = get_language ( )
r = o . isoformat ( )
class DateTimeBaseInput ( TextInput ) :
try :
return super ( ModelChoiceField , self ) . prepare_value ( value )
else :
return func ( * resolved_args , ** resolved_kwargs )
base = base [ : - 4 ]
assert mimetype is None
super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
from collections import namedtuple
@ register . filter ( is_safe = True )
def ngettext ( singular , plural , number ) :
msgs = self . copy_plural_forms ( msgs , locale )
continue
return '\n' . join ( output )
self . stdout . write ( "    - %s\n" % operation . describe ( ) )
class VariableDoesNotExist ( Exception ) :
if self . sep not in signed_value :
return ''
if msg :
if timezone is None :
wrapper . cache_clear = cache_clear
consume_next = True
endbmatch = endblock_re . match ( t . contents )
value = urlunsplit ( url_fields )
import subprocess
ttl = force_text ( ttl )
from django . utils . translation import ungettext , ugettext as _
def created_time ( self , name ) :
try :
self . _is_rendered = False
from django . utils . timesince import timesince , timeuntil
result . append ( ch )
if key in cache :
def unsign ( self , signed_value ) :
else :
if request . _post_parse_error :
self . literal = int ( self . literal )
return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
from django . utils . module_loading import import_string
return False
path = path_override if path_override is not None else request . path
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
from datetime import datetime
urlunquote = allow_lazy ( urlunquote , six . text_type )
if count != 0 :
def _createdir ( self ) :
level = 0
remaining_bits = bits [ 1 : ]
nesting = 1
return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
yield "#   * Rearrange models' order"
run_syncdb = False
if hasattr ( error , 'error_dict' ) :
from __future__ import unicode_literals
obj = template_localtime ( obj , context . use_tz )
if not isinstance ( value , ( bytes , six . text_type ) ) :
elif cwords [ 0 ] in subcommands and cwords [ 0 ] != 'help' :
SafeString = SafeBytes
options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]
renamed = False
def tzname ( self , dt ) :
try :
ISO_8859_1 , UTF_8 = str ( 'iso-8859-1' ) , str ( 'utf-8' )
return True
def render ( self , context ) :
self . dicts = [ builtins ]
except ValueError :
if not re . search ( r'^[_a-zA-Z]\w*$' , name ) :
def _get_to_python ( self , field ) :
def add ( self , data , conn_type , squash = True ) :
NamedTemporaryFile = tempfile . NamedTemporaryFile
if len ( fixture_files_in_dir ) > 1 :
return ''
except ValueError :
args . append ( ( True , Variable ( var_arg ) ) )
return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
return None if timeout is None else time . time ( ) + timeout
handler . startElement ( "channel" , self . root_attributes ( ) )
from django . utils . safestring import mark_safe
self . stdout . write ( "Checking %s for fixtures..." % humanize ( fixture_dir ) )
return importlib_find ( full_module_name , package_path ) is not None
def _resolve_lookup ( self , context ) :
self . __language = language
dow = days [ date . weekday ( ) ]
mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
if not router . allow_migrate ( database , cache . cache_model_class ) :
def __iter__ ( self ) :
smart_str = smart_bytes
@ wraps ( fdel )
self . namespace = namespace
if processors is None :
self . _close_files ( )
raise ValueError (  "'%s.%s' has no field named '%s'."  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
self . _raw_ipv6 = bool ( self . use_ipv6 )
raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )
from django . utils . six . moves . urllib . parse import quote
@ register . filter ( "escapejs" )
return False
def serialize ( self ) :
self . connector = connector or self . default
return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
want_unicode = True
return result
def B ( self ) :
message = "'%s' already exists" % top_dir
return
from django import http
class Command ( BaseCommand ) :
except ( ValueError , TypeError ) :
if self . queryset is not None :
self . _load_post_and_files ( )
copystat ( old_file_name , new_file_name )
else :
if origin :
self [ key ] = result
fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
if isinstance ( s , SafeData ) :
if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :
return t . to_language ( )
class Command ( BaseCommand ) :
except ImportError :
if self . asvar :
try :
from django . core . handlers import base
formfield = self . fields [ field_name ]
form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
yield representative , True
self [ key ] = default
for bit in bits :
for obj in queryset . iterator ( ) :
if six . PY3 :
return inner
def cycle ( parser , token ) :
if old_attr is None :
if self . negated :
return d ( stream_or_string , ** options )
memo [ id ( self ) ] = result
import pickle
if pattern . app_name :
old_umask = os . umask ( 0 )
self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )
DefaultFeed = Rss201rev2Feed
return self
self . toks = { }
else :
self . silent = silent
import_module ( app_name )
raise Exception ( "This %s instance is not writable" % self . __class__ . __name__ )
if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
del self . _expire_info [ key ]
import sys
except ImportError :
def modified_time ( self , name ) :
item , old_style_list = convert_old_style_list ( sublist )
def render ( self , name , value , attrs = None , choices = ( ) ) :
else :
output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
opts = instance . _meta
self . host = host or settings . EMAIL_HOST
qs = qs . using ( form . instance . _state . db )
p_pattern = pattern . regex . pattern
code = 'max_length'
return result
value = self . val_expr . resolve ( context )
auto_id = self . auto_id
raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
return getattr ( _urlconfs , "value" , default )
parser . add_argument ( 'migration_name' , nargs = '?' ,  help = 'Database state will be brought to the state after that migration.' )
except IndexError :
if self . localize :
value = self . make_bytes ( value )
return type ( self ) . __bool__ ( self )
new_name , num_repl = re . subn ( r'\W' , '_' , new_name )
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
child_nodelists = ( 'nodelist' , )
return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )
boundary = opts . get ( 'boundary' )
return PALETTES [ DEFAULT_PALETTE ]
content_length = 0
return ( 0 , k [ 1 ] )
except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :
def clear_cdata_mode ( self ) :
def _has_changed ( self , initial , data ) :
self . run_validators ( value )
construct_instance_exclude = list ( exclude )
if options :
field_params [ 'db_column' ] = col_name
self . content = content
touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )
class ResolverMatch ( object ) :
pass
self . fed . append ( d )
exec_ = getattr ( moves . builtins , "exec" )
import sys
compressed = zlib . compress ( data )
try :
def render ( self , context ) :
elif self . verbosity > 0 :
from datetime import datetime , timedelta , tzinfo
return self . scheme == 'https'
from django . utils . _os import npath , upath
parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the "default" database.' )
if fields :
def split_contents ( self ) :
class EscapeData ( object ) :
reporter = ExceptionReporter ( request , is_email = True , * exc_info )
return None
class FloatField ( IntegerField ) :
@ python_2_unicode_compatible
wsgi_opts [ 'bindAddress' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
url_markup_template = '<a href="{0}">{1}</a>'
@ stringfilter
def dictitem ( s ) :
def _get_height ( self ) :
digits = decimals
from django . utils . deprecation import RemovedInDjango19Warning
if register_to :
for var in loopvars :
self . db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
def __init__ ( self , states , first ) :
self . attrs = attrs
hidden_widget = MultipleHiddenInput
week_number -= 1
if new_name in used_column_names :
raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
except TemplateSyntaxError as e :
class override ( object ) :
html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
self . backout . append ( self . pointer )
return ExtendsNode ( nodelist , parent_name )
kwargs [ name ] = parser . compile_filter ( value )
if isinstance ( elt , ( Choice , NonCapture ) ) :
from django . utils . six . moves import input
else :
for f in fields :
def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
class classonlymethod ( classmethod ) :
if cache_timeout is None :
values = list ( values )
return super ( URLField , self ) . clean ( value )
if label_output :
widget = NumberInput
self . save_m2m = save_m2m
try :
self . delete ( key , version = version )
def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :
invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
from django . utils . deprecation import RemovedInDjango19Warning
for migration in merge_migrations :
return ''
global _supported
if status != STATUS_OK :
return self . has_key ( key )
return forms_valid and not self . non_form_errors ( )
parse = sys . modules [ __name__ + ".moves.urllib_parse" ]
lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
_expire_info = { }
arg = ',' + arg
value . configurator = self
return ':' . join ( ret_ip )
self . _set_regex ( regex )
def as_table ( self ) :
return ""
@ register . filter ( is_safe = False )
def _archive_cls ( file ) :
if chunk is None :
raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' )
return timedelta ( seconds = - time . altzone )
new_name = new_name [ : - 3 ]
class InlineForeignKeyField ( Field ) :
else :
return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
def make_view_atomic ( self , view ) :
def close ( self ) :
return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )
def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :
def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :
except TypeError :
input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
try :
def check_migrations ( self ) :
self . match_re = re . compile ( self . match )
from django . core . exceptions import ImproperlyConfigured
else :
if escaped :
now = now . replace ( microsecond = 0 )
stream_class = BytesIO
check . tags = tags
template = template [ 7 : ]
__all__ = [ 'luhn' ]
if not isinstance ( i , six . integer_types ) :
def compile_filter_error ( self , token , e ) :
try :
except OSError as e :
elif f . unique :
def receive_data_chunk ( self , raw_data , start ) :
for log in existing :
try :
__all__ = [  'get_cache' , 'cache' , 'DEFAULT_CACHE_ALIAS' , 'InvalidCacheBackendError' ,  'CacheKeyWarning' , 'BaseCache' ,  ]
if lang_code is not None :
self . widget . choices = self . choices
self . stdout . write ( self . style . MIGRATE_HEADING ( "Migrations for '%s':" % app_label ) + "\n" )
else :
resource_string = None
def led ( self , left , parser ) :
class Command ( BaseCommand ) :
BASE2_ALPHABET = '01'
from __future__ import unicode_literals
__imul__ = complain
msg = (  "The included urlconf '{name}' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
parser . add_argument ( '--indent' , default = None , dest = 'indent' , type = int ,  help = 'Specifies the indent level to use when pretty-printing output.' )
cached_loaders = [ ]
from __future__ import unicode_literals
if opts . managed :
from django . conf import settings
def pop ( self , name ) :
import os
args = [  'xgettext' ,  '-d' , domain ,  '--language=C' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
_anonymous_ = [ '_offset_union' ]
if isinstance ( data , bytes ) :
self . stream . write ( "\n" )
class RadioSelect ( RendererMixin , Select ) :
raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )
else :
elif option == 'only' :
@ register . filter ( is_safe = True )
def clean ( self , data , initial = None ) :
if maxsize == 0 :
def __repr__ ( self ) :
return ''
def handle_m2m_field ( self , obj , field ) :
help = "Prints the CREATE INDEX SQL statements for the given model module name(s)."
parser . delete_first_token ( )
return maybe
tried . append ( filepath )
exit_code = restart_with_reloader ( )
return '%s_%s' % ( id_ , first_select )
if fg in color_names :
app_name = get_commands ( ) [ name ]
self . setlist ( key , default_list )
self . length , self . mime_type = length , mime_type
for i in range ( 0 , self . total_form_count ( ) ) :
if PY3 :
for line in header . split ( b'\r\n' ) :
self . stream = stream
return True
def __getitem__ ( self , key ) :
b64encoded = base64 . b64encode ( pickled )
return _trans . check_for_language ( lang_code )
class Loader ( BaseLoader ) :
pass
def flatten_result ( source ) :
def _post_clean ( self ) :
if upload :
categories = [ ( c ) for c in categories ]
re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' )
fd = os . open ( full_path , flags , 0o666 )
from django . db import router , DEFAULT_DB_ALIAS
raise TemplateDoesNotExist ( ', ' . join ( not_found ) )
default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
self . _errors . append ( form . errors )
try :
return new_class
if self . _wrapped is empty :
parts = viewname . split ( ':' )
if compress :
@ property
return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
self . value = value
print ( FASTCGI_HELP )
from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
result = user_function ( * args , ** kwds )
class UnrecognizedArchiveFormat ( ArchiveException ) :
singular = [ ]
if old_style_list :
if html_message :
def urlquote_plus ( url , safe = '' ) :
def add_arguments ( self , parser ) :
if attrvalue :
self . _populate ( )
except :
lang_code = regex_match . group ( 1 )
word_split_re = re . compile ( r'(\s+)' )
super ( UploadedFile , self ) . __init__ ( file , name )
args = ( )
class HttpResponseNotAllowed ( HttpResponse ) :
value = next ( cycle_iter ) . resolve ( context )
except StandardError as e :
class CycleNode ( Node ) :
from __future__ import unicode_literals
import rlcompleter
return value
from django . utils . functional import lazy
else :
response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
supported_platform = plat != 'Pocket PC' and ( plat != 'win32' or  'ANSICON' in os . environ )
def values ( self ) :
from __future__ import unicode_literals
result = None
try :
break
parser . add_argument ( '--name' , '-n' , dest = 'files' ,  action = 'append' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )
else :
try :
connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) }
if index is not None :
from django . core . validators import EMPTY_VALUES
from django . utils . encoding import force_bytes , python_2_unicode_compatible
class RegexValidator ( object ) :
from django . core . mail . backends . base import BaseEmailBackend
silent = True
raise TypeError ( "If the flags are set, regex must be a regular expression string." )
def pgettext ( context , message ) :
def emit ( self , record ) :
elif prefix != common_prefix :
if response . streaming :
except OSError :
return result
self . _fname = os . path . join ( self . file_path , fname )
else :
context . pop ( )
return cls
with connection . cursor ( ) as cursor :
from django . utils import six
node = CycleNode ( values , name , silent = silent )
newline = "\n"
if bf_errors :
break
state = self . __dict__ . copy ( )
return list ( self . iteritems ( ) )
self . _deleted_form_indexes = [ ]
user_part , domain_part = value . rsplit ( '@' , 1 )
filenames = [ ]
class cached_property ( object ) :
if att_name == 'id' and extra_params == { 'primary_key' : True } :
if not isinstance ( s , six . string_types ) :
return the_path
value = ConvertingList ( value )
if self . match is None or self . match_re . search ( f ) :
if self . verbosity > 1 :
from django . conf import settings
from itertools import chain
if field is not None :
input_text = ugettext_lazy ( 'Change' )
if self . can_delete :
response = self . get_exception_response ( request , resolver , 403 )
raise ValidationError (  self . error_messages [ 'max_digits' ] ,  code = 'max_digits' ,  params = { 'max' : self . max_digits } ,  )
from django . core . files import File
parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False ,  help = 'Use natural foreign keys if they are available.' )
def default_key_func ( key , key_prefix , version ) :
self . prefix = prefix or self . get_default_prefix ( )
def b ( s ) :
bits = token . split_contents ( )
parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'An app_label or app_label.ModelName to exclude '  '(use multiple --exclude to exclude multiple apps/models).' )
def __init__ ( self , form , field , name ) :
closable . close ( )
self . _assert_mutable ( )
if takes_context :
def deactivate_all ( ) :
def do_translate ( message , translation_function ) :
elif isinstance ( rhs , SafeBytes ) :
if not using_sysrandom :
return result
dec_part = decimal_sep + dec_part
return "Error in formatting: %s" % force_text ( e , errors = "replace" )
val = ', ' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
context [ 'block' ] = self
class Command ( BaseCommand ) :
iterbytes = iter
self . creation_counter = Field . creation_counter
self . file . write ( raw_data )
def import_library ( taglib_module ) :
if transfer_encoding == 'base64' :
for field in model . _meta . fields :
filelist = new_filenames
@ register . filter ( is_safe = True )
else :
def getvalue ( self ) :
mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
rollback = self . _rollback
comment_notes . extend ( notes )
top_dir = os . path . abspath ( path . expanduser ( target ) )
__str__ = new_method_proxy ( str )
raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' )
return form
return value
return render_value_in_context ( value , context )
error_msg = "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."
self . _delete ( fname )
klass = app_name
text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
if obj . pk is None :
return get_supported_language_variant ( lang_code )
zfile . write ( item )
middle = middle [ : - len ( closing ) ]
DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
new_name = '%s_%d' % ( new_name , num )
def _set ( self , key , value , timeout = DEFAULT_TIMEOUT ) :
traceback . print_exc ( )
def length ( value ) :
int_part , dec_part = str_number . split ( '.' )
handler . addQuickElement ( "language" , self . feed [ 'language' ] )
self . stderr . write ( "Error: %s" % error_text )
raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
import warnings
class override ( object ) :
stream . unget ( chunk )
return getattr ( instance , name ) ( )
html = { }
pk_key = "%s-%s" % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
def upload_handlers ( self , upload_handlers ) :
from django . conf import settings
pass
try :
handler . addQuickElement ( "category" , "" , { "term" : cat } )
def __init__ ( self , tup , hash = hash ) :
parts = t . contents . split ( '|' )
from django . core . management . color import no_style
if neg :
if field . _has_changed ( field . to_python ( initial ) , data ) :
else :
else :
headerlist = cache . get ( cache_key , None )
class Operator ( TokenBase ) :
pass
no_settings_commands = [  'help' , 'version' , '--help' , '--version' , '-h' ,  'compilemessages' , 'makemessages' ,  'startapp' , 'startproject' ,  ]
loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )
return get_wsgi_application ( )
klass = node . clone ( )
rv = level
from threading import local
class CacheClass ( DummyCache ) :
del obj_dict [ attr ]
c = int ( text [ 1 : ] , 16 )
if line [ - 1 : ] in ( b'\n' , b'\r' ) :
message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' )
else :
def get_script_name ( environ ) :
def fix_location_header ( request , response ) :
value = value . strip ( )
def __deepcopy__ ( self , memo ) :
def handle ( self , * app_labels , ** options ) :
if col_name != new_name and field_notes :
original_lookup = lookup_view
obj . children = copy . deepcopy ( self . children , memodict )
fill_to = 7
pass
__bytes__ = serialize_headers
docs_version = '%d.%d' % django . VERSION [ : 2 ]
template_tuple = self . template_cache . get ( key )
self . _leftover = b''
for option in options :
from django . core . management . utils import find_command , popen_wrapper
class CommentNode ( Node ) :
return bytes ( value )
super ( Context , self ) . __init__ ( dict_ )
import inspect
except ImportError :
else :
name , val = forbid_multi_line_headers ( name , val , self . encoding )
help_text = help_text_html % force_text ( field . help_text )
for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :
from django . utils import six
if float ( value ) != 1 :
def __init__ ( self , media = None , ** kwargs ) :
lines = value . split ( '\n' )
self . _view_middleware = [ ]
shutil . copyfileobj ( extracted , outfile )
for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
def validate_ipv6_address ( value ) :
compatibility = 'compatibility'
base_path = os . path . splitext ( po_path ) [ 0 ]
changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
logger . removeHandler ( h )
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
raise CommandError ( 'You appear not to have the %r program installed or on your path.' %  connection . client . executable_name )
try :
wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
from django . forms . utils import ErrorList
base , ext = posixpath . splitext ( the_path )
k = m . end ( )
return major
self . lineno = 1
setattr ( base , old_method_name , wrapper ( old_method ) )
self . queryset = queryset
if not hasattr ( parser , '_namedCycleNodes' ) :
return self . number > 1
writer = MigrationWriter ( new_migration )
mode = stat . S_IMODE ( st . st_mode )
def handle ( self , * app_labels , ** options ) :
try :
widget = widget or self . widget
cache = _create_cache ( backend , ** kwargs )
lang = get_language ( )
os . utime ( path , None )
class BaseModelForm ( BaseForm ) :
import shutil
return datetime . utcnow ( ) . replace ( tzinfo = utc )
units = len ( tupl [ 1 ] ) - tupl [ 2 ]
self . choices . append ( ( full_file , f ) )
get_function_code = operator . attrgetter ( _func_code )
from django . utils . html import escape
value . configurator = self
from django . utils import termcolors
@ register . tag ( 'extends' )
from django . core . exceptions import ImproperlyConfigured
pieces . append ( re_escaped . sub ( r'\1' , piece ) )
except ValueError :
if top + self . orphans >= self . count :
class ConvertingDict ( dict ) :
if len ( bits ) < 3 or bits [ 1 ] != 'as' :
app_dir = apps . get_app_config ( model . _meta . app_label ) . path
return base64 . urlsafe_b64decode ( s + pad )
if six . PY2 :
self . path_info = ''
for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :
from django . conf import settings
script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )
from django . conf import settings
data = self . flo . read ( self . chunk_size )
help = "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
for path in self . locale_paths :
class Command ( BaseCommand ) :
def __init__ ( self , text ) :
elif name is not None and filter_func is None :
class dummy :
src_data = fp . read ( )
from collections import defaultdict
if isinstance ( value , datetime . datetime ) :
result = super ( TimestampSigner , self ) . unsign ( value )
field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]
get_git_changeset . cache = changeset
return [ mark_safe ( force_text ( obj ) ) for obj in value ]
else :
if error . code == code :
def as_data ( self ) :
@ python_2_unicode_compatible
if six . PY3 :
endtag_re = re . compile ( '</%s>' % tags_re )
self . _delete ( key )
args = [ '"%s"' % arg for arg in args ]
except MultiPartParserError :
def add_arguments ( self , parser ) :
except GeneratorExit :
res , args = flatten_result ( item )
del self . _get
if not model_identifier :
self . domain_whitelist = whitelist
from django . core . management . color import color_style
delattr ( _MovedItems , name )
return self . STDOFFSET
sys . stderr . write ( "Unknown command: %r\nType '%s help' for usage.\n" %  ( subcommand , self . prog_name ) )
if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :
for d in reversed ( self . dicts ) :
def flatten ( self ) :
else :
import os
import warnings
result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
raise
result = self . configure_custom ( config )
role , instructions = part . split ( '=' )
return super ( PasswordInput , self ) . render ( name , value , attrs )
def __init__ ( self , template , * args , ** kwargs ) :
import warnings
if qs . _result_cache is not None :
super ( BaseInlineFormSet , self ) . add_fields ( form , index )
e . django_template_source = self . source
pass
elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :
class NumberAwareString ( resultclass ) :
def copy_plural_forms ( self , msgs , locale ) :
self . content_type = content_type
def upload_complete ( self ) :
raise
try :
return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
key = self . make_key ( key , version = version )
from django . utils . timezone import is_aware
value = float ( value )
elif ch == ')' :
sys . exit ( 0 )
@ deconstructible
widget = self . field . widget
try :
encoded = '"' + encoded + '"'
fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
status_code = 403
cls . __str__ = cls . __bytes_cast
now = datetime . datetime . now ( utc if is_aware ( d ) else None )
nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
ch = None
renamed = True
@ register . tag
def add_arguments ( self , parser ) :
if name in MEDIA_TYPES :
elif isinstance ( obj , EscapeData ) :
return ''
def send_messages ( self , email_messages ) :
def __str__ ( self ) :
handler = self . configure_handler ( handlers [ name ] )
def validate_unique ( self ) :
try :
return False
logger . propagate = True
self . default_locale_path = self . locale_paths [ 0 ]
_cached_filenames = [ ]
url = ''
self . handle_data ( rawdata [ i : j ] )
return data
self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )
current_chunk = None
def clean ( self , value ) :
cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ]
parsed = urlparse ( force_text ( redirect_to ) )
raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
except MiddlewareNotUsed :
if not isinstance ( value , ( list , tuple ) ) :
cls . __dispatch [ klass ] = { }
self . regex = regex
internal_use_only = False
if callable ( getattr ( self . stream , 'getvalue' , None ) ) :
for key in c . keys ( ) :
if o . microsecond :
self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
locales = all_locales
end -= 1
raise KeyError ( 'Unknown media type "%s"' % name )
id_ += '_0'
else :
if not hasattr ( e , 'django_template_source' ) :
field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
else :
def as_textarea ( self , attrs = None , ** kwargs ) :
phone2numeric = allow_lazy ( phone2numeric )
from __future__ import unicode_literals
self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )
handler . addQuickElement ( "link" , "" , { "href" : item [ 'link' ] , "rel" : "alternate" } )
return supported
from collections import OrderedDict
fixture_dirs = self . fixture_dirs
pass
while i < list_length :
file = BytesIO ( data . read ( ) )
return False
if old_field_name :
from django . utils . regex_helper import normalize
return context_extras
self . STDOFFSET = timedelta ( seconds = - _time . timezone )
if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) :
def sql_custom ( app_config , style , connection ) :
def unlock ( f ) :
compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
yield "# You'll have to do the following manually to clean this up:"
if ttl is not None :
def G ( self ) :
def __getitem__ ( self , header ) :
candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
raise TemplateSyntaxError ( "%r takes two arguments" % bits [ 0 ] )
return SafeText ( t )
translators_comment_start = lineno
self = tuple . __new__ ( cls , * args , ** kwargs )
modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
resolved_args = [ context ] + resolved_args
except KeyError :
try :
filelist = _cached_filenames + new_filenames + _error_files
def __init__ ( self , message , code = None , params = None ) :
if getattr ( e , 'winerror' , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 :
def _ipython_pre_011 ( self ) :
from django . utils . deprecation import RemovedInDjango19Warning
attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
end = newline
self . _current [ field . name ] = value
def trim_url ( x , limit = trim_url_limit ) :
if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
result = user_function ( * args , ** kwds )
out . write ( blankout ( t . contents , 'B' ) )
def decompress ( self , value ) :
default = bytes_to_text ( default , self . encoding )
self . _errors = None
exhaust ( self . _input_data )
formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
ULONG_PTR = c_int64
return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
file = BytesIO ( data [ 'content' ] )
self . object_list = object_list
has_bz2 = True
check_for_migrations ( app_config , connection )
try :
if os . path . exists ( old_app_dir ) :
import datetime
form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
self . _wrapped = self . _setupfunc ( )
raise StopIteration ( )
return templatetags_modules
if len ( args ) != len ( params ) + len ( prefix_args ) :
def __init__ ( self , * args , ** kwargs ) :
return name
def more ( self ) :
filter = get_exception_reporter_filter ( request )
for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :
exc_value = exc_type (  "Unsupported value: %r. You should install pytz." % dt )
off = 6 * ( delta // 100 + delta // 400 )
def __iter__ ( self ) :
self . _callback_strs = set ( )
for key , op in OPERATORS . items ( ) :
raise ValueError ( 'Sign character found in converter base digits.' )
remaining_bits = bits [ 2 : ]
call_command ( 'loaddata' , 'initial_data' , ** options )
class UnreadablePostError ( IOError ) :
filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
_iteritems = "iteritems"
field_output . append ( "UNIQUE" )
else :
def send_messages ( self , messages ) :
from IPython . frontend . terminal . ipapp import TerminalIPythonApp
return True
return dict_ . getlist ( key )
shells = [ 'ipython' , 'bpython' ]
@ wraps ( func )
for i in range ( 0 , self . total_form_count ( ) ) :
if self . cdata_tag is not None :
os . remove ( symlink_path )
else :
nm = Header ( nm , 'utf-8' ) . encode ( )
__all__ = ( 'UploadedFile' , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' ,  'SimpleUploadedFile' )
elif tzinfo is not None :
else :
handler . addQuickElement ( "description" , item [ 'description' ] )
if len ( self . namelist ( ) ) != 1 :
from django . utils . safestring import SafeData , mark_safe
self . resolver_match = None
all_locales = map ( os . path . basename , locale_dirs )
from django . utils . encoding import force_str , force_text
def value_from_datadict ( self , data , files , name ) :
from django . utils . html import avoid_wrapping
from django . utils . six . moves import html_entities
continue
def __repr__ ( self ) :
args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
setattr ( result , name , value )
match = time_re . match ( value )
return timesince ( value , arg )
except ImportError :
params = kwargs
if hasattr ( test_runner_class , 'add_arguments' ) :
if not name :
name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
def __init__ ( self , * args , ** kwargs ) :
cmatches = constant_re . findall ( t . contents )
if isinstance ( message , SafeData ) :
self . paginator = paginator
return combined
return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )
while i < l :
else :
if error_class is None :
self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )
return self . as_table ( )
super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
from django . utils . encoding import force_text
def __init__ ( self , * args , ** kwargs ) :
except ImportError :
if self . options . get ( 'indent' ) :
if dt . year >= 1900 :
new = '#: ' + orig_file [ 2 : ]
MEMCACHE_MAX_KEY_LENGTH = 250
class SuspiciousMultipartForm ( SuspiciousOperation ) :
if not os . path . exists ( filename ) :
return FilterExpression ( token , self )
items = _iteritems
if command in parse_until :
try :
cword = int ( os . environ [ 'COMP_CWORD' ] )
for key in self :
self . children = [ obj , data ]
raise SystemRestart
super_set ( key , value )
tf = TimeFormat ( value )
host = host [ : - 1 ] if host . endswith ( '.' ) else host
raise CommandError ( msg )
from django . core import signing
try :
return six . text_type ( s ) . encode ( encoding , errors )
def _render ( self , context ) :
__iadd__ = complain
import sys
self . extra_headers = headers or { }
self . cookies [ key ] [ 'expires' ] = expires
max_age = max ( 0 , delta . days * 86400 + delta . seconds )
def activate ( language ) :
def length_is ( value , arg ) :
output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
del options [ 'liveserver' ]
lead , middle , trail = '' , word , ''
self . _container = [ value ]
from django . conf import urls
self . email_backend = email_backend
class BaseLoader ( object ) :
def setlistdefault ( self , key , default_list = None ) :
self . object_list = object_list
def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
self . nodelist = t . nodelist
self . keyOrder = list ( data ) if data else [ ]
return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
import code
from django . db . migrations . state import ProjectState
return b'' . join ( self . _container )
output = [ ]
resolve ( path , urlconf )
if self . paths_to_remove :
tzinfo . __init__ ( self )
_iterlists = "lists"
formatter = self . config [ 'formatters' ] [ formatter ]
continue
return _localtime
for ch , escaped in input_iter :
@ register . filter ( is_safe = True )
from django . conf import settings
i += 1
return latest_date or datetime . datetime . now ( )
except KeyError :
object_data = model_to_dict ( instance , opts . fields , opts . exclude )
from django . utils . six import StringIO
return
def load_template ( self , template_name , template_dirs = None ) :
if not m and p < 0 :
trail = closing + trail
def _get_size ( self ) :
class TagHelperNode ( Node ) :
self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
if name not in logging . _handlers :
self . data = data or { }
return FASTCGI_HELP
inplural = True
return self . level >= ERROR
if is_templatized :
def render_node ( self , node , context ) :
self . stdout . write ( msg )
else :
else :
response = sys . modules [ __name__ + ".moves.urllib_response" ]
return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
break
from email . mime . message import MIMEMessage
try :
with connection . cursor ( ) as curs :
if sign in self . digits :
size = self . file . tell ( )
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
return time_str + '%+03d:%02d' % ( hour , minute )
except ( ValueError , TypeError , ValidationError ) :
self . indent ( 0 )
__setitem__ = new_method_proxy ( operator . setitem )
self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
try :
if not hasattr ( self , '_request' ) :
if not language_code_re . search ( accept_lang ) :
value = field . clean ( value , initial )
from django . utils . http import urlquote
if settings . DEBUG :
def parse_datetime ( value ) :
val = getattr ( module , format_type )
__T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
else :
if number == 1 :
c = self . resolve ( c )
fp . write ( "%d\n" % os . getpid ( ) )
def list ( self ) :
if fields and f . name not in fields :
except ImportError :
def readline ( self , * args , ** kwargs ) :
self . app_label = 'django_cache'
raise CommandError ( "%r is not a valid port number." % self . port )
self . first = True
self . _delete ( k )
import sys
self . validate_key ( key )
self . blocks [ name ] . append ( block )
def setdefault ( self , key , default = None ) :
self . stdout . write ( self . style . MIGRATE_HEADING ( "Operations to perform:" ) )
val = Header ( val ) . encode ( )
yield obj
UnicodeDecodeError . __init__ ( self , * args )
self . connection = None
raise CommandError ( "Django doesn't know which syntax to use for your SQL statements,\n" +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
@ register . tag
class EmailValidator ( object ) :
from django . utils . translation import templatize
def safe_join ( base , * paths ) :
if isinstance ( receiver , types . FunctionType ) :
if lang is None :
warnings . warn (  "get_declared_fields is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
def parse ( self ) :
__iter__ = _iterkeys
if settings . DEBUG :
from django . core . exceptions import ImproperlyConfigured
def deconstruct ( obj ) :
state_frame [ self ] = compare_to
if not self . is_required :
import random
def Deserializer ( stream_or_string , ** options ) :
if not unicodedata . combining ( char ) :
from django . utils . dates import MONTHS
return '%s-%s-%s' % ( y , m , d )
else :
return from_current_timezone ( value )
else :
level = config . pop ( 'level' , None )
six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
return result
host = self . META [ 'HTTP_HOST' ]
self . app_name = app_name
handler . addQuickElement ( "description" , item [ 'description' ] )
if os . fork ( ) > 0 :
from django . db import connections , DEFAULT_DB_ALIAS
mapping = { 'openblock' : BLOCK_TAG_START ,  'closeblock' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
return Context ( context )
self . json_kwargs . pop ( 'fields' , None )
result = factory ( ** kwargs )
else :
def O ( self ) :
if ignore :
indent = options . get ( 'indent' )
cursor . close ( )
del _prefixes . value
from django . apps import apps
self . _unget_history = [ ]
def render ( self , name , value , attrs = None ) :
return mark_safe ( func ( * args , ** kwargs ) )
if settings . FILE_UPLOAD_TEMP_DIR :
if color_settings :
if x == 0 :
from django . utils . translation import get_language , to_locale , check_for_language
if self . _callback is not None :
parser . add_argument ( 'app_label' , nargs = '?' ,  help = 'App label of an application to synchronize the state.' )
if new_name [ 0 ] . isdigit ( ) :
class ContextDict ( dict ) :
if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :
if dirname and not os . path . exists ( dirname ) :
self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
return iter ( self . dict . keys ( ) )
if new_mod is None :
def write_items ( self , handler ) :
stderr . write ( '%s: %s' % ( e . __class__ . __name__ , e ) )
def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
callback , callback_args , callback_kwargs = resolver_match
def __iter__ ( self ) :
EMPTY_DICT = { }
from django . contrib . auth import get_user_model
if code is not None :
encoding = settings . DEFAULT_CHARSET
value = str ( value )
self . write_migration_files ( changes )
def compile_string ( template_string , origin ) :
else :
return "\\u%04x" % ord ( match . group ( 1 ) )
for statement in sql :
else :
self . second = parser . expression ( bp )
_itervalues = "itervalues"
raise IOError ( "Destination file %s exists and allow_overwrite is False" % new_file_name )
if len ( bits ) < 2 :
reloader = jython_reloader
for sub_stream in boundarystream :
else :
def open ( self ) :
self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
except ( TypeError , VariableDoesNotExist ) :
django_po = os . path . join ( django_dir , 'conf' , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )
try :
if self . data . day in ( 11 , 12 , 13 ) :
self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
def __repr__ ( self ) :
if current_version >= ( 3 , 4 ) :
top_errors = self . non_field_errors ( )
self . validate_key ( key )
kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
except ( ValueError , TypeError ) :
msg [ 'Message-ID' ] = make_msgid ( )
if bad_app_labels :
from django . utils import six
if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
return iter ( self . forms )
def iri_to_uri ( iri ) :
if value in self . empty_values :
name = self . format ( 'O' )
except ImportError :
if item [ 'item_copyright' ] is not None :
return _i18n_cache_key_suffix ( request , cache_key )
def iterbytes ( buf ) :
else :
if field in self . cleaned_data :
backend_cls = import_string ( backend )
for chunk in self . chunks ( ) :
num = cursor . fetchone ( ) [ 0 ]
words = self . _wrapped . split ( )
def check_errors ( fn ) :
re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )
def base64_hmac ( salt , value , key ) :
global _cached_modules , _cached_filenames
for bit in bits :
self . _base_set ( 'set' , key , value , timeout )
return 'https'
else :
self . _namespace_dict = { }
self . _add_installed_apps_translations ( )
response = self . get_exception_response ( request , resolver , 404 )
def _get_choices ( self ) :
def __str__ ( self ) :
self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
if args [ - 1 ] != "silent" :
def __repr__ ( self ) :
break
return self . render ( )
if hasattr ( hashlib , "pbkdf2_hmac" ) :
else :
if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :
if self . feed [ 'language' ] is not None :
else :
output = [ pformat ( val ) for val in context ]
mime_type = 'application/atom+xml; charset=utf-8'
return time_str + '%+03d%02d' % ( hour , minute )
_version = "2.0"
tag = re_tag . match ( m . group ( 0 ) )
except IndexError :
self . stdout . write ( self . style . NOTICE ( "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ) )
except NameError :
return meta ( name , bases , d )
else :
form . _meta . fields . append ( self . fk . name )
errors . extend ( m for m in e . error_list if m not in errors )
lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
def copy ( self ) :
new_result . append ( item + i_item )
if isinstance ( filename , MIMEBase ) :
from django . core . management . sql import check_for_migrations
except ImportError as e :
EventHandler . modified_code = I18N_MODIFIED
def dec ( func ) :
parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
self . indent ( 2 )
class HttpResponseBase ( six . Iterator ) :
tags_re = '(%s)' % '|' . join ( tags )
from collections import OrderedDict
return False
raise TemplateSyntaxError ( "%r tag takes at least one argument: the name of the template to be included." % bits [ 0 ] )
else :
parts . append ( decimals )
weight += 2
return value . strftime ( format )
@ register . filter
parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
pass
class Command ( AppCommand ) :
@ deconstructible
except ImportError :
return self . var
self . validate_key ( key )
if option_value is None :
def negate ( self ) :
return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
error_class = TemplateSyntaxError
import time
def _wrapper ( self , * args , ** kwargs ) :
pos_inf = 1e200 * 1e200
if not self . is_bound :
except UnicodeDecodeError :
index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
val2 = parser . compile_filter ( bits [ 2 ] )
class DatabaseCache ( BaseDatabaseCache ) :
return force_str ( signature )
return [ field for field in self if field . is_hidden ]
def update ( self , dict_ ) :
return self . __to_language
if app_config . models_module is None or app_config in excluded_apps :
if 'id' in self . attrs :
print ( "Running post-migrate handlers for application %s" % app_config . label )
except ( ValueError , TypeError ) :
comma_separated_int_list_re = re . compile ( '^[\d,]+$' )
raise ViewDoesNotExist (  "Could not import '%s'. View does not exist in module %s." %  ( lookup_view , mod_name ) )
def url_patterns ( self ) :
def handle_m2m ( value ) :
self . add_library ( lib )
response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
@ property
from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
self . file . seek ( 0 )
if os . path . isfile ( f ) :
return 'form'
generic_lang_code = lang_code . split ( '-' ) [ 0 ]
self . _exception_middleware = [ ]
self . _delete ( f . name )
return _trans . gettext ( message )
cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
from django . utils . six . moves import xrange
tzinfo = kw . pop ( 'tzinfo' )
self . current_token = self . next_token ( )
data = [ ]
if best_doublecolon_end == len ( hextets ) :
try :
extracted = self . _archive . extractfile ( member )
return ''
def has_header ( self , header ) :
file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
if dklen > ( 2 ** 32 - 1 ) * hlen :
def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' ,  err_log = '/dev/null' , umask = 0o022 ) :
def get_version ( version = None ) :
def is_checked ( self ) :
self . _is_rendered = True
zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
form . save_m2m ( )
import operator
yield subnode
value = self . get ( key , version = version )
try :
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
if this_bases is None :
def get_valid_filename ( s ) :
return _make_decorator
try :
if field != NON_FIELD_ERRORS and field not in self . fields :
errors = [ ]
key = self . make_key ( key , version = version )
if len ( value ) != 1 :
trimmed = trim_url ( middle )
if field . help_text :
if not prefix :
@ stringfilter
self . pointer = i
e . message = self . error_messages [ e . code ]
_meth_func = "im_func"
from django . apps import apps
return self . create_var ( token )
return MONTHS_3 [ self . data . month ]
__bool__ = new_method_proxy ( bool )
objects = model . _base_manager
daemon_kwargs = { }
best_doublecolon_start = doublecolon_start
def __repr__ ( self ) :
self . day_none_value = self . none_value
def linebreaksbr ( value , autoescape = None ) :
elif callable ( func ) :
for supported_code in _supported :
LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
bytes = float ( bytes )
try :
result = factory ( ** kwargs )
return host , ''
else :
if is_templatized :
def render_node ( self , node , context ) :
if isinstance ( value , six . text_type ) :
def lists ( self ) :
request = None
chunk_size = 64 * 2 ** 10
def _generate_cache_key ( request , method , headerlist , key_prefix ) :
name = "." . join ( [ package . __name__ , module_name ] )
self . configure_root ( root , True )
output = self . handle ( * args , ** options )
if contains ( elt , inst ) :
for opt in self . option_list :
try :
old_field_name = None
if not sys . warnoptions :
self . stream . write ( "\n" )
st = os . stat ( filename )
if answer != "y" :
def push ( self , name , block ) :
except KeyboardInterrupt :
if isinstance ( query_string , bytes ) :
class InclusionNode ( TagHelperNode ) :
def dec ( func ) :
except StopIteration :
@ decorator
def _text_chars ( self , length , truncate , text , truncate_len ) :
return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
except ValueError :
randint = random . randrange ( 100000 )
field_list = [ ]
return value . center ( int ( arg ) )
super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
finder = hook ( entry )
try :
msg [ name ] = value
disposition = meta_data [ 'content-disposition' ] [ 1 ]
def __init__ ( self , widgets , attrs = None ) :
def dst ( self , dt ) :
def close ( self ) :
with open ( new_path , 'wb' ) as new_file :
except KeyError :
leading = self . has_leading_dir ( namelist )
def items ( self ) :
is_compressed = False
return guessed_path
os . makedirs ( dirname )
raise BadHeaderError ( "Header values can't contain newlines (got %r)" % value )
self . _populated = True
self . waiting_readers = 0
if self . is_bound and i < self . initial_form_count ( ) :
else :
raise
def _has_changed ( self , initial , data ) :
return singular_suffix
offset = date . tzinfo . utcoffset ( date )
version = get_complete_version ( version )
def dst ( self , dt ) :
translation = self . _new_gnu_trans ( localedir )
return [ ]
return wrapper
class InMemoryUploadedFile ( UploadedFile ) :
def __getstate__ ( self ) :
flat . update ( d )
sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
if kwargs . get ( 'localize' ) and self . widget == NumberInput :
__class__ = property ( new_method_proxy ( operator . attrgetter ( "__class__" ) ) )
if len ( fks_to_parent ) == 1 :
def __repr__ ( self ) :
@ stringfilter
else :
wsgi_opts [ 'bindAddress' ] = None
for path in self . locale_paths :
else :
expires = None
self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
from django . utils . module_loading import module_has_submodule
def as_ul ( self ) :
@ property
self . schemes = schemes
raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )
if value is not None :
pytz = None
if len ( value ) != 2 :
def as_ul ( self ) :
return
pass
def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :
return obj
s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
self . _catalog . update ( other . _catalog )
continue
t = re . sub ( "([a-z])'([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
if print_ is None :
is_usable = resource_string is not None
return http . parse_cookie ( raw_cookie )
headerlist . sort ( )
raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
for template_dir in template_dirs :
bytes_read += len ( bytes )
if ch2 == '?' :
if hasattr ( self , '_files' ) :
self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
requires_system_checks = False
self . _regex = regex
def __getitem__ ( self , idx ) :
self . cleaned_data [ name ] = value
for dict_ in self . dicts :
if fake :
_html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
def __mod__ ( self , rhs ) :
def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :
return
nofollow_attr = ' rel="nofollow"' if nofollow else ''
if t in self . __dispatch :
import operator
if field . serialize :
def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
for localedir in reversed ( settings . LOCALE_PATHS ) :
from django . http . utils import fix_location_header , conditional_content_removal
from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
try :
return timezone . make_naive ( value , current_timezone )
except TypeError as te :
break
except StandardError as e :
try :
def clean ( self , value ) :
def get_template_from_string ( source , origin = None , name = None ) :
view_name = callback . __class__ . __name__ + '.__call__'
input_type = None
self . obj = obj
def import_string ( dotted_path ) :
@ stringfilter
encoding = self . encoding or settings . DEFAULT_CHARSET
class Serializer ( PythonSerializer ) :
for elt in source :
self . _createdir ( )
toks = self . toks
if '--commands' in args :
return
else :
if relative_dir :
return get_connection ( backend = self . email_backend , fail_silently = True )
if url :
return iter ( getattr ( d , _itervalues ) ( ** kw ) )
self . name , self . nodelist , self . parent = name , nodelist , parent
nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
return date_value . strftime ( input_format )
else :
if stream_created :
if _win :
return data
elif not os . path . exists ( self . file_path ) :
if hasattr ( middleware , 'process_request' ) :
return [ ]
manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
kwargs = { }
return BoundField ( self , field , name )
operations = [ ]
def widget_attrs ( self , widget ) :
parsed = True
register = registry . register
for app_config in app_configs :
if not parent :
return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
if not want_unicode :
def __next__ ( self ) :
subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
if name is None and filter_func is None :
class DefusedXmlException ( ValueError ) :
def serialize ( self , queryset , ** options ) :
get = '<could not parse>'
else :
except AttributeError :
else :
def remove_tags ( html , tags ) :
else :
elif not isinstance ( value , ( list , tuple ) ) :
for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :
def get_max_age ( response ) :
qn = connection . ops . quote_name
with open ( writer . path , "wb" ) as fh :
checkbox_name = self . clear_checkbox_name ( name )
return FixedOffset ( offset , name )
if settings . DEBUG and request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS :
if result and ( mode == 'set' or ( mode == 'add' and current_expires < now ) ) :
si = open ( '/dev/null' , 'r' )
finally :
raise OverflowError ( 'dklen too big' )
if cache is None :
self . file = file_name
if id_ :
def pop ( self , key , default = None ) :
for replacement in set ( [  thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) :
return value . replace ( " " , "\xa0" )
conf = settings . CACHES [ backend ]
def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :
msg = "%s doesn't look like a module path" % dotted_path
def strftime ( self , fmt ) :
_active . value = self . old_timezone
self . waiting_writers += 1
if not path_info :
import_module ( '.management' , app_config . name )
path = os . path . join ( app_config . path , 'management' )
from django . db import connections , DEFAULT_DB_ALIAS
message_context = context_match . group ( 1 )
response = http . HttpResponseBadRequest ( )
from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
lineno = lineno + self . __starttag_text . count ( "\n" )
if args :
self . _headers = { }
one_percent_re = re . compile ( r"""(?<!%)%(?!%)""" )
msg [ 'Date' ] = formatdate ( )
result . sort ( key = lambda k : k [ 1 ] , reverse = True )
def read ( self , * args , ** kwargs ) :
return self . paginator . validate_number ( self . number - 1 )
exclude = self . _get_validation_exclusions ( )
except KeyError :
def body ( self ) :
s . feed ( value )
def d ( self ) :
return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
if self . _non_form_errors is None :
if not _serializers :
parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
get_method_self = operator . attrgetter ( _meth_self )
elif isinstance ( value , datetime . time ) :
def lock ( f , flags ) :
if resolved_path :
import sys
return copy . copy ( self )
content = content . message ( )
self . loader , self . loadname , self . dirs = loader , name , dirs
from django . conf import settings
def __init__ ( self , parent_instance , * args , ** kwargs ) :
except http . Http404 as e :
for app_config in app_configs :
return False
error = ValidationError ( error )
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
def calculate_app_template_dirs ( ) :
if not chunks :
if html :
return key in caches [ DEFAULT_CACHE_ALIAS ]
else :
row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d  for d in row_data )
import types
value = to_current_timezone ( value )
return ModelChoiceIterator ( self )
return super ( PythonSerializer , self ) . getvalue ( )
def __get__ ( self , obj , tp ) :
if data [ last : last + 1 ] == b'\n' :
if self . required :
return import_string ( app_path )
@ stringfilter
def _get_model_from_node ( self , node , attr ) :
self . close_called = True
return list ( self . iterkeys ( ) )
string_types = str ,
field_params = OrderedDict ( )
self . find_template_cache . clear ( )
values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
if row_data and None not in row_data :
result = self . stream . read ( size )
opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }
def ext_convert ( self , value ) :
return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
ch , escaped = next ( pattern_iter )
self . allow_empty_first_page = allow_empty_first_page
parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the "default" database.' )
def constant_time_compare ( val1 , val2 ) :
tzinfo = get_fixed_timezone ( offset )
return "<IfEqualNode>"
def get_language_from_request ( request , check_path = False ) :
leading = self . has_leading_dir ( x . name for x in members )
ret = _
else :
return self . sign + value
return language . lower ( )
excluded_models . add ( model )
return name , ( value , params )
break
data = conditional_escape ( arg ) . join ( value )
def truncatewords_html ( value , arg ) :
if self . data . hour > 11 :
self . clear_cdata_mode ( )
for label in app_labels :
while not answer or answer not in "yn" :
if index < 0 :
statements = [ ]
self . _update_unget_history ( len ( bytes ) )
tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )
return int ( cc [ 'max-age' ] )
else :
for item , args in zip ( result , result_args ) :
if cursor and close_connection :
self . reason_phrase = reason
sys . stderr . write ( "  Unable to load the flup package.  In order to run django\n" )
raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
import datetime
if not renamed :
self . instance = instance
FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
return token
elif name is not None and compile_function is not None :
flush = property ( lambda self : self . file . flush )
self . file . size = file_size
for val in value :
import os
def incr_version ( self , key , delta = 1 , version = None ) :
from django . core . management . base import CommandError
return style
raise
def npgettext ( context , singular , plural , number ) :
regex = ''
except AttributeError :
if commit and hasattr ( form , 'save_m2m' ) :
return self . set_cookie ( key , value , ** kwargs )
class SimpleLazyObject ( LazyObject ) :
try :
cls . __dispatch [ klass ] [ funcname ] = method
from django . utils . deprecation import RemovedInDjango19Warning
except OSError as e :
else :
@ cached_property
inputs = [ ]
parts = [ ]
if filename . endswith ( "$py.class" ) :
def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) :
return _trans . ngettext ( singular , plural , number )
def writer_leaves ( self ) :
imatch = inline_re . match ( t . contents )
__ne__ = new_method_proxy ( operator . ne )
return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )
@ register ( Tags . compatibility )
self . stdout . write ( "No changes detected in app '%s'" % app_labels . pop ( ) )
raise TypeError ( "Non-integer base36 conversion input." )
from django . utils . daemonize import become_daemon
def make_msgid ( idstring = None ) :
def add_arguments ( self , parser ) :
final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
self . LibraryValueNotFoundException = value_not_found_exception
from __future__ import unicode_literals
return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
return os . path . join ( self . dirpath , self . file )
if key not in self :
self . charset = charset
def l ( self ) :
self . validate_key ( key )
cache = dict ( )
def exists ( self , name ) :
except OSError as e :
for message in message :
import os
break
try :
if current_app and current_app in app_list :
return source , display_name
from django . utils import datetime_safe
if self . allow_folders :
return six . text_type ( name )
confirm = 'yes'
def encoding ( self ) :
class ModelFormOptions ( object ) :
return "<DeserializedObject: %s.%s(pk=%s)>" % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
from django . utils . encoding import force_text
name = name [ : 255 - len ( ext ) ] + ext
_anonymous_ = [ '_offset' ]
s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
cookiedict = { }
orig_vars . pop ( slots_var )
u = salt + struct . pack ( b'>I' , i )
template_string = force_text ( template_string )
url = value
import time
from django . db import connections , DEFAULT_DB_ALIAS , migrations
if not data and initial :
try :
if field == NON_FIELD_ERRORS :
in_tag = not in_tag
pass
class Rss201rev2Feed ( RssFeed ) :
class SplitDateTimeField ( MultiValueField ) :
raise CommandError ( "Database inspection isn't supported for the currently selected database backend." )
__all__ = ( 'SelectDateWidget' , )
if self . choices :
else :
from django . utils . functional import Promise
loaders = [ ]
out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )
self . setlistdefault ( key ) . append ( value )
else :
if decimal_separator in value :
return raw_data
if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
instance . save ( )
int2byte = chr
break
return self . empty_form . media
import os
errors . extend ( e . error_list )
url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
attrs [ 'labels' ] = labels
def use_argparse ( self ) :
for x in argset :
raise ValueError ( "Invalid header: %r" % line )
raise TemplateSyntaxError ( "'%s' is not a valid tag or filter in tag library '%s'" %  ( name , taglib ) )
fail_message = 'created'
elif isinstance ( value , datetime . datetime ) :
pass
else :
self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
else :
return _ ( 'noon' )
os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ]
result = self . buffer + self . _read_limited ( )
def __init__ ( self , * args , ** kwargs ) :
def tags_available ( self ) :
def get_language_from_path ( request ) :
if _default is None :
return input_val
if over_bytes :
except ImportError :
for pos , elt in enumerate ( source ) :
update_watch ( )
def is_safe_url ( url , host = None ) :
else :
inline_re = re . compile ( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*""" )
def unregister_serializer ( format ) :
else :
return content
return node . render ( context )
value = getattr ( obj , field . rel . field_name )
with connection . constraint_checks_disabled ( ) :
def __getitem__ ( self , name ) :
if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :
from django . utils . six . moves import html_parser as _html_parser
def get_serializer ( format ) :
def keys ( self ) :
form . data [ form . add_prefix ( self . fk . name ) ] = None
options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in  parser . _actions if s_opt . option_strings ]
output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
def __init__ ( self , * dicts ) :
line = sio . readline ( )
return { }
raise KeyError ( key )
import time
last [ NEXT ] = root [ PREV ] = link
return do_translate ( message , 'ugettext' )
self . _setup ( )
super ( Command , self ) . add_arguments ( parser )
OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
tried = [ ]
self . stdout . write ( "  %s:\n" % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
terminal_char = ')'
DEFAULT_PALETTE = DARK_PALETTE
fext = f + ext
def _ipython ( self ) :
if indexes [ column_name ] [ 'primary_key' ] :
self . localized_fields = getattr ( options , 'localized_fields' , None )
match = datetime_re . match ( value )
if len ( parts ) > 1 :
if arg :
response = debug . technical_404_response ( request , e )
hits = max ( 1 , self . count - self . orphans )
used = name . pop ( 0 )
return new_class
self . loaded_object_count = 0
memoryview = memoryview
i += 1
from django . conf import settings
return '' . join ( force_text ( s ) for s in strings )
def __init__ ( self , producer , length = None ) :
pass
return '\n' . join ( statements )
extra_params [ 'blank' ] = True
params = conf . copy ( )
def incr ( self , key , delta = 1 , version = None ) :
for entry in package_path :
parent = self . parent_name . resolve ( context )
if hasattr ( self , '_coerce' ) :
raise NotImplementedError ( 'subclasses of BaseCache must provide a get() method' )
return self . __name
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
return self
wrapped_main_func = check_errors ( main_func )
def _i18n_cache_key_suffix ( request , cache_key ) :
cache_choices = False
elif maxsize is None :
logging . _releaseLock ( )
DEFAULT_LOGGING = {  'version' : 1 ,  'disable_existing_loggers' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
def construct_instance ( form , instance , fields = None , exclude = None ) :
def __init__ ( self , obj , m2m_data = None ) :
for f in opts . fields :
if truncate_text :
def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
t = self . current_token
if callable ( current ) :
_assertCountEqual = "assertItemsEqual"
for base in bases [ : : - 1 ] :
result = [ ]
if len ( self . dicts ) == 1 :
if imatch :
@ register . filter ( "timesince" , is_safe = False )
setattr ( base , old_method_name , wrapper ( new_method ) )
Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
utf8_charset = Charset . Charset ( 'utf-8' )
compile_func . __doc__ = func . __doc__
def receive_data_chunk ( self , raw_data , start ) :
if self . addr :
inner_text . append ( child . data )
for v in self . validators :
def get_connection ( self , fail_silently = False ) :
def wrapped ( * args , ** kwargs ) :
try :
emitting = chunk [ : remaining ]
except InvalidTemplateLibrary as e :
return neg , res
def add_prefix ( self , prefix ) :
if event == "START_ELEMENT" and node . nodeName == "object" :
except UnicodeDecodeError :
if is_library_missing ( taglib_module ) :
from django . utils . six . moves . urllib . request import urlretrieve
def validate_domain_part ( self , domain_part ) :
return self . text
if app_config is None :
return pickle . loads ( zlib . decompress ( f . read ( ) ) )
from __future__ import unicode_literals
def __iter__ ( self ) :
for name in handlers :
if cnt and not cnt % grouping :
cache . set ( cache_key , [ ] , cache_timeout )
result = avoid_wrapping ( name % count )
cursor . execute ( "DELETE FROM %s "  "WHERE cache_key < %%s" % table ,  [ cursor . fetchone ( ) [ 0 ] ] )
class EmailBackend ( BaseEmailBackend ) :
return list ( self . iteritems ( ) )
return
value = var . resolve ( context , True )
_locs_ = _globs_
field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
parser . delete_first_token ( )
while current_len <= length :
if timeout > 2592000 :
signals . request_finished . connect ( cache . close )
kwargs = {  'form' : form ,  'formfield_callback' : formfield_callback ,  'formset' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }
def tokenize ( self ) :
@ property
_tc = http_cookies . SimpleCookie ( )
if self . verbosity > 1 :
for domain in domains :
for i , choice in enumerate ( self . choices ) :
cursor . execute ( "DELETE FROM %s WHERE expires < %%s" % table ,  [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )
class DeserializationError ( Exception ) :
from django . utils . encoding import force_str
if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :
raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )
else :
data = file . read ( chunk_size )
def get_callable ( lookup_view , can_fail = False ) :
usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
return instance
number = str ( number ) [ 1 : ]
def content ( self ) :
connection_params [ 'timeout' ] = self . timeout
from . registry import register , run_checks , tag_exists , Tags
def get_bytes_from_wsgi ( environ , key , default ) :
if failures :
def rfc2822_date ( date ) :
for locale in locales :
for root , dirs , files in sorted ( os . walk ( self . path ) ) :
def empty_block_tag ( self , token ) :
def __str__ ( self ) :
value = ugettext ( "%s TB" ) % filesize_number_format ( bytes / TB )
class WSGIHandler ( base . BaseHandler ) :
token = parser . next_token ( )
def incr ( self , key , delta = 1 , version = None ) :
with connections [ db ] . cursor ( ) as cursor :
if filename :
def validate ( self , value ) :
vary_on = ( )
self . vals = [ ]
return http . QueryDict ( raw_query_string , encoding = self . _encoding )
subject = '%s: %s' % (  record . levelname ,  record . getMessage ( )  )
yield bit . group ( 0 )
val . encode ( 'ascii' )
def load_template_source ( self , template_name , template_dirs = None ) :
msg += " The domain name provided is not valid according to RFC 1034/1035."
return o . isoformat ( )
else :
__setslice__ = complain
for cache in caches . all ( ) :
file_size = data . size
LOCK_EX = 0x2
post = '<could not parse>'
@ stringfilter
msg = '%sError importing module %s: "%s"' % (  error_prefix , dotted_path , e )
def _set_post ( self , post ) :
test_runner_class = get_runner ( settings , self . test_runner )
msg = message . message ( )
for choice in value :
fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
self . startElement ( name , attrs )
try :
@ register . filter ( is_safe = True )
dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )
class EmailBackend ( BaseEmailBackend ) :
zbuf = BytesIO ( )
return six . iteritems ( super ( MultiValueDict , self ) )
created_models = [ ]
if git_changeset :
locales = locale or all_locales
super ( JsLexer , self ) . __init__ ( self . states , 'reg' )
if not isinstance ( viewname , six . string_types ) :
for fname in filelist :
def _is_shorthand_ip ( ip_str ) :
yield line
return ( form_class is not None and (  hasattr ( form_class , '_meta' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
return self . handle_noargs ( ** options )
return result
os . makedirs ( dirname )
final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
import base64
class ValidationError ( Exception ) :
if var_obj is None :
@ stringfilter
evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
def media_property ( cls ) :
return lang_code
data = self . to_python ( data )
compare = lambda self , a , b : a < b
table_name_filter = options . get ( 'table_name_filter' )
s = s . replace ( '\r' , '\\r' )
self . params = params
raise parser . error_class ( "Unexpected end of expression in if tag." )
try :
def first ( value ) :
if cache is None :
return _standard_context_processors
class StringOrigin ( Origin ) :
try :
self . error_class = error_class
context [ self . var_name ] = [ ]
return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name
if len ( args ) == 2 :
if invalid_apps :
class Iterator ( object ) :
offset = self . timezone . utcoffset ( self . data )
return _trans . to_locale ( language )
def linebreaks ( value , autoescape = False ) :
if six . PY3 :
from optparse import OptionParser
commands . update ( { name : app_config . name for name in find_commands ( path ) } )
raise ValidationError ( self . message , code = self . code )
except Exception as e :
ch2 = None
base = Media ( )
as_form = False
return six . text_type ( self . data . year ) [ 2 : ]
import base64
elif item [ "author_name" ] :
return retval
except ImportError :
def _make_parser ( self ) :
self . origin = origin
file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
reverse_lazy = lazy ( reverse , str )
return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )
self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and  hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :
return "<%s: %s>" % ( self . __class__ . __name__ , self )
label_for = ''
try :
def ifequal ( parser , token ) :
self . _options = params . get ( 'OPTIONS' , None )
self . address_family = socket . AF_INET6
if settings . USE_X_FORWARDED_HOST and (  'HTTP_X_FORWARDED_HOST' in self . META ) :
return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
def __nonzero__ ( self ) :
if not is_valid_ipv6_address ( ip_str ) :
if errors :
from __future__ import unicode_literals
return wrapper
except ValidationError as e :
del self . _cache [ key ]
if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] :
raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
class LoadNode ( Node ) :
request_queue_size = 10
def latest_post_date ( self ) :
t = select_template ( template_name , dirs )
from django . db import models , router
return apps . get_model ( model_identifier )
signal . signal ( signal . SIGTTOU , old_handler )
print_ = getattr ( moves . builtins , "print" , None )
if opts . model is None :
self . empty_permitted = empty_permitted
from inspect import getargspec , getcallargs
if cc :
self . _closable_objects . append ( value )
__delitem__ = new_method_proxy ( operator . delitem )
to_unicode = lambda s : force_text ( s , strings_only = True )
def reset ( self ) :
except KeyError :
if settings . USE_L10N :
if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
return initial != data
return self . renderer ( name , value , final_attrs , choices )
mime_type = 'application/rss+xml; charset=utf-8'
raise ValueError (  "'%s.%s' has more than one ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
self . form = form
nodelist = parser . parse ( ( 'endautoescape' , ) )
def __init__ ( self , * args , ** kwargs ) :
raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )
except KeyError :
response = self . apply_response_fixes ( request , response )
result_args [ i ] . append ( param )
if app_config . models_module is None :
if value is not result :
class BadHeaderError ( ValueError ) :
except ValidationError :
value = float ( value )
ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )
import time
return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
UnlockFileEx . restype = BOOL
except AttributeError :
if action == "apply_start" :
_meth_self = "__self__"
path_rest = root [ prefix_length : ]
if decompress :
from django . template . loader import BaseLoader
if isinstance ( rhs , SafeData ) :
for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :
boundary = boundary . encode ( 'ascii' )
def load_template ( self , template_name , template_dirs = None ) :
return klass
escapejs = allow_lazy ( escapejs , six . text_type )
got_request_exception = Signal ( providing_args = [ "request" ] )
bad_app_labels . add ( app_label )
_empty_value = ''
return out
raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
if not email_messages :
VARIABLE_TAG_END = '}}'
m = data . get ( self . month_field % name )
return "UTC"
settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
return escape ( value )
integer_types = ( int , long )
from django . core . management import call_command
return self . __class__ ( self )
import bpython
else :
script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )
expanded_template = path . expanduser ( template )
if tag not in TemplateTagNode . mapping :
if logging_settings :
if value is True :
make_key = _make_key
def execute ( self ) :
import datetime
self . day_none_value = ( 0 , empty_label [ 2 ] )
import warnings
try :
os . setsid ( )
models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
self . language = language
def build_attrs ( self , extra_attrs = None , ** kwargs ) :
result = getattr ( _default , translation_function ) ( eol_message )
if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
def render ( self , context ) :
from django . core . management . base import BaseCommand
if isinstance ( rhs , SafeText ) :
if interactive :
super ( URLValidator , self ) . __call__ ( value )
try :
this_year = datetime . date . today ( ) . year
for hook in sys . path_hooks :
def delete_first_token ( self ) :
while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
if self . max_length is not None :
def __init__ ( self ) :
self . set ( key , value , timeout = timeout , version = version )
from django . conf import settings
if hasattr ( os , 'utime' ) :
return replacement
except OSError as err :
def _get_val ( ) :
data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( 'pk' ) )
emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )
hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
try :
references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
return j
raise NotImplementedError ( 'subclasses of BaseCache must provide a set() method' )
if settings . USE_I18N or settings . USE_L10N :
warnings . warn ( "The syncdb command will be removed in Django 1.9" , RemovedInDjango19Warning )
return self . as_widget ( )
self . _assert_mutable ( )
os . remove ( tmp_path )
if not match or not match . group ( 1 ) :
initial_forms = self . initial_form_count ( )
values = _itervalues
try :
elif value in ( False , 'False' , '0' ) :
klass . __unicode__ = klass . __str__
else :
if k [ 1 ] is None :
path = force_text ( path )
self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
all_unique_checks = set ( )
next = advance_iterator
related = getattr ( obj , field . name )
def o ( self ) :
if not answer :
if self . empty_permitted and not self . has_changed ( ) :
idstring = ''
return 0
for frag in name :
except DatabaseError as e :
def has_vary_header ( response , header_query ) :
from django . core . files import temp as tempfile
from decimal import Decimal
models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
def render_value_in_context ( value , context ) :
self . verbosity = int ( options . get ( 'verbosity' ) )
return value
def deserialize ( format , stream_or_string , ** options ) :
result = self . configurator . convert ( value )
_urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
return 0
try :
self . index = index
elif str ( level ) == level :
if command . verbosity > 1 :
from django . core . servers . fastcgi import FASTCGI_OPTIONS
class AutoEscapeControlNode ( Node ) :
return [ ]
if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :
else :
field_params [ 'max_digits' ] = row [ 4 ]
return EndToken
raise ValueError ( "Don't mix *args and **kwargs in call to reverse()!" )
@ register . filter ( is_safe = True , needs_autoescape = True )
class HttpResponseServerError ( HttpResponse ) :
_entity_re = re . compile ( r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" )
questioner = InteractiveMigrationQuestioner ( )
if self . feed [ 'language' ] is not None :
self . META [ 'SCRIPT_NAME' ] = script_name
builtins = [ ]
def handle_file_complete ( self , old_field_name , counters ) :
except ValueError :
from django . conf import settings
def colorize ( text = '' , opts = ( ) , ** kwargs ) :
return
except NotImplementedError :
value = self . get ( key , version = version )
elif len ( app_labels ) > 1 :
def _init_translation_catalog ( self ) :
return False
def to_language ( locale ) :
def __exit__ ( self , exc_type , exc_value , traceback ) :
self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
def stringfilter ( func ) :
elif field in self . _errors . keys ( ) :
if self . match is not None :
def make_middleware_decorator ( middleware_class ) :
closed = property ( _get_closed )
if now and not isinstance ( now , datetime . datetime ) :
from django . utils import six
return False
if response . has_header ( 'Cache-Control' ) :
run_checks = registry . run_checks
return state
if field in self . errors :
return
def render ( self , context ) :
pending_references = { }
value = super ( IntegerField , self ) . to_python ( value )
raise ValidationError ( self . message , code = self . code , params = params )
push = block = block_context . pop ( self . name )
import bz2
pk_value = None
with open ( old_path , 'rb' ) as template_file :
def filter ( self , name = None , filter_func = None , ** flags ) :
from threading import RLock
new_class . base_fields = declared_fields
if name is None :
return dec
response = self . get_response ( request )
continue
try :
return '%s_month' % id_
from django . utils . html import format_html , format_html_join , escape
if self . directory_permissions_mode is not None :
@ property
else :
def prepare_value ( self , value ) :
def tag_exists ( self , tag ) :
def resolve ( self , s ) :
known_models = [ ]
if self . load_initial_data :
else :
if self . loaded_object_count > 0 :
import sys
_fields_ = [  ( 'Offset' , DWORD ) ,  ( 'OffsetHigh' , DWORD ) ]
import re
if item [ 'enclosure' ] is not None :
if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
else :
if num > self . _max_entries :
if flags is not None :
return self . _text_words ( length , truncate )
except ( ValueError , TypeError ) :
def __iter__ ( self ) :
if not _is_shorthand_ip ( ip_str ) :
form . save_m2m = save_m2m
default_error_messages = {  'invalid' : _ ( 'Enter a valid URL.' ) ,  }
try :
def get_language_bidi ( ) :
else :
if option == 'with' :
raise ValueError ( "Negative base36 conversion input." )
return ord ( buf [ i ] )
def __init__ ( self , token_type , contents ) :
return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
context_extras = { }
def __init__ ( self , attrs = None , choices = ( ) ) :
ext_list = [ ]
__contains__ = has_header
def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :
def load ( parser , token ) :
check_for_migrations ( app_config , connection )
with open ( fn , 'rb' ) as f :
def render ( self , context ) :
if '@' in addr :
field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
return [ "" ,  "    class Meta:" ,  "        managed = False" ,  "        db_table = '%s'" % table_name ]
self . _validate_unique = False
def int_to_base36 ( i ) :
ensure_echo_on ( )
def split_url ( url ) :
wrapped_callback = self . make_view_atomic ( callback )
elif simple_url_2_re . match ( middle ) :
if obj_pk is not None :
del bits [ : 3 ]
command_dir = os . path . join ( management_dir , 'commands' )
for ext in pathext :
self . META = { }
return
for dirpath , dirnames , filenames in os . walk ( ldir ) :
import warnings
return self . form . errors . get ( self . name , self . form . error_class ( ) )
if not self . _mutable :
PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
fields = new_class . declared_fields
memo [ id ( self ) ] = result
assert token . contents == 'endif'
self [ key ] = result
def __str__ ( self ) :
return False
return { }
yield "#"
if name in lib . filters :
encoding = 'ascii'
t = super ( SafeBytes , self ) . __add__ ( rhs )
return DebugNode ( )
elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :
return response
class Deserializer ( base . Deserializer ) :
if self . old_timezone is None :
BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
def _parse_date_fmt ( ) :
for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :
return self . _upload_handlers
self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
return
import binascii
def __init__ ( self , stream , boundary ) :
with lock :
while ch != terminal_char :
@ stringfilter
def render ( self , context ) :
result = logging . Filter ( name )
def __init__ ( self , target , expression , var_name ) :
key = self . make_key ( key , version = version )
def __init__ ( self ) :
def parse_args ( self , args = None , namespace = None ) :
import codecs
_len = len
if current_len <= length :
field_name = force_text ( field_name , encoding , errors = 'replace' )
if 'noreset' not in opts :
def sign ( self , value ) :
return view
def find_files ( self , root ) :
if cmd . endswith ( ext ) :
k = match . end ( )
unused_char = self . _stream . read ( 1 )
else :
self . tags = { }
self . fed . append ( '&%s;' % name )
cycle_iter = context . render_context [ self ]
matches = True
for line in self . handle_inspection ( options ) :
response = middleware_method ( request , e )
DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
WSGIServer = module . WSGIServer
else :
result = str ( int ( round ( ratio ) ) )
self . initial = initial or { }
os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )
if max_value is not None :
class InvalidTemplateLibrary ( Exception ) :
if not email_message . recipients ( ) :
return self . __copy__ ( )
if os . path . basename ( candidate ) in targets :
value = self . to_python ( value ) . strip ( )
key = self . make_key ( key , version = version )
self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )
validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )
self . _createdir ( )
field_params . update ( new_params )
return self
errors = [ ]
import django . core . checks . compatibility . django_1_7_0
raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
style_func = [ f for f in ( style_func , self . style_func , lambda x : x )  if f is not None ] [ 0 ]
self . start_serialization ( )
output = [ ]
self . active_writers = 0
string_concat = lazy ( _string_concat , six . text_type )
template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'
self . xml . startElement ( "object" , { } )
self . _ordering . sort ( key = compare_ordering_key )
def __enter__ ( self ) :
if '_' in locale :
SimpleCookie = http_cookies . SimpleCookie
num = 0
def root_attributes ( self ) :
super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
return None
context . dicts . append ( self )
def __init__ ( self , table , params ) :
msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )
def render_js ( self ) :
help = 'Runs a development server with data from the given fixture(s).'
return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
handler = SimplerXMLGenerator ( outfile , encoding )
def __delitem__ ( self , key ) :
from unittest2 import *
def handle ( self , ** options ) :
if not locale_dir :
result . append ( ch )
from django . utils . safestring import mark_safe , SafeData
def create_var ( self , value ) :
for punctuation in TRAILING_PUNCTUATION :
def write ( self , outfile , encoding ) :
return expanded_template
return path_info . decode ( UTF_8 )
re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )
self . max_width = max_width
def handle ( self , ** options ) :
def reverse ( self , lookup_view , * args , ** kwargs ) :
raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' )
def _BaseCookie__set ( self , key , real_value , coded_value ) :
post = '<could not parse>'
raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' )
if self . language is not None :
if not etags :
def _iteritems ( self ) :
def render ( self ) :
filelist = [ os . path . join ( self . _dir , fname ) for fname  in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]
def resolve_expression ( self , obj , context ) :
from django . conf import settings
def __init__ ( self , regex , callback , default_args = None , name = None ) :
background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
for post_callback in self . _post_render_callbacks :
def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :
return "%s.%s" % ( package [ : dot ] , name )
parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False ,  help = 'Mark migrations as run without actually running them' )
return self . _size
else :
if name not in data :
return self
s_len = 0
@ contextlib . contextmanager
result = ugettext ( msg_with_ctxt )
_supported = None
self . xml . characters ( smart_text ( key_value ) )
return formatdate ( epoch_seconds , usegmt = True )
if not _cookie_allows_colon_in_names :
var_obj = None
obj = Node ( connector = self . connector , negated = self . negated )
pass
return WSGIHandler ( )
def media ( request ) :
else :
pass
class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :
old_field_name = field_name
if size :
if is_protected_type ( value ) :
if field_type == 'AutoField(' :
_BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
name = self . split_leading_dir ( name ) [ 1 ]
class Command ( BaseCommand ) :
self . msg = msg
overlapped = OVERLAPPED ( )
super ( MovedAttribute , self ) . __init__ ( name )
except ( ValueError , TypeError ) :
try :
for middleware_method in self . _request_middleware :
continue
self . name = name
self . _encoding = encoding or settings . DEFAULT_CHARSET
if self . _content_length == 0 :
return reduce ( operator . add , dict ( self ) . values ( ) )
try :
obj . delete ( )
buffer_types = ( bytearray , memoryview )
data = b64_decode ( base64d )
if out_log :
key = bytes_to_text ( key , self . encoding )
filename = ev . filename
del form . cleaned_data [ field ]
to_delete . add ( model )
handler . addQuickElement ( "link" , item [ 'link' ] )
result = logging . Formatter ( fmt , dfmt )
return translation
self . year_none_value = ( 0 , empty_label [ 0 ] )
from django . db . migrations . executor import MigrationExecutor
path = self . path ( path )
def get_standard_processors ( ) :
upto = 0
default = 'DEFAULT'
if not template_name_list :
return ContextDict ( self , * args , ** kwargs )
def invalid_block_tag ( self , token , command , parse_until = None ) :
def validate ( self , value ) :
field_type += '('
return sys . modules [ name ] is not None
if isinstance ( attr , MovedModule ) :
k = item [ 0 ]
parser . add_argument ( 'app_label' ,  help = 'App label of the application containing the migration.' )
def parse_starttag ( self , i ) :
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
else :
if not self . activated :
line = ''
name , value = main_value_pair . split ( ':' , 1 )
loader = find_template_loader ( loader_name )
def reload ( self ) :
default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
errors = getattr ( fp , "errors" , None )
self . active_readers += 1
with open ( path , 'rb' ) as f :
return self . is_bound and not self . errors
props = config . pop ( '.' , None )
def is_checked ( self ) :
return doy
return False
html_class_attr = ''
self . empty = options . get ( 'empty' , False )
def __init__ ( self , url , length , mime_type ) :
check_for_migrations ( app_config , connection )
self . dirpath = dirpath
self . vals . append ( val )
def set_urlconf ( urlconf_name ) :
if hasattr ( base , 'declared_fields' ) :
except IndexError :
from collections import OrderedDict
elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :
else :
key = self . make_key ( key , version = version )
def __get__ ( self , instance , owner ) :
del self . _post
def __repr__ ( self ) :
def handle_m2m_field ( self , obj , field ) :
self . run_validators ( out )
exclude . append ( f . name )
wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None
migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
if r . endswith ( '+00:00' ) :
if self . L ( ) and self . data . month > 2 :
return self . copy ( )
except ValidationError as e :
if proto >= 2 :
def get_wsgi_application ( ) :
exts = extensions if extensions else [ 'html' , 'txt' ]
taglib_module = '%s.%s' % ( module , library_name )
if media :
else :
except VariableDoesNotExist :
global _supported
leave_locale_alone = True
if item [ 'enclosure' ] is not None :
raise TemplateDoesNotExist ( template_name )
from django . utils . datastructures import MultiValueDict , MergeDict
def __setitem__ ( self , name , val ) :
import types
new_mod = name
ERROR = 40
while end > 0 and s . count ( b'"' , 0 , end ) % 2 :
self . callback = callback
path = kwargs . pop ( 'path' , None )
counters = [ 0 ] * len ( handlers )
_error_files . append ( filename )
lookups = MultiValueDict ( )
return SafeText ( t )
pass
header_names = [ key . lower ( ) for key in self . extra_headers ]
def num_items ( self ) :
from __future__ import unicode_literals
yield 'class %s(models.Model):' % table2model ( table_name )
if isinstance ( content , EmailMessage ) :
handler = SimplerXMLGenerator ( outfile , encoding )
self . literal = mark_safe ( unescape_string_literal ( var ) )
if target is None :
_active . value = translation ( language )
def __repr__ ( self ) :
thread . start_new_thread ( main_func , args , kwargs )
else :
encoding = property ( lambda self : self . file . encoding )
ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
if filepath . startswith ( root ) :
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
if instance is None :
try :
key = self . make_key ( key , version = version )
return False
strip_tags = allow_lazy ( strip_tags )
from django . core . management . base import AppCommand
upto = match . end ( )
from django . core . serializers . base import DeserializationError
if sign :
self . instance = instance
assert iterations > 0
return len ( list ( self . __iter__ ( ) ) )
del _error_files [ _error_files . index ( filename ) ]
cleaned = self . clean ( value )
return result
from django . forms . extras . widgets import SelectDateWidget
self . emit_post_migrate ( verbosity , interactive , database )
width = property ( _get_width )
del self . dict [ item ]
from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
asvar = None
kwargs [ "required" ] = False
def parse_http_date ( date ) :
continue
self . encoding = encoding
if year < 100 :
return self . __deepcopy__ ( { } )
choices = list ( chain ( self . choices , choices ) )
year += 1900
def save ( self , name , content ) :
except Exception :
for filename in filenames :
result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
raise NoReverseMatch (  "%s is not a registered namespace inside '%s'" %  ( key , ':' . join ( resolved_path ) ) )
return mark_safe ( '\n' . join ( output ) )
class BadSignature ( Exception ) :
from django . core . management . base import BaseCommand , CommandError
self . _expire_info = _expire_info . setdefault ( name , { } )
return self . file
from pkg_resources import resource_string
trim_whitespace_re = re . compile ( '\s*\n\s*' )
for f in sorted ( os . listdir ( self . path ) ) :
dfmt = config . get ( 'datefmt' , None )
return ''
data [ f . name ] = [ item . pk for item in qs ]
return value . rjust ( int ( arg ) )
while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :
defaults = parser . parse_args ( args = args )
for obj in queryset :
return line
from django . core . exceptions import SuspiciousFileOperation
_meth_func = "__func__"
for module_to_search in args :
ret_ip = [ ]
sites1 = _findall ( s1 , str ( year ) )
return val
from django . utils import six
return fixture_files
activate ( self . timezone )
if settings . USE_L10N :
return FilterNode ( filter_expr , nodelist )
except ( OSError , IOError ) :
value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
return it . next ( )
for path in format_module_path :
return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )
def __init__ ( self , filter_expr , nodelist ) :
class Command ( BaseCommand ) :
processors . append ( func )
self . regex = re . compile ( self . regex , self . flags )
if token is None :
class FixedOffset ( tzinfo ) :
def _has_expired ( self , key ) :
with self . _lock . writer ( ) :
timeout += int ( time . time ( ) )
if _supported is None :
raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
if code_changed ( ) :
raise
return mark_safe ( formats . number_format ( number , abs ( p ) ) )
field_params [ 'decimal_places' ] = row [ 5 ]
if self . _wrapped is empty :
if field . error_messages [ 'incomplete' ] not in errors :
try :
def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :
return template . render ( context )
mail . attach_alternative ( html_message , 'text/html' )
if bits [ 0 ] != 'and' :
try :
from django . conf import settings
try :
return ( RAW , { } , stream )
help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
def _should_delete_form ( self , form ) :
if not self . connection :
now = now . decode ( 'utf-8' )
from django . utils . timezone import get_default_timezone , is_aware , is_naive
if newretval is not None :
return getattr ( self , _assertRegex ) ( * args , ** kwargs )
self . set_payload ( text , utf8_charset )
def get_deserializer ( format ) :
errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )
if kwds :
except ValueError :
return sorted ( all_files )
from django . core . validators import validate_ipv4_address
raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
return text . __html__ ( )
allow_multiple_selected = False
field_desc += ')'
if len ( self . _cache ) >= self . _max_entries :
return result
def __repr__ ( self ) :
escaper = conditional_escape
mapped_tokens . append ( self . translate_token ( token ) )
base2 = BaseConverter ( BASE2_ALPHABET )
class Select ( Widget ) :
from django . utils . itercompat import is_iterable
def parse_date ( value ) :
fp . write ( data )
try :
from django . conf import settings
handler . name = name
return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )
parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
import warnings
self . years = years
from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
reverse = complain
parser . add_argument ( '--noinput' ,  action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
httpd . serve_forever ( )
return get_supported_language_variant ( settings . LANGUAGE_CODE )
else :
file . seek ( 0 )
if field_type == 'DecimalField' :
base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
if bytes < KB :
else :
os . unlink ( work_file )
res = func ( * self . __args , ** self . __kw )
if safe and arg != ';' :
pass
if self . verbosity >= 2 :
from django . utils . functional import cached_property
help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
digest = hashlib . sha256
if not commit :
else :
def has_key ( self , key , version = None ) :
from io import BytesIO
widget . is_localized = self . is_localized
name = self . split_leading_dir ( name ) [ 1 ]
request = self . request_class ( environ )
if ( self . requires_system_checks and  not options . get ( 'skip_validation' ) and  not options . get ( 'skip_checks' ) ) :
return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
tmpdir = tempfile . mkdtemp ( )
if col_name . lower ( ) . find ( '__' ) >= 0 :
ch , escaped = next ( input_iter )
cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
M . set ( key , real_value , coded_value )
return value if six . PY2 else value . encode ( ISO_8859_1 )
s = s . replace ( '"' , '&quot;' )
def __repr__ ( self ) :
data = field_stream . read ( )
key += kwd_mark
if self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'multipart/form-data' ) :
filename = ( 'utf-8' , '' , filename )
return six . text_type ( s ) . encode ( encoding )
fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
help = "Updates database schema. Manages both apps with migrations and those without."
if 'warning' in kwargs :
return kwargs
if not hasattr ( self , 'bad_cookies' ) :
def __init__ ( self , location = None , base_url = None , file_permissions_mode = None ,  directory_permissions_mode = None ) :
if t . token_type == TOKEN_BLOCK :
try :
except re . error as e :
for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :
def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :
except ImportError as exc :
def strftime ( self , fmt ) :
plist . append ( f . strip ( ) )
chunk_buffer = BytesIO ( chunk )
return super ( MultiValueDict , self ) . __getitem__ ( key )
hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )
except StandardError as e :
def render ( self , context ) :
if callable ( name ) :
return self . forms [ : self . initial_form_count ( ) ]
scheme = value . split ( '://' ) [ 0 ] . lower ( )
i = p . find ( b'=' )
PVOID = c_void_p
media_attrs = kwargs
return { }
if not use_workaround :
try :
for path in self . locale_paths :
raise ValidationError ( self . message , code = self . code )
with connections [ db ] . cursor ( ) as cursor :
return _slugify ( value )
return self . as_ul ( )
quant = [ ]
default_attrs = { 'cols' : '40' , 'rows' : '10' }
connection = connections [ database ]
ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
return clean_ipv6_address ( value , self . unpack_ipv4 )
if os . path . exists ( pot_path ) :
value = getattr ( opts , opt )
raise
else :
from django . template . defaultfilters import date
def addslashes ( value ) :
for field , errors in self . items ( ) :
result . queryset = result . queryset
return super ( QueryDict , self ) . setlistdefault ( key , default_list )
from django . conf . locale import LANG_INFO
def setdefault ( self , key , default = None ) :
break
def __iter__ ( self ) :
return data . getlist ( name )
base = force_text ( base )
self . key = key or settings . SECRET_KEY
substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )
for key , value in list ( attrs . items ( ) ) :
from yaml import SafeLoader , SafeDumper
next = index + len ( self . _boundary )
@ register . filter ( is_safe = True )
def fix ( match ) :
def nud ( self , parser ) :
val . append ( iso_input )
def reset_format_cache ( ) :
kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
except VariableDoesNotExist :
import errno
from datetime import datetime
assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
self . _stream = stream
def reraise ( tp , value , tb = None ) :
def handle_merge ( self , loader , conflicts ) :
except ( ValueError , TypeError ) :
cookies = '<could not parse>'
self . isolated_context = kwargs . pop ( 'isolated_context' , False )
return self . field . widget . is_hidden
return directories , files
stamp = _time . mktime ( tt )
return decorator
def validate ( self , value ) :
pass
for message in email_messages :
for key , value in dict . items ( self ) :
self . value = set ( force_text ( v ) for v in self . value )
except AttributeError :
try :
request_finished . connect ( update_watch )
opts = self . _meta
if len ( bits ) < 2 :
def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :
with self . mutex :
return True
self . file . seek ( 0 )
def get_urlconf ( default = None ) :
intrans = False
y = data . get ( self . year_field % name )
raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
self . prepend_token ( token )
widget = HiddenInput
class Command ( TemplateCommand ) :
def has_other_pages ( self ) :
_encoding = None
return range ( 1 , self . num_pages + 1 )
silent_variable_failure = True
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
def sql_indexes ( app_config , style , connection ) :
def find_command ( cmd , path = None , pathext = None ) :
if message_context :
pass
self . _setup ( )
from django . core . exceptions import DisallowedRedirect
bits . append ( int ( x ) )
logging . Handler . __init__ ( self )
res = instance . __dict__ [ self . name ] = self . func ( instance )
if hasattr ( self , 'error_dict' ) :
from django . utils import lru_cache
handlers = self . _upload_handlers
for k , v in ret . items ( ) :
def __lt__ ( self , other ) :
else :
return _trans . get_language ( )
elif finder . find_module ( name ) :
def __init__ ( self , * args , ** kwargs ) :
bit = self . render_node ( node , context )
def message ( self ) :
def popitem ( self ) :
flup_module += '_fork'
forms = ' ' . join ( form . as_table ( ) for form in self )
@ wraps ( fset )
e . reason += ', HTTP response headers must be in %s format' % charset
try :
parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' ,  help = 'Run only checks labeled with given tag.' )
if autoescape and not safe_input :
token_name = TOKEN_MAPPING [ self . token_type ]
quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :
self . filters = { }
app_configs = apps . get_app_configs ( )
if not os . path . exists ( self . _dir ) :
p = PillowImageFile . Parser ( )
mw_class = import_string ( middleware_path )
self . exclude = getattr ( options , 'exclude' , None )
if locales :
if finder . find_module ( name ) :
except CommandError :
def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
raise ValueError ( "attempted relative import beyond top-level package" )
pass
return mark_safe ( '' . join ( bits ) )
from django . utils import six
def __init__ ( self , * args , ** kwargs ) :
before_import_registry = copy . copy ( register_to . _registry )
from django . db . migrations . writer import MigrationWriter
app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
g = g . strip ( '"' )
data = str ( data )
self . buf_size = buf_size
def setdefault ( self , key , default ) :
table_names = [ model . _meta . db_table for model in self . models ]
from threading import Lock
if self . cmd . _called_from_command_line :
for sql in index_sql :
if result is not None :
charset = content_type_extra . get ( 'charset' )
def rmtree_errorhandler ( func , path , exc_info ) :
if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :
self . current_token = self . next_token ( )
class StreamingHttpResponse ( HttpResponseBase ) :
if verbosity >= 2 :
self . close ( )
return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )
msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
try :
return data
continue
raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
self . saved_forms . append ( form )
class EntitiesForbidden ( DefusedXmlException ) :
from django . utils . six . moves import http_cookies
import sys
stream = self . _stream
return _ ( 'a.m.' )
pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )
def pk_is_not_editable ( pk ) :
_illegal_formatting = re . compile ( r"((^|[^%])(%%)*%[sy])" )
except AttributeError :
super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
s = six . text_type ( s , encoding , errors )
try :
def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :
def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
if self . required and not value :
def main ( main_func , args = None , kwargs = None ) :
forms_to_delete = self . deleted_forms
import json
return self . __class__ ( * self . dicts )
except ValueError :
advance_iterator = next
if commit :
intrans = True
sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
if best_doublecolon_len > 1 :
read = property ( lambda self : self . file . read )
os . rmdir ( original_path )
abspathu = abspath
return self . _get_page ( self . object_list [ bottom : top ] , number , self )
elif self . _meta . fields and field not in self . _meta . fields :
pass
from django . utils . http import urlquote
for field in self . fields . values ( ) :
del self [ 'Content-Transfer-Encoding' ]
if not self . _is_rendered :
raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
if arg . startswith ( option ) :
handler . endElement ( "item" )
return list ( self )
self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]
msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
yield
return value
return lambda text : colorize ( text , opts , ** kwargs )
if sizeof ( c_ulong ) != sizeof ( c_void_p ) :
name = getattr ( file , 'name' , None )
locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
raise SuspiciousMultipartForm (  "The multipart parser got stuck, which shouldn't happen with"  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
else :
return force_text ( unquote ( force_str ( quoted_url ) ) )
if column_name in indexes :
def _create_attachment ( self , filename , content , mimetype = None ) :
connection = connections [ options [ 'database' ] ]
var_node = self . create_variable_node ( filter_expression )
from django . utils . module_loading import import_string
if f . primary_key :
handler_config = handlers [ name ]
s = s . replace ( '\t' , '\\t' )
return self . _fname
return _serializers [ format ] . Serializer
message = message . error_dict
def handle ( self , ** options ) :
kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
from django . core . cache . backends . db import BaseDatabaseCache
from django . http . multipartparser import MultiPartParser , MultiPartParserError
def Deserializer ( object_list , ** options ) :
key = self . make_key ( key , version = version )
self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' )
_format_modules_cache = { }
if isinstance ( o , datetime . datetime ) :
except ImportError :
t = s . split ( '=' , 1 )
nofollow_attr = ''
return ''
else :
format_string = bits [ 1 ] [ 1 : - 1 ]
defaults . update ( kwargs )
out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )
if args is None :
class CacheClass ( DatabaseCache ) :
if isinstance ( loader , six . string_types ) :
_add_doc ( b , """Byte literal""" )
if isinstance ( s , Promise ) :
def __init__ ( self , key_to_list_mapping = ( ) ) :
__bytes__ = serialize
self . cookies = SimpleCookie ( self . cookies )
value = dict . __getitem__ ( self , key )
if isinstance ( field , InlineForeignKeyField ) :
connection = connections [ options [ 'database' ] ]
parser . add_argument ( '--addrport' , default = '' ,  help = 'Port number or ipaddr:port to run the server on.' )
oldkey = root [ KEY ]
from __future__ import unicode_literals
continue
import sys
six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
if hasattr ( message , 'error_dict' ) :
self . is_bound = data is not None or files is not None
output . append ( '</select>' )
def __init__ ( self , * args , ** kwargs ) :
with connection . cursor ( ) as cursor :
if as_form :
if base . lower ( ) . endswith ( '.tar' ) :
if not hasattr ( template , 'render' ) :
if self . feed [ 'author_link' ] is not None :
def render ( self , context ) :
try :
m = base
self . models = set ( )
try :
now = now . replace ( microsecond = 0 )
if inplural :
extra_classes = extra_classes . split ( )
def handle_template ( self , template , subdir ) :
from django . conf import settings
setattr ( cls , opname , opfunc )
year_val , month_val , day_val = v . year , v . month , v . day
return TimestampSigner ( key , salt = salt ) . sign ( base64d )
def all_valid ( formsets ) :
out . write ( blankout ( p , 'F' ) )
def e ( self ) :
if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :
from django . core . management . color import color_style , no_style
template_dir = self . handle_template ( options [ 'template' ] ,  base_subdir )
elif 'HTTP_HOST' in self . META :
self . buffer += chunk
result = copy . copy ( self )
archive . extract ( filename , tempdir )
def decorating_function ( user_function ) :
block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
trans_real . _translations = { }
continue
return _trans . activate ( language )
import warnings
return filenames
EscapeString = EscapeBytes
WARNING = 30
app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
self . _cull_frequency = int ( cull_frequency )
self . _fqdn = socket . getfqdn ( )
else :
result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
def __init__ ( self , content ) :
self . check ( )
old_setting = context . autoescape
def escapejs_filter ( value ) :
class HttpResponseBadRequest ( HttpResponse ) :
else :
@ property
def render ( self , name , value , attrs = None , choices = ( ) ) :
etags = ETAG_MATCH . findall ( etag_str )
language_code = get_language ( )
if self . is_checked ( ) :
return self . limit_choices_to
self . var = var
timeout = self . get_backend_timeout ( timeout )
if isinstance ( pattern , RegexURLResolver ) :
import django
return types . MethodType ( func , obj , obj . __class__ )
parser = parser_class ( lexer . tokenize ( ) )
six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
return self . tag_function ( name )
timeout = params . get ( 'timeout' , params . get ( 'TIMEOUT' , 300 ) )
raise
value = False
import os
self . _container . append ( self . make_bytes ( content ) )
if app_output :
if self . _read_started and not hasattr ( self , '_body' ) :
table = connections [ db ] . ops . quote_name ( self . _table )
def splitext ( self , the_path ) :
result = ':' . join ( hextets [ 0 : 6 ] )
return [ None , None ]
link_next [ PREV ] = link_prev
stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
if not now :
parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False ,  help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )
FILTER_SEPARATOR = '|'
from django . utils import six
except Exception as e :
if 'DJANGO_AUTO_COMPLETE' not in os . environ :
else :
return s
bits = token . split_contents ( ) [ 1 : ]
def T ( self ) :
self . _deleted_form_indexes . append ( i )
try :
def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
if self . _wrapped is empty :
if self . domain_regex . match ( domain_part ) :
def flatatt ( attrs ) :
def to_python ( self , value ) :
if path is not None :
def unordered_list ( value , autoescape = None ) :
from django . core . management import call_command
raise ValueError ( "Unsupported version: %s" % config [ 'version' ] )
filter_func . _filter_name = name
def strip_tags ( value ) :
with connections [ db ] . cursor ( ) as cursor :
except ValueError :
from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
yield "# Feel free to rename the models, but don't rename db_table values or field names."
field_value = getInnerText ( node ) . strip ( )
else :
if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
if is_aware ( o ) :
def prepare_value ( self , value ) :
self . handle_m2m_field ( obj , field )
exec ( """exec _code_ in _globs_, _locs_""" )
import tarfile
def render ( self , context ) :
return True
import cgi
return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )
mail . send ( fail_silently = fail_silently )
use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
if isinstance ( f , ManyToManyField ) :
with connection . cursor ( ) as cursor :
def get ( self , key , default = None , version = None ) :
from django . core . files import locks , File
walk_to_end ( ch , pattern_iter )
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
for attr , value in base . __dict__ . items ( ) :
class SignatureExpired ( BadSignature ) :
kwargs = {  'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) )  }
def compare_ordering_key ( k ) :
result . parent = self
try :
if root :
template = '%(input)s'
if self . can_order :
form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )
existing_headers = set ( header . lower ( ) for header in vary_headers )
def render ( self , context ) :
class Resolver404 ( Http404 ) :
self . kwargs = kwargs
except IOError as e :
yield v
if row [ 4 ] is None or row [ 5 ] is None :
renamed_methods = ( )
kwargs = { 'pk_field' : True }
args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]
match = RE_DATE . match ( value )
if not match :
try :
return lookup_view
class Command ( BaseCommand ) :
return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
import itertools
if safe :
path = path . lstrip ( '/' ) . lstrip ( '\\' )
memo [ id ( self ) ] = obj
return self . __name
_func_globals = "func_globals"
if use_func :
except Exception :
if tablename in connection . introspection . table_names ( ) :
parser . add_option ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
d = m . groupdict ( )
return self . paginator . validate_number ( self . number + 1 )
httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
if isinstance ( loader , ( tuple , list ) ) :
new_migration = subclass ( "0001_squashed_%s" % migration . name , app_label )
filemsg = 'file %s, ' % origin
attrs [ 'id' ] = self . html_initial_id
obj = mark_for_escaping ( new_obj )
class SimpleNode ( TagHelperNode ) :
if initial_forms > self . max_num >= 0 :
return cache
vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
leave_locale_alone = False
return default_key_func
if isinstance ( arg , Promise ) :
def __add__ ( self , rhs ) :
else :
itervalues = _itervalues
self . stdout . write ( " [ ] %s" % title )
f . error_messages . setdefault ( 'incomplete' ,  self . error_messages [ 'incomplete' ] )
PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
escaper = lambda x : x
else :
if not attr_list [ 3 ] & termios . ECHO :
self . find_template_cache [ key ] = result
if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :
basedirs . append ( os . path . join ( app_config . path , 'locale' ) )
@ property
def create_variable_node ( self , contents ) :
if not package :
unlink = os . unlink
except ( AttributeError , TypeError ) :
field_params [ 'decimal_places' ] = row [ 5 ] if row [ 5 ] is not None else 5
@ stringfilter
self . filter_expression = filter_expression
libraries = { }
except ValidationError as e :
illegal_formatting = _illegal_formatting . search ( fmt )
return self . _num_pages
if msg :
raise CommandError (  "errors happened while running msguniq\n%s" % errors )
for filepath in self . get_template_sources ( template_name , template_dirs ) :
VARIABLE_ATTRIBUTE_SEPARATOR = '.'
def format_subject ( self , subject ) :
script_name = script_url [ : - len ( path_info ) ]
from importlib import import_module
def t ( self ) :
self . autocomplete ( )
pass
else :
return False
url_fields [ 1 ] = url_fields [ 2 ]
if len ( initial ) != len ( data ) :
return '%s-%s' % ( self . prefix , index )
from django . core . management . base import AppCommand
import os
pass
assert remaining > 0 , 'remaining bytes to read should never go negative'
with open ( pythonrc ) as handle :
return result . lower ( )
from django . core . management . base import BaseCommand , CommandError
sys . stderr . write ( msg )
collect = [ ]
content = template . render ( context )
file = tempfile . NamedTemporaryFile ( suffix = '.upload' )
def load ( self , rawdata ) :
return not ( self == other )
self . _current = None
break
input_type = 'checkbox'
host = '%s:%s' % ( host , server_port )
yield SubWidget ( self , name , value , attrs , choices )
def temporary_file_path ( self ) :
for root in settings . ALLOWED_INCLUDE_ROOTS :
if kwds :
df = DateFormat ( value )
sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )
return cached
pass
models = 'models'
return ''
return '\n' . join ( statements )
return datetime . date ( ** kw )
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
for o in opts :
if hasattr ( text , '__html__' ) :
return False
class BadSerializer ( object ) :
def iter_format_modules ( lang , format_module_path = None ) :
except AttributeError :
if formatter :
cache = DefaultCacheProxy ( )
class TokenBase ( object ) :
result = type ( self ) ( )
parser . delete_first_token ( )
widget = URLInput
_format_cache = { }
from importlib . util import find_spec as importlib_find
if e . errno != errno . EEXIST :
lead , trail = escape ( lead ) , escape ( trail )
else :
if ignore and field_name not in model_fields :
else :
def __deepcopy__ ( self , memo ) :
old_style_list = True
@ stringfilter
for x , y in zip ( val1 , val2 ) :
def urlsafe_base64_encode ( s ) :
force_str = force_text
def handle ( self , * args , ** options ) :
connection = connections [ database ]
attrs = super ( IntegerField , self ) . widget_attrs ( widget )
cls . __dispatch = { }
else :
if reduce ( operator . eq , level ) :
exc_info = ( None , record . getMessage ( ) , None )
latest_date = item_date
self . common_logger_config ( root , config , incremental )
from importlib import import_module
elif name == 'id' :
return mark_safe ( '\n' . join ( output ) )
self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
if key in dict_ :
self . content = content
basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
meta = getattr ( form , 'Meta' , None )
prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
self . configure_root ( root )
if self . can_delete :
def compress ( self , data_list ) :
provided = list ( provided )
exclude . append ( f . name )
def forms ( self ) :
if space == 0 :
class UploadedFile ( File ) :
module = _import_module ( self . mod )
cache_key = 'views.decorators.cache.cache_header.%s.%s' % (  key_prefix , url . hexdigest ( ) )
PB = 1 << 50
if limit is None or len ( x ) <= limit :
def a ( self ) :
attachment = SafeMIMEMessage ( content , subtype )
sec = int ( m . group ( 'sec' ) )
super ( TypedMultipleChoiceField , self ) . validate ( value )
continue
import_string ( backend )
text = force_text ( text )
final_attrs [ 'checked' ] = 'checked'
def split_domain_port ( host ) :
def set_script_prefix ( prefix ) :
self . filters = { }
def __init__ ( self , template , context = None , content_type = None , status = None ) :
else :
class EmailBackend ( BaseEmailBackend ) :
def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :
self . use_natural_keys = options . pop ( "use_natural_keys" , False )
def __init__ ( self , convert_charrefs = False , ** kwargs ) :
attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )
if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :
if leading :
attrs [ 'max' ] = self . max_value
self . _callback = get_callable ( self . _callback_str )
if endbmatch :
def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :
input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
pos = self . file . tell ( )
text = text [ 1 : ]
else :
if isinstance ( elt , Group ) :
else :
self . version = params . get ( 'VERSION' , 1 )
if extra_attrs :
message_context = None
for refto , refs in references . items ( ) :
db = router . db_for_write ( self . cache_model_class )
raise CommandError ( '"%s" is not a valid IPv6 address.' % self . addr )
v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )
param = None
if not self . leave_locale_alone :
for f in file_list :
result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
else :
return AssignmentNode ( takes_context , args , kwargs , target_var )
buf = StreamingBuffer ( )
signals . got_request_exception . send ( sender = self . __class__ , request = request )
class RadioChoiceInput ( ChoiceInput ) :
from django . utils import six
return FILE_INPUT_CONTRADICTION
parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
self . locale_dir = locale_dir
major = '.' . join ( str ( x ) for x in version [ : parts ] )
if not pythonrc :
from django . utils import six
fixture_files = [ ]
raise TypeError ( msg )
__Y2 = r'(?P<year>\d{2})'
def force_escape ( value ) :
return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
sys . stderr = open ( err_log , 'a' , buffering )
@ lru_cache . lru_cache ( maxsize = None )
tt = _time . localtime ( stamp )
class Command ( BaseCommand ) :
return
return retval
ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
if not self . timezone :
return False
raise TemplateDoesNotExist ( "No template names provided" )
m = Media ( )
raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
self . _upload_handlers = upload_handlers
class RegexURLResolver ( LocaleRegexProvider ) :
msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
@ property
def save_instance ( form , instance , fields = None , fail_message = 'saved' ,  commit = True , exclude = None , construct = True ) :
return _ ( 'midnight' )
return callback ( request , ** param_dict )
def __setstate__ ( self , obj_dict ) :
def __init__ ( self , nodelist ) :
initial = [ ]
else :
self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ]
from django . utils import six
if field_node . getElementsByTagName ( 'None' ) :
except ImportError :
vary_headers = [ ]
setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
error_msg += " Got this from the '%s' variable." % self . parent_name . token
natural = value . natural_key ( )
def find_filter ( self , filter_name ) :
self . setting , self . nodelist = setting , nodelist
d = datetime . datetime ( d . year , d . month , d . day )
if trim :
from django . apps import apps
if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :
def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
def tell ( self ) :
return tuple ( app_template_dirs )
check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )
exec_ ( """def reraise(tp, value, tb=None):     raise tp, value, tb """ )
def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :
self . _callback = None
allowed_schemes = [ 'http' , 'https' , 'ftp' ]
return self . resolve ( value )
import json
config [ '()' ] = factory
else :
raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
if format_module_path is None :
def utcoffset ( self , dt ) :
if bf . is_hidden :
from django . utils import six
class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
cls = extension_map . get ( ext )
if key . startswith ( self . prefix ) :
raise TemplateSyntaxError ( "Invalid arguments provided to assignment_tag" )
def set_cdata_mode ( self , tag ) :
self . _container = [ ]
if errors :
import_module ( '.management' , app_config . name )
from __future__ import unicode_literals
output = [ ]
return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )
def __init__ ( self , * args , ** kwargs ) :
logging_config_func = import_string ( logging_config )
def __getattr__ ( self , name ) :
final_output . extend ( output )
help = 'Discover and run tests in the specified modules or the current directory.'
cache . clear ( )
raise ValidationError ( self . message , code = self . code )
default_translation = translation ( settings . LANGUAGE_CODE )
continue
def tzname ( self , dt ) :
raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
out += '</%s>' % tag
return True
if len ( bits ) :
password += b'\x00' * ( inner . block_size - len ( password ) )
elif isinstance ( value , datetime . date ) :
return _wrapper
files . append ( entry )
return pickle . loads ( pickled )
def clear ( self ) :
def render ( self , name , value , attrs = None ) :
pass
if f . db_index :
pass
from django . utils . translation import ugettext_lazy as _
values = _itervalues
return [ source [ 0 ] ] , [ params ]
else :
from django . core . serializers . python import Deserializer as PythonDeserializer
directory = os . path . dirname ( full_path )
parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
def _cull ( self , db , cursor , now ) :
return smart_text ( value )
if isinstance ( s , bytes ) :
@ register . filter ( is_safe = True , needs_autoescape = True )
if response :
def __iter__ ( self ) :
else :
def upload_handlers ( self ) :
else :
if id_ :
from django . core . exceptions import ValidationError
def load_handler ( path , * args , ** kwargs ) :
palette . update ( PALETTES [ part ] )
Iterator = object
return initial_value != data_value
def is_writable ( path ) :
raise CommandError ( "Unable to serialize database: %s" % e )
class CallbackFilter ( logging . Filter ) :
with transaction . atomic ( using = connection . alias ) :
self . next = next
def __call__ ( self , * args , ** kwargs ) :
display_url = url
@ stringfilter
obj = base . build_instance ( Model , data , db )
return timezone . localize ( value , is_dst = None )
handler = logging . _handlers [ name ]
def __init__ ( self , name ) :
def get_str_from_wsgi ( environ , key , default ) :
def yesno ( value , arg = None ) :
def execute ( self , * args , ** options ) :
def slugify ( value ) :
def clean ( self ) :
def __init__ ( self , offset = None , name = None ) :
end = len ( text )
break
from itertools import dropwhile
return [ ( '' , [ ] ) ]
if 'class' in attrs :
def filter ( self , record ) :
if not settings . configured :
MIMEMessage . __setitem__ ( self , name , val )
return [ globalpath ] + list ( settings . LOCALE_PATHS )
if self . verbosity > 0 :
if app_label not in executor . loader . migrated_apps :
def __eq__ ( self , other ) :
self . _ordering = [ ]
current_chunk = old_file . read ( chunk_size )
if self . verbosity >= 1 :
values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]
if saved_locale is not None :
elif common_prefix is None :
for i , line in enumerate ( table_output ) :
if self . errors and hasattr ( self . form , 'error_css_class' ) :
@ register . tag ( 'block' )
try :
def unescape_entities ( text ) :
renamed_methods = (  ( '_get_memcache_timeout' , 'get_backend_timeout' , RemovedInDjango19Warning ) ,  )
@ register . filter ( "phone2numeric" , is_safe = True )
def add_arguments ( self , parser ) :
must_be_first = True
if os . path . exists ( sql_file ) :
if only_new :
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
if urlconf_name :
if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) :
g = generator . Generator ( fp , mangle_from_ = False )
def error ( self , token , msg ) :
pass
self . widgets = getattr ( options , 'widgets' , None )
return value
from django . utils . encoding import force_bytes , force_text , iri_to_uri
url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
template = Template ( content )
if typed :
field = Model . _meta . get_field ( field_name )
references_to_delete = { }
if six . PY3 :
import errno
if refto in seen_models :
return self . incr_version ( key , - delta , version )
if loader is not None :
def base36_to_int ( s ) :
bits = token . split_contents ( ) [ 1 : ]
self . _producer = [ ]
if sys . version_info >= ( 2 , 7 , 2 ) :
def clear ( self ) :
def _set_regex ( self , regex ) :
elif settings . USE_TZ :
raise CommandError (  "Unable to find a locale path to store translations for file %s" % file_path )
if not self . allow_empty_file and not file_size :
def escapejs ( value ) :
return int ( str ( value ) [ - arg ] )
import re
time . sleep ( 1 )
for pythonrc in ( os . environ . get ( "PYTHONSTARTUP" ) , '~/.pythonrc.py' ) :
i += 1
return super ( CommandParser , self ) . parse_args ( args , namespace )
self . _max_entries = 300
with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :
else :
parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
if data :
except OSError as e :
format_module_path = settings . FORMAT_MODULE_PATH
return mark_safe ( value . replace ( '\n' , '<br />' ) )
def _set_queryset ( self , queryset ) :
ungettext = ngettext
if isinstance ( empty_label , ( list , tuple ) ) :
return ''
return
else :
self . _wrapped = empty
@ property
@ property
raise ValidationError ( self . message , code = self . code )
if fp is None :
parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )
return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )
try :
from django . core . management . base import BaseCommand
from django . utils import six
return super ( SortedDict , self ) . setdefault ( key , default )
def parse_endtag ( self , i ) :
if whitelist is not None :
pass
if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :
from django . utils . encoding import force_str
self . close ( )
if representative is None :
self . _caches = local ( )
class ExternalReferenceForbidden ( DefusedXmlException ) :
raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
for line in text . splitlines ( True ) :
if not field . show_hidden_initial :
self . hide_empty = options . get ( 'hide_empty' , False )
if basetype == 'text' :
if errors :
existing_headers = set ( header . lower ( ) for header in vary_headers )
return
field_notes . append ( 'Field renamed because it was a Python reserved word.' )
return False
def loaders ( self ) :
self . exception = exception
def __init__ ( self , attrs = None , format = None ) :
elif self . fixture_object_count == self . loaded_object_count :
value = None
if not supports_color ( ) :
os . _exit ( 1 )
_localtime = LocalTimezone ( )
else :
def __copy__ ( self ) :
s = six . text_type ( s )
self . interactive = options . get ( 'interactive' )
return self . _namespace_dict [ language_code ]
for taglib in bits [ 1 : ] :
def _get_request ( self ) :
return self . object_list [ index ]
return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
__getattr__ = new_method_proxy ( getattr )
value . encode ( charset )
self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
def gettext ( message ) :
insert = complain
from django . utils . functional import total_ordering
def __reduce_ex__ ( self , proto ) :
self . execute ( * args , ** cmd_options )
return False
elif char == '\\' :
try :
raise NotImplementedError ( 'Awaiting Implementation' )
self . app_name = app_name
parts = config_string . lower ( ) . split ( ';' )
for p in plist :
def assertCountEqual ( self , * args , ** kwargs ) :
if len ( password ) > inner . block_size :
output = [ ]
try :
def urlconf_module ( self ) :
first , lang , priority = pieces [ i : i + 3 ]
language_code = get_language ( )
def new_date ( d ) :
if value and ':' in value :
raise base . DeserializationError (  "<%s> node has invalid model identifier: '%s'"  % ( node . nodeName , model_identifier ) )
raise
return None
handle_default_options ( options )
def __init__ ( self , name ) :
from django . utils import six
import codecs
locales = set ( locales ) - set ( exclude )
return backend_cls ( location , params )
raise self . error ( token , "Invalid block tag: '%s'" % command )
if self . verbosity >= 1 :
def _cache ( self ) :
cmp_fmt = None
else :
connection . check_constraints ( table_names = table_names )
if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :
def _populate ( self ) :
from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
return "(" + " " . join ( out ) + ")"
if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :
remove = complain
elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :
try :
initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
return { "version" : self . _version ,  "xmlns:atom" : "http://www.w3.org/2005/Atom" }
from django . conf import settings
sub = '.dev%s' % git_changeset
return 0
indent = '\t' * tabs
def module_has_submodule ( package , module_name ) :
self . max_value , self . min_value = max_value , min_value
def render ( self , context ) :
self . default_locale_path = self . locale_paths [ 0 ]
if not response . has_header ( 'Last-Modified' ) :
for part in singular :
if self . instance . pk is None :
netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
except PermissionDenied :
context [ 'block' ] = block
return "<Variable Node: %s>" % self . filter_expression
else :
except KeyError :
return '%02d' % self . data . month
def clean ( self , value ) :
def _set_size ( self , size ) :
for app_label , app_migrations in changes . items ( ) :
self . _start_relational_field ( field )
if comment_notes :
fp . write ( src_data )
t = getattr ( _active , "value" , None )
with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :
return settings . LANGUAGE_CODE
num_pages = property ( _get_num_pages )
extra_params [ 'unique' ] = True
field_notes . append ( "Field renamed because it contained more than one '_' in a row." )
def prepare_value ( self , value ) :
else :
for error in self . errors . as_data ( ) [ field ] :
from django . utils import six
for slots_var in slots :
self . _table = table
s_len += 1
return lazy ( func , * resultclasses ) ( * args , ** kwargs )
val = self [ key ]
self . stdout . write ( self . style . MIGRATE_HEADING ( "Created new squashed migration %s" % writer . path ) )
def value_from_datadict ( self , data , files , name ) :
def __init__ ( self , digits , sign = '-' ) :
else :
def assignment_tag ( self , func = None , takes_context = None , name = None ) :
wrapper . __wrapped__ = user_function
bit = next ( bits )
return yes
if hasattr ( mw_instance , 'process_request' ) :
self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
has_bz2 = False
from django . core . exceptions import ValidationError
if not value :
obj = settings . TEMPLATE_STRING_IF_INVALID
if autoescape :
for name , field in self . fields . items ( ) :
self . _reverse_dict = { }
if callable ( self . limit_choices_to ) :
def __hash__ ( self ) :
if item [ "author_name" ] and item [ "author_email" ] :
def firstof ( parser , token ) :
p = int ( arg )
if response :
if site in sites2 :
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
getLogger = logging . getLogger
value = value . replace ( arg , '' )
self . xml . characters ( smart_text ( related_att ) )
url = reverse ( project_name + '.' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )
trimmed = False
if format not in _serializers :
def __getitem__ ( self , idx ) :
return File ( open ( self . path ( name ) , mode ) )
temp_lib . tags [ name ] = lib . tags [ name ]
def to_python ( self , value ) :
key = bytes_to_text ( key , self . encoding )
if options . pythonpath :
if _samefile ( old_file_name , new_file_name ) :
date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
block_context . push ( self . name , push )
from django . utils import six
return False
if values is None :
from django . conf import settings
yield buf . read ( )
return '%s...' % x [ : max ( 0 , limit - 3 ) ]
from django . utils . text import get_text_list , capfirst
new_context = copy ( self )
if options . get ( 'liveserver' ) is not None :
encoding = None
ending = self . ending if ending is None else ending
choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
status_code = 302
return '' . join ( pieces )
for model in model_list :
else :
weight = 0
__version__ = "1.6.1"
raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
from django . conf import settings
def errors ( self ) :
GB = 1 << 30
sys . modules [ __name__ + ".moves.urllib" ] = Module_six_moves_urllib ( __name__ + ".moves.urllib" )
def popitem ( self ) :
_itervalues = "values"
cache_get = cache . get
return [  Warning (  "Some project unittests may not execute as expected." ,  hint = ( "Django 1.6 introduced a new default test runner. It looks like "  "this project was generated using Django 1.5 or earlier. You should "  "ensure your tests are all running & behaving as expected. See "  "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "  "for more information." ) ,  obj = None ,  id = '1_6.W001' ,  )  ]
self . merge ( translation )
lineno_comment_map [ comment_lineno_cache ] = [ ]
return _trans . get_language_bidi ( )
def to_python ( self , value ) :
from django . conf import settings
if not settings . ADMINS :
parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )
elif t . token_type == TOKEN_VAR :
_load_serializers ( )
text_type = unicode
with transaction . atomic ( using = db ) :
MONTHS_AP = {  1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) ,  2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) ,  3 : pgettext_lazy ( 'abbrev. month' , 'March' ) ,  4 : pgettext_lazy ( 'abbrev. month' , 'April' ) ,  5 : pgettext_lazy ( 'abbrev. month' , 'May' ) ,  6 : pgettext_lazy ( 'abbrev. month' , 'June' ) ,  7 : pgettext_lazy ( 'abbrev. month' , 'July' ) ,  8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) ,  9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) ,  10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) ,  11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) ,  12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' )  }
elif change == I18N_MODIFIED :
app_configs = None
return iter ( self . keyOrder )
self . connection = get_connection ( fail_silently = fail_silently )
def timesince_filter ( value , arg = None ) :
password = digest ( password ) . digest ( )
else :
if not only_initial :
raise
self . mod = new_mod
self . feed . update ( kwargs )
return self . _regex
try :
import logging
is_templatized = file_ext in command . extensions
return ( 1 , 0 )
self . target , self . expression = target , expression
def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
as_bytes = as_string
table = connections [ db ] . ops . quote_name ( self . _table )
@ classmethod
def __exit__ ( self , exc , value , tb ) :
self . tags . update ( lib . tags )
def add_prefix ( self , field_name ) :
flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL |  getattr ( os , 'O_BINARY' , 0 ) )
return [ ]
return tt . tm_isdst > 0
for f in file_field_list :
_fields_ = [  ( '_offset' , _OFFSET ) ,  ( 'Pointer' , PVOID ) ]
super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
continue
return self . source_error ( token . source , msg )
if event . path . endswith ( '.mo' ) :
translation = self . _new_gnu_trans ( localedir , use_null_fallback )
if isinstance ( app_name , BaseCommand ) :
elif ch == '(' :
return super ( TimestampSigner , self ) . sign ( value )
default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
from django . utils . encoding import force_text
elif args [ 1 ] == '404' :
if meta is None :
is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
if ':' not in ip_str :
return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
if autoescape :
else :
cache [ key ] = result
if "=" in x :
import stat
self . _queryset = qs
return errors
return rv
class MultiPartParserError ( Exception ) :
from django . utils . crypto import constant_time_compare , salted_hmac
salt = force_bytes ( salt )
raise ValueError ( "Base36 input too large" )
if sys . platform . startswith ( 'java' ) :
value = to_current_timezone ( value )
self . _cache [ key ] = pickled
MAXSIZE = int ( ( 1 << 31 ) - 1 )
if token_string . startswith ( VARIABLE_TAG_START ) :
from django . utils . functional import cached_property
__all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' )
known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
except AttributeError :
value = value . astimezone ( timezone )
self . timezone = None
return value
old_handler = None
input_type = 'file'
return result
return context [ 'forloop' ]
for d in reversed ( self . dicts ) :
sign = '-' if offset < 0 else '+'
from django . forms . formsets import BaseFormSet , formset_factory
except KeyError :
return value
return self . size
if attr in flags :
stream = stream_or_string
for name , tok in lexer . lex ( js ) :
subject = '%s (%s IP): %s' % (  record . levelname ,  ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
thefile = '%s.c' % self . file
def _replace_entity ( match ) :
if max_length is not None :
try :
parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
if fixture_name != 'initial_data' and not fixture_files :
lexer = lexer_class ( template_string , origin )
def write ( self , outfile , encoding ) :
self . handle_startendtag ( tag , attrs )
delta = delta + datetime . timedelta ( seconds = 1 )
self . val_expr = val_expr
elif name is not None and filter_func is not None :
invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
def remove ( self , item ) :
key = key [ len ( self . prefix ) : ]
from django . db import models
self . _js = [ ]
def y ( self ) :
if field . rel . to . _meta . pk . rel :
lexer = JsLexer ( )
if value is None :
raise CommandError ( "You can only use --pks option with one model" )
from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) :
from django . conf import settings
class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
return { "xmlns" : self . ns , "xml:lang" : self . feed [ 'language' ] }
if isinstance ( s , Promise ) :
from django . utils . encoding import force_text
idhost = DNS_NAME
def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
from django . utils . module_loading import import_string
raise StopIteration ( )
pass
self . _closable_objects . append ( value )
out = b'' . join ( parts ( ) )
super ( Command , self ) . handle ( 'project' , project_name , target , ** options )
if os . path . exists ( name ) :
try :
else :
if PY3 :
if encoding == 'utf-8' :
requires_system_checks = False
except TypeError :
return
else :
return 'Raw content'
def __getitem__ ( self , key ) :
def __repr__ ( self ) :
pass
self . initial_extra = kwargs . pop ( 'initial' , None )
self . _update_errors ( e )
if language_code not in self . _regex_dict :
super ( Command , self ) . add_arguments ( parser )
try :
data_value = data if data is not None else ''
t = self . waiting_readers
def add_item_elements ( self , handler , item ) :
subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
b64encoded = b64encoded . decode ( 'latin1' )
return 0
with context . push ( var = output ) :
self . default_locale_path = None
from __future__ import unicode_literals
return week_number
def page ( self , number ) :
return lookup_view
def get_storage_class ( import_path = None ) :
else :
i = 366
if six . PY3 :
return Template ( source , origin , name )
return self . template_cache [ key ]
while path :
def _string_concat ( * strings ) :
def get_many ( self , keys , version = None ) :
new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
choice_input_class = RadioChoiceInput
def compile_function_error ( self , token , e ) :
request_repr = "unavailable"
neg_inf = - 1e200 * 1e200
LocaleRegexProvider . __init__ ( self , regex )
def write ( self , content ) :
if self . use_natural_keys :
if rel_to in known_models :
else :
def validate_name ( self , name , app_or_project ) :
digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
visible_issue_count = 0
return result
if num_entries < self . _max_entries :
def _setup ( self ) :
source , display_name = self . load_template_source ( template_name , template_dirs )
def process_default ( self , event ) :
@ property
from django . utils import six , lru_cache
for x in range ( level , 1 , - 1 ) :
class DateInput ( DateTimeBaseInput ) :
parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
for c in lineno_comment_map [ comment_lineno_cache ] :
import warnings
def validate ( self , value ) :
self . args = args
try :
def safe ( value ) :
add_to_builtins ( 'django.template.defaulttags' )
else :
for attr in _moved_attributes :
errors . append ( self . get_date_error_message ( date_check ) )
return caches [ DEFAULT_CACHE_ALIAS ] == other
if instance is None :
format_key = 'DATE_INPUT_FORMATS'
return value . ljust ( int ( arg ) )
def discard ( self , item ) :
raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
if value is None :
for field , messages in errors . error_dict . items ( ) :
for app_config in apps . get_app_configs ( ) :
else :
if isinstance ( field , FileField ) :
_win = ( sys . platform == "win32" )
return True
def __len__ ( self ) :
self . name , self . value = name , value
timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
if help_texts and f . name in help_texts :
docs_version = 'dev'
else :
@ python_2_unicode_compatible
def server_bind ( self ) :
pass
except :
return len ( value )
year_val = month_val = day_val = None
language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
if self . required :
return os . path . normpath ( path )
block_context . add_blocks ( self . blocks )
parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )
deactivate = deactivate_all = lambda : None
def check_all_models ( app_configs = None , ** kwargs ) :
def to_python ( self , value ) :
from django . core . servers . fastcgi import runfastcgi
self . _template_response_middleware = [ ]
return ''
else :
factor += 1
raise TemplateSyntaxError ( "widthratio takes at least three arguments" )
quote = s [ 0 ]
_version = "0.91"
import readline
from django . utils . functional import LazyObject
BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
endblock = parser . next_token ( )
if script_url :
def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :
self . close ( )
self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
from __future__ import unicode_literals
if field_type not in ( 'TextField(' , 'CharField(' ) :
except VariableDoesNotExist :
if not self . is_bound :
if options . get ( "test_flush" , False ) :
try :
ch , escaped = next ( pattern_iter )
package = import_module ( path )
self . extend_nodelist ( nodelist , compiled_result , token )
from django . template import Template , Context
self . _raw_ipv6 = False
return False
yield "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"
self . cdata_tag = tag . lower ( )
for date_check in all_date_checks :
for module in templatetags_modules :
self . id = Tok . num
if field . _has_changed ( initial_value , data_value ) :
handler . addQuickElement ( "title" , item [ 'title' ] )
if is_compressed :
elif isinstance ( self . obj , models . base . ModelBase ) :
if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
def cache_key ( self , template_name , template_dirs ) :
for line in msgs . split ( '\n' ) :
fp . write ( msgs )
nodes . extend ( node . get_nodes_by_type ( nodetype ) )
def __str__ ( self ) :
tzinfo = utc
self . size = len ( content )
self . inner_run ( None , ** options )
def __ne__ ( self , other ) :
def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :
return super ( LocalTimezone , self ) . _isdst ( dt )
pdict = { }
result = self . buffer [ : size ]
app_list = OrderedDict ( )
_file = os . fdopen ( fd , mode )
if status != STATUS_OK :
def avoid_wrapping ( value ) :
def clean ( self , value ) :
return self . get ( key , version = version ) is not None
try :
base64d = base64d [ 1 : ]
return type . __new__ ( cls , name , ( ) , d )
def loaddata ( self , fixture_labels ) :
if _cached_modules == module_values :
return None
print ( message )
return s
@ register . tag ( 'for' )
if attrs is not None :
filepath = parser . compile_filter ( bits [ 1 ] )
block_re = re . compile ( r"""^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)""" )
self . message = message
return format ( value , arg )
return value
return result
dec_part = dec_part [ : decimal_pos ]
else :
return ''
def unlock ( f ) :
if self . _done :
_ExpatParser . reset ( self )
self . auto_id = auto_id
root = [ ]
super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
bytes_read = 0
def clean ( self , value ) :
if settings . DEBUG :
return field . to_python
def _get_closed ( self ) :
m2m_data = { }
kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
def _cache ( self ) :
if not boundary or not cgi . valid_boundary ( boundary ) :
def open ( self , mode = None ) :
return ( t [ 0 ] . lower ( ) , True )
raise ValueError ( "'package' not set to a string" )
else :
self . xml . startElement ( "natural" , { } )
self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
if filters :
def ugettext ( message ) :
for bit in tag_re . split ( self . template_string ) :
def __iter__ ( self ) :
class DateTimeInput ( DateTimeBaseInput ) :
fields = list ( six . iteritems ( base . declared_fields ) ) + fields
def patch_response_headers ( response , cache_timeout = None ) :
return hash ( self . __cast ( ) )
_tc . load ( str ( 'foo:bar=1' ) )
self . add_fields ( form , None )
raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )
value = field . clean ( value )
def start_index ( self ) :
def resolve_context ( self , context ) :
i += 1
output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
from django . utils . translation import get_language
pass
except ValidationError :
errors . append ( self . get_unique_error_message ( unique_check ) )
self . validate_key ( key )
messages = ValidationError ( messages )
_caches = { }
continue
return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
return self . _body
def __setitem__ ( self , name , val ) :
def clear_url_caches ( ) :
_globs_ = frame . f_globals
import warnings
self . _stream . unget ( unused_char )
class RegexField ( CharField ) :
if name == "_wrapped" :
elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :
except AttributeError :
parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' ,  help = 'List available tags.' )
if isinstance ( error , ValidationError ) :
if filters :
if os . path . exists ( django_po ) :
elif self . use_ipv6 and not _fqdn :
self . _post_render_callbacks = [ ]
else :
if not self . is_valid ( ) or not self . can_order :
DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
key , value = bits [ 2 ] , bits [ 0 ]
for hextet in new_ip :
def url ( parser , token ) :
yield 'day'
def _get_page_range ( self ) :
for accept_lang , unused in parse_accept_lang_header ( accept ) :
statements = sql_custom ( app_config , self . style , connection )
if match :
return res
_cached_modules = _cached_modules . union ( new_modules )
from django . forms . fields import Field , ChoiceField
return _curried
if self . is_reversed :
filters . append ( ( filter_func , args ) )
t = Template ( output , name = filepath )
return cache [ mem_args ]
server_port = str ( self . META [ 'SERVER_PORT' ] )
last_bit = self . template_string [ upto : ]
msgs , errors , status = popen_wrapper ( args )
while current_chunk != b'' :
sys . exit ( bool ( failures ) )
if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :
if app_config . models_module is None :
def __len__ ( self ) :
self [ : ] = tup
raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
self . validators . append ( self . _regex_validator )
except AttributeError :
if not os . path . exists ( top_dir ) :
help = "Starts a lightweight Web server for development."
loop_dict [ 'revcounter0' ] = len_values - i - 1
from django . db . models import AutoField , OneToOneField , ForeignKey
return plural_suffix
parser . add_argument ( 'addrport' , nargs = '?' ,  help = 'Optional port number, or ipaddr:port' )
os . remove ( old_file_name )
self . stdout . write ( self . style . MIGRATE_HEADING ( "Merging %s" % app_label ) )
def configure_formatter ( self , config ) :
class ExtendsNode ( Node ) :
return is_library_missing ( path )
raise
def _get_files ( self ) :
self . stdout . write ( "Resetting sequences\n" )
class MaxLengthValidator ( BaseValidator ) :
def next_space_index ( subject , i ) :
def __repr__ ( self ) :
from django . utils . deconstruct import deconstructible
def __init__ ( self , * args , ** kwargs ) :
obj . __class__ = self . __class__
__D = r'(?P<day>\d{2})'
pass
elif t . token_type == TOKEN_VAR :
reset_translations ( )
else :
import pytz
xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]
ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
d = data . get ( self . day_field % name )
return errors
if isinstance ( s , Exception ) :
self . _read_started = True
def choice ( self , obj ) :
if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :
self . seek ( 0 )
self . mutex = threading . RLock ( )
from django . utils . six . moves . urllib . parse import urljoin
from django . utils import six
g = one_percent_re . sub ( '%%' , g )
return None
handler . addQuickElement ( "title" , self . feed [ 'title' ] )
if not value and self . required :
assert not isinstance ( bcc , six . string_types ) , '"bcc" argument must be a list or tuple'
try :
namelist = self . _archive . namelist ( )
if data in seen_data :
break
from django . utils . module_loading import import_string
if result is not None :
import functools
if error . params :
def __init__ ( self , stream , boundary ) :
self . stdout . write ( "    Installing index for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
def __getitem__ ( self , index ) :
return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
for i in range ( 0 , self . total_form_count ( ) ) :
raise CommandError ( "Error: %s" % message )
latest_date = None
now = datetime . utcnow ( )
class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
except LookupError :
break
result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
if data [ last : last + 1 ] == b'\r' :
self . waiting_writers -= 1
return path
close = True
def as_text ( self , attrs = None , ** kwargs ) :
self . error_class = 'errorlist'
def __newobj__ ( cls , * args ) :
module = import_module ( module_path )
for item in sequence :
self . test_runner = None
raise TemplateDoesNotExist ( name )
nodelist_false = parser . parse ( ( 'endifchanged' , ) )
class RendererMixin ( object ) :
def as_ul ( self ) :
else :
def __init__ ( self , obj ) :
time . sleep ( 1 )
from __future__ import unicode_literals
def __init__ ( self ) :
return FormSet
def __init__ ( self , attrs = None , render_value = False ) :
else :
def render ( self , context ) :
mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
if safe_input :
response = view_func ( request , * args , ** kwargs )
return plural
def __enter__ ( self ) :
self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
val1 = self . var1 . resolve ( context , True )
return self . _stream . read ( * args , ** kwargs )
return version
INFO = 20
from django . forms . formsets import *
BaseCache . __init__ ( self , params )
resource = resource . decode ( settings . FILE_CHARSET )
continue
else :
def _explode_shorthand_ip_string ( ip_str ) :
return result , result_args
raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
return escape ( text )
val = self . _cache . incr ( key , delta )
if self . _cull_frequency == 0 :
parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
raise DisallowedHost ( msg )
def strip_spaces_between_tags ( value ) :
def __deepcopy__ ( self , memo ) :
return MONTHS [ self . data . month ]
args = ( )
from django import http
signals . got_request_exception . send ( sender = self . __class__ , request = request )
definition = getattr ( cls , 'Media' , None )
def get_public_serializer_formats ( ) :
bits = [ ]
pickled = None
def __repr__ ( self ) :
sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
if six . PY3 :
except IndexError :
@ property
class MediaDefiningClass ( type ) :
try :
else :
return MONTHS_ALT [ self . data . month ]
def cfg_convert ( self , value ) :
value . configurator = self
format_locations = [ ]
self . replace_header ( 'Content-Type' , 'text/%s; charset="%s"' % ( subtype , charset ) )
javascript_quote = allow_lazy ( javascript_quote , six . text_type )
value = value . decode ( charset )
def __iter__ ( self ) :
return "<IfNode>"
self . error_list . extend ( message . error_list )
self . validate_key ( key )
if parsed . scheme and parsed . scheme not in self . allowed_schemes :
if callable ( callback ) :
self . items . append ( item )
return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
os . makedirs ( self . _dir , 0o700 )
import memcache
@ register . filter ( is_safe = False )
lists = _iterlists
def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
except KeyError :
from yaml import CSafeLoader as SafeLoader
return force_str ( "<%s: %s (%s)>" % (  self . __class__ . __name__ , self . name , self . content_type ) )
except KeyError :
with open ( filename , 'wb' ) as outfile :
from . base import CommandError
from django . utils . six . moves import cPickle as pickle
s = s . decode ( 'utf-8' )
msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )
raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
else :
return True
return palette
parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
else :
def __init__ ( self , template_string , origin ) :
self . field = field
except ValueError :
plural_form_line = force_str ( m . group ( 'value' ) )
from django . utils . encoding import force_text
class InterBoundaryIter ( six . Iterator ) :
readline . parse_and_bind ( "tab:complete" )
for chunk in content . chunks ( ) :
@ wraps ( view_func , assigned = available_attrs ( view_func ) )
module_path , class_name = dotted_path . rsplit ( '.' , 1 )
del cc [ 'public' ]
def to_locale ( language , to_lower = False ) :
self . max_expr = max_expr
code_list . append ( opt_dict [ o ] )
return number_format ( value )
resolver = get_resolver ( urlconf )
if len ( bits ) != 3 :
try :
filters = [ ]
return '' . join ( rendered_widgets )
ext = self . splitext ( guessed_filename ) [ 1 ]
for index in range ( len ( hextets ) ) :
root = max ( roots )
raise ValueError ( "Key '%s' not found" % key )
continue
import random
if not dklen :
sign = '-' if offset < 0 else '+'
if _default is None :
return True
form . save_m2m ( )
def __mod__ ( self , rhs ) :
symlink_path = os . path . join ( tmpdir , 'symlink' )
pass
field_output . append ( "PRIMARY KEY" )
import ssl
sign , digittuple , exponent = value . as_tuple ( )
if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :
try :
return self
yield line
if serializers is None and not _serializers :
import datetime
return f
if self . is_bound :
from lib2to3 import fixer_base
except TypeError :
pending_references . setdefault ( refto , [ ] ) . extend ( refs )
raise
bmatch = block_re . match ( t . contents )
os . rmdir ( tmpdir )
if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :
if not isinstance ( e , CommandError ) :
kwargs [ "initial" ] = self . parent_instance . pk
return current
def __init__ ( self ) :
def __nonzero__ ( self ) :
mem_args = args [ : num_args ]
field_params [ 'max_digits' ] = row [ 4 ] if row [ 4 ] is not None else 10
content = content . encode ( 'utf-8' )
else :
try :
super ( CheckboxInput , self ) . __init__ ( attrs )
memoryview = memoryview
result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
exc_info = record . exc_info
stream . unget ( chunk [ next : ] )
def H ( self ) :
if not formset . is_valid ( ) :
using_sysrandom = False
curr = cwords [ cword - 1 ]
plen = len ( provided ) + 1
if self . paginator . count == 0 :
if value in self . empty_values :
self . validate ( value )
if extra_attrs :
def __init__ ( self , * args , ** kwargs ) :
self . asvar = asvar
num_entries = len ( filelist )
s = subject [ p : i ]
comment = [ ]
input_type = 'radio'
return nodelist_true_output or self . nodelist_true . render ( context )
for opname , opfunc in convert [ root ] :
return super ( SlugField , self ) . clean ( value )
raise CommandError ( 'Unknown model in excludes: %s' % exclude )
handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )
full_statement = [ "CREATE TABLE %s (" % qn ( tablename ) ]
def write ( self , val ) :
if iri is None :
__all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )
return self . DSTDIFF
return s . encode ( encoding , errors )
return True
try :
needs_multipart_form = True
else :
if not isinstance ( self . object_list , list ) :
def complain ( self , * wargs , ** kwargs ) :
return data . get ( name , None )
return self . blocks [ name ] . pop ( )
offset = - offset
model = app_config . get_model ( model_label )
self . month_none_value = self . none_value
url_fields [ 2 ] = ''
return True
blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id
pass
rfcdate = formatdate ( epoch_seconds )
if not chunk [ : - rollback ] :
autoreload . main ( self . inner_run , None , options )
self . cc = [ ]
def send_messages ( self , email_messages ) :
if value == k or text_value == force_text ( k ) :
result . key = key
def __init__ ( self , data = None ) :
return ''
def dec ( func ) :
return timesince ( value )
if new_name . find ( '__' ) >= 0 :
def __copy__ ( self ) :
return path
else :
message_context = message_context . strip ( '"' )
raise ValueError ( "Could not find common ancestor of %s" % migration_names )
if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
for x in arg . split ( ':' ) :
self . data = obj
return self . forms [ 0 ] . media
return self . id in settings . SILENCED_SYSTEM_CHECKS
internal_use_only = False
@ cached_property
value = ugettext ( "%s PB" ) % filesize_number_format ( bytes / PB )
def A ( self ) :
if self . attachments :
INITIAL_FORM_COUNT = 'INITIAL_FORMS'
UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]
if len ( args ) > 4 :
return new_context
def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) :
try :
except ( KeyError , IndexError , AttributeError ) :
self . _lock = _locks . setdefault ( name , RWLock ( ) )
self . max_digits , self . decimal_places = max_digits , decimal_places
self . func = func
raise value
if exclude and f . name in exclude :
if 'id' in self . attrs :
chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
class FileSystemStorage ( Storage ) :
logger . level = logging . NOTSET
for app_config in apps . get_app_configs ( ) :
from datetime import datetime
return value
if priority :
_supported = OrderedDict ( settings . LANGUAGES )
raise SuspiciousFileOperation ( "Attempted access to '%s' denied." % name )
the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
digest = hashlib . sha256
raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
if self . _cull_frequency == 0 :
op . id = key
if not self . connection :
if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) :
exclude = form . _get_validation_exclusions ( )
from django . utils import six
def model_installed ( model ) :
def _cache ( self ) :
import django
help_text = ''
guessed_filename += ext
ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]
from django . http . cookie import SimpleCookie
self . xml . endDocument ( )
if not hasattr ( e , 'django_template_source' ) :
import datetime
hidden_widget = HiddenInput
if source is None :
msg = self . style . HTTP_SUCCESS ( msg )
for app_name , namespace_list in pattern . app_dict . items ( ) :
from django . db import connections , DEFAULT_DB_ALIAS
memo [ id ( self ) ] = result
class BaseHandler ( object ) :
class Storage ( object ) :
initial_value = initial_value ( )
def add_metaclass ( metaclass ) :
self . _lib = library
return _wrapped_view
data = method ( self , * args , ** kwargs )
if path . exists ( new_path ) :
RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )
else :
start = 0
if ch != '\\' :
if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
_format_cache [ cache_key ] = val
self . __prepare_class__ ( )
raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
scheme , netloc , path , query , fragment = urlsplit ( url )
def __init__ ( self ) :
opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )
from logging . config import dictConfig
oldvalue = root [ RESULT ]
nodes = [ ]
response . content = b''
from django . db import connections , DEFAULT_DB_ALIAS
cursor . execute ( line )
import time
return msg
if hasattr ( timezone , 'localize' ) :
super ( EntitiesForbidden , self ) . __init__ ( )
return p . image . size
raise ExternalReferenceForbidden ( context , base , sysid , pubid )
if invalid_var_format_string :
if ch == '+' :
from django . core import signing
def validate ( self , app_config = None , display_num_errors = False ) :
super ( CommandParser , self ) . error ( message )
self . field_name = field_name
with self . mutex :
suffix = d [ 'suffix' ]
content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )
yield key , self [ key ]
self . use_tz = use_tz
self . mod = old_mod
raise NotImplementedError ( 'subclasses of Storage must provide a modified_time() method' )
return list ( self ) == other
basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )
parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
if field . rel is None :
options [ k . lower ( ) ] = v
elif isinstance ( value , datetime . time ) :
self . _size = self . _get_size_from_underlying_file ( )
key = self . make_key ( key , version = version )
__all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )
if i >= len ( subject ) :
def __getinitargs__ ( self ) :
elif user_settings [ key ] != default_settings [ key ] :
name , ext = os . path . splitext ( name )
return output
def get_nodes_by_type ( self , nodetype ) :
from django . utils . six . moves import _dummy_thread as thread
self . length = length
__slots__ = 'hashvalue'
while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
def autocomplete ( self ) :
self . file . close ( )
if character != '.' :
sign = '-' if seconds < 0 else '+'
def dictsort ( value , arg ) :
else :
return
wsgi_opts [ 'bindAddress' ] = options [ "socket" ]
create_models = set ( itertools . chain ( * manifest . values ( ) ) )
if self . field . required and hasattr ( self . form , 'required_css_class' ) :
bits = normalize ( p_pattern )
for attr in self . child_nodelists :
bits = token . split_contents ( )
except StandardError as e :
def update ( self , other_dict ) :
content = template . render ( context )
self . file . __exit__ ( exc , value , tb )
return build_request_repr ( self )
from django . template . base import TemplateDoesNotExist
sublist_item = next_item
else :
def inner ( check ) :
def __init__ ( self , token , parser ) :
if self . to_field :
def lower ( value ) :
pid = os . getpid ( )
offset = date . tzinfo . utcoffset ( date )
stream . close ( )
class Group ( list ) :
from django . utils . translation import ugettext , ungettext_lazy
try :
from django . utils . encoding import force_text , filepath_to_uri
if os . path . sep in fixture_name :
PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3
renderer = None
@ property
verbosity = options . get ( 'verbosity' )
answer = "n"
__all__ = [ 'File' ]
neg = 1
if quote_double_quotes :
if self . data . minute == 0 and self . data . hour == 12 :
construct_instance_exclude . append ( name )
return default
return self . data . isoformat ( )
raise BadSignature ( 'No "%s" found in value' % self . sep )
args = ( )
resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
if self . fixture_count == 0 and self . hide_empty :
self . pk_field = kwargs . pop ( "pk_field" , False )
if timeout is None :
return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
def __repr__ ( self ) :
if self . connection is None :
return False
for pattern in reversed ( self . url_patterns ) :
def clean ( self , value ) :
if response is None :
request_middleware . append ( mw_instance . process_request )
updates . update ( processor ( request ) )
for error in self . as_data ( ) :
else :
return connection . send_messages ( messages )
except ValueError :
self . extend_nodelist ( nodelist , var_node , token )
else :
self . _errors = ErrorDict ( )
def make_template_fragment_key ( fragment_name , vary_on = None ) :
raise base . DeserializationError ( "Invalid model identifier: '%s'" % model_identifier )
hextets [ index ] = '0'
except ImportError :
def __setattr__ ( self , name , value ) :
if pos >= last :
if not regex_match :
try :
def get_form_error ( self ) :
def add_arguments ( self , parser ) :
@ register . tag
class NullBooleanField ( BooleanField ) :
self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
result = ( template , make_origin ( display_name , loader , name , dirs ) )
name , val = forbid_multi_line_headers ( name , val , 'ascii' )
for i_item , i_args in zip ( inner_result , inner_args ) :
model_list . append ( model )
if self . data . minute == 0 :
data = compressed
self . class_name = class_name
call_command ( "createsuperuser" , interactive = True , database = options [ 'database' ] )
def add_root_elements ( self , handler ) :
loaded_objects_in_fixture += 1
elif self . reason_phrase is None :
while True :
def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :
if not len ( self . backout ) :
def get_resolver ( urlconf ) :
def __iter__ ( self ) :
raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
if val is None :
if schemes is not None :
self . empty_label = None
if file_ :
var_obj = Variable ( constant ) . resolve ( { } )
return bound_func ( * args , ** kwargs )
del attrs [ attr ]
model_dependencies . append ( ( model , deps ) )
key += item
command = load_command_class ( app_name , name )
return None
def __init__ ( self , name , sysid , pubid ) :
def handle_charref ( self , name ) :
else :
new_class . media = media_property ( new_class )
self . _current [ field . name ] = value
conditions_nodelists . append ( ( condition , nodelist ) )
def bound_data ( self , data , initial ) :
def _itervalues ( self ) :
yield meta_line
def handle ( self , ** options ) :
def item_attributes ( self , item ) :
importer = __import__
return ugettext ( message )
elif isinstance ( value , datetime . date ) :
return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )
if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :
styles = instructions . split ( ',' )
else :
if data :
self . make_writeable ( new_path )
try :
return force_text ( settings . FORCE_SCRIPT_NAME )
template , origin = self . find_template ( template_name , template_dirs )
def __init__ ( self , name , regex , next = None ) :
except ( ValueError , TypeError ) :
def m2m_convert ( n ) :
return True
if six . PY2 :
internal_use_only = False
new_second_item = [ ]
potfiles = [ ]
if timeout is not None :
except LookupError :
DELETION_FIELD_NAME = 'DELETE'
validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )
return getattr ( _prefixes , "value" , '/' )
super ( CommandParser , self ) . __init__ ( ** kwargs )
parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
if isinstance ( addr , six . string_types ) :
self . configure_logger ( name , loggers [ name ] , True )
setattr ( Module_six_moves_urllib_request , attr . name , attr )
raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
if args [ - 3 ] == "as" :
elif basetype == 'message' and subtype == 'rfc822' :
def _find_boundary ( self , data , eof = False ) :
except ValueError :
elif options [ 'all' ] :
host_validation_re = re . compile ( r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" )
name , ( value , params ) = _parse_header ( line )
def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
stream_or_string = stream_or_string . read ( )
request_middleware = [ ]
if options . get ( 'list_tags' ) :
new_migration = subclass ( "%04i_merge" % ( biggest_number + 1 ) , app_label )
if model in created_models :
for i in range ( len ( result ) ) :
exc_info = sys . exc_info ( )
raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ )
self . year_none_value = self . none_value
except ImportError :
return settings . TEMPLATE_STRING_IF_INVALID
attachment . set_payload ( content )
else :
parser . add_argument ( '--settings' )
encoding = self . encoding or settings . DEFAULT_CHARSET
return header_query . lower ( ) in existing_headers
try :
return '0'
base_path = abspathu ( base )
def load_template_source ( self , template_name , template_dirs = None ) :
if hasattr ( middleware , 'process_response' ) :
if g [ 0 ] == '"' :
return out . getvalue ( )
self . _current = { }
usage . append ( "    %s" % name )
cursor = connection . cursor ( )
def ifnotequal ( parser , token ) :
os . remove ( fname )
queryset = property ( _get_queryset , _set_queryset )
opts = model . _meta
self . template_dirs = template_dirs
from django . utils . xmlutils import SimplerXMLGenerator
default_error_messages = {  'invalid' : _ ( 'Enter a valid date.' ) ,  }
return chunk [ : - rollback ]
_ , file_ext = os . path . splitext ( self . file )
@ register ( Tags . compatibility )
return ""
imported_objects = { }
if prefix is None :
get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
return upload
def _get_name ( self ) :
except Exception as e :
from django . utils . translation import get_language
SINGLE_BRACE_END = '}'
self . stdout . write ( "    - %s\n" % operation . describe ( ) )
return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
from __future__ import unicode_literals
from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
singular . append ( contents )
super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
self . __offset = offset
if len ( t ) > 1 :
if isinstance ( regex , six . string_types ) :
except IOError as e :
__all__ = [ 'file_move_safe' ]
return os . path . exists ( self . path ( name ) )
parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the "default" database.' )
return '\n' . join ( output )
class DjangoRuntimeWarning ( RuntimeWarning ) :
with self . _lock . writer ( ) :
if getattr ( func , 'needs_autoescape' , False ) :
return self . parent_widget . render ( * args )
func = TemplateLoader ( * args )
pluralmatch = plural_re . match ( t . contents )
def handle_entityref ( self , name ) :
context [ self . loopvars [ 0 ] ] = item
kw = match . groupdict ( )
ZERO = timedelta ( 0 )
if not hasattr ( func , '__name__' ) :
@ property
self . create_table ( db , cache . _table )
item_date = item . get ( date_key )
@ stringfilter
elif var_arg :
return False
def __eq__ ( self , other ) :
def time ( value , arg = None ) :
softspace = property ( lambda self : self . file . softspace )
pk_value = self . get_queryset ( ) [ index ] . pk
from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
if isinstance ( self , nodetype ) :
saved_locale = translation . get_language ( )
if isinstance ( value , bytes ) :
subject = self . subject
if colors and colors [ - 1 ] in color_names :
return ''
from django . conf import settings
if sep is not None :
def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
help = "Prints the DROP TABLE SQL statements for the given app name(s)."
silent = False
apps . get_app_config ( app_label )
sql_statements = executor . collect_sql ( plan )
value . decode ( charset )
return get_template ( template_name , dirs )
from django . db . migrations . executor import MigrationExecutor
unhandled_params = list ( params )
raise TemplateDoesNotExist ( error_msg )
for ( k , v ) in type_ . __dict__ . items ( ) :
pk_value = None
self . _headers [ header . lower ( ) ] = ( header , value )
if "\\" in encoded and not encoded . startswith ( '"' ) :
parser . add_argument ( '--template' ,  help = 'The path or URL to load the template from.' )
return self . nodelist . render ( new_context )
self . xml . startElement ( "django-objects" , { "version" : "1.0" } )
block = self
def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :
categories = [ force_text ( c ) for c in categories ]
handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
for hextet in ip_str . split ( ':' ) :
return None
return self . limit_choices_to ( )
from wsgiref import simple_server
output = [ ]
except ( ValueError , KeyError ) :
leave_locale_alone = True
deps = [ apps . get_model ( dep ) for dep in deps ]
self . serialization_formats = serializers . get_public_serializer_formats ( )
except KeyError :
self . setFeature ( handler . feature_external_pes , False )
response . streaming_content = [ ]
self . settings_exception = exc
self . verbosity = options . get ( 'verbosity' )
return True
if isinstance ( other , BaseContext ) :
guid_attrs [ 'isPermaLink' ] = str (  item [ 'unique_id_is_permalink' ] ) . lower ( )
return None
if parse_until is None :
elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :
@ deconstructible
result = force_text ( message )
child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
def load_command_class ( app_name , name ) :
NOCOLOR_PALETTE = 'nocolor'
unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )
try :
return
if invalid_var_format_string is None :
status_code = 500
def get_quantifier ( ch , input_iter ) :
super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
result = super ( DateTimeField , self ) . to_python ( value )
from django . db import connections , DEFAULT_DB_ALIAS
if self . verbatim and block_content == self . verbatim :
except pickle . PickleError :
return self . data . month
cls . __unicode__ = cls . __text_cast
raise AttributeError ( "Unable to determine the file's size." )
int_part_gd += thousand_sep
for func , args in self . filters :
class VariableNode ( Node ) :
obj = self . var
if len ( app_labels ) == 0 :
name = getattr ( func , "_decorated_function" , func ) . __name__
import warnings
if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
return not ( self == other )
raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
@ register . tag
if self . empty :
csrf_token = context . get ( 'csrf_token' , None )
m = self . DOT_PATTERN . match ( rest )
for val in value :
return other_dict
media = property ( _get_media )
return fastcgi_help ( )
output , errors , status = popen_wrapper ( args )
from django . test . signals import setting_changed
except ( ValueError , TypeError ) :
data [ field . name ] = value
template = self . template_with_initial
from django . utils import six
key = self . make_key ( key , version = version )
from django . db . migrations . state import ProjectState
if keys :
class Tags ( object ) :
all_files = [ ]
t = super ( SafeText , self ) . __add__ ( rhs )
from django . forms . fields import Field , FileField
template_dir = template_dir . decode ( fs_encoding )
if pk_is_not_editable ( pk ) or pk . name not in form . fields :
self . style = color_style ( )
if questioner . ask_merge ( app_label ) :
@ python_2_unicode_compatible
import os
if self . has_header ( 'Content-Encoding' ) :
with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :
if not dictionary :
setattr ( _MovedItems , move . name , move )
prefix , rest = self . split_leading_dir ( path )
failures = test_runner . run_tests ( test_labels )
template , origin = find_template ( template_name , dirs )
from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
else :
del bits [ : 1 ]
upto = end
except ( ValueError , TypeError ) :
for f in fields :
import warnings
fh . write ( writer . as_string ( ) )
if not hasattr ( content , 'chunks' ) :
def _resolve_name ( name , package , level ) :
regex = force_text ( self . _regex )
with self . _lock :
response [ 'Last-Modified' ] = http_date ( )
return None
def create_parser ( self , prog_name , subcommand ) :
import base64
I18N_MODIFIED = 2
else :
return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
def add_fields ( self , form , index ) :
return ""
current = current [ int ( bit ) ]
_CacheInfo = namedtuple ( "CacheInfo" , [ "hits" , "misses" , "maxsize" , "currsize" ] )
return func ( * self . __args , ** self . __kw )
def add_arguments ( self , parser ) :
self . prog_name = os . path . basename ( self . argv [ 0 ] )
out . write ( ' # %s' % line )
self . tokens . insert ( 0 , token )
assert mimetype is not None
super ( MultipleHiddenInput , self ) . __init__ ( attrs )
def __init__ ( self , permitted_methods , * args , ** kwargs ) :
raise
class CacheKeyWarning ( DjangoRuntimeWarning ) :
elif action == "unapply_start" :
with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
raise
from __future__ import unicode_literals
self . feed = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
class MovedModule ( _LazyDescr ) :
except OSError as e :
if self . connector == conn_type :
num_sent = 0
from django . utils . functional import lazy
self . content_type_extra = content_type_extra
if f == '__pycache__' :
file = tempfile . NamedTemporaryFile ( suffix = '.upload' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
if text . endswith ( truncate ) :
response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
from django . core . management . base import BaseCommand , CommandError
self . negate = negate
self . buffer = sio . read ( )
self . cleaned_data = cleaned_data
if app_config . models_module is None :
regexes = self . regexes
except ImportError :
return LANG_INFO [ generic_lang_code ]
def regroup ( parser , token ) :
if path is None :
for app_config in apps . get_app_configs ( ) :
@ cached_property
class EmailBackend ( BaseEmailBackend ) :
def _raw_value ( self , fieldname ) :
@ decorator
def address_string ( self ) :
pass
return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
cookiedict [ key ] = c . get ( key ) . value
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Unapply all migrations: " ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
open_tags = [ ]
try :
self . _cache . disconnect_all ( )
else :
termios . tcsetattr ( fd , termios . TCSANOW , attr_list )
mod_name , func_name = get_mod_func ( lookup_view )
except ( ValueError , TypeError ) :
class Input ( Widget ) :
LockFileEx = windll . kernel32 . LockFileEx
except KeyError :
if handlers :
def messages ( self ) :
sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + ".moves.urllib.error" ] = Module_six_moves_urllib_error ( __name__ + ".moves.urllib.error" )
code = 'limit_value'
if value in self . empty_values :
dirs = [ basedir ]
self . options . update ( { 'use_decimal' : False } )
class SafeText ( six . text_type , SafeData ) :
message = list ( error ) [ 0 ]
continue
import sys
mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
prefix_length = len ( template_dir ) + 1
kwargs [ 'strm' ] = kwargs . pop ( 'stream' )
return ''
def assertRaisesRegex ( self , * args , ** kwargs ) :
if parse_until :
except AttributeError :
import datetime
elif ch in "*?+{" :
if not value :
for path in gen_filenames ( only_new = True ) :
for filename in filelist :
raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
value , decimals = value . split ( decimal_separator , 1 )
t = get_template ( template_name , dirs )
from __future__ import unicode_literals
filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
raise NotImplementedError ( 'may be implemented in a future release' )
def compress ( self , data_list ) :
while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :
temp_lib = Library ( )
class CacheHandler ( object ) :
max_num = 1
def __nonzero__ ( self ) :
def signature ( self , value ) :
parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False ,  help = "Enable fixing of migration conflicts." )
return value + arg
errors . extend ( _check_test_runner ( ** kwargs ) )
pass
for header in cc_delim_re . split ( response [ 'Vary' ] ) :
return ''
msg [ 'Subject' ] = self . subject
yield ( tok . name , toktext )
self . cache_choices = cache_choices
__all__ = [  'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' ,  'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
raise
if can_fail :
get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
is_localized = False
try :
if widgets and f . name in widgets :
if is_aware ( date ) :
if len ( bits ) < 4 :
if not f . blank and not form_field . required and field_value in form_field . empty_values :
return None
results = ( [ ] , [ ] )
class MemoryFileUploadHandler ( FileUploadHandler ) :
decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
for shell in available_shells :
def __dir__ ( self ) :
def now ( parser , token ) :
from django . utils . six . moves import socketserver
opfunc . __doc__ = getattr ( int , opname ) . __doc__
for app_label in app_labels :
for tablename in tablenames :
return node_class ( takes_context , args , kwargs )
continue
try :
def get_many ( self , keys , version = None ) :
if field_value in self . empty_values :
self . xml . addQuickElement ( "None" )
logger . warning ( 'Not Found: %s' , request . path ,  extra = {  'status_code' : 404 ,  'request' : request  } )
if filter_name in self . filters :
dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
values = reversed ( values )
raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
def render ( self , context ) :
if template_source_loaders is None :
if not hasattr ( parser , '_namedCycleNodes' ) :
from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
nesting = 0
try :
else :
def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList ) :
new_name = col_name . lower ( )
return self . expression . resolve ( context , True )
filters = config . get ( 'filters' , None )
try :
def static ( request ) :
return self . __cast ( ) % rhs
DEBUG = 10
use_base_manager = options . get ( 'use_base_manager' )
return error_dict
from django . utils . text import normalize_newlines
kwarg_format = match and match . group ( 1 )
self . _input_data = input_data
self . render_value = render_value
value = '1'
def do_filter ( parser , token ) :
if settings . USE_TZ :
choice_input_class = CheckboxChoiceInput
from __future__ import unicode_literals
if not settings . DEBUG and not settings . ALLOWED_HOSTS :
pass
raise PageNotAnInteger ( 'That page number is not an integer' )
def __init__ ( self , stream_or_string , ** options ) :
if not self . _is_rendered :
setattr ( filter_func . _decorated_function , attr , value )
@ register . filter ( is_safe = True )
from io import StringIO
except GeneratorExit :
unique_check = [ field for field in unique_check if field != self . fk . name ]
args = [ ]
auto_id = self . form . auto_id
def tzname ( self , dt ) :
e . args = ( "Problem installing fixture '%s': %s" % ( fixture_file , e ) , )
for var in self . vars :
if isinstance ( v , ( list , tuple ) ) :
elif closing_tag :
response = _set_response_etag ( response )
else :
self . ending = ending
settings . INSTALLED_APPS
if force_text ( val ) not in pks :
prefix = get_script_prefix ( )
app_list_value = app_list . setdefault ( app_config , [ ] )
for model in sort_dependencies ( app_list . items ( ) ) :
sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
msg . attach ( body_msg )
call_command ( "migrate" , ** options )
def reloader_thread ( ) :
continue
self . filters = filters
from django . utils import six
utc = pytz . utc if pytz else UTC ( )
elif bytes < PB :
else :
value = int ( s , 36 )
else :
def get_json_data ( self , escape_html = False ) :
for key , value in data :
def has_next ( self ) :
se = open ( err_log , 'a+' , buffering )
def file_complete ( self , file_size ) :
else :
self . _stream = stream
return wrapper
self . stream . write ( '%s\n' % msg_data )
command = token . contents . split ( ) [ 0 ]
return timezone . tzname ( None )
yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )
elif int ( timeout ) == 0 :
bottom = ( number - 1 ) * self . per_page
from django . utils import six
return
return self . _base_set ( 'add' , key , value , timeout )
kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
if not self . allow_multiple_selected :
if not getattr ( f , 'editable' , False ) :
class MinValueValidator ( BaseValidator ) :
from django . utils . text import Truncator , wrap , phone2numeric
truncate_text = self . add_truncation_text ( '' , truncate )
del Trans
super ( Command , self ) . __init__ ( )
def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
def _get_num_pages ( self ) :
if self . verbosity >= 2 :
result = middleware . process_exception ( request , e )
return s
count , ch = get_quantifier ( ch , pattern_iter )
except ( ValueError , TypeError ) :
else :
self . stdout . write ( "copying plural forms: %s\n" % plural_form_line )
fp . write ( msgs )
def decr_version ( self , key , delta = 1 , version = None ) :
def configure ( self ) :
from django . utils . deprecation import RemovedInDjango19Warning
if not value :
parser = self . _parser
doublecolon_start = index
if lib :
def npgettext_lazy ( context , singular , plural , number = None ) :
kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
for cmatch in cmatches :
def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :
generic_lang_code = lang_code . split ( '-' ) [ 0 ]
elif msg :
return obj
except ( IndexError , TypeError , ValueError ) :
sample = f . read ( 4 )
stats [ : ] = [ 0 , 0 ]
output . append ( error_row % force_text ( bf_errors ) )
if filename . endswith ( ".pyc" ) or filename . endswith ( ".pyo" ) :
for arg in args :
return os . path . samefile ( src , dst )
if m :
return
if not os . path . isfile ( init_path ) :
except ( LookupError , TypeError ) :
found = True
cull_frequency = params . get ( 'cull_frequency' , options . get ( 'CULL_FREQUENCY' , 3 ) )
elif self . nodelist_false :
from django . utils . encoding import force_str
return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
return self . _headers . values ( )
handler . startDocument ( )
else :
bits = list ( token . split_contents ( ) )
raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
model_fields = Model . _meta . get_all_field_names ( )
return ( ord ( byte ) for byte in buf )
token = parser . next_token ( )
def __len__ ( self ) :
if '.' in str_number :
pass
if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
def value_from_datadict ( self , data , files , name ) :
return value [ 0 ]
self . _archive . list ( * args , ** kwargs )
raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
try :
if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :
plist = _parse_header_params ( b';' + line )
def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :
getattr ( self , 'error_dict' )
finally :
from __future__ import unicode_literals
m2m_data = { }
def add_arguments ( self , parser ) :
fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
initial = bool ( initial )
table_output . append ( " " . join ( field_output ) )
def tag ( self , name = None , compile_function = None ) :
from django . core . management . base import BaseCommand , CommandError
else :
return value
setattr ( Module_six_moves_urllib_response , attr . name , attr )
return self . empty_value
raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
self . _regex_dict = { }
if DEFAULT_CACHE_ALIAS not in settings . CACHES :
Model = self . _get_model_from_node ( node , "model" )
if hasattr ( value , '_meta' ) :
raise ValueError ( "This file is not accessible via a URL." )
representative = ESCAPE_MAPPINGS . get ( ch , ch )
def import_by_path ( dotted_path , error_prefix = '' ) :
num_args = 0
confirm = input ( 'Please enter either "yes" or "no": ' )
except Exception as e :
link = [ last , root , key , result ]
sorted_issues = [  ( criticals , 'CRITICALS' ) ,  ( errors , 'ERRORS' ) ,  ( warnings , 'WARNINGS' ) ,  ( infos , 'INFOS' ) ,  ( debugs , 'DEBUGS' ) ,  ]
left = t . led ( left , self )
bits = arg . split ( ',' )
if not ( self . data or self . files ) :
def _open ( self , name , mode = 'rb' ) :
return len ( self . items )
cache_suffix = '.djcache'
return { 'MEDIA_URL' : settings . MEDIA_URL }
field_desc = '%s = %s%s' % (  att_name ,   '' if '.' in field_type else 'models.' ,  field_type ,  )
pickled = self . _cache [ key ]
def u ( s ) :
result = self . configurator . convert ( value )
pass
if not self . render_value :
try :
from django . utils import autoreload
if 'version' not in config :
LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]
from django . core . cache import caches
app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
return os . path . getsize ( self . path ( name ) )
except Exception as e :
exp = datetime . utcfromtimestamp ( timeout )
return self . empty_form . is_multipart ( )
def get_template_sources ( self , template_name , template_dirs = None ) :
pass
raise ImportError (  "Could not import '%s'. The path must be fully qualified." %  lookup_view )
return bytes ( value . encode ( self . _charset ) )
from itertools import chain
trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
def iterkeys ( d , ** kw ) :
return [ ]
def all_locale_paths ( ) :
except ImportError :
self . unget ( chunk [ remaining : ] )
self . mod = old
if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
def iterlists ( d , ** kw ) :
def visible_fields ( self ) :
elif ch == '$' :
if dirname . startswith ( '.' ) or dirname == '__pycache__' :
def _handle_m2m_field_node ( self , node , field ) :
self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
else :
if options [ 'outlog' ] :
self . tagname = self . tag ( )
key = force_str ( key )
raise StopIteration ( )
try :
return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
self . text = text
finally :
class BaseForm ( object ) :
def path ( self ) :
raise TemplateDoesNotExist
app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
current_version = sys . version_info
for subnode in node :
self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ]
yield choice
attrs = { "model" : smart_text ( obj . _meta ) }
try :
return result
return media
return EscapeBytes ( s )
if not host_validation_re . match ( host ) :
number = self . validate_number ( number )
def to_python ( self , value ) :
import copy
yield widget
from django . utils . dateformat import format , time_format
from django . utils import baseconv
else :
def __delattr__ ( self , name ) :
try :
elif i < list_length - 1 :
def indexbytes ( buf , i ) :
def flush ( self ) :
import os
value = token_kwargs ( remaining_bits , parser , support_legacy = False )
class TemporaryUploadedFile ( UploadedFile ) :
arg_vals . append ( arg . resolve ( context ) )
repr_attr = self . _setupfunc
language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )
from django . db import connections , transaction
from django . core . management . commands . check import Command as CheckCommand
weight += 2
except ValidationError :
loader , args = loader [ 0 ] , loader [ 1 : ]
def get_templatetags_modules ( ) :
def is_multipart ( self ) :
return match . group ( 0 )
self . add_root_elements ( handler )
if used_name != guessed_filename :
pass
obj_pk = getattr ( obj , field . rel . field_name )
parser . __loaded_blocks = [ block_name ]
if not config_string :
return result
from django . utils . encoding import python_2_unicode_compatible
self . old_method_name = old_method_name
for exclude in excludes :
pass
keys = _iterkeys
tpl = "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
location = params . pop ( 'LOCATION' , '' )
input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
def mark_safe ( s ) :
input_type = 'number'
TemplateLoader = import_string ( loader )
try :
self . file . write ( raw_data )
class ImproperlyConfigured ( Exception ) :
filter_expr = parser . compile_filter ( "var|%s" % ( rest ) )
changes = autodetector . arrange_for_graph ( changes , loader . graph )
block_name = bits [ 1 ]
fk = fks_to_parent [ 0 ]
from __future__ import unicode_literals
migration . merged_operations = [ ]
buffer_types = ( bytes , bytearray , memoryview )
self . stream . write ( " " )
format = color_settings . get ( role , { } )
try :
def write ( self , msg , style_func = None , ending = None ) :
except ImportError :
self . value = value
if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
if size is None :
return '' . join ( _generator ( ) )
return True
pos = last = 0
decimals = abs ( exponent )
if not isinstance ( messages , ValidationError ) :
super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
self . position -= len ( bytes )
self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , ', ' . join ( extra_files ) ) )
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
default_validators = [ validators . validate_slug ]
def get_language_from_path ( path , strict = False ) :
if self . deactivate :
else :
final_attrs [ 'checked' ] = 'checked'
def label_from_instance ( self , obj ) :
def __init__ ( self , func , name = None ) :
if status is not None :
except Exception as e :
if locales :
def add_arguments ( self , parser ) :
return attachment
from PIL import Image
self . _regex = regex
else :
definition [ 'fg' ] = fg
if '.' in hextets [ - 1 ] :
else :
return self . attrs . get ( 'id' , '' )
value = tuple . __getitem__ ( self , key )
def __init__ ( self , cmd , ** kwargs ) :
if not self . _is_rendered :
try :
kw = [ d . year , d . month , d . day ]
raise TemplateSyntaxError ( "'%s' tag with name '%s' appears more than once" % ( bits [ 0 ] , block_name ) )
class dummy :
handler . addQuickElement ( "author" , item [ "author_email" ] )
for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
for path in collect :
out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning
kwarg_re = re . compile ( r"(?:(\w+)=)?(.+)" )
else :
self . _archive . printdir ( * args , ** kwargs )
class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :
if escaped :
message = _ ( 'Enter a valid value.' )
table_names = connection . introspection . table_names ( cursor )
base36 = [ ]
nodelist_empty = parser . parse ( ( 'endfor' , ) )
class BaseCache ( object ) :
except StopIteration :
if hasattr ( response , 'render' ) and callable ( response . render ) :
if options . traceback or not isinstance ( e , CommandError ) :
self . input_formats = input_formats
params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }
constant_arg , var_arg = match . group ( "constant_arg" , "var_arg" )
msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
return _generate_cache_key ( request , request . method , headerlist , key_prefix )
tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
if self . cc :
def dict ( self ) :
return bool ( self . changed_data )
_standard_context_processors = None
raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )
value = dict . get ( self , key , default )
from __future__ import unicode_literals
title = plan_node [ 1 ]
return any ( form . has_changed ( ) for form in self )
return default
except LookupError :
def i ( self ) :
return ( TYPE , outdict , stream )
return update_wrapper ( wrapper , user_function )
connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]
if calendar . isleap ( self . data . year ) :
RAW = "raw"
for name , field in self . fields . items ( ) :
def fdel ( instance , name = fdel . __name__ ) :
module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )
try :
from django . core . serializers . base import SerializerDoesNotExist
_load_serializers ( )
del cc [ 'private' ]
for form in self . extra_forms :
return self . cleaned_data
return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
chunk = b'' . join ( chunks )
if os . path . isdir ( app_dir ) :
self . bcc = list ( bcc )
except Exception :
import os
for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :
if e . args [ 0 ] . startswith ( "Error -5" ) :
def appendlist ( self , key , value ) :
self . validate_key ( key )
@ property
MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
if cached is not None :
else :
help = "Creates the tables needed to use the SQL cache backend."
return self . __cast ( ) < other
cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )
m = re . match ( naiveip_re , options [ 'addrport' ] )
class RegroupNode ( Node ) :
if only_new :
return [ ]
args = ''
return self . _cached_loaders
return False
except OSError :
elif self . _delegate_text :
from email . mime . text import MIMEText
raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
if isinstance ( self . regex , six . string_types ) :
def urlunquote_plus ( quoted_url ) :
self . errors
except StandardError as e :
def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) :
except AttributeError :
if len ( t ) == 2 :
else :
try :
try :
def deactivate ( ) :
self . translate = False
elif item_type == FILE :
if f == '__pycache__' :
if not self . dry_run :
lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , escape ( line ) )
def add_item_elements ( self , handler , item ) :
import collections
self . body = body
if self . verbosity >= 1 :
if literal_match :
return command . execute ( * args , ** defaults )
warnings . warn ( "IPAddressField has been deprecated. Use GenericIPAddressField instead." ,  RemovedInDjango19Warning )
year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )
def add_js ( self , data ) :
interactive = options . get ( 'interactive' )
ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ',' ) )
from django . apps import apps
return __proxy__ ( args , kw )
id = "(%s) " % self . id if self . id else ""
if not table_name_filter ( table_name ) :
raise AttributeError ( "This %s instance has no `content` attribute. "  "Use `streaming_content` instead." % self . __class__ . __name__ )
if len ( bits ) < 1 :
key = bytes_to_text ( key , self . encoding )
def __str__ ( self ) :
global invalid_var_format_string
else :
ch , escaped = next ( pattern_iter )
data = zlib . decompress ( data )
self . auto_id = auto_id
def common_logger_config ( self , logger , config , incremental = False ) :
rel_to = "self" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )
class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :
if not hasattr ( e , 'django_template_source' ) :
def delete_many ( self , keys , version = None ) :
duplicate . render_context = copy ( self . render_context )
from django . utils . safestring import mark_safe
yield ''
existing = list ( root . manager . loggerDict )
class Info ( CheckMessage ) :
e . args = ( "Problem installing fixtures: %s" % e , )
__hash__ = new_method_proxy ( hash )
self . input_type = attrs . pop ( 'type' , self . input_type )
else :
def read ( self , size = None ) :
if self . is_url ( template ) :
obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
def truncatechars ( value , arg ) :
args = [ arg . resolve ( context ) for arg in self . args ]
if args :
from django . utils . deprecation import RemovedInDjango19Warning
_active . value = gettext_module . NullTranslations ( )
try :
yield 'year'
if output :
if language_code not in self . _app_dict :
class MovedAttribute ( _LazyDescr ) :
self . file . seek ( 0 )
id_ = 'id_%s' % name
output = self . _leftover
return _HashedSeq ( key )
return make_middleware_decorator ( middleware_class )
self . validate_name ( name , app_or_project )
cls = None
forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
else :
out . write ( ' _(%s) ' % cmatch )
return value . strftime ( format )
else :
if mimetype is None :
if form . _meta . fields :
def select_template ( template_name_list , dirs = None ) :
if not ip_str . split ( ':' ) [ - 1 ] == hextet :
if self . _read_started :
if six . PY2 :
return None
pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )
output . append ( html [ field ] )
self . _stream = BytesIO ( self . _body )
response = middleware_method ( request )
response = middleware . process_template_response ( request , response )
def end_object ( self , obj ) :
from django . utils import six
class Promise ( object ) :
exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )
expires = timezone . make_naive ( expires , timezone . utc )
if self . verbosity >= 1 :
def _to_tuple ( s ) :
return mark_safe ( '\n' . join ( output ) )
cc_delim_re = re . compile ( r'\s*,\s*' )
var_name = bits [ 5 ]
elif cmatches :
except AttributeError :
return self . filter ( name , func , ** flags )
except NoReverseMatch :
else :
output = self . filter_expression . resolve ( context )
def __bool__ ( self ) :
except TemplateDoesNotExist :
def get_git_changeset ( ) :
elif child . nodeType == child . ELEMENT_NODE :
for node in graph . leaf_nodes ( app_name ) :
values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
from django . core . mail . message import sanitize_address
def salted_hmac ( key_salt , value , secret = None ) :
self . attrs [ 'id' ] += "_%d" % self . index
unique = "UNIQUE " if f . unique else ""
class MergeDict ( object ) :
return ''
from django . core . management . base import AppCommand
buffering = int ( six . PY3 )
raise DjangoUnicodeDecodeError ( s , * e . args )
content = f . read ( )
def next_token ( self ) :
if e . errno != errno . EEXIST :
else :
result . append ( Group ( ( ( "%%(%s)s" % param ) , param ) ) )
from django . utils . timezone import template_localtime
description = "The '%s' function" % receiver . __name__
new_ip = hextet [ 0 ] . split ( ':' )
from django . core . management . base import BaseCommand
@ property
self . dict [ item ] = None
return ( ret == 0 )
from django . utils . html import strip_spaces_between_tags
django . setup ( )
skipped . append ( ( model , deps ) )
escaped = False
self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
def __init__ ( self ) :
def rjust ( value , arg ) :
self . source = source
parser . add_option ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' ) ,
class TokenParser ( object ) :
six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
if _locs_ is None :
obj = self . _new_instance ( self . children , self . connector ,  self . negated )
else :
return key [ 0 ]
attrs = dict ( self . attrs , ** kwargs )
key = make_key ( args , kwds , typed )
if not hasattr ( package , 'rindex' ) :
self . stdout . ending = None
return dec
if self . _has_expired ( key ) :
for k , v in six . iteritems ( kwargs ) :
return func
model = self . obj
try :
translation = self . _new_gnu_trans ( localedir )
absolute_http_url_re = re . compile ( r"^https?://" , re . I )
if tzinfo == 'Z' :
model , deps = model_dependencies . pop ( )
@ lru_cache . lru_cache ( maxsize = 1000 )
tag_exists = registry . tag_exists
warnings . warn ( "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." )
self . _fname = None
try :
duplicate = copy ( super ( BaseContext , self ) )
return list_ , False
raise
return patterns
raise
if not value or '@' not in value :
else :
try :
except smtplib . SMTPException :
neg = 0
def parts ( ) :
from django . conf import settings
self . _cache . flush_all ( )
super ( QueryDict , self ) . clear ( )
return '%s%s' % ( text , truncate )
break
except NotImplementedError :
return _trans . get_language_from_request ( request , check_path )
except ImportError :
_cached_filenames += new_filenames
import re
raise ValueError
@ stringfilter
from django . utils . deprecation import RemovedInDjango19Warning
confirm = input ( msg )
elif safe_input :
self . message_context = None
if value is None :
if options [ 'umask' ] :
return self
return no
pass
count = since // seconds
return list ( urlsplit ( url ) )
i += 1
chunk = self . _read_limited ( size - len ( self . buffer ) )
def __str__ ( self ) :
raise KeyError ( "Unknown language code %s and %s." % ( lang_code , generic_lang_code ) )
return self . loader ( self . loadname , self . dirs ) [ 0 ]
def streaming_content ( self , value ) :
validate_ipv4_address ( hextet )
ch , escaped = next ( pattern_iter )
@ register . filter ( is_safe = True , needs_autoescape = True )
return None
truncate_len = length
db = options . get ( 'database' )
def as_p ( self ) :
opfunc . __name__ = opname
return self . number * self . paginator . per_page
self . _cached_loaders = cached_loaders
while self . exists ( name ) :
import glob
hint = "\n\tHINT: %s" % self . hint if self . hint else ''
int_part , dec_part = str_number , ''
def _add_installed_apps_translations ( self ) :
if errors_on_separate_row and bf_errors :
confirm = input ( """You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: """ % connection . settings_dict [ 'NAME' ] )
def eval ( self , context ) :
for name in sorted ( commands_dict [ app ] ) :
def nud ( self , parser ) :
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
for name in bits [ 1 : - 2 ] :
yield self
template = self . template . resolve ( context )
super ( Textarea , self ) . __init__ ( default_attrs )
timestamp = baseconv . base62 . decode ( timestamp )
parts = 2 if version [ 2 ] == 0 else 3
self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
return self . parent_instance
number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
continue
if constant_time_compare ( sig , self . signature ( value ) ) :
try :
from subprocess import PIPE , Popen
while True :
from django . utils . translation import trans_real as trans
def convert ( self , value ) :
try :
self . stdout . write ( "Flush cancelled.\n" )
write ( end )
RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
else :
return self . html_name
module = importlib . import_module ( serializer_module )
errors = [ ]
return df . format ( format_string )
def run ( self , ** options ) :
if root :
obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
filenames . append ( filename )
_serializers [ format ] = module
def wrapper ( * args ) :
self . clear ( )
elif template_tuple is None :
if not candidate :
BASE64_ALPHABET = BASE62_ALPHABET + '-_'
def u ( self ) :
def h ( self ) :
if help_texts is not None :
if isinstance ( elt , six . string_types ) :
def add_arguments ( self , parser ) :
selected_choices . remove ( option_value )
import tempfile
else :
msg_count += 1
self . validators = self . default_validators + validators
data = None
def check_programs ( * programs ) :
if mem_args in cache :
raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
return self . flatten ( ) == other . flatten ( )
from django . conf import settings
params = [ ]
return bytes ( s )
from django . core . exceptions import ValidationError
class HttpResponseNotFound ( HttpResponse ) :
try :
leave_locale_alone = True
return '%s:%s' % ( self . g ( ) , self . i ( ) )
extra , resolver = resolver . namespace_dict [ ns ]
if '::' not in ip_str and ip_str . count ( ':' ) != 7 :
class DictWrapper ( dict ) :
for arg in argv [ 2 : ] :
__author__ = "Benjamin Peterson <benjamin@python.org>"
return result
mtime -= stat . st_ctime
self . active_writers += 1
class DebugNodeList ( NodeList ) :
result . key = key
def __getattr__ ( self , name ) :
field_notes = [ ]
raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' )
with io . open ( fd , 'wb' ) as f :
else :
if ns_pattern :
param = '' . join ( name )
compile_func . __doc__ = func . __doc__
if len ( bits ) < 2 :
pass
else :
raise NoReverseMatch ( "Reverse for '%s' with arguments '%s' and keyword "  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
if self . parent_instance is not None :
widget = EmailInput
class DebugNode ( Node ) :
from xml . sax import handler
try :
file_name = disposition . get ( 'filename' )
handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
value = '%s %s' % tuple ( value )
result += ':' + ipv4_address
self . _set ( key , pickled , timeout )
except SystemExit :
else :
elif disable_existing :
loop_dict [ 'revcounter' ] = len_values - i
try :
yield data
if formfield_callback is None :
field = f . name
except InvalidTemplateLibrary as e :
get_resolver . cache_clear ( )
value = ConvertingTuple ( value )
def delete_many ( self , keys , version = None ) :
if settings . SETTINGS_MODULE :
def _check_test_runner ( app_configs = None , ** kwargs ) :
def configure_root ( self , config , incremental = False ) :
raise UnrecognizedArchiveFormat (  "File object not a recognized archive format." )
try :
return self . environ . get ( 'wsgi.url_scheme' )
def csrf_token ( parser , token ) :
s = s . replace ( "'" , "\\'" )
except Exception :
if is_aware ( value ) :
code = 'max_value'
package_path = package . __path__
attrs = super ( CharField , self ) . widget_attrs ( widget )
super ( DecimalField , self ) . validate ( value )
cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
class FilterExpression ( object ) :
def as_text ( self ) :
day_field = '%s_day'
continue
def close ( self ) :
for __ in iterator :
if not hasattr ( self , '_ordering' ) :
elif ns not in app_list :
widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
def D ( self ) :
return import_string ( key_func )
parser . add_argument ( '--pythonpath' )
warnings . warn ( "django.utils.unittest will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
if missing_fields :
attrvalue = self . unescape ( attrvalue )
if ip_str . count ( ':' ) > 7 :
return language . lower ( )
finally :
dirnames . remove ( dirname )
days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )
if not os . path . exists ( directory ) :
class HttpRequest ( object ) :
def serialize_headers ( self ) :
exclude = options . get ( 'exclude' )
words [ i ] = mark_safe ( word )
else :
kw = match . groupdict ( )
if not os . path . isdir ( migrations_directory ) :
import warnings
def __iter__ ( self ) :
return duplicate
self . stdout . write ( output )
def find_fixtures ( self , fixture_label ) :
return None
def callback ( self ) :
if nodelist . get_nodes_by_type ( ExtendsNode ) :
index = data . find ( self . _boundary )
from os import path
fixture_files_in_dir = [ ]
self . active_writers += 1
return select_html
if output :
self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
class FileInput ( Input ) :
self . queryset . filter ( ** { key : pk } )
@ streaming_content . setter
root = nonlocal_root [ 0 ]
M = self . get ( key , Morsel ( ) )
msg = (  "WSGI application '%(app_path)s' could not be loaded; "  "Error importing module: '%(exception)s'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
import time
all_locales . extend ( map ( os . path . basename , locale_dirs ) )
return t [ 0 ] . lower ( ) , True
transfer_encoding = transfer_encoding [ 0 ] . strip ( )
__str__ = new_method_proxy ( str )
pass
field_value = value [ i ]
def __init__ ( self , content , name = None ) :
app_template_dirs = calculate_app_template_dirs ( )
digits = "0123456789abcdefghijklmnopqrstuvwxyz"
sites = [ ]
incremental = config . pop ( 'incremental' , False )
pass
defaults = dict ( defaults . _get_kwargs ( ) , ** options )
moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
def __new__ ( cls , name , this_bases , d ) :
self . compression_formats [ 'bz2' ] = ( bz2 . BZ2File , 'r' )
from django . core . management . base import AppCommand
bits = token . split_contents ( )
if extra_params :
e = TemplateSyntaxError ( msg )
if origin :
return data
if not hasattr ( self , '_body' ) :
def __setitem__ ( self , name , val ) :
body_msg = msg
def eval ( self , context ) :
return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
if kwargs is None :
self . validate_key ( key )
DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )
self . update ( updates )
try :
def cut ( value , arg ) :
def now ( ) :
from __future__ import unicode_literals
end_text_pos = 0
parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
logger . disabled = True
def template_localtime ( value , use_tz = None ) :
s . close ( )
threading = options . get ( 'use_threading' )
continue
def add_handlers ( self , logger , handlers ) :
import glob
if self . _options :
if app_config . models_module is None :
from __future__ import unicode_literals
errors = [ ]
return x
USE_INOTIFY = True
self . streaming_content = streaming_content
if response is None :
name = sign + hhmm
lineno_comment_map = { }
assert content is not None
notifier . stop ( )
pass
class LoaderOrigin ( Origin ) :
def encoding ( self , value ) :
try :
else :
def default_if_none ( value , arg ) :
self . GET = QueryDict ( mutable = True )
if isinstance ( boundary , six . text_type ) :
data = bool ( data )
@ property
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )
def resolve ( self , path ) :
connection . client . runshell ( )
def debug ( request ) :
else :
status_code = 400
connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
selected_html = mark_safe ( ' selected="selected"' )
return Operator
if settings . USE_THOUSAND_SEPARATOR :
return get_supported_language_variant ( lang_code , strict = strict )
media = Media ( )
def walk_to_end ( ch , input_iter ) :
else :
import_module ( templatetag_module )
parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )
break
input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
elif message_context [ 0 ] == "'" :
return list ( self . itervalues ( ) )
g = generator . BytesGenerator ( fp , mangle_from_ = False )
parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
return escape ( value )
except InvalidOperation :
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
class BaseMemcachedCacheMethods ( RenameMethodsBase ) :
self . DSTOFFSET = self . STDOFFSET
counters [ i ] += chunk_length
raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
from django . utils . formats import get_format
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
@ property
def __init__ ( self , attrs = None , choices = ( ) ) :
return self
elif self . verbosity > 0 :
if i > sys . maxint :
else :
def write_migration_files ( self , changes ) :
if m . group ( 1 ) :
return self . dicts [ - 1 ] [ key ]
raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
now = timezone . now ( )
self . stdout . flush ( )
from django . dispatch import receiver
except KeyError :
super ( Command , self ) . add_arguments ( parser )
warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
attr_list [ 3 ] |= termios . ECHO
uclass , lookup , field , unique_for = date_check
if self . _encoding is None :
warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
use_grouping = use_grouping or force_grouping
if cleaned_line . endswith ( ";" ) :
except ( ValueError , TypeError ) :
field_desc += ', ' . join ( [  '%s=%s' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
connection = connections [ self . using ]
filename = os . path . basename ( path )
if lang_code :
validate_email = EmailValidator ( )
max_width = int ( self . max_width . resolve ( context ) )
tags = options . get ( 'tags' , None )
return s
cursor . close ( )
return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
self . alternatives . append ( ( content , mimetype ) )
def templatetag ( parser , token ) :
p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
class TemplateIfParser ( IfParser ) :
value_converters = {  'ext' : 'ext_convert' ,  'cfg' : 'cfg_convert' ,  }
def load_label ( self , fixture_label ) :
except Exception as e :
self . prefix = prefix
CONTEXT_SEPARATOR = "\x04"
initial = self . widget . decompress ( initial )
return default
activate ( self . language )
def __init__ ( self , offset ) :
if p . image :
v = datetime . datetime . strptime ( force_str ( value ) , input_format )
def end_serialization ( self ) :
def __nonzero__ ( self ) :
return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )
linebreaks = allow_lazy ( linebreaks , six . text_type )
return getattr ( self . _out , name )
def L ( self ) :
if self . _isdst ( dt ) :
if self . pk_field :
queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
app_dir = os . path . join ( app_config . path , 'fixtures' )
chunk = stream . read ( max_header_size )
raise TypeError ( "relative imports require the 'package' argument" )
return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
query_string = query_string . decode ( )
def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :
def __repr__ ( self ) :
migration = loader . get_migration ( app_label , migration_name )
else :
os . chmod ( full_path , self . file_permissions_mode )
def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :
used_column_names . append ( att_name )
self . _info = translation . _info . copy ( )
def _itervalues ( self ) :
def decorator_from_middleware ( middleware_class ) :
if not cls :
out . write ( ' gettext(%r) ' % g )
match = _html_parser . endendtag . search ( rawdata , i + 1 )
raise
try :
if self . to_field_name :
if val == [ ] :
attrs = { 'id' : id_ } if id_ else { }
response = middleware_method ( request , response )
self . content_type_extra = None
return filelist
problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
limit_choices_to = limit_choices_to ( )
try :
self . dry_run = options . get ( 'dry_run' , False )
return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]
if can_fail :
def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) :
sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + ".moves.urllib.robotparser" ] = Module_six_moves_urllib_robotparser ( __name__ + ".moves.urllib.robotparser" )
name = "_%d" % num_args
parser . skip_past ( 'endcomment' )
self . end_object ( obj )
filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
self . saved_forms . append ( form )
self . keyOrder . append ( key )
from django . core . management . base import BaseCommand
for i , line in enumerate ( lines ) :
def __init__ ( self , content = b'' , * args , ** kwargs ) :
if offset is not None :
else :
if isinstance ( unicode_value , six . text_type ) :
for field in unique_check :
def dictvalue ( t ) :
guessed_filename = params . get ( 'filename' ) or used_name
self . __name = name
__all__ = (  'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' ,  'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
def words ( self , num , truncate = None , html = False ) :
except KeyError :
if not check_for_language ( lang ) :
self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
def f ( self ) :
models . Model . save_base ( self . object , using = using , raw = True )
self . subject = subject
from django . db import models
from __future__ import unicode_literals
def _coerce ( self , value ) :
if not isinstance ( node , TextNode ) :
wrapper = warn_about_renamed_method ( class_name , * renamed_method )
if args :
field_notes . append ( "Field renamed because it started with '_'." )
global _translations
def partition ( predicate , values ) :
tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
operations . extend ( smigration . operations )
self . file . __enter__ ( )
import imp
if num_loopvars != len_item :
self . can_write . release ( )
class BaseArchive ( object ) :
raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
def make_naive ( value , timezone ) :
elif self . _meta . exclude and field in self . _meta . exclude :
from django . utils . six . moves import cPickle as pickle
_func_closure = "__closure__"
idx = m . groups ( ) [ 0 ]
self . first = parser . expression ( bp )
except IndexError :
def __eq__ ( self , other ) :
self . stdout . write ( "  Applying %s..." % migration , ending = "" )
@ property
for path in paths :
except Exception as e :
func = TemplateLoader
else :
self . stdout . write ( self . style . MIGRATE_HEADING ( "Full migrations file '%s':" % writer . filename ) + "\n" )
raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )
elif size < len ( self . buffer ) :
return "<%s: %r>" % ( self . __class__ . __name__ , self . var )
return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
register_to . _registry = before_import_registry
if not _cached_filenames and settings . USE_I18N :
model_dependencies . reverse ( )
for ( k , v ) in kwargs . items ( ) :
try :
if len ( x ) == 0 :
self . request = request
def readline ( self , size = None ) :
except IndexError :
def _samefile ( src , dst ) :
context_match = context_re . match ( bmatch . group ( 1 ) )
allow_multiple_selected = True
self . cookies [ key ] [ 'path' ] = path
domain , port = split_domain_port ( host )
raise CommandError ( "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" % (  migration_name , app_label ) )
class Formatter ( object ) :
def __eq__ ( self , other ) :
@ register . filter ( is_safe = True )
from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
iteritems = _iteritems
raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' )
raise TypeError ( 'formfield_callback must be a function or callable' )
return value
if ch != '?' or escaped :
raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )
from django . test . utils import get_runner
return value
delattr ( self . _wrapped , name )
return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )
try :
def lock ( f , flags ) :
if resolver . urlconf_module is None :
filename = file . name
from django . utils import six
format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
with context . push ( ) :
pass
def initial_form_count ( self ) :
package_name = package . __name__
namespaces = { }
filters = config . pop ( 'filters' , None )
def check_1_7_compatibility ( ** kwargs ) :
if data in self . empty_values :
scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )
with open ( old_file_name , 'rb' ) as old_file :
unicode_value = force_text ( value , strings_only = True )
if not hasattr ( self , '_post' ) :
header , value = settings . SECURE_PROXY_SSL_HEADER
def check_1_6_compatibility ( ** kwargs ) :
value = timezone . normalize ( value )
return ''
def _curried ( * moreargs , ** morekwargs ) :
def data ( self ) :
UserModel = get_user_model ( )
table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )
except Exception as e :
return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
def tag ( self ) :
for potfile in potfiles :
import decimal
if not isabs ( path ) :
data = { }
raise self . error ( token , "Empty block tag" )
from django . conf import settings
try :
field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
status_code = 410
for f in post_sql_fields :
def load_middleware ( self ) :
_meta = Options ( table )
result . parent = self
def __str__ ( self ) :
shutdown_message = options . get ( 'shutdown_message' , '' )
_translations [ language ] = DjangoTranslation ( language )
if url . endswith ( '/' ) :
if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
def _construct_form ( self , i , ** kwargs ) :
num_sent += 1
excludes = options . get ( 'exclude' )
return "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )
return default
return "[Didn't have permission to include file]"
if defaults is not None :
if not old_method and new_method :
BaseCache . __init__ ( self , params )
output . append ( format_html ( '<optgroup label="{0}">' , force_text ( option_value ) ) )
return output
for digit in str ( number ) :
if options [ 'plain' ] :
resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
def decompress ( self , value ) :
attachment . add_header ( 'Content-Disposition' , 'attachment' ,  filename = filename )
resolved_path . append ( ns )
try :
if key in d :
description = "An instance of the '%s' class" % receiver . __class__ . __name__
prefix = settings . STATIC_URL
return initial_forms
raise TemplateSyntaxError (  "'%s' received multiple values for keyword argument '%s'" %  ( name , param ) )
if value is None :
else :
msg = "[%s] %s\n" % ( self . log_date_time_string ( ) , format % args )
return True
return plist
else :
lookup_view_s = lookup_view
name = self . get_available_name ( name )
import threading
r = r [ : - 6 ] + 'Z'
super ( Command , self ) . add_arguments ( parser )
from __future__ import absolute_import
except KeyError :
if len_values < 1 :
default_validators = [ validators . validate_email ]
for i , char in enumerate ( text ) :
if key not in default_settings :
self . empty_value = kwargs . pop ( 'empty_value' , [ ] )
block_content = token_string [ 2 : - 2 ] . strip ( )
if truncate_len == 0 :
else :
else :
from django . conf import settings
import sys
return sites
if hasattr ( request , 'session' ) :
if hasattr ( pattern , '_callback_str' ) :
from django . forms . utils import flatatt , ErrorDict , ErrorList
total_forms = self . max_num
if language_code not in self . _namespace_dict :
if i < 36 ** factor :
if sent :
if self . field . choice_cache is None :
obj = Node ( children , connector , negated )
else :
class UTC ( tzinfo ) :
return False
return EscapeText ( s )
if attr in obj_dict :
year = year + off
import copy
else :
def add_post_render_callback ( self , callback ) :
get_function_globals = operator . attrgetter ( _func_globals )
if e . errno == errno . EEXIST :
stats [ MISSES ] += 1
return False
__str__ = serialize
return [ first_item ] , True
def render ( self ) :
parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' ,  help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )
def g ( self ) :
else :
yield parse_boundary_stream ( sub_stream , 1024 )
self . setlistdefault ( key ) . extend ( value_list )
def tag_function ( self , func ) :
if self . _changed_data is None :
raise NotImplementedError ( "This backend doesn't support absolute paths." )
self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
try :
if field not in self . fields :
return ''
truncate = force_text ( truncate )
if content_length < 0 :
class TemplateCommand ( BaseCommand ) :
self . choice_value = force_text ( choice [ 0 ] )
tried_modules . append ( taglib_module )
result = super ( SortedDict , self ) . pop ( k , * args )
self . _archive . close ( )
g . flatten ( self , unixfrom = unixfrom )
return len ( value ) == int ( arg )
@ stringfilter
_translations = { }
date_data = ( date . year , date . month , date . day )
return s
return SafeBytes ( data )
return _trans . templatize ( src , origin )
self . command_stack = [ ]
def title ( value ) :
else :
__M = r'(?P<mon>\w{3})'
from django . conf import settings
activate ( self . old_language )
from django . core . management . sql import sql_flush
for f in filters :
def clean ( self ) :
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
self . m2m_data = None
shell = IPShell ( argv = [ ] )
if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
class Media ( object ) :
handler . startDocument ( )
def render ( self , name , value , attrs = None ) :
if six . PY3 :
import time
other_dict = args [ 0 ]
daemonize = False
return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = "Don't break long message lines into several lines." )
super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
except KeyError :
if isinstance ( obj , datetime . datetime ) :
return name + '_id'
def as_table ( self ) :
new_ip = [ ]
f . save_form_data ( instance , cleaned_data [ f . name ] )
if self . min_value is not None :
class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :
TYPE = FILE
class BaseConfigurator ( object ) :
if extend :
if response is None :
return s
use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
del self . _expire_info [ key ]
name = args [ 1 ]
for table_name in connection . introspection . table_names ( cursor ) :
value = [ ]
content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )
data [ f . name ] = f . value_from_object ( instance )
except SkipFile :
handler . addQuickElement ( "title" , item [ 'title' ] )
if input_val in special_floats :
def __setattr__ ( self , name , value ) :
raise TemplateSyntaxError ( "'regroup' tag takes five arguments" )
next_item = list_ [ i + 1 ]
object_data . update ( initial )
if target_app_labels_only :
handler . endElement ( "author" )
def patch_vary_headers ( response , newheaders ) :
def process ( self , command , domain ) :
from django . utils . encoding import force_text
from django . db . migrations . executor import MigrationExecutor
style = color_style ( )
if not filename :
pass
fname = self . _key_to_file ( key , version )
priority = 1.0
if item [ 'description' ] is not None :
@ register . tag
elif self . verbosity > 0 :
def _assert_mutable ( self ) :
return do_ntranslate ( singular , plural , number , 'ngettext' )
app_configs = None
def __str__ ( self ) :
self . pubid = pubid
try :
tzinfo . __init__ ( self )
def inner_run ( self , * args , ** options ) :
for match in regexes [ state ] . finditer ( text , start ) :
def pop ( self , idx = - 1 ) :
for lineno , line in enumerate ( content . splitlines ( True ) ) :
return host
def setlistdefault ( self , key , default_list = None ) :
domains = ( 'djangojs' , 'django' )
stamp = time . mktime ( tt )
for d in self . dicts :
timestamp = datetime . datetime . now ( ) . strftime ( "%Y%m%d-%H%M%S" )
related = related . natural_key ( )
if second_item == [ ] :
connections [ self . using ] . close ( )
try :
for processor in get_standard_processors ( ) + processors :
attrs [ 'class' ] += ' ' + self . form . required_css_class
elif self . _delegate_text :
super ( ComboField , self ) . __init__ ( * args , ** kwargs )
stats [ MISSES ] += 1
loop_dict [ 'counter0' ] = i
class CheckMessage ( object ) :
def __add__ ( self , rhs ) :
self . symlinks = options . get ( 'symlinks' )
return val
return '\n' . join ( output )
return
plat = sys . platform
else :
byte2int = operator . itemgetter ( 0 )
test_runner = TestRunner ( ** options )
class Template ( object ) :
return value . upper ( )
token = self . next_token ( )
for refto , refs in references . items ( ) :
def add_arguments ( self , parser ) :
if hasattr ( mw_instance , 'process_view' ) :
class RemovedInDjango20Warning ( PendingDeprecationWarning ) :
result . parent = self
directory_created [ app_label ] = True
import os
self . filters [ name ] = filter_func
host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
self . cdata_tag = None
def total_ordering ( cls ) :
else :
self . waiting_readers = 0
try :
def bound_func ( * args2 , ** kwargs2 ) :
else :
definition [ 'bg' ] = colors [ - 1 ]
id_ = final_attrs . get ( 'id' , None )
result_args = [ [ ] ]
best_doublecolon_len = doublecolon_len
for app_name in app_names :
class RawPostDataException ( Exception ) :
def available_attrs ( fn ) :
super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
if isinstance ( stream_or_string , six . string_types ) :
checks = [ check for check in self . registered_checks  if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]
self . command_stack . append ( ( command , token . source ) )
except KeyError :
from django . utils . six . moves . urllib . parse import urljoin
if field . widget . needs_multipart_form :
if getattr ( self , '_client' , None ) is None :
self . queryset = field . queryset
if code is None :
def render ( self , name , value , attrs = None ) :
for handler in self . _upload_handlers :
cache_key = _generate_cache_header_key ( key_prefix , request )
value = environ . get ( str ( key ) , str ( default ) )
cls . __dispatch [ resultclass ] = { }
while True :
@ register . tag
self . second = None
choices . insert ( 0 , none_value )
from pprint import pformat
self . add_error ( name , e )
usage . append ( style . NOTICE ( "[%s]" % app ) )
raise ValidationError ( self . message , code = self . code )
class Serializer ( PythonSerializer ) :
return data
initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
from django . utils . datastructures import MultiValueDict
raise CommandError ( "App '%s' does not have migrations (so squashmigrations on it makes no sense)" % app_label )
val = Header ( val , encoding ) . encode ( )
from django . utils . six . moves import map
return ' ' . join ( words )
id_ = widget . attrs . get ( 'id' ) or self . auto_id
LOCK_SH = 0
class SortedDict ( dict ) :
class MultiValueDict ( dict ) :
def __iter__ ( self ) :
def __get__ ( self , instance , type = None ) :
callback = lambda response : middleware . process_response ( request , response )
lbp = 0
try :
if arg is None :
self . stdout . write ( "  Creating tables...\n" )
raise SerializerDoesNotExist ( format )
def _has_changed ( self , initial , data ) :
if not field_desc . endswith ( '(' ) :
default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
def __init__ ( self , connection_reset = False ) :
from django . core . files . utils import FileProxyMixin
retval = self
if '__str__' not in klass . __dict__ :
else :
def decr ( self , key , delta = 1 , version = None ) :
def load_template_source ( self , template_name , template_dirs = None ) :
statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
except AttributeError :
return True
register = Library ( )
return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
forms_valid &= form . is_valid ( )
handler . addQuickElement ( "category" , "" , { "term" : cat } )
month_field = '%s_month'
from django . utils . module_loading import import_string
return value
e . django_template_source = node . source
qs = queryset . none ( )
class CacheEntry ( object ) :
if hasattr ( timezone , 'normalize' ) :
sites = [ ]
self . _regex_dict [ language_code ] = compiled_regex
def apply_response_fixes ( self , request , response ) :
pass
self . _wrapped = get_storage_class ( ) ( )
style = no_style ( )
msg . attach ( self . _create_mime_attachment ( * alternative ) )
__all__ = [ 'SelectDateWidget' ]
from django . core . management . base import BaseCommand
return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
for key , value in other_dict . items ( ) :
raise
tried . append ( [ pattern ] )
raise NotImplementedError ( 'Subclasses must implement this method.' )
def list ( self ) :
tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
def __getitem__ ( self , key ) :
def wordcount ( value ) :
def get_cache ( backend , ** kwargs ) :
COMMENT_TAG_END = '#}'
@ register ( Tags . models )
value = normalize_newlines ( value )
self . clean ( )
def _parse_header ( line ) :
if exp is not None and exp < time . time ( ) :
def _checkLevel ( level ) :
singular . append ( '%%(%s)s' % t . contents )
break
field_notes . append ( 'This field type is a guess.' )
warnings . simplefilter ( "default" , RemovedInNextVersionWarning )
del attr
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
return message
return '' . join ( words )
pass
self . style = no_style ( )
from django . utils . datastructures import MultiValueDict
if self_closing or tagname in html4_singlets :
if settings . USE_TZ :
raise self . error ( token , "Empty variable tag" )
if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
global _supported
migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
try :
def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :
if min_num is None :
return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
if match :
if not hasattr ( obj , "_meta" ) :
def __init__ ( self , dirpath , file_name , locale_dir ) :
if urlconf is None :
class BlockNode ( Node ) :
unpacked_vars = dict ( zip ( self . loopvars , item ) )
except Exception :
from django . template . smartif import IfParser , Literal
raise CommandError ( "%r is not a valid %s name. Please %s." %  ( name , app_or_project , message ) )
RUN_RELOADER = True
content = force_bytes ( content )
state = self . state
self . _handler_class = None
if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
def verbatim ( parser , token ) :
sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + ".moves.urllib.request" ] = Module_six_moves_urllib_request ( __name__ + ".moves.urllib.request" )
if os . path . isdir ( entry ) :
return isinstance ( obj , _PROTECTED_TYPES )
if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
if plan_node in loader . applied_migrations :
BM_compatible = True
new_ip . append ( '0000' )
options += [ ( app_config . label , 0 ) for app_config in app_configs ]
if not self . use_argparse :
if hasattr ( self . file , 'tell' ) and hasattr ( self . file , 'seek' ) :
def __init__ ( self , request = None ) :
format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
def _delete ( self , key ) :
def handle ( self , ** options ) :
from IPython import start_ipython
errors . append ( field . error_messages [ 'incomplete' ] )
self . target_var = target_var
else :
return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
def path ( self , name ) :
return IfNode ( conditions_nodelists )
if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) :
except ValueError :
return
choice_input_class = None
else :
if self . field . required and hasattr ( self . form , 'required_css_class' ) :
return smart_text ( value )
self . deactivate = deactivate
def make_bytes ( self , value ) :
__bytes__ = new_method_proxy ( bytes )
simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )
output = [ ]
delta = 2000 - year
reason_phrase = None
newline = unicode ( "\n" )
return self . _get_scheme ( )
from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
def S ( self ) :
class Archive ( object ) :
current_timezone = timezone . get_current_timezone ( )
for finder in sys . meta_path :
else :
if not dklen :
import errno
if not content_type . startswith ( 'multipart/' ) :
elif ':' not in middle and simple_email_re . match ( middle ) :
hour , minute = divmod ( timezone , 60 )
@ total_ordering
EscapeString = EscapeText
field = field . rel . get_related_field ( )
self . _current = None
if years :
for app_config in apps . get_app_configs ( ) :
def removetags ( value , tags ) :
@ total_ordering
self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
message = ValidationError ( message )
return True
timeout = - 1
def __eq__ ( self , other ) :
tables = connection . introspection . table_names ( cursor )
if not self . first :
key = self . make_key ( key , version = version )
for migration in migrations_to_squash :
pass
return self . _create_attachments ( msg )
self . stream = stream_or_string
print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
else :
class EscapeBytes ( bytes , EscapeData ) :
except smtplib . SMTPException :
import codecs
except OSError :
else :
self . use_l10n = use_l10n
hour = int ( m . group ( 'hour' ) )
if key in d :
primary_keys = [ ]
class InvalidCacheBackendError ( ImproperlyConfigured ) :
return self . _post , self . _files
handler . addQuickElement ( "link" , item [ 'link' ] )
parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
for loc in locales :
constant_string = constant_string . replace ( "\n" , "" )
if doublecolon_len > best_doublecolon_len :
timeout = self . default_timeout
week_number = j // 7
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
NON_FIELD_ERRORS = '__all__'
errors = "strict"
return bool ( self . children )
_html_parser . HTMLParser . __init__ ( self )
for app_config in apps . get_app_configs ( ) :
def render_option ( self , selected_choices , option_value , option_label ) :
return [ ]
EventHandler . modified_code = FILE_MODIFIED
class FileUploadHandler ( object ) :
from django . core . management . base import BaseCommand
return result
value , sig = signed_value . rsplit ( self . sep , 1 )
level += 1
from __future__ import unicode_literals
for func in self . response_fixes :
if subject [ i ] in ( '"' , "'" ) :
elif self . name and os . path . exists ( self . name ) :
obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )
sep = kwargs . pop ( "sep" , None )
self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
rawdata = self . rawdata
break
def _check_middleware_classes ( app_configs = None , ** kwargs ) :
def get_system_encoding ( ) :
if os . name == 'nt' :
raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
if value :
if hasattr ( model , 'natural_key' ) :
def __init__ ( self , nodelist , parent_name , template_dirs = None ) :
from django . core . files import uploadhandler
return response
def deactivate ( ) :
update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
fields = (   models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) ,  models . TextField ( name = 'value' ) ,  models . DateTimeField ( name = 'expires' , db_index = True ) ,  )
raise self . exception
else :
self . _post = QueryDict ( '' )
if not len ( empty_label ) == 3 :
self . vars = variables
tmp = url . rstrip ( '/' )
from django . core . management . sql import sql_indexes
else :
handler . endElement ( "channel" )
setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )
try :
newretval = post_callback ( retval )
def non_form_errors ( self ) :
contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )
if self . verbosity >= 1 :
return self . filter_expr . resolve ( context )
from django . forms . forms import *
if not self . is_valid ( ) or not self . can_delete :
if hasattr ( self , '_body' ) :
from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
return Signer ( b'django.http.cookies' + key , salt = salt )
super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
def is_valid ( self ) :
if months :
parse_until = [ ]
try :
year_field = '%s_year'
self . localize = localize
from django . core . management import call_command
widget_value = value [ i ]
parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
def __contains__ ( self , other ) :
_cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , '"\\073"' )
with open ( path , 'a' ) :
del attr
class BoundaryIter ( six . Iterator ) :
def render ( self , name , value , attrs = None ) :
from __future__ import unicode_literals
result = ":" . join ( hextets )
return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
runfastcgi ( args )
block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
is_templatized = True
charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8'
handler . addQuickElement ( "link" , self . feed [ 'link' ] )
for loader in self . loaders :
for d in object_list :
values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
yield node
except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :
if value in self . empty_values :
parser . add_argument ( 'args' , nargs = '*' )
if autoescape :
parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
return False
from django . conf import settings
streaming = False
class Critical ( CheckMessage ) :
except ( TypeError , ValueError ) :
if sys . platform . startswith ( "java" ) :
if num > self . _max_entries :
fname = "%s-%s.log" % ( timestamp , abs ( id ( self ) ) )
else :
ip_str = _explode_shorthand_ip_string ( ip_str )
_js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
top_errors . extend (  [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
else :
if transfer_encoding is not None :
from io import BytesIO
MB = 1 << 20
super ( QueryDict , self ) . setlist ( key , list_ )
field_type = connection . introspection . get_field_type ( row [ 1 ] , row )
data_value = data if data is not None else ''
elif dirname == 'locale' :
pass
def do_with ( parser , token ) :
def __deepcopy__ ( self , memo = None ) :
__all__ = (  'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' ,  'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
def utcoffset ( self , dt ) :
MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
def _make_decorator ( * m_args , ** m_kwargs ) :
class TemplateEncodingError ( Exception ) :
result = block . nodelist . render ( context )
return ''
archive . extract ( to_path )
if not only_initial :
def __enter__ ( self ) :
from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
from django . conf import settings
else :
del _serializers [ format ]
out . write ( blankout ( t . contents , 'X' ) )
else :
super ( LoaderOrigin , self ) . __init__ ( display_name )
msg = self . style . HTTP_NOT_MODIFIED ( msg )
from django . conf import settings
return
os . chdir ( our_home_dir )
@ property
except Exception :
import_module ( '%s.%s' % ( app_config . name , module_to_search ) )
return
return data_set != initial_set
upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
return True
value = converter ( suffix )
offset = offset + len ( self . __starttag_text )
raise ContextPopException
def as_tuple ( self , value ) :
LocaleRegexProvider . __init__ ( self , regex )
context . update ( unpacked_vars )
try :
def remove_potfiles ( self ) :
buffer_ = None
final_attrs = self . build_attrs ( attrs , name = name )
with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :
want_unicode = False
s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )
if value in self . empty_values :
def migration_progress_callback ( self , action , migration , fake = False ) :
message = _ ( 'Enter a valid email address.' )
if hasattr ( handler , 'file' ) :
from django . http import QueryDict
except smtplib . SMTPException :
defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }
except IndexError :
data = self
output = [ ]
import time
import random
url_fields [ 0 ] = 'http'
return not module_has_submodule ( package , module )
end_index = None
return val if isinstance ( val , bytes ) else val . encode ( encoding )
except ( TypeError , AttributeError , KeyError , ValueError ) :
sequence = parser . compile_filter ( bits [ in_index + 1 ] )
return copy . deepcopy ( self . _wrapped , memo )
pass
def _get_timezone_name ( timezone ) :
commands_dict [ app ] . append ( name )
if not file_name :
substitutions [ 'clear_template' ] = self . template_with_clear % substitutions
if isinstance ( format_module_path , six . string_types ) :
result = self . configurator . convert ( value )
for app_label , migration_names in conflicts . items ( ) :
return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
def _helper ( list_ , tabs = 1 ) :
if file_ :
raise CommandError ( "You can only use --pks option with one model" )
arg = settings . TIME_FORMAT
self . kwargs = kwargs
block . context = context
return value
name = self . html_name
oldroot = root
inner = NonCapture ( result [ start : ] )
except KeyError :
converter = connection . introspection . table_name_converter
def handle_field ( self , obj , field ) :
__len__ = new_method_proxy ( len )
int_part_gd += digit
option = remaining_bits . pop ( 0 )
if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) :
@ register . filter ( is_safe = True )
from django . utils . xmlutils import SimplerXMLGenerator
options = [ ( '--help' , None ) ]
def runfastcgi ( argset = [ ] , ** kwargs ) :
if accept_lang == '*' :
ext = mimetypes . guess_extension ( content_type )
else :
super ( SortedDict , self ) . __delitem__ ( key )
key = self . make_key ( key , version = version )
if self . verbosity >= 2 :
field_name = field_node . getAttribute ( "name" )
self . regex = regex
timeout = 300
as_form = True
cache [ mem_args ] = result
s = six . text_type ( bytes ( s ) , encoding , errors )
i += 1
def __repr__ ( self ) :
raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
def abspathu ( path ) :
orig = getattr ( self . parent_instance , self . to_field )
else :
count = itertools . count ( 1 )
raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' )
def __html__ ( self ) :
if self . body :
self . file . seek ( pos )
from functools import update_wrapper
class LazyStream ( six . Iterator ) :
statements . append ( " " . join ( statement ) )
_moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :
value = self . to_python ( value ) . strip ( )
name = self . timezone . tzname ( self . data ) if self . timezone else None
self . _closable_objects = [ ]
def start_object ( self , obj ) :
if field . serialize :
try :
return val
if self . domain not in ( 'django' , 'djangojs' ) :
def __getitem__ ( self , key ) :
self . activated = False
self [ key ] = result
def new_method_proxy ( func ) :
raise StopIteration ( )
if settings . DEBUG :
nodelist = parser . parse ( ( 'endif' , ) )
import os
if self . stream is not None :
else :
app_template_dirs = [ ]
return False
def __init__ ( self , key = None , sep = ':' , salt = None ) :
try :
from importlib import import_module
best_doublecolon_start = - 1
new_file . write ( content )
return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
except ( ValueError , self . queryset . model . DoesNotExist ) :
try :
if old_attr is None :
content = ''
try :
super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
raise ValueError ( "Key '%s' not found" % key )
@ lru_cache . lru_cache ( maxsize = 1000 )
utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )
return decorating_function
if options . get ( 'no_wrap' ) :
except Exception :
if filter_name in ( 'escape' , 'safe' ) :
if option_value in selected_choices :
os . umask ( umask )
if CONTEXT_SEPARATOR in result :
if fget is not None :
if not hasattr ( self , '_fqdn' ) :
wm . add_watch ( path , mask )
def url ( self , name ) :
def new_file ( self , * args , ** kwargs ) :
def _parse_header_params ( s ) :
ORDERING_FIELD_NAME = 'ORDER'
else :
return self . _open ( name , mode )
import sys
class RssFeed ( SyndicationFeed ) :
raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path )
def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :
return self . value . resolve ( context , ignore_failures = True )
class StopFutureHandlers ( UploadFileException ) :
self . nodelist = nodelist
def end_object ( self , obj ) :
except ( ValueError , TypeError ) :
def tzname ( self , dt ) :
token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
method = kwargs . pop ( 'method' )
self . literal = float ( var )
return zbuf . getvalue ( )
elif isinstance ( o , datetime . date ) :
dictConfigClass ( config ) . configure ( )
return Page ( * args , ** kwargs )
try :
message = trim_whitespace ( message )
connection = connections [ db ]
return copy . deepcopy ( self . _wrapped , memo )
for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :
except ImportError as e :
choices = list ( six . iteritems ( self . months ) )
if message is not None :
st = os . stat ( src )
if not isinstance ( s , Exception ) :
register = Library ( )
lexer_class , parser_class = Lexer , Parser
if type ( s ) == bytes :
localpart = str ( Header ( localpart , encoding ) )
def value_from_datadict ( self , data , files , name ) :
STATUS_OK = 0
self . variable_name = variable_name
def restart_with_reloader ( ) :
if not isinstance ( var , six . string_types ) :
return type ( form ) ( class_name , ( form , ) , form_class_attrs )
if use_grouping :
return 1 , ch2
middleware = middleware_class ( * m_args , ** m_kwargs )
raise AttributeError ( attr )
if isinstance ( message , ValidationError ) :
widget = widget ( )
return ''
def compile_messages ( self , locations ) :
if sublist_item :
kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
return any ( ignore ( pattern ) for pattern in ignore_patterns )
constant_re = re . compile ( r"""_\(((?:".*?")|(?:'.*?'))\)""" )
else :
res = to_digits [ 0 ]
netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
def exit_command ( self ) :
from django . utils import six
if self . localize :
if threading :
sio = BytesIO ( self . buffer )
self . file_name = None
if find_command ( program ) is None :
return '' . join ( base36 )
if app_name not in loader . migrated_apps :
executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
HTMLParser . __init__ ( self )
def handle ( self , ** options ) :
filename = tmp . split ( '/' ) [ - 1 ]
def streaming_content ( self ) :
def _ipython_pre_100 ( self ) :
help = ( "Creates a Django project directory structure for the given "  "project name in the current directory or optionally in the "  "given directory." )
if prefix is None :
def time_format ( value , format_string ) :
self . stdout . write ( self . style . MIGRATE_HEADING ( "Will squash the following migrations:" ) )
self . registered_checks = [ ]
def lru_cache ( maxsize = 100 , typed = False ) :
from itertools import chain
def get_unique_error_message ( self , unique_check ) :
clean_data . append ( field . clean ( field_value ) )
last_row = ( normal_row % { 'errors' : '' , 'label' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
super ( Command , self ) . add_arguments ( parser )
__all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )
if self . options . get ( 'indent' , None ) is not None :
return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
timeout = - 1
raise TemplateSyntaxError ( '"filter %s" is not permitted.  Use the "autoescape" tag instead.' % filter_name )
def curry ( _curried_func , * args , ** kwargs ) :
result = datetime . datetime ( value . year , value . month , value . day )
assert not isinstance ( cc , six . string_types ) , '"cc" argument must be a list or tuple'
self . config = ConvertingDict ( config )
singular_suffix , plural_suffix = bits [ : 2 ]
mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
new_class . base_fields = fields
def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
except ( LookupError , TypeError ) :
handle_app = self . handle_app
def handle_app_config ( self , app_config , ** options ) :
def _get_count ( self ) :
BaseRunserverCommand = Command
self . _non_form_errors = self . error_class ( e . error_list )
msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )
data = data or [ ]
return value
from django . forms . utils import ErrorList
for item in elt :
else :
self . _css . setdefault ( medium , [ ] ) . append ( path )
new_value = value + delta
self . obj = obj
return obj
def _post_clean ( self ) :
file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
try :
else :
def make_key ( self , key , version = None ) :
from django . utils import six
try :
raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
mixed_subtype = 'mixed'
if value in self . empty_values :
warnings . warn ( "django.utils.importlib will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
if value is None :
bit = node
if i < 0 :
def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :
requires_system_checks = False
obj . save ( using = self . using )
raise InvalidCacheBackendError (  "Could not find config for '%s' in settings.CACHES" % alias  )
if six . PY3 :
return default
if not model . _meta . proxy and router . allow_migrate ( using , model ) :
context [ self . variable_name ] = value
if expires < now :
except TypeError :
except AttributeError :
return FormSet
def translate_token ( self , token ) :
self . create_table ( db , tablename )
def show_migration_list ( self , connection , app_names = None ) :
def __iter__ ( self ) :
def get_template_sources ( self , template_name , template_dirs = None ) :
return parent
return ''
return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
if find_command ( self . program ) is None :
bits = token . split_contents ( ) [ 1 : ]
self . args_check ( filter_name , filter_func , args )
else :
return saved_instances
def __getstate__ ( self ) :
handler = self . get_handler ( * args , ** options )
yield safe_join ( template_dir , template_name )
raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
use_natural_primary_keys = options . get ( 'use_natural_primary_keys' )
logging_config_func ( logging_settings )
self . month_none_value = ( 0 , empty_label [ 1 ] )
factor -= 1
return six . text_type ( s , encoding , 'replace' )
if number == 1 and self . allow_empty_first_page :
from django . utils . deprecation import RemovedInDjango19Warning
if nodelist_empty is None :
self . alternatives = alternatives or [ ]
register_to = kwargs . get ( 'register_to' )
def sanitize_separators ( value ) :
yield safe_join ( template_dir , template_name )
raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
if name is None :
yield '%s\n' % line [ : space - 1 ]
pass
label = conditional_escape ( force_text ( bf . label ) )
for c in response . cookies . values ( ) :
code_list . append ( foreground [ v ] )
pass
self . nodelist = nodelist
if row is None :
self . style = color_style ( )
_supported = None
return None
class URLInput ( TextInput ) :
class Literal ( TokenBase ) :
usage = sorted ( get_commands ( ) . keys ( ) )
class LocalTimezone ( ReferenceLocalTimezone ) :
if secret is None :
def delete ( self , key , version = None ) :
return out
self . __dict__ . update ( state )
import re
raise ValueError ( "MultiValueDict.update() takes either a MultiValueDict or dictionary" )
return context
comment_notes . extend ( field_notes )
if not self . invoked_for_django :
if id_for_label :
return parser
msg += '\n%s:\n%s\n' % ( group_name , formatted )
field_notes . append ( 'Field renamed because of name conflict.' )
warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
if sequence_sql :
obj = self . var . resolve ( context )
return cls . __new__ ( cls , * args )
path = str ( path )
@ classmethod
oldroot [ RESULT ] = result
if self . required :
return list ( chain ( * errors ) )
meta = '<could not parse>'
raise TypeError ( "end must be None or a string" )
for f in opts . many_to_many + opts . virtual_fields :
opts = instance . _meta
def setlist ( self , key , list_ ) :
except KeyError :
raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
import copy
from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
self . context_data = context
rv = logging . _levelNames [ level ]
missing_args_message = "Enter at least one %s." % label
def items ( self ) :
for k , v in self . choices :
return locale . lower ( )
return getattr ( _active , "value" , get_default_timezone ( ) )
from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
length = int ( arg )
def __init__ ( self , name ) :
pass
for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) :
return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
biggest_number = max ( [ x for x in numbers if x is not None ] )
parser . add_option ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
class OVERLAPPED ( Structure ) :
final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )
if hasattr ( test_runner_class , 'option_list' ) :
if content_disposition :
parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
TOKEN_VAR = 1
ignore = options . pop ( 'ignorenonexistent' , False )
key = hashlib . sha1 ( key_salt + secret ) . digest ( )
obj = mark_safe ( new_obj )
def gettext ( message ) :
except AttributeError :
try :
INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
return getattr ( settings , format_type )
raise TemplateSyntaxError ( "%r received an invalid token: %r" %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
def _isdst ( self , dt ) :
os . unlink ( pot_path )
iteritems = _iteritems
return t . render ( Context ( dictionary ) )
def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :
alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
pass
def ungettext ( singular , plural , number ) :
label = ''
else :
self . paths_to_remove . append ( tempdir )
self . stdout . write ( errors )
self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )
sent = self . _send ( message )
return lambda x : x
return
from django . db . models . fields . related import RelatedObject
result = c ( ** kwargs )
else :
except UnicodeDecodeError :
if field . rel . through . _meta . auto_created :
version = self . version
if delta < 0 :
return flat
if hextet . count ( '.' ) == 3 :
code_list . append ( background [ v ] )
global _mtimes , _win
from django . utils import archive
output . append ( self . render_option ( selected_choices , option_value , option_label ) )
def localize_input ( value , default = None ) :
def to_python ( self , value ) :
if t [ 1 ] is True :
else :
cookie_value = self . COOKIES [ key ]
sys . stderr . close ( )
data_set = set ( force_text ( value ) for value in data )
return _time . tzname [ self . _isdst ( dt ) ]
result = func ( * args )
from django . forms . utils import flatatt , to_current_timezone
if command . use_argparse :
else :
if strings_only and is_protected_type ( s ) :
if change == FILE_MODIFIED :
nodelist = self . create_nodelist ( )
if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :
import locale
if six . PY3 :
stream_created = self . open ( )
content_length = 0
pass
self . number = number
return do_ifequal ( parser , token , False )
new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '__file__' ) ]
if close :
ch2 = None
if '%(truncated_text)s' in truncate :
else :
self . _archive . list ( )
if '.' in exclude :
content_length = None
factory = klass
context [ self . var_name ] = obj
else :
def add_root_elements ( self , handler ) :
from django . utils . encoding import python_2_unicode_compatible
from __future__ import unicode_literals
def __init__ ( self , data , func , prefix ) :
except VariableDoesNotExist :
self . stdout . write ( "Loading '%s' fixtures..." % fixture_name )
def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :
from django . utils . six . moves import copyreg
dlen = len ( defaults or [ ] )
def __copy__ ( self ) :
class DummyCache ( BaseCache ) :
self . html_initial_name = form . add_initial_prefix ( name )
if path . isdir ( expanded_template ) :
return data
return True
return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
models = set ( )
MAXSIZE = sys . maxsize
block_context . add_blocks ( blocks )
from importlib import import_module
default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
if isinstance ( attachment , MIMEBase ) :
factory = config [ '()' ]
self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
from django . conf import settings
if message is not None :
data = data . encode ( fp . encoding , errors )
form = self . forms [ i ]
initial_prefixed_name = self . add_initial_prefix ( name )
self . stdout . write ( "Performing system checks...\n\n" )
@ python_2_unicode_compatible
def check_for_language ( lang_code ) :
def get_unique_error_message ( self , unique_check ) :
else :
model_dependencies = skipped
if self . verbosity >= 2 :
from . . import Warning , register , Tags
timeout = self . default_timeout
return super ( QueryDict , self ) . popitem ( )
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
from django . core . exceptions import ImproperlyConfigured
super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
daemon_kwargs [ 'err_log' ] = options [ 'errlog' ]
if name is None and compile_function is None :
db = router . db_for_write ( self . cache_model_class )
else :
try :
pass
resolver = get_ns_resolver ( ns_pattern , resolver )
return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )
for line in content . split ( "\n" ) :
warnings . warn (  'Reversing by dotted path is deprecated (%s).' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
try :
pos = m . end ( 0 )
try :
try :
_iterlists = "iterlists"
self . stream = options . pop ( "stream" , six . StringIO ( ) )
def handle_fk_field ( self , obj , field ) :
def deactivate ( ) :
if key_func is not None :
class SlugField ( CharField ) :
raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % (  migration_name , app_label ) )
else :
def resolve ( self , context , ignore_failures = False ) :
f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
raise CommandError ( "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config . label )
return data . get ( name , None )
def parse_http_date_safe ( date ) :
def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
nm , addr = addr
from django . template . loader import BaseLoader
handler . addQuickElement ( "name" , self . feed [ 'author_name' ] )
__nonzero__ = new_method_proxy ( bool )
return view_func
FILE_INPUT_CONTRADICTION = object ( )
self . cookies [ key ] [ 'secure' ] = True
def __init__ ( self , stream_or_string , ** options ) :
import socket
def add_arguments ( self , parser ) :
return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )
renderer = CheckboxFieldRenderer
super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
elif char in 'dj' :
base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )
if not digest :
flags = 0
if self . base_url is None :
sql_files = [ ]
if isinstance ( path , six . string_types ) :
empty = object ( )
ext = ext [ : 255 ]
nodelist = getattr ( self , attr , None )
class ChunkIter ( six . Iterator ) :
if level :
add_move ( MovedModule ( "_dummy_thread" , "dummy_thread" ) )
return self . _client
def __eq__ ( self , other ) :
self . indent ( 2 )
if isinstance ( value , datetime . date ) :
except IOError as e :
elif isinstance ( value , six . string_types ) :
import errno
path_info = get_path_info ( environ )
if not callable ( original_lookup ) and callable ( lookup_view ) :
def multiple_chunks ( self , chunk_size = None ) :
break
clean = lambda self , x : x
raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
app_configs = [ app_config ]
if row [ 6 ] :
def close ( self ) :
if data is not None :
try :
except SuspiciousOperation as e :
raise
if USE_INOTIFY :
if related_att is not None :
def add_never_cache_headers ( response ) :
six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
@ HttpResponse . content . setter
def normalize ( pattern ) :
def nud ( self , parser ) :
if pieces [ - 1 ] :
object_data = { }
self . var1 , self . var2 = var1 , var2
title = ''
help = 'Deprecated. Use "check" command instead. ' + CheckCommand . help
if commit :
super ( ErrorList , self ) . __init__ ( initlist )
weight += 2
absolute_path = path . abspath ( expanded_template )
super ( QueryDict , self ) . __init__ ( )
_ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )
del frame
def get_exception_response ( self , request , resolver , status_code ) :
if hasattr ( form , 'Meta' ) :
if _localtime is None :
pass
def conditional_content_removal ( request , response ) :
return dict_ [ key ]
def values ( self ) :
val = list ( val )
self . parsed = parsed
if options [ "daemonize" ] is None :
field_type , new_params = field_type
urlconf = get_urlconf ( )
get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
ip_str = _sanitize_ipv4_mapping ( ip_str )
if isinstance ( value , six . string_types ) :
raise TemplateSyntaxError ( "Invalid syntax in widthratio tag. Expecting 'as' keyword" )
from django . apps import apps
return (  format_html_join ( '' , ' {0}="{1}"' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )
if self . selected_fields is None or field . attname in self . selected_fields :
if token . contents == 'empty' :
break
import time
self . add_error ( None , errors )
if decimal_pos is not None :
if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
substitutions = {  'initial_text' : self . initial_text ,  'input_text' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
elif ch == '.' :
if key_prefix is None :
dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
return False
from django . utils import six
queryset = self . model . _default_manager
self . name = name
def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :
result = middleware . process_view ( request , view_func , args , kwargs )
def register ( self , * tags ) :
except UnicodeEncodeError :
r = o . isoformat ( )
save . alters_data = True
from django . utils . timezone import is_aware , utc
def rss_attributes ( self ) :
form = self . forms [ i ]
class PageNotAnInteger ( InvalidPage ) :
init_path = os . path . join ( migrations_directory , "__init__.py" )
obj = None
@ register . filter ( is_safe = True )
_func_code = "func_code"
common_ancestor = level [ 0 ]
def __str__ ( self ) :
self . stdout . write ( " (no migrations)" , self . style . MIGRATE_FAILURE )
input_type = None
else :
name = [ ]
requires_system_checks = False
help = 'Installs the named fixture(s) in the database.'
return urlquote ( value , ** kwargs )
for templatetag_module in templatetags_modules_candidates :
self . files = files or { }
def listdir ( self , path ) :
def advance_iterator ( it ) :
from xml . sax . saxutils import XMLGenerator
cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s'
raise
return statements
while '%s_%d' % ( new_name , num ) in used_column_names :
super ( TextInput , self ) . __init__ ( attrs )
if self . verbosity >= 1 :
self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
if exclude and f . name in exclude :
super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
locales = [ locale ]
def encode ( self , i ) :
from django . apps import apps
self . _cull ( db , cursor , now )
def ungettext ( singular , plural , number ) :
self . end_serialization ( )
if data is None or isinstance ( data , dict ) :
if self . merge and conflicts :
return dirs
return False
return os . path . join ( self . _dir , '' . join (  [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )
return False
base_directory = '%s_directory' % app_or_project
objects_in_fixture = 0
except ValueError :
if not url_fields [ 0 ] :
att_name , params , notes = self . normalize_col_name (  column_name , used_column_names , is_relation )
value = super ( DictWrapper , self ) . __getitem__ ( key )
nodes . append ( self )
sys . exit ( 1 )
from __future__ import unicode_literals
arg = ugettext ( 'yes,no,maybe' )
import os
executor = MigrationExecutor ( connection , self . migration_progress_callback )
if self . field . label is None :
def save_m2m ( ) :
app_label , model_label = label . split ( '.' )
def csrf ( request ) :
try :
force_unicode = force_text
for f in dirs :
regex_match = language_code_prefix_re . match ( path )
self . close ( )
return self . _errors
@ wraps ( fget )
if kwargs . get ( k , v ) != v :
exp = pickle . load ( f )
for app_config in apps . get_app_configs ( ) :
full_statement . append ( '    %s%s' % ( line , ',' if i < len ( table_output ) - 1 else '' ) )
target_app_labels_only = True
values = [ ]
except AttributeError :
try :
from django . utils . encoding import force_str
urlconf = get_urlconf ( )
try :
def handle_data ( self , d ) :
template_source_loaders = tuple ( loaders )
return tag in self . tags_available ( )
_dec . __name__ = 'method_decorator(%s)' % decorator . __name__
else :
self . _callback = callback
def comment ( parser , token ) :
link [ PREV ] = last
f . write ( pickle . dumps ( expiry , - 1 ) )
if six . PY2 :
pattern = pattern . lower ( )
parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
def __deepcopy__ ( self , memo ) :
def to_python ( self , value ) :
def validate_key ( self , key ) :
def N ( self ) :
if not expires :
def get_library ( library_name ) :
db_module = 'django.db'
self . _changed_data . append ( name )
zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )
escaped = True
class WSGIRequest ( http . HttpRequest ) :
try :
location = settings . MEDIA_ROOT
self . to_field = kwargs . pop ( "to_field" , None )
continue
used += '.' + frag
boolean_attrs . append ( ( attr , ) )
raise TemplateSyntaxError ( "Invalid arguments provided to simple_tag" )
plural . append ( '%%(%s)s' % t . contents )
for c in reversed ( self . __class__ . __mro__ ) :
__all__ = [  'CheckMessage' ,  'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
try :
from __future__ import unicode_literals
handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
for name in self . fields :
self . max_length , self . min_length = max_length , min_length
self . stream . write ( "," )
app_config = apps . get_app_config ( app_label )
def get_script_prefix ( ) :
chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
register = Library ( )
supports_microseconds = False
return offset . days * 86400 + offset . seconds
for name in formatters :
self . parent_widget = parent_widget
try :
body_msg = msg
db = router . db_for_write ( self . cache_model_class )
self . invoked_for_django = False
output . append ( pformat ( sys . modules ) )
try :
return fp . getvalue ( )
def content ( self ) :
errors . append (  Error (  "%s was connected to the '%s' signal "  "with a lazy reference to the '%s' sender, "  "which has not been installed." % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )
forms_to_delete = self . deleted_forms
def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :
import msvcrt
class Module_six_moves_urllib ( types . ModuleType ) :
if pattern . name is not None :
base16 = BaseConverter ( BASE16_ALPHABET )
bits = token . split_contents ( )
def _generate_cache_header_key ( key_prefix , request ) :
for p in path :
@ property
def W ( self ) :
num = cursor . fetchone ( ) [ 0 ]
def __new__ ( cls , * args , ** kwargs ) :
label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
priority = float ( priority )
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
if display_num_errors :
def format ( self , formatstr ) :
truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )
self . _errors [ field ] . extend ( error_list )
space = unicode ( " " )
yield '    %s' % field_desc
from datetime import timedelta , tzinfo
resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
for form in self . initial_forms :
if incremental :
return self . empty_value
output . append ( '* %s' % field )
self . close ( )
return iri
result = 0
else :
from django . db import models , DEFAULT_DB_ALIAS
except LookupError :
if path is None :
from django . core . management . base import CommandError
def dst ( self , dt ) :
intrans = False
return ''
if not plan :
self . _boundary = boundary
def __repr__ ( self ) :
if self . verbosity > 0 :
for app_name in app_names :
if initial is None :
@ stringfilter
def add_arguments ( self , parser ) :
return self . _is_rendered
input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )
@ register . tag
sys . exit ( 1 )
else :
except Exception as e :
from django . utils import six
if limit_choices_to is not None :
def __getinitargs__ ( self ) :
import collections
django . setup ( )
raise self . source_error ( source , msg )
raise NoReverseMatch ( "Error importing '%s': %s." % ( lookup_view , e ) )
if tok . startswith ( "'" ) :
return format_html (  '<ul class="errorlist">{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
if app_config . models_module is None or app_config in excluded_apps :
ret = fcntl . flock ( _fd ( f ) , flags )
exp = self . _expire_info . get ( key , - 1 )
def unlock ( f ) :
return [ first_item , second_item ] , old_style_list
return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
default_attrs . update ( attrs )
error_messages [ 'invalid' ] = error_message
def handle_default_options ( options ) :
raise ValueError (  "'%s.%s' has no ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
new_second_item . extend ( item )
full_path = self . path ( name )
result [ i ] += piece
capfirst = allow_lazy ( capfirst , six . text_type )
from django . utils import six
try :
fields . update ( new_class . declared_fields )
timeout = int ( timeout )
return get_internal_wsgi_application ( )
format_locations . append ( 'django.conf.locale.%s' )
return resolved_args , resolved_kwargs
break
try :
@ python_2_unicode_compatible
result = datetime . datetime ( year , month , day , hour , min , sec )
except TypeError :
if self . waiting_writers != 0 :
if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :
try :
@ cached_property
from django . utils . ipv6 import clean_ipv6_address
sub_match_dict . update ( sub_match . kwargs )
self . stdout . write ( " - %s" % migration . name )
for type_ in reversed ( resultclass . mro ( ) ) :
self . negated = not self . negated
def timesince ( d , now = None , reversed = False ) :
return '%s\n\n%s' % ( usage , self . help )
raise ValueError ( "Base36 input too large" )
app = app . rpartition ( '.' ) [ - 1 ]
if isinstance ( value , bool ) :
url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
raise CommandError ( "No migrations present for: %s" % ( ", " . join ( invalid_apps ) ) )
use_null_fallback = False
from django . core . exceptions import ValidationError
QuerySetPaginator = Paginator
import re
def __str__ ( self ) :
w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
msgs = msgs . decode ( 'utf-8' )
last = root [ PREV ]
for character in name :
for field , error_list in error . items ( ) :
for i , arg in enumerate ( args ) :
max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :
def _get_scheme ( self ) :
bits = token . split_contents ( )
def popen_wrapper ( args , os_err_exc_type = CommandError ) :
for message in messages :
else :
if path . isfile ( path_to_remove ) :
string_types = basestring ,
return path
from django . utils . encoding import python_2_unicode_compatible , force_str
concrete_model = obj . _meta . concrete_model
except self . LibraryValueNotFoundException :
self . xml . characters ( field . value_to_string ( obj ) )
break
from django . core . management . base import BaseCommand , CommandError
self . objects = [ ]
class InputStreamExhausted ( Exception ) :
curs . execute ( "\n" . join ( full_statement ) )
else :
raise self . error ( token , "Invalid block tag: '%s', expected %s" %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
def decorator_from_middleware_with_args ( middleware_class ) :
def __init__ ( self , obj , * args ) :
try :
pass
token = parser . next_token ( )
if kwargs . pop ( 'ipv6' , False ) :
except OSError as e :
return func
def dec ( func ) :
except OverflowError :
return text
from __future__ import unicode_literals
if not hasattr ( self , '_dimensions_cache' ) :
self . tags [ getattr ( func , "_decorated_function" , func ) . __name__ ] = func
del bits [ : 1 ]
import sys
self . items = [ ]
return id_
class_types = type ,
output_transaction = False
from django . utils . encoding import force_text
def next_page_number ( self ) :
return host
Morsel = http_cookies . Morsel
j = text . find ( substr , i )
def save ( self , save_m2m = True , using = None ) :
from django . core . cache . backends . base import (  InvalidCacheBackendError , CacheKeyWarning , BaseCache )
WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
@ stringfilter
name = member . name
if isinstance ( expires , datetime . datetime ) :
else :
for key_value in natural :
field_type = "ForeignKey('%s'" % rel_to
final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )
return WithNode ( None , None , nodelist , extra_context = extra_context )
for f in opts . local_fields :
handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
def get_language_bidi ( ) :
new_context [ 'csrf_token' ] = csrf_token
data [ field . attname ] = None
if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
pass
skipped = [ ]
from django . core . management . base import BaseCommand , CommandError
if ':::' in ip_str :
StringIO = BytesIO = StringIO . StringIO
if bases == ( BaseModelForm , ) :
if form in forms_to_delete :
else :
table = connections [ db ] . ops . quote_name ( self . _table )
self . content_type = None
value = force_text ( value )
if self . username and self . password :
for loader_name in settings . TEMPLATE_LOADERS :
while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
self . config . configurator = self
nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )
potfiles . append ( potfile )
def literals ( choices , prefix = "" , suffix = "" ) :
def _set_choices ( self , value ) :
def __init__ ( self , text , subtype , charset ) :
def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :
except NameError :
return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
pass
def get_default_timezone ( ) :
if i < self . initial_form_count ( ) and 'instance' not in kwargs :
if hasattr ( timezone , 'normalize' ) :
with connections [ db ] . cursor ( ) as cursor :
for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :
else :
if weight >= 6 :
for label in labels :
class VerbatimNode ( Node ) :
forms = ' ' . join ( form . as_p ( ) for form in self )
self . tokens = mapped_tokens
viewname = parser . compile_filter ( bits [ 1 ] )
import copy
m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
for node in nodelist :
def __deepcopy__ ( self , memo ) :
for child in node . childNodes :
for key , value in six . iterlists ( self ) :
iter ( patterns )
return [  Warning (  "MIDDLEWARE_CLASSES is not set." ,  hint = ( "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "  "django.contrib.sessions.middleware.SessionMiddleware, "  "django.contrib.auth.middleware.AuthenticationMiddleware, and "  "django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "  "If your project needs these middleware then you should configure this setting." ) ,  obj = None ,  id = '1_7.W001' ,  )  ]
sublist = ''
def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :
if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
def __str__ ( self ) :
return False
deprecation_warning = renamed_method [ 2 ]
self . sep = force_str ( sep )
if 'max-age' in cc and 'max_age' in kwargs :
def close_caches ( ** kwargs ) :
if not isinstance ( index , ( slice , ) + six . integer_types ) :
if self . initial and 'initial' not in kwargs :
continue
def ngettext ( singular , plural , number ) :
mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }
self . _request_middleware = request_middleware
handler . addQuickElement ( "comments" , item [ 'comments' ] )
all_date_checks = set ( )
self . handle_file_complete ( old_field_name , counters )
parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
elif self . argv [ 1 : ] in ( [ '--help' ] , [ '-h' ] ) :
def media ( self ) :
if not func . is_usable :
serializers [ format ] = module
def find_template ( self , name , dirs = None ) :
return dec ( func )
if isinstance ( self . var , Variable ) :
qs = self . model . _default_manager . get_queryset ( )
return settings . LANGUAGE_CODE
self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )
if msgs :
for name in MEDIA_TYPES :
else :
for attr , value in list ( attrs . items ( ) ) :
def _add_local_translations ( self ) :
token = parser . next_token ( )
message_context = message_context . strip ( "'" )
def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
try :
for dict_ in self . dicts :
if not path . exists ( target_dir ) :
self . add_filters ( result , filters )
for part in plural :
__all__ = [  'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' ,  'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' ,  'StopFutureHandlers'  ]
else :
from __future__ import unicode_literals
constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
if hasattr ( mw_instance , 'process_template_response' ) :
middle = middle [ len ( opening ) : ]
if isinstance ( widget , type ) :
return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
from datetime import date as real_date , datetime as real_datetime
self . fixture_object_count = 0
return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )
from importlib import import_module
self . stdout . write ( "  No optimizations possible." )
self . id = id
return errors
return self . _object_dict . get ( pk )
self . paths_to_remove . append ( tempdir )
continue
try :
return self . data . year
project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
return self . s
except Exception as e :
raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )
try :
if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :
args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
if _supported is None :
return False
if y == m == d == "0" :
try :
try :
elif name is not None and compile_function is None :
def id_for_label ( self , id_ ) :
self . interesting = _html_parser . interesting_cdata
self . flags = flags
if level is not None :
def templatize ( src , origin = None ) :
from collections import OrderedDict
except KeyError :
import zlib
return
current = current [ bit ]
current_fields = [ ]
if self . verbosity > 0 :
form . _meta . fields = list ( form . _meta . fields )
def handle ( self , ** options ) :
from django . utils . synch import RWLock
import sys
return
def next_char ( input_iter ) :
super ( _LazyModule , self ) . __init__ ( name )
else :
if os . name == 'nt' :
if filename . endswith ( '.mo' ) :
import flup
from django . conf import settings
self . can_write = threading . Semaphore ( 0 )
class Operator ( TokenBase ) :
extra_params = OrderedDict ( )
pattern_iter = next_char ( iter ( pattern ) )
elif bytes < MB :
for entry in os . listdir ( path ) :
result . append ( ( lang , priority ) )
if self . flags and not isinstance ( self . regex , six . string_types ) :
class HTMLParser ( _html_parser . HTMLParser ) :
self . changed_objects . append ( ( obj , form . changed_data ) )
return mark_safe ( six . text_type ( number ) )
import types
def resolve_error_handler ( self , view_type ) :
if hasattr ( f , 'seek' ) and callable ( f . seek ) :
if not self . use_ssl and self . use_tls :
from django . core . urlresolvers import set_script_prefix
output , hidden_fields = [ ] , [ ]
from django . core . management . sql import sql_custom
def cleanup_url ( url ) :
if self . _should_delete_form ( form ) :
else :
return len ( self . object_list )
for sql in custom_sql :
raise ValueError ( "Key '%s' not found" % key )
from django . core import serializers
self . first = left
def floatformat ( text , arg = - 1 ) :
timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :
new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
return int ( values [ 0 ] ) , ch
class SimpleUploadedFile ( InMemoryUploadedFile ) :
self . template_cache = { }
@ register . filter ( is_safe = True )
class LabelCommand ( BaseCommand ) :
return instance
self . _close_files ( )
value = field . clean ( value )
return ''
self . toks [ groupid ] = tok
def eval ( self , context ) :
content = File ( content )
return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
def start_serialization ( self ) :
pass
for cat in item [ 'categories' ] :
value = data . get ( name )
if age > max_age :
from django . conf import settings
sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + ".moves.urllib.response" ] = Module_six_moves_urllib_response ( __name__ + ".moves.urllib.response" )
else :
_encoding = None
os . makedirs ( top_dir )
attrs . update ( { 'maxlength' : str ( self . max_length ) } )
num = 0
except ValueError :
handler . addQuickElement ( "rights" , item [ 'item_copyright' ] )
pass
if self . active_readers == 0 and self . waiting_writers != 0 :
import django
def assertRegex ( self , * args , ** kwargs ) :
fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
class Command ( BaseCommand ) :
final_attrs = self . build_attrs ( attrs , name = name )
except base . DeserializationError :
try :
fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )
def from_dict ( cls , file_dict ) :
app = 'django'
if space == 0 :
mapped_tokens = [ ]
cache = caches [ cache_alias ]
def __new__ ( cls , name , bases , attrs ) :
except AttributeError :
with connections [ db ] . cursor ( ) as cursor :
queryset = queryset . filter ( pk__in = primary_keys )
class Enclosure ( object ) :
default_validators = [ validators . URLValidator ( ) ]
t = self . current_token
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + "%s, from %s" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
def run_from_argv ( self , argv ) :
def npath ( path ) :
class DebugLexer ( Lexer ) :
global templatetags_modules
if since <= 0 :
factor = 0
return tt . tm_isdst > 0
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
offset = offset . seconds // 60
if value in ( True , 'True' , '1' ) :
def create_token ( self , token_string , in_tag ) :
@ content . setter
for app in sorted ( commands_dict . keys ( ) ) :
widget = SelectMultiple
def _proxy_method ( self , * args , ** kwargs ) :
except KeyError :
from django . utils . deprecation import RemovedInDjango19Warning
LOCK_SH = fcntl . LOCK_SH
super ( CharField , self ) . __init__ ( * args , ** kwargs )
return value
return msg
value = ''
return - 1
@ register . tag
def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
if not _serializers :
_mtimes [ filename ] = mtime
def strip_entities ( value ) :
return value . serializable_value ( self . to_field_name )
if isinstance ( value , datetime . datetime ) :
def __str__ ( self ) :
self . limit_choices_to = limit_choices_to
if isinstance ( node , Node ) :
parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
self . stdout . write ( "    Installing custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )
return phone2numeric ( value )
else :
def unescape_string_literal ( s ) :
if version is None :
def code_changed ( ) :
if BLOCK_CONTEXT_KEY not in context . render_context :
try :
initial_value = self . initial . get ( name , field . initial )
return text
if value is not result :
app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
self . _varlist = varlist
yield force_text ( message )
s = m . group ( 0 )
def __contains__ ( self , key ) :
def _get_regex ( self ) :
global _standard_context_processors
_prefixes = local ( )
else :
else :
for path in all_locale_paths ( ) :
def __iter__ ( self ) :
except ImportError :
def validate ( self , value ) :
from django . forms . utils import *
def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
return result
import warnings
factory = c
def __str__ ( self ) :
match = kwarg_re . match ( bit )
sys . stdin . close ( )
if not self . _has_expired ( key ) :
self . subject = subject
from functools import reduce
except TemplateDoesNotExist :
self . parent_instance = parent_instance
return new_value
if as_ != 'as' :
config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
return True
raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the "default" database.' )
options = self . render_options ( choices , [ value ] )
exctype , value = exc_info [ : 2 ]
from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
def tzname ( self , dt ) :
def no_style ( ) :
args = [  'xgettext' ,  '-d' , domain ,  '--language=Python' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
Tok . num += 1
return '&' . join ( output )
return { 'csrf_token' : _get_val ( ) }
self . selected_fields = options . pop ( "fields" , None )
if stream :
u = dig2 . digest ( )
self . _iterator = iter ( value )
from django . core . management . base import BaseCommand
raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % ( migration_name , app_label ) )
def has_key ( self , key , version = None ) :
self . test_database = options . get ( 'test_database' , False )
import warnings
else :
except NameError :
encoding = encoding or settings . DEFAULT_CHARSET
def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
self . _lock = threading . RLock ( )
class SelectDateWidget ( Widget ) :
formatters [ name ] = self . configure_formatter (  formatters [ name ] )
self . digits = digits
return '%02d' % self . G ( )
filemsg = ''
while True :
try :
def to_python ( self , value ) :
self . url_name = url_name
self . stdout . write ( "  Optimized from %s operations to %s operations." % ( len ( operations ) , len ( new_operations ) ) )
def get_unbound_function ( unbound ) :
return self . file . closed
class Command ( AppCommand ) :
def _generator ( ) :
try :
self . xml . startElement ( "natural" , { } )
def delete ( self , key , version = None ) :
from django . utils . encoding import force_text
autoescape = autoescape and not isinstance ( value , SafeData )
return json . loads ( data . decode ( 'latin-1' ) )
DIGIT_PATTERN = re . compile ( r'^\d+$' )
def _has_changed ( self , initial , data ) :
if options [ 'app_label' ] and options [ 'migration_name' ] :
out . write ( blankout ( part , 'P' ) )
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
self . status_code = status
return s . encode ( "latin-1" )
if initial is not None :
else :
get_language = lambda : settings . LANGUAGE_CODE
def to_python ( self , value ) :
elif ch == '[' :
if app_list_value is not None :
self . error ( self . cmd . missing_args_message )
break
app_list [ app_config ] = None
return '%06d' % self . data . microsecond
str_number = str_number [ 1 : ]
return bool ( ret )
lookup_str = callback . __module__ + "." + callback . __name__
return j
if val is None :
self . _mark_post_parse_error ( )
if use_natural_keys :
self . pointer = i
nesting -= 1
sorted_items = sorted ( kwds . items ( ) )
def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
new_args . append ( args [ : ] + i_args )
candidate = str ( candidate )
def ifchanged ( parser , token ) :
try :
for node in self . nodelist_loop :
try :
self [ 'Content-Type' ] = content_type
return remove_tags ( value , tags )
import operator
return self . getlist ( key )
else :
if cache_timeout < 0 :
def has_error ( self , field , code = None ) :
return item in list ( self )
html_message = reporter . get_traceback_html ( ) if self . include_html else None
return field . widget . value_from_datadict ( self . data , self . files , prefix )
self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )
comment_lineno_cache = None
if primary_keys :
try :
for pk in value :
if j == - 1 :
self . extra_context = extra_context or { }
return True
def widget_attrs ( self , widget ) :
widget = ClearableFileInput
return data . get ( name , None )
location = kwargs . pop ( 'LOCATION' , '' )
if not data :
os . makedirs ( basedir )
raise NoReverseMatch ( "%s is not a registered namespace" %  key )
self . object = obj
class URLValidator ( RegexValidator ) :
def __init__ ( self , exception ) :
raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
try :
if self . is_bound :
def __init__ ( self , name , value , attrs , choices ) :
return None
self . invalid_block_tag ( token , command , parse_until )
result = getattr ( t , translation_function ) ( eol_message )
try :
app_template_dirs . append ( template_dir )
return { }
def __init__ ( self , timezone ) :
return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
if 'charset' in content_params :
var , constant = match . group ( "var" , "constant" )
result = self . configure_custom ( config )
def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
def tokenize ( self ) :
template_with_clear = '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'
import warnings
self . add_arguments ( parser )
elif '=' in part :
def _existing_object ( self , pk ) :
raise EmptyPage ( 'That page contains no results' )
self . verbatim = 'end%s' % block_content
def render ( self , name , value , attrs = None , choices = ( ) ) :
from io import BytesIO
def to_python ( self , value ) :
class DTDForbidden ( DefusedXmlException ) :
if not context_instance :
def is_rendered ( self ) :
name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
field_params [ 'max_length' ] = int ( row [ 3 ] )
if not self . _has_expired ( key ) :
result = self . configurator . convert ( value )
raise ValidationError ( error_message , code = 'invalid' )
super ( BaseMemcachedCache , self ) . __init__ ( params )
return value
if latest_date is None or item_date > latest_date :
template_dirs = settings . TEMPLATE_DIRS
def __repr__ ( self ) :
raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
def IE_sanitize ( self , filename ) :
match = self . regex . search ( path )
sup_cls = super ( cls , self )
try :
match = self . regex . search ( path )
return list ( iter ( self ) )
import sys
if safe is not None :
import sys
set_script_prefix ( get_script_name ( environ ) )
self . context = context
else :
for handler in handlers :
def cleaned_data ( self ) :
defaults [ 'data' ] = self . data
try :
return t . render ( context_instance )
@ register . tag
self . open ( )
continue
def parse ( self , parse_until = None ) :
return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
raise NotImplementedError ( 'subclasses of Storage must provide an exists() method' )
naiveip_re = re . compile ( r"""^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$""" , re . X )
else :
if tok . next :
lexer_class , parser_class = DebugLexer , DebugParser
def do_for ( parser , token ) :
class URLField ( CharField ) :
k , v = x , True
except AttributeError :
elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :
return get_resolver ( urlconf ) . resolve ( path )
else :
self . reader_enters ( )
from_email = sanitize_address ( email_message . from_email , email_message . encoding )
proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :
re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )
id_ = widget . attrs . get ( 'id' ) or self . auto_id
return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False
parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
def add_arguments ( self , parser ) :
if form . errors :
return ZERO
import binascii
statements = sql_indexes ( app_config , self . style , connection )
nodelist = parser . parse ( ( 'endspaceless' , ) )
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
def reset ( self ) :
def enter_command ( self , command , token ) :
raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
return key in self . dicts [ - 1 ]
return settings . TEMPLATE_STRING_IF_INVALID % self . var
if data_list [ 0 ] in self . empty_values :
def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :
self . encoding = content_params [ 'charset' ]
return self . load_template ( template_name , template_dirs )
return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
raise TemplateSyntaxError ( "'now' statement takes one argument" )
try :
def update ( self , * args , ** kwargs ) :
def read ( self , size = None ) :
if six . PY2 :
from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
raise
return False
message = 'use only numbers, letters and underscores'
return 'rd'
def center ( value , arg ) :
super ( Command , self ) . add_arguments ( parser )
if callable ( data ) :
if isinstance ( s , ( SafeData , EscapeData ) ) :
self . _populated = False
if self . use_ssl and self . use_tls :
if settings . SECURE_PROXY_SSL_HEADER :
self . verbosity = options . get ( 'verbosity' )
foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
for model in app_models :
def handle ( self , * app_labels , ** options ) :
try :
self . render_context = RenderContext ( )
class AppRegistryNotReady ( Exception ) :
def b ( self ) :
return ugettext ( "Please correct the duplicate values below." )
if self . verbosity >= 1 :
result = middleware . process_request ( request )
raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' %  ( bits [ 0 ] , option ) )
expires = typecast_timestamp ( str ( expires ) )
extend = complain
super_set = super ( SortedDict , self ) . __setitem__
else :
try :
return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
match = kwarg_re . match ( bits [ 0 ] )
from wsgiref . util import FileWrapper
data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
def __call__ ( self , f ) :
if indent :
callable = callable
try :
@ property
if len ( bits ) not in ( 2 , 3 ) :
return self . _get_image_dimensions ( ) [ 1 ]
dig1 . update ( u )
return response
def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :
i = existing . index ( name )
REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
if hasattr ( request , 'urlconf' ) :
if data is None :
raise CommandError ( "Unknown application: %s" % app_label )
state [ 'cookies' ] = str ( state [ 'cookies' ] )
self . command_stack . pop ( )
if exit_code != 3 :
if self . feed [ 'feed_url' ] is not None :
self . _cache [ key ] = value
from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
if value in self . empty_values :
TOKEN_BLOCK = 2
raise StopIteration ( )
old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
del self [ 'content-type' ]
plural = [ ]
def __init__ ( self , value , text ) :
del cmd_options [ 'args' ]
if not self . valid_value ( val ) :
self . label = pretty_name ( name )
errors = [ ]
parts = [ ]
return self . forms [ index ]
from django . core . exceptions import ImproperlyConfigured
super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )
new_filenames . append ( os . path . join ( dirpath , filename ) )
return not settings . DEBUG
match = date_re . match ( value )
new_context . _reset_dicts ( values )
pass
return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
if isinstance ( other , Promise ) :
__setitem__ = complain
def render_css ( self ) :
try :
httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
def sync_apps ( self , connection , app_labels ) :
elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' ,  'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :
def flush ( self ) :
return [ smart_text ( val ) for val in value ]
re_newlines = re . compile ( r'\r\n|\r' )
validate_ipv6_address ( value )
except OSError as e :
if self . help :
@ property
logging . _acquireLock ( )
import calendar
return size
self . _out = out
except socket . error as e :
libraries [ library_name ] = lib
except IndexError :
bpython . embed ( )
raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )
def handle ( self , * args , ** options ) :
if 'media' not in attrs :
return pgettext_lazy ( self . message_context , value )
def handle ( self , * args , ** options ) :
t -= 1
for obj in PythonDeserializer ( objects , ** options ) :
def timeuntil ( d , now = None ) :
try :
value = values . get ( value . lower ( ) , value )
default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
fd = sys . stdin
BLOCK_TAG_END = '%}'
plan = executor . migration_plan ( targets )
if isinstance ( form . _meta . fields , tuple ) :
return super ( FileInput , self ) . render ( name , None , attrs = attrs )
from io import BytesIO
raise TemplateSyntaxError ( "'%s' tag takes only one argument" % bits [ 0 ] )
except NotImplementedError :
if not buf :
since = delta . days * 24 * 60 * 60 + delta . seconds
if not hasattr ( self , '_queryset' ) :
r = r [ : 23 ] + r [ 26 : ]
error_dict . setdefault ( field , [ ] ) . extend ( error_list )
def dummy ( * args , ** kwargs ) :
self . start_object ( obj )
from django . core . management . base import BaseCommand , CommandError
def add_arguments ( self , parser ) :
odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
from django . core . management . base import CommandError , BaseCommand
else :
class HttpResponseNotModified ( HttpResponse ) :
select_html = s . render ( field % name , val , local_attrs )
targets = [ ( app_label , migration . name ) ]
self . _callback_strs . add ( lookup_str )
handler . addQuickElement ( "copyright" , self . feed [ 'feed_copyright' ] )
try :
for filename in locale_filenames :
number_value = rhs
if confirm not in ( 'yes' , 'no' ) :
format_key = ''
self . name = name
return list_ , False
parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
base_url += '/'
return _default
else :
password = force_bytes ( password )
return [ ]
secret = force_bytes ( secret )
def __init__ ( self , field ) :
if want_unicode :
self . fed . append ( '&#%s;' % name )
self . __dt = dt
from __future__ import unicode_literals
def __next__ ( self ) :
directories . append ( entry )
if name in lib . tags :
def divisibleby ( value , arg ) :
return formataddr ( ( nm , addr ) )
zfile . flush ( )
if reverse :
if options [ "daemonize" ] . lower ( ) in ( 'true' , 'yes' , 't' ) :
pid = 1
def default ( self , o ) :
raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
from django . core . wsgi import get_wsgi_application
if format not in _serializers :
return final_output
dirs . append ( '' )
except LookupError :
for model in model_list :
def _format_value ( self , value ) :
class CacheClass ( FileBasedCache ) :
response = self . get_exception_response ( request , resolver , 400 )
from __future__ import unicode_literals
found = getattr ( found , frag )
self . urlconf_name = urlconf_name
os . makedirs ( self . default_locale_path )
if self . has_key ( key , version ) :
t = select_template ( file_name )
if self . data . minute == 0 and self . data . hour == 0 :
self . base_location = location
if inplural :
if self . use_argparse :
def pgettext ( context , message ) :
ipv4_address = "%d.%d.%d.%d" % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
if six . PY2 :
def __init__ ( self ) :
if os . name == 'posix' :
else :
try :
from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
def __copy__ ( self ) :
def COOKIES ( self ) :
super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
self . stdout . write ( statement )
inner . update ( password . translate ( hmac . trans_36 ) )
def as_p ( self ) :
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
value = force_str ( value )
return RequestContext ( self . _request , context , current_app = self . _current_app )
if self . id_for_label :
return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
os . makedirs ( filename )
with self . mutex :
initial_value = initial if initial is not None else ''
try :
urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
@ register . tag
@ register . tag
conditions_nodelists = [ ( condition , nodelist ) ]
filter_name = getattr ( func , '_filter_name' , None )
self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )
import re
self . verbosity = options . get ( 'verbosity' )
try :
tok = '"' + guts + '"'
def __len__ ( self ) :
value = ''
return msgid
if arg is None :
for i , widget in enumerate ( self . widgets ) :
self . charset = charset
number_value = rhs [ number ]
while s [ : 1 ] == b';' :
self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
class lazy_property ( property ) :
def configure_logger ( self , name , config , incremental = False ) :
self . stdout . write ( " [X] %s" % title )
def with_metaclass ( meta , * bases ) :
if exclude and f . name in exclude :
return do_translate ( message , 'gettext' )
import re
new_class . declared_fields = declared_fields
import yaml
from django . core . management . base import BaseCommand , CommandError
self . _current = None
value = int ( str ( value ) )
return callback [ : dot ] , callback [ dot + 1 : ]
def close ( self ) :
pass
self . tag ( function_name , compile_func )
def _create_attachments ( self , msg ) :
if new_name . endswith ( '_' ) :
if six . PY2 :
ip ( )
emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
if not isinstance ( data , basestring ) :
raise
from django . db import connection
self . content_type = content_type
walk_to_end ( ch , pattern_iter )
if not ( bits . scheme and bits . netloc ) :
else :
return len ( self . get_queryset ( ) )
return self . choice_value in self . value
requires_system_checks = False
if role in PALETTES [ NOCOLOR_PALETTE ] and definition :
arg_vals = [ ]
if end is not None :
ugettext_lazy = lazy ( ugettext , six . text_type )
except ( ValueError , OverflowError , InvalidOperation ) :
height = property ( _get_height )
if settings . is_overridden ( 'MANAGERS' ) :
def token_kwargs ( bits , parser , support_legacy = False ) :
return '\n' . join ( output )
if data in ( None , FILE_INPUT_CONTRADICTION ) :
return '\n' . join ( statements )
msg += '\n'
errors = [ ]
if data_list :
class Debug ( CheckMessage ) :
return value
weight += 1
class TemplateLiteral ( Literal ) :
except UnicodeEncodeError :
return version + delta
if _standard_context_processors is None :
try :
from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
else :
try :
self . _rollback = len ( boundary ) + 6
return "%s: %s%s%s" % ( obj , id , self . msg , hint )
self . active_writers += 1
from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
return duplicate
self . db_table = table
import sys
class IfNode ( Node ) :
current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
def _cull ( self ) :
yield "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"
if self . current_token is not EndToken :
for key in self . keyOrder :
new_value = [ ]
@ stringfilter
del moves . __dict__ [ name ]
bits = token . split_contents ( ) [ 1 : ]
self [ 'Allow' ] = ', ' . join ( permitted_methods )
safe_input = isinstance ( text , SafeData )
PY3 = sys . version_info [ 0 ] == 3
except ValidationError as e :
def __ne__ ( self , other ) :
if self . interactive :
guessed_filename = used_name
if not hasattr ( other_dict , '__getitem__' ) :
num_args += 1
with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
def method_decorator ( decorator ) :
subcommand = self . argv [ 1 ]
from django . utils import six
else :
def delete ( self , key , version = None ) :
MAXSIZE = int ( ( 1 << 63 ) - 1 )
value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
obj = force_str ( self . obj )
yield "# This is an auto-generated Django model module."
message = '' . join ( tokens )
__all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )
date = datetime_safe . new_datetime ( date )
if labels and f . name in labels :
super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
collect . extend ( _builtin_context_processors )
return t
return s
parts . append ( value )
return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
key = self . make_key ( key , version = version )
self . _cache = _caches . setdefault ( name , { } )
def ipython ( self ) :
from django . utils import six
while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
return SafeBytes ( t )
return None
else :
self . dicts = dicts
if hasattr ( self . file , 'size' ) :
def extract ( self ) :
sys . stdout . write ( self . main_help_text ( ) + '\n' )
return self . file . name
if base64d [ : 1 ] == b'.' :
git_changeset = get_git_changeset ( )
return datetime . datetime . strptime ( force_str ( value ) , format )
else :
s = s [ : site ] + syear + s [ site + 4 : ]
self . can_read . release ( )
from collections import OrderedDict
if i >= self . initial_form_count ( ) and self . initial_extra :
else :
pass
widget = self . field . widget
except ( ValueError , TypeError ) :
else :
from django . db import connections , DEFAULT_DB_ALIAS
_moved_attributes = [ ]
def strptime ( self , value , format ) :
boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
return nodes
else :
class BooleanField ( Field ) :
output_transaction = True
def is_iterable ( x ) :
break
with connections [ db ] . cursor ( ) as cursor :
end = len ( s )
else :
self . dicts . append ( value )
return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
MAXSIZE = int ( ( 1 << 31 ) - 1 )
def call_command ( name , * args , ** options ) :
seen_models . add ( model )
else :
from django . utils . functional import lazy
else :
except KeyError :
return self . _urlconf_module
class EventHandler ( pyinotify . ProcessEvent ) :
def _mark_post_parse_error ( self ) :
return bytes ( self ) % rhs
os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )
else :
value = field . _get_val_from_obj ( obj )
try :
elif isinstance ( timezone , six . string_types ) and pytz is not None :
self . func = func
form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
gettext_lazy = lazy ( gettext , str )
style = no_style ( )
self . _response_middleware . insert ( 0 , mw_instance . process_response )
context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
httpd . set_app ( wsgi_handler )
context_extras [ 'LANGUAGE_BIDI' ] = translation . get_language_bidi ( )
groupid = "t%d" % tok . id
step = 'any'
MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )
handler . addQuickElement ( "name" , item [ 'author_name' ] )
except TemplateDoesNotExist :
attrs [ 'widgets' ] = widgets
for i , handler in enumerate ( handlers ) :
EscapeUnicode = EscapeText
pass
return self . __dt ,
forms = ' ' . join ( form . as_ul ( ) for form in self )
except TemplateDoesNotExist :
self . can_read . release ( )
def ip_address_validators ( protocol , unpack_ipv4 ) :
pass
i += 1
def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :
except KeyError :
class EmailField ( CharField ) :
options , args = parser . parse_known_args ( self . argv [ 2 : ] )
attrs [ 'class' ] = self . form . required_css_class
if not email_messages :
if not rest :
return val , encoded
return data
invalid_var_format_string = None
def copy ( self ) :
def __init__ ( self , file ) :
os . chmod ( filename , new_permissions )
import pylibmc
help = "Prints the CREATE TABLE SQL statements for the given app name(s)."
raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
def wrapper ( * args , ** kwargs ) :
msg = "Execution of %s failed" % self . program
from django . db . migrations . loader import MigrationLoader
return self . _request
nodelist_false = parser . parse ( ( end_tag , ) )
script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )
if not inhibit_post_migrate :
sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )
return tpl . format ( self . name , self . sysid , self . pubid )
raise CommandError (  "errors happened while running xgettext on %s\n%s" %  ( self . file , errors ) )
def get ( self , key , default = None , version = None ) :
if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
else :
if _file is None :
app_dirs = [ ]
return force_text ( ngettext ( singular , plural , number ) )
return ''
new_keys = [ self . make_key ( x , version = version ) for x in keys ]
def handle ( self , ** options ) :
def __init__ ( self , content_type = None , status = None , reason = None ) :
if converter :
elif args [ 1 ] == '304' :
self . view_name = view_name
convert = {  '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '__gt__' , lambda self , other : not self <= other ) ] ,  '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '__gt__' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
from django . utils . functional import allow_lazy
self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
def is_valid_ipv6_address ( ip_str ) :
if not incremental :
if isinstance ( s , ( six . text_type , Promise ) ) :
return dummy ( )
from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
class ModelMultipleChoiceField ( ModelChoiceField ) :
statements = sql_create ( app_config , self . style , connection )
def __repr__ ( self ) :
handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )
if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :
self . _populate ( )
return data . get ( name , None )
if hasattr ( content , 'temporary_file_path' ) :
class CsrfTokenNode ( Node ) :
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = options . settings
_fields_ = [  ( 'Internal' , ULONG_PTR ) ,  ( 'InternalHigh' , ULONG_PTR ) ,  ( '_offset_union' , _OFFSET_UNION ) ,  ( 'hEvent' , HANDLE ) ]
class DjangoJSONEncoder ( json . JSONEncoder ) :
self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
import decimal
if value in self . empty_values :
return fext
value = tuple ( value )
contents = one_percent_re . sub ( '%%' , t . contents )
parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
translation . _info = { }
elif k == 'bg' :
elif not self . required and not value :
@ encoding . setter
self . value = value
return value or arg
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
class date ( real_date ) :
@ encoding . setter
command , source = self . command_stack . pop ( )
def __new__ ( mcs , name , bases , attrs ) :
return from_current_timezone ( result )
except ( KeyError , TypeError ) :
self . years = range ( this_year , this_year + 10 )
def close ( self ) :
def __contains__ ( self , item ) :
if lang_code not in _supported and replacement in _supported :
return self . streaming_content
try :
raise TemplateSyntaxError ( "'templatetag' statement takes one argument" )
context_match = context_re . match ( imatch . group ( 2 ) )
schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]
_load_serializers ( )
lead = lead + opening
return False
strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
def filepath_to_uri ( path ) :
with transaction . atomic ( using = self . using ) :
return response
def __init__ ( self , context , * args , ** kwargs ) :
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
with self . _lock . reader ( ) :
with open ( filepath , 'rb' ) as fp :
def _get_scheme ( self ) :
name , value = match . groups ( )
def render ( self , context ) :
return len ( list ( email_messages ) )
for migration in app_migrations :
def __init__ ( self , attrs = None , check_test = None ) :
parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' )
self . saved_forms = [ ]
else :
try :
self . template_cache . clear ( )
name = s . split ( '.' )
use_func = False
raise TemplateSyntaxError ( error_msg )
if ending and not msg . endswith ( ending ) :
SafeUnicode = SafeText
n = int ( idx )
retval = handler . upload_complete ( )
block = type ( self ) ( block . name , block . nodelist )
if kwargs :
def initial_form_count ( self ) :
except Exception :
top_dir = path . join ( os . getcwd ( ) , name )
from __future__ import unicode_literals
return from_current_timezone ( result )
return attr
return Variable ( path ) . resolve ( context )
if callable ( lookup_view ) :
emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
if buffer_ :
raise BadHeaderError ( "Header values can't contain newlines (got %r for header %r)" % ( val , name ) )
link [ NEXT ] = root
return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
elif var is None :
year += 2000
return mark_safe ( six . text_type ( value ) )
output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
from django . utils import six
def handle_field ( self , obj , field ) :
params , varargs , varkw , defaults = getargspec ( func )
self . _upload_handlers = upload_handlers
try :
continue
program_options = [ '--check-format' ]
return unicode ( s . replace ( r'\\' , r'\\\\' ) , "unicode_escape" )
self . validators . append ( validators . MinValueValidator ( min_value ) )
if not os . path . isdir ( basedir ) :
chunk = base64 . b64decode ( chunk )
callback , param_dict = resolver . resolve_error_handler ( status_code )
handler . addQuickElement ( "title" , self . feed [ 'title' ] )
length = int ( arg )
self . clear ( )
migration_string = writer . as_string ( )
def ungettext ( singular , plural , number ) :
def add_arguments ( self , parser ) :
return ( t [ 0 ] . lower ( ) , t [ 1 ] )
def __next__ ( self ) :
from shutil import copystat
over_chunk = field_stream . read ( 4 - over_bytes )
else :
def parse ( self ) :
def autodiscover_modules ( * args , ** kwargs ) :
if not template_dirs :
if value is not result :
class Command ( BaseCommand ) :
for plan_node in graph . forwards_plan ( node ) :
self . _done = False
from django . utils . translation import ugettext_lazy
if not os . access ( self . file_path , os . W_OK ) :
except Resolver404 as e :
except ( OverflowError , ValueError ) :
self . fields = fields
if sub_match :
file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
if cmatch :
except ( DatabaseError , IntegrityError ) as e :
for d in self . dicts [ - 1 ] :
if hasattr ( settings , "SERIALIZATION_MODULES" ) :
return func
self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
try :
header = chunk [ : header_end ]
try :
if custom_sql :
to_python = self . _get_to_python ( pk_field )
want_unicode = True
if self . verbosity > 0 :
self . inverse_match = inverse_match
except StopIteration :
excluded_apps . add ( app_config )
base36 = BaseConverter ( BASE36_ALPHABET )
else :
column_name = row [ 0 ]
warnings . warn (  '"requires_model_validation" is deprecated '  'in favor of "requires_system_checks".' ,  RemovedInDjango19Warning )
return self . stream . getvalue ( )
def escape_filter ( value ) :
major = get_major_version ( version )
return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
else :
pass
self . _body = self . read ( )
def _send ( self , email_message ) :
class SuspiciousOperation ( Exception ) :
if self . can_delete and self . _should_delete_form ( form ) :
for member in members :
combined = Media ( )
return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
token . source = self . origin , source
try :
return value
stats = [ 0 , 0 ]
excluded_apps = set ( )
return self . objects
def check ( self , app_configs = None , tags = None , display_num_errors = False ) :
self . unpack_ipv4 = unpack_ipv4
def regex ( self ) :
value , converted = convert_old_style_list ( value )
def __init__ ( self , language , deactivate = False ) :
def render ( self , name , value , attrs = None ) :
if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
asvar = None
chunks . append ( bytes )
if str_number [ 0 ] == '-' :
self . regexes = { }
class DjangoTranslation ( gettext_module . GNUTranslations ) :
try :
self . indent ( 1 )
import re
self . pubid = pubid
context [ self . asvar ] = result
m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )
self . position += len ( output )
lib = libraries . get ( library_name , None )
duplicate = super ( Context , self ) . __copy__ ( )
if filename not in _mtimes :
return final_path
class Tok ( object ) :
return False
expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
if isinstance ( query , MultiValueDict ) :
NamedTemporaryFile = TemporaryFile
module = importlib . import_module ( '.%s' % flup_module , 'flup' )
validate_ipv46_address ( ip_address )
yield d
for name in MEDIA_TYPES :
def display ( self ) :
class CheckboxChoiceInput ( ChoiceInput ) :
self . extra_context = kwargs . pop ( 'extra_context' , { } )
if os . path . exists ( fname ) :
from io import BytesIO
try :
class SelectMultiple ( Select ) :
assert not isinstance ( to , six . string_types ) , '"to" argument must be a list or tuple'
self . validate_unique ( )
if version is None :
m = plural_forms_re . search ( fp . read ( ) )
if o . microsecond :
if getattr ( obj , field . name ) is not None :
except ValidationError as e :
def __exit__ ( self , * args , ** kwargs ) :
break
from django . utils . translation import ugettext_lazy as _
pass
self . _remaining = length
from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
MEDIA_TYPES = ( 'css' , 'js' )
else :
if isinstance ( offset , timedelta ) :
from django . utils import timezone
except ImportError :
if formfield :
if hasattr ( middleware , 'process_exception' ) :
del self . cleaned_data [ field ]
file_obj = handler . file_complete ( counters [ i ] )
def to_python ( self , value ) :
sys . stderr . write ( "  as a FastCGI application, you will need to get flup from\n" )
return False
name = self . html_initial_name
six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
if k in seen :
if 'forloop' in context :
option_value = ''
class MultiValueDictKeyError ( KeyError ) :
handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
url = None
def __iter__ ( self ) :
class DateTimeField ( BaseTemporalField ) :
models = app_config . get_models ( include_auto_created = True )
if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :
yes , no , maybe = bits
content_disposition = info . get ( 'content-disposition' )
if hasattr ( out , 'isatty' ) and out . isatty ( ) :
self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
_add_doc ( reraise , """Reraise an exception.""" )
origin = StringOrigin ( template_string )
for item in values :
def get ( self , key , default = None ) :
import os
return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
import datetime
if kwargs :
class RequireDebugFalse ( logging . Filter ) :
def send_messages ( self , email_messages ) :
def _setup ( self ) :
return False
name = self . _save ( name , content )
if cleaned_data is not None :
thefile = '%s.py' % self . file
@ property
out . write ( blankout ( part , 'S' ) )
def fset ( instance , value , name = fset . __name__ ) :
if _ipv6 :
dirs . append ( app_dir )
pythonrc = os . path . expanduser ( pythonrc )
from django . template . loader import get_template , select_template
else :
if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :
return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
class DefaultStorage ( LazyObject ) :
pass
if not ext . startswith ( '.' ) :
target = parser . compile_filter ( bits [ 1 ] )
return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
value = getattr ( obj , field . get_attname ( ) )
def register_serializer ( format , serializer_module , serializers = None ) :
return apps . get_model ( model_identifier )
elif value is False :
msg [ 'Cc' ] = ', ' . join ( self . cc )
def render ( self , context ) :
return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
KB = 1 << 10
raise CommandError ( 'Your Python does not support IPv6.' )
from django . utils import six
comment_lineno_cache = t . lineno
content_type = "%s; charset=%s" % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
if hasattr ( base , 'declared_fields' ) :
def __init__ ( self , include_html = False , email_backend = None ) :
return None
self . save_as_new = save_as_new
parser . __loaded_blocks . append ( block_name )
except self . LibraryValueNotFoundException :
cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )
from __future__ import unicode_literals
def __str__ ( self ) :
import fcntl
else :
options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in  parser . option_list ]
try :
print ( "Can't import flup." + flup_module )
return escape ( output )
raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
raise ValueError ( "JSON can't represent timezone-aware times." )
if e . errno == errno . ENOENT :
def closed ( self ) :
if bits [ 2 ] == 'parsed' :
LPOVERLAPPED = POINTER ( OVERLAPPED )
@ register . filter ( "timeuntil" , is_safe = False )
return self . _encoding
fixture_name = os . path . basename ( fixture_name )
result ^= _bin_to_long ( u )
self . _callback_str = prefix + '.' + self . _callback_str
self . __starttag_text = rawdata [ i : endpos ]
return URLNode ( viewname , args , kwargs , asvar )
qs = queryset . filter ( ** { self . fk . name : self . instance } )
self . _validate_unique = True
def __init__ ( self , message = None , code = None , whitelist = None ) :
except KeyError :
raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
HTMLParseError = _html_parser . HTMLParseError
if six . PY3 or os . name == 'nt' :
self . _archive . extract ( to_path )
if response . has_header ( 'Vary' ) :
raise
def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :
if ( connections [ db ] . features . needs_datetime_string_cast and not  isinstance ( current_expires , datetime ) ) :
zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )
return format_html (  '<ul class="{0}">{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
if self . app_label and app_config . label != self . app_label :
else :
raise AttributeError
if value in self . empty_values and self . required :
self . format = format if format else None
class ObjectDoesNotExist ( Exception ) :
from __future__ import unicode_literals
raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
from . . import Warning , register , Tags
yield self [ name ]
raise
errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
def __init__ ( self , template_string , origin ) :
handler . addQuickElement ( "description" , self . feed [ 'description' ] )
@ stringfilter
if node . must_be_first and nodelist :
if not commit :
return self . _reverse_dict [ language_code ]
raise
iterkeys = _iterkeys
end_tag = 'end' + bits [ 0 ]
def __delitem__ ( self , header ) :
_js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )
for form in valid_forms :
hour , minute = divmod ( timezone , 60 )
value = self . decompress ( value )
self . load_middleware ( )
else :
if timeout == DEFAULT_TIMEOUT :
dirnames . remove ( dirname )
return ''
obj = Model ( ** data )
from django . views import debug
self . keyOrder = [ ]
@ property
@ cached_property
offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
self . __locale = to_locale ( language )
from django . utils import six
day_of_year = self . z ( )
if not callback :
from django . core . servers . basehttp import run , get_internal_wsgi_application
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
self . _dir = os . path . abspath ( dir )
mail . attach_alternative ( html_message , 'text/html' )
if m :
def __del__ ( self ) :
raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
if hasattr ( os . path , 'samefile' ) :
return form
elif count > 1 :
self . _request = request
class FieldError ( Exception ) :
for name , value in props . items ( ) :
try :
if table_name_filter is not None and callable ( table_name_filter ) :
return VerbatimNode ( nodelist . render ( Context ( ) ) )
class BaseCommand ( object ) :
current = settings . TEMPLATE_STRING_IF_INVALID
bits = bits [ : - 2 ]
if constant_arg :
pieces = accept_language_re . split ( lang_string . lower ( ) )
def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :
__contains__ = has_key
m = regex . search ( text , pos )
return number
self . keyOrder . append ( key )
view = viewname
elif msg and visible_issue_count :
loader = MigrationLoader ( connection )
def __bytes_cast ( self ) :
class AdminEmailHandler ( logging . Handler ) :
super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
now = datetime . now ( )
return self . add_truncation_text ( ' ' . join ( words ) , truncate )
substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )
self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
else :
extra_classes . add ( self . form . error_css_class )
return self . dicts [ - 1 ] . get ( key , otherwise )
from django . core . mail . backends . base import BaseEmailBackend
if self . verbosity >= 1 :
return iter ( self . _container )
_PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
if settings . DEBUG :
self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
return getattr ( settings , format_type )
from django . core . serializers . json import DjangoJSONEncoder
name = os . path . basename ( name )
if transaction . get_autocommit ( self . using ) :
return None
self . _queryset = queryset
self . help_texts = getattr ( options , 'help_texts' , None )
from django . forms . widgets import *
return None
return value
data = obj_dict . pop ( '_data' , { } )
migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
self . validate_key ( key )
if len ( app_labels ) > 1 and primary_keys :
return do_ifequal ( parser , token , True )
from django . conf import settings
else :
else :
try :
new_obj = func ( obj , * arg_vals )
url = url . replace ( '\\' , '/' )
return result
return base , ext
def open ( self ) :
if self . verbosity > 0 :
def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
self . _css = { }
import decimal
value = True
super ( DTDForbidden , self ) . __init__ ( )
from django . db . models . fields import Field as ModelField
return True
from django . utils . six . moves . urllib . parse import urlparse
found = True
del logging . _handlerList [ : ]
if not priority :
def __repr__ ( self ) :
from django . utils . six . moves import _thread as thread
return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
use_func = True
def rendered_content ( self ) :
if new_attr is None :
def __init__ ( self ) :
break
if hidden_fields :
return mark_safe ( self . render ( self . context ) )
Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
def id_for_label ( self , id_ ) :
if all_issues :
statements = sql_destroy_indexes ( app_config , self . style , connection )
alter_sql = [ ]
mail . send ( fail_silently = fail_silently )
if not os . path . exists ( potfile ) :
field = self . fields [ fieldname ]
lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , line )
except StopUpload as e :
def __init__ ( self , host , * args , ** kwargs ) :
response [ 'Content-Length' ] = '0'
self . html_initial_id = form . add_initial_prefix ( self . auto_id )
urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
for node in self . nodelist_loop :
p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
open ( init_path , "w" ) . close ( )
return str ( name ) , val
ext = base [ - 4 : ] + ext
class URLNode ( Node ) :
statements = sql_delete ( app_config , self . style , connection )
def as_data ( self ) :
initial_set = set ( force_text ( value ) for value in initial )
locks . unlock ( fd )
errors . extend ( new_errors )
try :
cursor = connection . cursor ( )
addr = '@' . join ( [ localpart , domain ] )
from django . conf import settings
for field in _parse_date_fmt ( ) :
if message_context [ 0 ] == '"' :
messages . update ( getattr ( c , 'default_error_messages' , { } ) )
class FileBasedCache ( BaseCache ) :
def get_format ( format_type , lang = None , use_l10n = None ) :
def date ( self ) :
if not self . form . is_bound :
return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
try :
request = sys . modules [ __name__ + ".moves.urllib_request" ]
def _has_changed ( self , initial , data ) :
char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
import warnings
else :
from django . utils . six . moves import xrange
def attach_file ( self , path , mimetype = None ) :
def __setitem__ ( self , key , value ) :
return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
if decimals > digits :
return m + Media ( definition )
return self . _render ( context )
result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )
self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ]
def fget ( instance , instance_type = None , name = fget . __name__ ) :
if arg is None :
if not indent :
import stat
from copy import copy
else :
import sys
FILE = "file"
self . stdout . write ( "  Unapplying %s..." % migration , ending = "" )
return len ( self . forms )
if form . _meta . widgets :
key = self . make_key ( key , version = version )
import datetime
pass
class WithNode ( Node ) :
raise TemplateSyntaxError ( "'autoescape' tag requires exactly one argument." )
def __init__ ( self , takes_context , args , kwargs ) :
output . append ( options )
msg = ""
def handle_app_config ( self , app_config , ** options ) :
kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
header = header . upper ( ) . replace ( '-' , '_' )
def to_python ( self , value ) :
binary_type = bytes
sys . stdout . close ( )
self . stream . write ( "\n" )
become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )
from django . utils . itercompat import is_iterable
return scheme in self . url_schemes
for name in sorted ( handlers ) :
from django . db . migrations . writer import MigrationWriter
pdict [ name ] = value
self . cleaned_data [ name ] = value
self . s = s
if has_old_option :
from django . db . migrations . loader import MigrationLoader
result . parent = self
except DatabaseError :
while k < endpos :
d = ''
pk_value = getattr ( self . instance , self . fk . rel . field_name )
if len ( initial ) != len ( data ) :
return filename , display_url
if not self . DIGIT_PATTERN . match ( idx ) :
iterator = iter ( stream_or_iterable )
s = s . replace ( '\\' , '\\\\' )
for i , line in enumerate ( lines ) :
values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
import os
if migration_name == "zero" :
def combine ( cls , date , time ) :
db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
self . xml . endElement ( "object" )
if settings . configured :
warning = 'ImmutableList object is immutable.'
@ upload_handlers . setter
def get_default_prefix ( cls ) :
name = args [ - 1 ]
decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )
from django . db . migrations . loader import AmbiguityError
if result is not None :
try :
format_module_path = [ format_module_path ]
@ register . filter ( "slice" , is_safe = True )
stream_or_string = stream_or_string . decode ( 'utf-8' )
value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
@ register . tag
self . name = name or func . __name__
def format ( value , format_string ) :
except ValueError :
output_transaction = True
if opts . model :
return '"%s"' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
notifier . process_events ( )
os . close ( fd )
args . append ( parser . compile_filter ( value ) )
def recipients ( self ) :
opts = model . _meta
except http_cookies . CookieError :
os . close ( fd )
import pyinotify
@ python_2_unicode_compatible
self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
template = get_template_from_string ( template , origin , template_name )
else :
saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
if words and length <= 0 :
if errors :
if key not in self :
if self . stream is None :
with context . push ( ** values ) :
import termios
singular = [ ]
except UnicodeEncodeError :
return '\n' . join ( output )
try :
from django . utils import timezone , six
if ( attr in ( "__file__" , "__name__" , "__path__" ) and  self . mod not in sys . modules ) :
initial = False
except Resolver404 :
if self . require_all_fields :
if isinstance ( other , Promise ) :
from django import VERSION as version
writer = MigrationWriter ( migration )
patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
nodelist . append ( node )
truncate_len -= 1
def end_object ( self , obj ) :
elif char in 'bEFMmNn' :
if not is_valid_ipv6_address ( value ) :
from django . utils import six
for module in get_format_modules ( lang ) :
raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
cursor . execute ( 'DELETE FROM %s' % table )
value = Decimal ( value )
_file = None
return ungettext ( singular , plural , number )
def __deepcopy__ ( self , memodict ) :
return ''
msg += ending
else :
logger . addHandler ( self . config [ 'handlers' ] [ h ] )
class FilterNode ( Node ) :
extra_params [ 'null' ] = True
else :
pk = to_python ( pk )
value = request . META . get ( header , None )
def __getattr__ ( self , attr ) :
else :
_meth_self = "im_self"
pass
def _base_set ( self , mode , key , value , timeout = DEFAULT_TIMEOUT ) :
except ( ValueError , TypeError , ValidationError ) :
def media ( self ) :
def has_key ( self , key , version = None ) :
self . notation_name = notation_name
def errors ( self ) :
self . attachments . append ( ( filename , content , mimetype ) )
simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
raise NotImplementedError ( 'subclasses of BaseCache must provide an add() method' )
chunk_size *= 2
paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]
if self . verbosity >= 3 :
raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
table = connections [ db ] . ops . quote_name ( self . _table )
return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
if fd >= 0 :
def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :
if hasattr ( self , '_get' ) :
return result
x = 0
return RegroupNode ( target , expression , var_name )
if end_index is None and s_len > truncate_len :
return s . getvalue ( )
if ( getattr ( meta , 'fields' , fields ) is None and  getattr ( meta , 'exclude' , exclude ) is None ) :
def _fd ( f ) :
fg = colors . pop ( )
def get ( self , header , alternate = None ) :
error_class = ValueError
if self . compare ( cleaned , self . limit_value ) :
class X ( object ) :
def _resolve ( self ) :
value = flags [ attr ]
self . method = environ [ 'REQUEST_METHOD' ] . upper ( )
os . kill ( os . getpid ( ) , - exit_code )
_assertRegex = "assertRegexpMatches"
def items ( self ) :
@ deconstructible
except Exception :
from _systemrestart import SystemRestart
@ stringfilter
return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
primary_keys = pks . split ( ',' )
seen_data = set ( )
return name
def _get_size_from_underlying_file ( self ) :
kwargs [ 'error_messages' ] = error_messages [ f . name ]
return ""
self . _urlconf_module = self . urlconf_name
@ property
from django . template . base import TemplateDoesNotExist
class DisallowedRedirect ( SuspiciousOperation ) :
len_item = len ( item )
from django . utils . encoding import force_bytes
iterlists = _iterlists
kwargs = match . groupdict ( )
with self . initLock :
return value
def stringformat ( value , arg ) :
def validate_host ( host , allowed_hosts ) :
raise TypeError ( s )
try :
self . _caches . caches = { }
args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]
def __getstate__ ( self ) :
try :
import tempfile
shown = set ( )
for ldir in dirs :
break
return self . render ( )
if refto in known_models :
if len ( args ) > 1 :
fail_message = 'changed'
elif self . required :
return '' , ''
if not callable ( view_func ) :
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
class Command ( BaseCommand ) :
root [ KEY ] = root [ RESULT ] = None
def __init__ ( self , * args , ** kwargs ) :
contents = format_html ( '{0}{1}' , contents , label_suffix )
from django . core . serializers . python import Serializer as PythonSerializer
return value
@ register . tag
from django . utils . six . moves import reduce
del kwargs [ 'warning' ]
id_ = self . attrs [ 'id' ]
return _import_module ( self . mod )
raise
try :
if mtime != _mtimes [ filename ] :
result . key = key
self . name = name
self . params = params
if isinstance ( source , inst ) :
candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result
return mark_safe ( _helper ( value ) )
def __init__ ( self , parent_widget , name , value , attrs , choices ) :
return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
if not self . _upload_handlers :
compiled_parent = self . get_parent ( context )
def handle_label ( self , label , ** options ) :
if args :
continue
elif not isinstance ( sep , str ) :
def reset ( self ) :
for item in self . items :
else :
else :
app . initialize ( argv = [ ] )
yield k
else :
terminal_char = '>'
return sorted ( value , key = Variable ( arg ) . resolve )
import sys
if val is not None :
os . makedirs ( self . file_path )
if isinstance ( template , ( list , tuple ) ) :
if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :
else :
loop_dict [ 'last' ] = ( i == len_values - 1 )
FILES = property ( _get_files )
from django . db . migrations . optimizer import MigrationOptimizer
timetuple = dt . timetuple ( )
defaults [ 'empty_permitted' ] = True
output , references = connection . creation . sql_create_model ( model , style , known_models )
message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
raise base . DeserializationError ( "<field> node is missing the 'name' attribute" )
_cookie_allows_colon_in_names = True
import warnings
for name , value in self . extra_headers . items ( ) :
self . _populate ( )
field_value = self . cleaned_data . get ( field , None )
return [ ]
connection = connections [ options [ 'database' ] ]
def nud ( self , parser ) :
def join_tokens ( tokens , trim = False ) :
if hasattr ( hmac , "compare_digest" ) :
except ( KeyError , AttributeError ) as exc :
@ python_2_unicode_compatible
def make_origin ( display_name , loader , name , dirs ) :
if self . connection_reset :
for field_node in node . getElementsByTagName ( "field" ) :
exclude . append ( f . name )
self . error_class = 'errorlist {}' . format ( error_class )
new_attr = name
def dec ( func ) :
return serializer ( ) . loads ( data )
class TextInput ( Input ) :
self . template_cache [ key ] = ( template , origin )
return value
field = Model . _meta . get_field ( field_name )
locale = options . get ( 'locale' )
self . timezone = get_default_timezone ( )
extension_map = {  '.tar' : TarArchive ,  '.tar.bz2' : TarArchive ,  '.tar.gz' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }
return '%s %s' % ( self . f ( ) , self . a ( ) )
class ChoiceField ( Field ) :
result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
class FileProxyMixin ( object ) :
indent = self . options . get ( "indent" )
if isinstance ( value , str ) :
self . method = None
yield subwidget
from django . conf import settings
from django . utils import datetime_safe
raise MultiValueDictKeyError ( repr ( key ) )
except http_cookies . CookieError :
if hasattr ( self , '_size' ) :
else :
class BaseValidator ( object ) :
if len ( bits ) != 6 :
zfile . write ( s )
return _trans . ugettext ( message )
class metaclass ( meta ) :
return force_str ( self . _tzname )
return '1'
if self . activated :
parser . add_argument ( '--format' , default = 'json' , dest = 'format' ,  help = 'Specifies the output serialization format for fixtures.' )
return datetime . datetime ( ** kw )
class EmailMultiAlternatives ( EmailMessage ) :
def python_2_unicode_compatible ( klass ) :
self . stream . write ( '\n' )
for i , ( dirpath , f ) in enumerate ( locations ) :
def include_is_allowed ( filepath ) :
class Command ( BaseCommand ) :
for attr in _urllib_parse_moved_attributes :
else :
version = self . version
else :
import sys
size = self . remaining
with lock :
return default
return DebugVariableNode ( contents )
return None
if self . connection :
use_null_fallback = True
self . common_logger_config ( logger , config , incremental )
non_capturing_groups . append ( len ( result ) )
return
def __init__ ( self , initlist = None , error_class = None ) :
missing_args_message = "Enter at least one application label."
from django . conf import settings
os . mkdir ( migrations_directory )
LOCK_EX = LOCK_SH = LOCK_NB = 0
self . _changed_data = None
raise
raise ValueError ( "Base36 conversion input too large." )
try :
elif 'public' in cc and 'private' in kwargs :
input_type = 'text'
def __init__ ( self , * args , ** kwargs ) :
password = force_bytes ( password )
class_types = ( type , types . ClassType )
except ( LookupError , BinasciiError ) as e :
else :
from django . utils . deprecation import RemovedInDjango19Warning
if '()' in config :
serializers . get_serializer ( format )
continue
raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
found = False
class TranslatorCommentWarning ( SyntaxWarning ) :
if has_old_option and has_new_option :
base56 = BaseConverter ( BASE56_ALPHABET )
choice_value , choice_label = choice
self . choices = choices
raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
def writer_enters ( self ) :
return int ( timeout )
obj = super ( klass , cls ) . __new__ ( cls )
sys . stderr . write ( "fork #1 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
pflen = len ( prefixed )
if deps :
from django . core . serializers . python import Deserializer as PythonDeserializer
class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :
raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path )
if param in unhandled_params :
except ValueError :
def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
def validate_ipv46_address ( value ) :
subcommands = list ( get_commands ( ) ) + [ 'help' ]
self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
else :
def initial_form_count ( self ) :
return _trans . pgettext ( context , message )
if self . can_delete and self . _should_delete_form ( form ) :
def print_help ( self , prog_name , subcommand ) :
return RegexURLResolver ( r'^/' , urlconf )
for field , initial , data in zip ( self . fields , initial , data ) :
for app_name , model_list in manifest . items ( ) :
from threading import local
user_regex = re . compile (  r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
with io . open ( fname , 'rb' ) as f :
class Variable ( object ) :
number = int ( number )
def _get_choices ( self ) :
_default = translation ( settings . LANGUAGE_CODE )
if transfer_encoding == 'base64' :
class NoArgsCommand ( BaseCommand ) :
questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
current_len = 0
from functools import wraps
if ':' not in template :
def __repr__ ( self ) :
self . stdout . write ( "  No migrations to apply." )
super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )
del cache [ oldkey ]
raise
def __call__ ( self , value ) :
finally :
self . error_list = [ ]
yield emitting
cache . set ( cache_key , headerlist , cache_timeout )
if httponly :
if isinstance ( val , tuple ) :
fmt = config . get ( 'format' , None )
call_command (  'runserver' ,  addrport = options [ 'addrport' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
max_value = float ( max_value )
return [ ]
cached_loaders . append ( find_template_loader ( loader ) )
self . _num_pages = self . _count = None
self . set_charset ( utf8_charset )
_func_closure = "func_closure"
def gen_filenames ( only_new = False ) :
if filename and not os . path . exists ( filename ) :
requires_system_checks = False
raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
class Error ( CheckMessage ) :
locale_dir = path
def __call__ ( self , template_name , template_dirs = None ) :
def clean ( self , value ) :
from django . core . mail . utils import CachedDnsName , DNS_NAME
context . render_context . pop ( )
value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]
e . django_template_source = node . source
return self . dicts . pop ( )
result . key = key
elt = [ elt ]
mimetype , _ = mimetypes . guess_type ( filename )
return value . strftime ( format )
return self . size > chunk_size
import re
return ''
possibilities = self . reverse_dict . getlist ( lookup_view )
filemsg = 'file %s, ' % origin
import json
tag , this_value_expr , max_value_expr , max_width = bits
if attrs is None :
@ property
raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
_func_defaults = "__defaults__"
try :
if len ( s ) > 13 :
return result
if bit . startswith ( '_("' ) or bit . startswith ( "_('" ) :
from django . core . files . base import File
fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
raise ValueError ( "Invalid timezone: %r" % timezone )
from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
if self . allow_files :
HITS , MISSES = 0 , 1
from django . conf import settings
if self . _wrapped is empty :
except _BASE64_DECODE_ERROR :
def get_language ( ) :
raise TypeError
try :
from django . core . exceptions import SuspiciousMultipartForm
mod = import_module ( mod_name )
raise TemplateDoesNotExist ( template_name )
self . __doc__ = self . __class__ . __doc__
pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
autoescape = autoescape and not isinstance ( value , SafeData )
error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )
function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
elif isinstance ( value , datetime . datetime ) :
key = force_bytes ( settings . SECRET_KEY )
msg = self . style . HTTP_SERVER_ERROR ( msg )
def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
except TypeError as te :
if settings . USE_TZ :
import warnings
if condition is not None :
sys . stdout = open ( out_log , 'a' , buffering )
raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
gettext_module . GNUTranslations . __init__ ( self )
def render ( self , name , value , attrs = None , choices = ( ) ) :
except OSError :
self . write_items ( handler )
cursor . execute ( "SELECT cache_key, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
attrs = attrs or { }
@ lru_cache . lru_cache ( maxsize = None )
return template . render ( context . new ( values ) )
@ register . filter ( is_safe = True )
cache . close ( )
def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :
if source [ 1 ] is None :
if args and kwargs :
if len ( args ) != 2 :
def handle_app_config ( self , app_config , ** options ) :
code . interact ( local = imported_objects )
self . _servers = server
result . setFormatter ( formatter )
for template_dir in template_dirs :
Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
trail = punctuation + trail
c = subject [ i ]
encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
def add_arguments ( self , parser ) :
@ classmethod
msgmerge_options = [ '-q' , '--previous' ]
fmt = get_format ( 'DATE_FORMAT' )
list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
msg_count += 1
raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
return value
return { }
id_ = self . attrs . get ( 'id' , None )
register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
else :
self . file = os . fdopen ( fd , mode , bufsize )
return [ ( k , self [ k ] ) for k in self . keyOrder ]
self . dicts . append ( other_dict )
def __init__ ( self , loaders ) :
def M ( self ) :
msg . attach ( body_msg )
__dir__ = new_method_proxy ( dir )
self . _boundary = boundary
executor = MigrationExecutor ( connection )
self . instance . validate_unique ( exclude = exclude )
def _bin_to_long ( x ) :
def i18n ( request ) :
def __next__ ( self ) :
self . error_messages = messages
super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
def __call__ ( self , value ) :
import threading
if match :
try :
return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
if ( locale is None and not exclude and not process_all ) or self . domain is None :
if self . field . empty_label is not None :
for name , app in six . iteritems ( get_commands ( ) ) :
render_context = self . context . render_context
lines = [ ]
if not self . timezone :
def _has_changed ( self , initial , data ) :
out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
k , v = x . split ( '=' , 1 )
context_extras = { }
def gettext_noop ( message ) :
def __repr__ ( self ) :
self . stderr . write ( "App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label )
def sql_delete ( app_config , style , connection , close_connection = True ) :
except ImportError :
for k , v in self . _iteritems ( ) :
keys = node . getElementsByTagName ( 'natural' )
_supported = OrderedDict ( settings . LANGUAGES )
return self . _queryset
return ''
try :
def __init__ ( self , server , params , library , value_not_found_exception ) :
def has_key ( self , key ) :
msgs = fp . read ( )
from django . http import HttpResponse
fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) |  ( os . O_EXCL if not allow_overwrite else 0 ) ) )
max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
break
result , upto = [ ] , 0
def get_internal_wsgi_application ( ) :
if not isinstance ( self . file_path , six . string_types ) :
i = i + 1
output_transaction = True
self . stderr . write ( "    Failed to install index for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
ignore_patterns = options . get ( 'ignore_patterns' )
from django . utils . encoding import smart_text
value = self . to_python ( value ) . strip ( )
_urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
self . cookies [ key ] = value
if value == k2 or text_value == force_text ( k2 ) :
@ register . filter ( is_safe = False )
return ip_str
missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
end -= 1
from django . utils import six
MONTHS_ALT = {  1 : pgettext_lazy ( 'alt. month' , 'January' ) ,  2 : pgettext_lazy ( 'alt. month' , 'February' ) ,  3 : pgettext_lazy ( 'alt. month' , 'March' ) ,  4 : pgettext_lazy ( 'alt. month' , 'April' ) ,  5 : pgettext_lazy ( 'alt. month' , 'May' ) ,  6 : pgettext_lazy ( 'alt. month' , 'June' ) ,  7 : pgettext_lazy ( 'alt. month' , 'July' ) ,  8 : pgettext_lazy ( 'alt. month' , 'August' ) ,  9 : pgettext_lazy ( 'alt. month' , 'September' ) ,  10 : pgettext_lazy ( 'alt. month' , 'October' ) ,  11 : pgettext_lazy ( 'alt. month' , 'November' ) ,  12 : pgettext_lazy ( 'alt. month' , 'December' )  }
template_dirs = app_template_dirs
elif self . verbosity == 3 :
return ''
obj . save ( )
else :
def __init__ ( self , fail_silently = False , ** kwargs ) :
self . attr = old_attr
tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
with lock :
params = { 'max' : self . max_length , 'length' : len ( file_name ) }
class SimpleTemplateResponse ( HttpResponse ) :
raise ImproperlyConfigured (  'Command %s defines both "requires_model_validation" '  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
if not content_type :
if len ( bits ) < 3 or bits [ 1 ] != 'as' :
return func ( * self . __args , ** self . __kw )
class NumberInput ( TextInput ) :
if isinstance ( value , datetime . datetime ) :
@ property
for part in parts :
models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
try :
return _ ( 'PM' )
except ValidationError as e :
self . dicts [ - 1 ] [ key ] = value
data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
if 'date' not in header_names :
return False
@ stringfilter
return False
if item [ 'pubdate' ] is not None :
else :
ret = self . _cache . get_multi ( new_keys )
week_number = 53
except UnicodeDecodeError :
except Exception :
def __init__ ( self , var , name , nodelist , extra_context = None ) :
initial = [ '' for x in range ( 0 , len ( data ) ) ]
return any ( self . dicts )
else :
self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
for program in programs :
def iteritems ( d , ** kw ) :
"""         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         """
elif ch == '|' :
def __init__ ( self , children = None , connector = None , negated = False ) :
LIGHT_PALETTE = 'light'
if targets [ 0 ] [ 1 ] is None :
return data
return '0'
Field . creation_counter += 1
if item [ 'author_email' ] is not None :
Encoders . encode_base64 ( attachment )
else :
return modules
six . reraise ( * exc_info )
is_usable = False
class _OFFSET_UNION ( Union ) :
values = '' . join ( quant ) . split ( ',' )
class Parser ( object ) :
relations = connection . introspection . get_relations ( cursor , table_name )
self . _encoding = settings . DEFAULT_CHARSET
def validate_number ( self , number ) :
class ClearableFileInput ( FileInput ) :
sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
raise LookupError ( lang_code )
target_var = bits [ - 1 ]
return base
def id_for_label ( self , id_ ) :
self . file = open ( self . name , mode or self . mode )
params , varargs , varkw , defaults = getargspec ( func )
inverse_match = False
unhandled_params . remove ( param )
except OSError as e :
def m2m_convert ( value ) :
smart_str = smart_text
name = self . _pk_field . name
if var . startswith ( '_(' ) and var . endswith ( ')' ) :
class MaxValueValidator ( BaseValidator ) :
return { }
prefix += '/'
indexes = connection . introspection . get_indexes ( cursor , table_name )
str_hidden = '' . join ( hidden_fields )
pass
return int ( binascii . hexlify ( x ) , 16 )
m = IDENTIFIER . match ( s )
return _get_timezone_name ( get_current_timezone ( ) )
return new_class
handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
for app_label in bad_app_labels :
if not self . _populated :
def handle_app_config ( self , app_config , ** options ) :
return self
else :
if in_tag and not self . verbatim :
return i
except ImportError :
class _HashedSeq ( list ) :
return klass ( fail_silently = fail_silently , ** kwds )
output = [ ]
from django . utils . deprecation import RemovedInDjango19Warning
def __iter__ ( self ) :
data = { }
del self [ key ]
class EmptyPage ( InvalidPage ) :
value , timestamp = result . rsplit ( self . sep , 1 )
doublecolon_len = 0
if not lookup :
for date_key in date_keys :
return
try :
lbp = bp
except NotImplementedError :
d = self . config [ m . groups ( ) [ 0 ] ]
return t [ 0 ] . lower ( ) , t [ 1 ]
_cached_modules = set ( )
def language ( self ) :
self . can_read . acquire ( )
return RegexURLResolver ( r'^/' , [ ns_resolver ] )
Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
other = other . __cast ( )
else :
self . validate ( out )
def do_if ( parser , token ) :
elif type ( s ) != six . text_type :
return response
try :
return self . _size
if 'forloop' in context :
except UnicodeDecodeError as e :
initial_text = ugettext_lazy ( 'Currently' )
if self . _validate_unique :
output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
except ImportError :
else :
self . _read_started = False
default_list = [ ]
def boolean_check ( v ) :
m = self . CONVERT_PATTERN . match ( value )
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
def __delitem__ ( self , key ) :
if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :
messages . update ( error_messages or { } )
continue
def ensure_echo_on ( ) :
if plan_node not in shown and plan_node [ 0 ] == app_name :
except KeyError :
if renderer :
self . xml . endElement ( "field" )
def contains ( source , inst ) :
kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
pass
FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
return self . forms [ self . initial_form_count ( ) : ]
self . parent_name = parent_name
if isinstance ( context , Context ) :
lib = get_library ( taglib )
def bpython ( self ) :
ETAG_MATCH = re . compile ( r'(?:W/)?"((?:\\.|[^"])*)"' )
if not autoescape or isinstance ( value , SafeData ) :
return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
msgs = msgs . decode ( 'utf-8' )
if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :
_default = translation ( settings . LANGUAGE_CODE )
import unicodedata
return self . format ( 'D, j M Y H:i:s O' )
return response
local , domain = middle . rsplit ( '@' , 1 )
prefixed_name = self . add_prefix ( name )
while i < len ( subject ) and subject [ i ] != subject [ p ] :
except ZeroDivisionError :
else :
use_natural_keys = options . get ( 'use_natural_keys' )
def emit_post_migrate ( verbosity , interactive , database ) :
from django . http . request import ( HttpRequest , QueryDict ,  RawPostDataException , UnreadablePostError , build_request_repr )
_error_files = [ ]
response = callback ( request , ** param_dict )
import struct
else :
if verbosity >= 2 :
def constant_time_compare ( val1 , val2 ) :
if kw [ 'microsecond' ] :
from __future__ import unicode_literals
self . _name = name
class LimitedStream ( object ) :
self . stdout . write ( errors )
if comment_lineno_cache == cur_lineno :
self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
continue
if issues :
def render ( self , name , value , attrs = None ) :
raise
if filename not in _error_files :
if response is None :
else :
def __init__ ( self , environ ) :
if not options [ 'no_startup' ] :
if tag in self . CDATA_CONTENT_ELEMENTS :
self . nodelist = compile_string ( template_string , origin )
class BlockContext ( object ) :
except AttributeError :
if keyword . iskeyword ( new_name ) :
return s
with open ( filename , 'wb' ) as outfile :
return d
parts . append ( "(?P<%s>%s)" % ( groupid , tok . regex ) )
return result
def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :
widget . attrs . update ( extra_attrs )
def keys ( self ) :
kw [ 'tzinfo' ] = tzinfo
return True
self . __dict__ . update ( obj_dict )
return wraps ( func ) ( _dec )
def open ( self , mode = None ) :
raise
if pickled is not None :
pass
if match :
registry = CheckRegistry ( )
try :
else :
declared_fields = OrderedDict ( )
settings . SITE_ID
def resolve ( self , context ) :
resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
return smart_text ( token )
return settings . LANGUAGE_CODE
args_safe = map ( conditional_escape , args )
attrs += [ attr . name for attr in self . _moved_attributes ]
field_list . append ( ( f . name , formfield ) )
six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )
def empty_form ( self ) :
parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' ,  help = 'Path(s) to fixtures to load before running the server.' )
for lookup , arg in args :
old_method_name = renamed_method [ 0 ]
rest = value
cursor . execute (  connections [ db ] . ops . cache_key_culling_sql ( ) % table ,  [ cull_num ] )
_urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
try :
if hasattr ( middleware , 'process_response' ) :
is_dst = False if dt is None else self . _isdst ( dt )
else :
def _start_relational_field ( self , field ) :
if options [ 'errlog' ] :
def _load_serializers ( ) :
model = apps . get_model ( exclude )
def __exit__ ( self , exc_type , exc_value , traceback ) :
attrvalue = None
msgs = '\n' . join ( lines )
class ConvertingTuple ( tuple ) :
self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
self . _mutable = mutable
key = self . make_key ( key , version = version )
def args_check ( name , func , provided ) :
if cwords [ 0 ] == 'runfcgi' :
def remove_move ( name ) :
try :
msg = "Execution of %s failed: %s" % ( self . program , errors )
return middleware . process_response ( request , response )
from django . db import connections , DEFAULT_DB_ALIAS
candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
pass
self . stdout . write ( "Installing %s fixture '%s' from %s." %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
sites . append ( site )
value = self . literal
import sys
@ property
def format_html ( format_string , * args , ** kwargs ) :
filename = file
if is_relation :
now = now . replace ( tzinfo = None )
media = Media ( )
context . autoescape = old_setting
sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) )
pass
obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
length = int ( num )
def __init__ ( self , file ) :
kwargs [ 'error_messages' ] = error_messages
global _default
else :
args = [ ]
except ( ValueError , TypeError ) :
return self . position
def __str__ ( self ) :
post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )
if isinstance ( f , models . FileField ) :
from django . utils . timezone import utc , get_fixed_timezone
yield 'month'
date = form . cleaned_data [ unique_for ]
if format_module_path :
for issues , group_name in sorted_issues :
if ( i - day_of_year ) < ( 4 - weekday ) :
import time
try :
try :
self . stream . write ( "[" )
end = s . find ( b';' )
def all ( self ) :
if isinstance ( d , real_datetime ) :
self . namespace = ':' . join ( self . namespaces )
class TemporaryFile ( FileProxyMixin ) :
self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
return WRAPPER_ASSIGNMENTS
def get_response ( self , request ) :
def __init__ ( self , s ) :
return path . decode ( fs_encoding )
self . file_name = file_name
endpos = self . check_for_whole_start_tag ( i )
return repr ( self . dicts )
if not self . addr :
seek = property ( lambda self : self . file . seek )
result = cursor . fetchone ( )
self . _request = datastructures . MergeDict ( self . POST , self . GET )
if token == "not" and i + 1 < l and tokens [ i + 1 ] == "in" :
return _i18n_cache_key_suffix ( request , cache_key )
can_import_settings = False
def handle_fk_field ( self , obj , field ) :
tagname = tagname . lower ( )
def deconstructible ( * args , ** kwargs ) :
media_attrs = media . __dict__
def __str__ ( self ) :
elif item [ "author_email" ] :
text = match . group ( 1 )
for node in self :
try :
try :
def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :
from django . utils . timezone import is_aware
pass
class DateField ( BaseTemporalField ) :
return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )
def configure_logging ( logging_config , logging_settings ) :
if sender and getattr ( sender , 'handles_files' , False ) :
ns = path . pop ( )
def copystat ( src , dst ) :
handlers = config . get ( 'handlers' , None )
def write_po_file ( self , potfile , locale ) :
def clear ( self ) :
signals = 'signals'
filename , display_url = cleanup_url ( url )
default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }
def default ( value , arg ) :
subject = self . format_subject ( subject )
def get_fqdn ( self ) :
parser . add_argument ( '-a' , '--all' , action = 'store_true' , dest = 'use_base_manager' , default = False ,  help = "Use Django's base manager to dump all models stored in the database, "  "including those that would otherwise be filtered or modified by a custom manager." )
def render ( self , context ) :
self . data = data or { }
missing_args_message = "You must provide a project name."
break
default_validators = [ ]
if options [ 'method' ] in ( 'prefork' , 'fork' ) :
final_attrs = self . build_attrs ( attrs )
finally :
self . options = options
elif ch == ':' :
def content ( self , value ) :
from django . utils . _os import rmtree_errorhandler
except ValueError :
def itervalues ( d , ** kw ) :
client . behaviors = self . _options
used_name = the_path . split ( '/' ) [ - 1 ]
if date is not None :
def __ne__ ( self , other ) :
exclude = [ ]
class LocaleRegexProvider ( object ) :
except ValueError :
else :
reloader = python_reloader
pending_references = { }
if opts :
input_type = 'password'
errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
except LookupError :
return "<DjangoTranslation lang:%s>" % self . __language
class SerializationError ( Exception ) :
BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
if model in excluded_models :
slots = orig_vars . get ( '__slots__' )
field_value = None
RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )
if not isinstance ( urlconf_name , six . string_types ) :
serializers . serialize ( format , get_objects ( ) , indent = indent ,  use_natural_foreign_keys = use_natural_foreign_keys ,  use_natural_primary_keys = use_natural_primary_keys ,  stream = stream or self . stdout )
except ValidationError :
from django . utils . _os import safe_join , abspathu
else :
if item [ 'unique_id' ] is not None :
def npgettext ( context , singular , plural , number ) :
else :
for code in ( lang_code , generic_lang_code ) :
import datetime
return _time . tzname [ is_dst ]
raise NotImplementedError ( 'Subclasses must implement this method.' )
filepath = os . path . abspath ( filepath )
list_length = len ( list_ )
class ForNode ( Node ) :
warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '  '`request.POST` instead.' , RemovedInDjango19Warning , 2 )
return
if arg not in ( 'on' , 'off' ) :
seconds = abs ( seconds )
from django . db import models
handler . addQuickElement ( "author" , "%s (%s)" %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
chars = allow_lazy ( chars )
if not lib :
except ValueError :
self . connection . close ( )
def handle ( self , * args , ** options ) :
try :
warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
return False
datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
self . show_traceback = options . get ( 'traceback' )
key = self . make_key ( key , version = version )
format_key = 'DATETIME_INPUT_FORMATS'
@ deconstructible
for check in checks :
func ( path )
extend = getattr ( definition , 'extend' , True )
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
continue
super ( WSGIServer , self ) . server_bind ( )
return singular
path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )
from django . utils . http import cookie_date
if not shown :
should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
for k , list_ in self . lists ( ) :
def css_classes ( self , extra_classes = None ) :
return msgs
while True :
if not m :
def addQuickElement ( self , name , contents = None , attrs = None ) :
pass
cls . _delegate_text = six . text_type in resultclasses
all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )
conflicts = executor . loader . detect_conflicts ( )
if safe and not isinstance ( data , dict ) :
def as_json ( self , escape_html = False ) :
from django . core import checks
filename = filename . encode ( 'utf-8' )
self . seek ( 0 )
__version__ = "0.1"
class UploadFileException ( Exception ) :
from __future__ import unicode_literals
def log_message ( self , format , * args ) :
def decorator ( klass ) :
import re
app_config = apps . get_app_config ( exclude )
except UnicodeDecodeError :
def resolve_context ( self , context ) :
return _trans . deactivate ( )
def reset_translations ( ) :
if pattern . namespace :
self . extensions = handle_extensions ( exts )
from django . utils import six
raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
for key , value_list in other_dict . lists ( ) :
class MultipleChoiceField ( ChoiceField ) :
raise ValueError (  "You can only use `unpack_ipv4` if `protocol` is set to 'both'" )
return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
os . _exit ( 0 )
pass
except OSError :
def get_full_path ( self ) :
fp = six . StringIO ( )
if ip_str . count ( '.' ) != 3 :
return path
from django . utils . encoding import smart_text , is_protected_type
connection = connections [ options [ 'database' ] ]
raise SignatureExpired (  'Signature age %s > %s seconds' % ( age , max_age ) )
widget = Select
def extract ( self , to_path ) :
if domain is not None :
return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )
continue
locks . lock ( fd , locks . LOCK_EX )
try :
widget = DateTimeInput
@ property
class Module_six_moves_urllib_request ( _LazyModule ) :
raise StopIteration
pkg_name = 'templates/' + template_name
else :
self . close ( )
view = parts [ 0 ]
return get_template ( parent )
encoding = self . encoding or settings . DEFAULT_CHARSET
message_context = None
output = [ ]
if value in self . empty_values :
nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
def create_var ( self , value ) :
value = unicode_value . strip ( )
del self . dicts [ - 1 ] [ key ]
def is_ignored ( path , ignore_patterns ) :
else :
if not kwarg_format :
continue
value = new_value
singular = [ ]
return potfiles
itervalues = _itervalues
formatted = "\n" . join ( sorted ( formatted ) )
obj = copy . copy ( self )
ustring_re = re . compile ( "([\u0080-\uffff])" )
self . META [ 'PATH_INFO' ] = path_info
DARK_PALETTE = 'dark'
import itertools
else :
if fields and f . name not in fields :
from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
f . seek ( 0 )
parser . add_option ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
result . _choices = copy . deepcopy ( self . _choices , memo )
def handle_app_config ( self , app_config , ** options ) :
urlquote = allow_lazy ( urlquote , six . text_type )
raise NotImplementedError ( 'subclasses of Storage must provide a listdir() method' )
dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
self . __name = "%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
break
handlers = config . get ( 'handlers' , EMPTY_DICT )
return self . nodelist_empty . render ( context )
return self . _dimensions_cache
class Command ( AppCommand ) :
def linenumbers ( value , autoescape = None ) :
self . ignore = options . get ( 'ignore' )
self . stdout . write ( "  the new migration will be used for new installs. Once you are sure" )
self . template_string = template_string
view_name = self . view_name . resolve ( context )
value = formats . sanitize_separators ( value )
if value :
value = value [ 1 : - 1 ]
if register_to :
def __getitem__ ( self , key ) :
warnings . warn (  "django.utils.tzinfo will be removed in Django 1.9. "  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
regex = self . _regex
if fset is not None :
self . label_suffix = label_suffix
if not match :
def encoding ( self , val ) :
pass
if app == 'django.core' :
def cache_clear ( ) :
return self . value
if app_labels :
self . _cache . clear ( )
self . name = name
if new_name != col_name :
result . append ( ch )
format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
if year < 70 :
return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
return { }
def F ( i ) :
from django . utils . encoding import force_str
response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
for field in model . _meta . many_to_many :
message_context = message_context . strip ( '"' )
return "<For Node: for %s in %s, tail_len: %d%s>" % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' )
hex_format_string = "%%0%ix" % ( hlen * 2 )
def clear_checkbox_id ( self , name ) :
return [ self [ k ] for k in self . keyOrder ]
@ property
for line in sequence_sql :
if ttl is not None :
from __future__ import unicode_literals
return lang_code
except StandardError as e :
vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
warnings . warn (  "AppCommand.handle_app() is superseded by "  "AppCommand.handle_app_config()." ,  RemovedInDjango19Warning , stacklevel = 2 )
from xml . dom import pulldom
attrs . append ( ( attrname . lower ( ) , attrvalue ) )
def sql_all ( app_config , style , connection ) :
base_url = settings . MEDIA_URL
class Command ( BaseCommand ) :
return True
if instance is None :
from django . utils . safestring import mark_safe
def is_protected_type ( obj ) :
from yaml import CSafeDumper as SafeDumper
if delta < 0 :
msg = self . style . HTTP_INFO ( msg )
if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :
def as_string ( self , unixfrom = False ) :
_serializers = { }
space = line . find ( ' ' ) + 1
value = super ( IntegerField , self ) . to_python ( value )
stats [ MISSES ] += 1
self . compression_formats = {  None : ( open , 'rb' ) ,  'gz' : ( gzip . GzipFile , 'rb' ) ,  'zip' : ( SingleZipReader , 'r' ) ,  }
if ignore_failures :
name = _resolve_name ( name [ level : ] , package , level )
try :
else :
def unget ( self , bytes ) :
return caches [ DEFAULT_CACHE_ALIAS ] != other
return TemplateSyntaxError ( msg )
if len ( bits ) >= 4 and bits [ - 2 ] == "from" :
if value is not None :
self . _init_translation_catalog ( )
class ZipArchive ( BaseArchive ) :
from django . conf import settings
if is_naive ( obj ) :
class IPAddressField ( CharField ) :
pass
check_programs ( 'xgettext' )
msg = self . style . HTTP_BAD_REQUEST ( msg )
else :
def handle ( self , * fixture_labels , ** options ) :
if instance . pk is None :
pass
self . lineno += token_string . count ( '\n' )
@ stringfilter
if len ( key ) > MEMCACHE_MAX_KEY_LENGTH :
for k , v in data . items ( ) :
from django . utils . ipv6 import is_valid_ipv6_address
hextet = ip_str . split ( '::' )
raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' )
super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
def is_hidden ( self ) :
help = "Prints the DROP INDEX SQL statements for the given model module name(s)."
quant = quant [ : - 1 ]
@ register . filter ( expects_localtime = True , is_safe = False )
else :
l = len ( tokens )
def handle ( self , * args , ** options ) :
def __delitem__ ( self , key ) :
return self . _wrapped . __dict__
repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
def inner ( self , * args ) :
if link is not None :
temp_lib . filters [ name ] = lib . filters [ name ]
def utcoffset ( self , dt ) :
super ( Field , self ) . __init__ ( )
def add_arguments ( self , parser ) :
query = query . items ( )
token = Token ( TOKEN_COMMENT , content )
pass
value = ''
StringIO = io . StringIO
attrs [ 'localized_fields' ] = localized_fields
stream . unget ( chunk [ - rollback : ] )
msg = "Unclosed tag '%s'. Looking for one of: %s " % ( command , ', ' . join ( parse_until ) )
sys . exit ( 1 )
else :
TB = 1 << 40
output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
hfile = msvcrt . get_osfhandle ( _fd ( f ) )
for attachment in self . attachments :
loggers = config . get ( 'loggers' , EMPTY_DICT )
bits = token . split_contents ( ) [ 1 : ]
targets = executor . loader . graph . leaf_nodes ( )
if self . asvar is None :
from django . conf import settings
form = self . form ( ** defaults )
if not self . timezone :
salt = force_bytes ( salt )
from django . core . files . move import file_move_safe
import threading
data = self . _archive . read ( name )
if params [ 0 ] == 'context' :
msguniq_options = [ '--to-code=utf-8' ]
from __future__ import unicode_literals
if not chunk :
if ch == '<' :
return attrs
for handler in handlers :
obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
def _has_changed ( self , initial , data ) :
self . run_shell ( shell = options [ 'interface' ] )
if not self . closed :
def Z ( self ) :
domain_whitelist = [ 'localhost' ]
def localize ( value , use_l10n = None ) :
def as_text ( self ) :
bits = token . contents . split ( )
for key in keys :
self . object_name = 'CacheEntry'
raise Resolver404 ( { 'path' : path } )
msgs , errors , status = popen_wrapper ( args )
class SimpleCookie ( http_cookies . SimpleCookie ) :
return match . group ( 0 )
for model in not_installed_models :
key , value = match . groups ( )
if server_port != ( '443' if self . is_secure ( ) else '80' ) :
from django . utils . safestring import mark_safe
version = get_complete_version ( version )
try :
if value != '' :
raise CommandError (  "Cache table '%s' could not be created.\nThe error was: %s." %  ( tablename , force_text ( e ) ) )
ctx . update ( force_bytes ( value ) )
if id_ :
params = params [ 1 : ]
import glob
_active = local ( )
if hasattr ( cls , k ) :
pending_references . setdefault ( refto , [ ] ) . extend ( refs )
elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
sites2 = _findall ( s2 , str ( year + 28 ) )
signature = base64_hmac ( self . salt + 'signer' , value , self . key )
return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )
nodelist . append ( node . render ( context ) )
options , args = parser . parse_args ( argv [ 2 : ] )
if index_sql :
import warnings
except StandardError as e :
@ register . filter ( is_safe = True )
fname = self . _key_to_file ( key , version )
raise
self . fields = fields
except Exception :
use_threading = connection . features . test_db_allows_multiple_connections
if tags is not None :
import pickle
break
self . autoescape = autoescape
prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
if self . domain == 'djangojs' :
self . backout . append ( self . pointer )
_serializers = serializers
return decorator ( * args , ** kwargs )
tag = bits [ 1 ]
from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
def _get_queryset ( self ) :
none_value = ( 0 , '---' )
def __init__ ( self , var ) :
import warnings
self . origin = origin
if isinstance ( message , dict ) :
def valid_value ( self , value ) :
def __init__ ( self , * args , ** kwargs ) :
from django . conf import settings
val = self . _cache . get ( key )
@ register . filter ( is_safe = True )
parser = CommandParser ( None , usage = "%(prog)s subcommand [options] [args]" , add_help = False )
return getattr ( self . _caches , 'caches' , { } ) . values ( )
for cat in self . feed [ 'categories' ] :
yield "# into your database."
self . fixture_count = 0
main_value_pair , params = parse_header ( line )
def get_fixed_timezone ( offset ) :
kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
return 'nd'
continue
if not field_name :
@ stringfilter
try :
return repr ( list ( self ) )
for filepath in self . get_template_sources ( template_name , template_dirs ) :
def _read_limited ( self , size = None ) :
ch = None
yield field , list ( ValidationError ( errors ) )
comment = [ ]
def iriencode ( value ) :
else :
except ValueError :
for name in filters :
if errors is None :
limit_choices_to = formfield . limit_choices_to
exclude = options . get ( 'exclude' )
if self . is_localized :
app_list_value . append ( model )
statements = connection . ops . sequence_reset_sql ( self . style , models )
from django . core . exceptions import ImproperlyConfigured
warnings . warn ( "No fixture named '%s' found." % fixture_name )
from __future__ import unicode_literals
media = media + field . widget . media
result = result [ : start ] + [ inner ]
@ register . filter ( is_safe = True )
if options . get ( 'no_location' ) :
@ register . filter ( is_safe = True )
from pprint import pformat
counters = [ 0 ] * len ( handlers )
return datetime ( * kw )
return iri_to_uri ( location )
new_name = 'number_%s' % new_name
self . _post = post
language_code = get_language ( )
cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
from __future__ import unicode_literals
except ( OverflowError , ValueError ) as exc :
if template . startswith ( 'file://' ) :
from django . utils . _os import safe_join
from django . utils . safestring import mark_safe
return self . _app_dict [ language_code ]
name = property ( _get_name , _set_name )
config = self . config
class MemcachedCache ( BaseMemcachedCache ) :
_empty_value = [ ]
fill_to = 8
from django . utils import translation
all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
class BaseFormSet ( object ) :
from django . http import Http404
i += 1
def _reset_dicts ( self , value = None ) :
from django . core import checks
from django . core . management . color import color_style
html_class_attr = ' class="%s"' % css_classes
return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
if self . feed [ 'feed_copyright' ] is not None :
def top ( self ) :
append = complain
if isinstance ( s , six . text_type ) :
else :
raise ValueError ( 'ModelForm has no model class specified.' )
if digest is None :
from django . conf import settings
return str ( dict ( self . items ( ) ) )
from django . utils . timezone import template_localtime
@ register . filter ( is_safe = False )
import re
return ret
for func , unused in filter_expr . filters :
else :
key = self . make_key ( key , version = version )
if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :
raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
sys . stdout . write ( self . main_help_text ( ) + '\n' )
else :
if run_syncdb and executor . loader . unmigrated_apps :
raise value . with_traceback ( tb )
warnings . warn ( warn_msg , TranslatorCommentWarning )
return nodes
if isinstance ( end , unicode ) :
import warnings
field_desc += '  # ' + ' ' . join ( comment_notes )
if request . method == 'HEAD' :
self . base = base
def __init__ ( self , regex ) :
logger . setLevel ( _checkLevel ( level ) )
except StandardError as e :
opt_label = option [ 0 ]
handle_default_options ( options )
Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
return arg
message = 'Unknown field(s) (%s) specified for %s'
def execute_from_command_line ( argv = None ) :
logger = logging . getLogger ( name )
in_tag = False
else :
renderer = kwargs . pop ( 'renderer' , None )
from django . conf import settings
p = language . find ( '-' )
from django . core import mail
if self . feed [ 'subtitle' ] is not None :
opts = model . _meta
output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
def widthratio ( parser , token ) :
if six . PY2 and value > sys . maxint :
import re
return val
run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
return mark_safe ( '\n' . join ( lines ) )
from django . conf import settings
if dirname and not os . path . exists ( dirname ) :
self . locale_paths = [ ]
if protocol != 'both' and unpack_ipv4 :
if self . takes_context :
self . bad_cookies = set ( )
compile_func = self . tags [ command ]
bit = ' ' . join ( trans_bit )
return self
return _translations [ language ]
def clean ( self , value ) :
locale_dir = None
handler . addQuickElement ( "uri" , item [ 'author_link' ] )
def usage ( self , subcommand ) :
if not ( value is True or value is False or value is None or value == '' ) :
code = 'min_length'
from functools import wraps
if isinstance ( other_dict , MultiValueDict ) :
output . append ( options )
def urlquote ( url , safe = '/' ) :
split = [ ]
if default is None :
src_data = fp . read ( )
pass
import logging
elif field in self . fields :
from django . conf import settings
return template
def __init__ ( self , * args , ** kwargs ) :
return debug . technical_500_response ( request , * exc_info )
from django . db import connections , transaction , router , DatabaseError
except Exception :
supported = False
s = s . replace ( '</' , '<\\/' )
trans_real . _default = None
deactivate ( )
attrs = [ "__doc__" , "__name__" ]
if check_path :
return self . paginator . count
class SpacelessNode ( Node ) :
if m :
to_delete = set ( )
warnings . warn ( "OptionParser usage for Django management commands "  "is deprecated, use ArgumentParser instead" ,  RemovedInDjango20Warning )
self . port = DEFAULT_PORT
args . append ( parser . compile_filter ( bit ) )
url = 'mailto:%s@%s' % ( local , domain )
final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
if not var or ' ' in var :
import json
self . filters . update ( lib . filters )
root , = nonlocal_root
self . validate_key ( key )
if unpack :
from django . conf import settings
raise TemplateSyntaxError (  "'%s' received too many positional arguments" %  name )
if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
if match :
roots = set ( dir ( cls ) ) & set ( convert )
r = r [ : 12 ]
pass
obj . attrs = self . attrs . copy ( )
elif cls . _delegate_bytes :
self . new_objects = [ ]
raise CommandError ( message )
cls . _delegate_bytes = bytes in resultclasses
class OrderedSet ( object ) :
elif hasattr ( query , 'items' ) :
converter = self . value_converters . get ( prefix , None )
fixture = open_method ( fixture_file , mode )
assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )
indexes = { }
continue
from django . core . serializers import base
class Origin ( object ) :
output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
class Serializer ( base . Serializer ) :
pass
int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
for node in self . nodelist_empty :
return _ ( 'AM' )
value = self . get ( key , version = version )
def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :
def __init__ ( self , _subtype = 'mixed' , boundary = None , _subparts = None , encoding = None , ** _params ) :
value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )
try :
return mark_safe ( value )
data = self . _prepare_data ( data )
boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
nodelist = parser . parse ( ( 'endblock' , ) )
else :
data [ f . name ] = [ ]
params , varargs , varkw , defaults = getargspec ( func )
super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
return date_format ( value , use_l10n = use_l10n )
return mark_safe ( result )
return value
self . instance = self . fk . rel . to ( )
def to_python ( self , value ) :
week_number = None
else :
if initial is None :
self . use_ipv6 = options . get ( 'use_ipv6' )
from django . utils . encoding import force_bytes
class ConvertingList ( list ) :
raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
return dec
def gettext_noop ( message ) :
super ( BaseModelFormSet , self ) . add_fields ( form , index )
class Command ( AppCommand ) :
self . _client = self . _lib . Client ( self . _servers )
def activate ( timezone ) :
result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
smart_unicode = smart_text
if template is None :
elif args [ 1 ] [ 0 ] == '1' :
from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
def writeString ( self , encoding ) :
@ register . filter ( is_safe = False )
clean = lambda self , x : len ( x )
parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
def random ( value ) :
response = None
start , end = match . span ( )
basedirs . extend ( settings . LOCALE_PATHS )
content = token_string [ 2 : - 2 ] . strip ( )
return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )
if bits and not kwarg_format :
from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
@ classmethod
return baseconv . base62 . encode ( int ( time . time ( ) ) )
cache_key = ( format_type , lang )
def get_key_func ( key_func ) :
class HttpResponseForbidden ( HttpResponse ) :
s = subject [ p : i ]
method = kwargs . pop ( 'method' )
class EscapeText ( six . text_type , EscapeData ) :
return truncate % { 'truncated_text' : text }
if subcommand == 'help' :
config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] )
return type ( self ) . __bool__ ( self )
def get_many ( self , keys , version = None ) :
widget = TextInput
except Exception :
value = self . to_python ( value )
if i % 2 :
return force_str ( "<Text Node: '%s'>" % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
def handle_noargs ( self , ** options ) :
nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )
hfile = msvcrt . get_osfhandle ( _fd ( f ) )
daemonize = True
error_msg = "Invalid template name in 'extends' tag: %r." % parent
if remaining is None :
context . render_context [ self ] = itertools_cycle ( self . cyclevars )
elif len ( fks_to_parent ) == 0 :
try :
for dict_ in self . dicts :
from django . utils . translation import trans_real
def compress_string ( s ) :
raise ViewDoesNotExist (  "Could not import '%s'. Parent module %s does not exist." %  ( lookup_view , mod_name ) )
raise CommandError (  "errors happened while running msgmerge\n%s" % errors )
raise AttributeError ( self . warning )
self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
from django . utils . encoding import force_text , iri_to_uri
i = open_tags . index ( tagname )
try :
key_salt = force_bytes ( key_salt )
if self . verbosity >= 2 and not fixture_files_in_dir :
s = s . replace ( '\n' , '\\n' )
from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
return self . connection
return Truncator ( value ) . chars ( length )
import sys
from django . utils . encoding import force_bytes
try :
tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
import stat
def __init__ ( self , * args , ** kwargs ) :
key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
has_new_option = hasattr ( self , 'requires_system_checks' )
key = self . make_key ( key , version = version )
self . stream . write ( b'-' * 79 )
else :
if not self . fail_silently :
val = None
class SubWidget ( object ) :
extra_files = [ ]
for filename in gen_filenames ( ) :
def __iter__ ( self ) :
return False
data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )
os . _exit ( 1 )
raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
except ImportError :
user_settings = module_to_dict ( settings . _wrapped )
params = { 'datetime' : value , 'current_timezone' : current_timezone }
def bound_data ( self , data , initial ) :
try :
from django . utils . encoding import python_2_unicode_compatible
__str__ = serialize_headers
value = datetime_safe . new_date ( value )
if only_django :
handler . addQuickElement ( "guid" , item [ 'unique_id' ] , guid_attrs )
continue
def do_ifequal ( parser , token , negate ) :
for first_select in _parse_date_fmt ( ) :
extracted . close ( )
if level is not None :
return ''
raise UnrecognizedArchiveFormat (  "Path not a recognized archive format: %s" % filename )
def skip_past ( self , endtag ) :
except ValidationError as e :
def __contains__ ( self , key ) :
self . initial = initial
self . error_class = error_class
re_escaped = re . compile ( r'\\(.)' )
if p >= 0 :
incomment = False
return bytes ( func ( * self . __args , ** self . __kw ) )
try :
sentinal = bit [ 2 ] + ')'
class PyLibMCCache ( BaseMemcachedCache ) :
from django . conf import settings
from UserList import UserList
class Paginator ( object ) :
return ""
if end not in ( ">" , "/>" ) :
ser_fmt = None
binary_type = str
last = pos + 1
from django . core . management . color import no_style
def add_blocks ( self , blocks ) :
self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ] , content_length )
with open ( writer . path , "wb" ) as fh :
pass
outdict = { }
self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
current = current ( )
if not changes and self . verbosity >= 1 :
if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
while t > 0 :
super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
error = { field or NON_FIELD_ERRORS : error . error_list }
ch2 , escaped = next ( input_iter )
if parse_until :
if error_message is not None :
self . attrs = attrs or { }
return False
FormSet . model = model
import hashlib
six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
except ValueError :
return 0
def _load_post_and_files ( self ) :
DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , 'tags' ) ] ) )
def __enter__ ( self ) :
if six . PY3 :
@ register . filter ( expects_localtime = True , is_safe = False )
from django . utils . formats import localize
default_validators = [ validators . validate_ipv4_address ]
if pathext is None :
class Command ( BaseCommand ) :
return False
return False
raise
def dictConfig ( config ) :
self . file . seek ( 0 )
setattr ( Module_six_moves_urllib_parse , attr . name , attr )
readlines = property ( lambda self : self . file . readlines )
bits = token . contents . split ( )
self . connection_reset = connection_reset
ISO_INPUT_FORMATS = {  'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '%Y-%m-%d'  ) ,  }
class _OFFSET ( Structure ) :
if base_url is None :
if self . verbosity > 1 :
return self . tag ( name , func )
print ( "Running pre-migrate handlers for application %s" % app_config . label )
from django . db import models
if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) :
if kw [ 'microsecond' ] :
pos = 0
continue
if name . lower ( ) in ( 'from' , 'to' ) :
return mark_safe ( message )
if self . selected_fields is None or field . attname in self . selected_fields :
if options [ "pidfile" ] :
self . lookups = None
field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )
settings . configure ( )
else :
if sys . platform . startswith ( 'java' ) :
while x > 0 :
self . _dimensions_cache = get_image_dimensions ( self , close = close )
elif not callable ( formfield_callback ) :
self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )
child_loggers = [ ]
if match :
if arg < 1 :
import re
def write ( self , content ) :
return self . handle_merge ( loader , conflicts )
return bytes ( value )
return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
def _create_message ( self , msg ) :
if module_has_submodule ( app_config . module , "management" ) :
if ',' not in arg :
else :
except ImportError :
else :
if i >= self . initial_form_count ( ) and i >= self . min_num :
if isinstance ( source , Group ) :
def _create_alternatives ( self , msg ) :
if PY3 :
self . template = template
stamp = time . mktime ( tt )
bits = token . split_contents ( )
if os . environ . get ( "RUN_MAIN" ) == "true" :
return initial
while True :
attrs . pop ( key )
callback , param_dict = resolver . resolve_error_handler ( 500 )
raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
return value . replace ( tzinfo = timezone )
import smtplib
self . remaining -= len ( result )
except ImportError :
final_output . extend ( alter_sql )
var_obj = None
for ext in pathext :
new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
doy = self . year_days [ self . data . month ] + self . data . day
return 0 , ch2
default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
return '<ExtendsNode: extends %s>' % self . parent_name . token
mail . outbox = [ ]
_templatetags_modules = [ ]
def make_list ( value ) :
for name , field in self . fields . items ( ) :
except UnicodeDecodeError :
DEFAULT_TIMEOUT = object ( )
try :
class ImageField ( FileField ) :
from django . apps import apps
return op ( )
def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :
if not self . port . isdigit ( ) :
if tag . lower ( ) != self . cdata_tag :
if PY3 :
else :
else :
from django . utils . module_loading import module_has_submodule
int_part = int_part_gd [ : : - 1 ]
class ModelChoiceIterator ( object ) :
return ''
if size is None or size > self . remaining :
try :
filterer . addFilter ( self . config [ 'filters' ] [ f ] )
raise ValueError (  "fk_name '%s' is not a ForeignKey to '%s.%'."  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
from django . db . utils import DatabaseError
seconds2 , name2 = chunks [ i + 1 ]
from django . apps import apps
callback = callback . func
def create_bound_method ( func , obj ) :
key = args
class OutputWrapper ( object ) :
class CheckboxInput ( Widget ) :
for name in loggers :
for bit in bits :
if to :
urlize = allow_lazy ( urlize , six . text_type )
try :
self . stdout . write ( self . style . MIGRATE_HEADING ( "Running migrations:" ) )
BASE16_ALPHABET = '0123456789ABCDEF'
except ValueError :
from django . utils import six
class Module_six_moves_urllib_response ( _LazyModule ) :
def reload ( self ) :
self . nodelist = nodelist
self . remove_potfiles ( )
self . children . extend ( data . children )
_iterkeys = "keys"
cls = extension_map . get ( tail_ext )
if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :
pass
raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' )
self . fixture_count += 1
if block is None :
raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
from email . header import Header
id = None
self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )
pad = b'=' * ( - len ( s ) % 4 )
g = g . strip ( "'" )
except OSError as e :
if block_name in parser . __loaded_blocks :
_ , rest = token . contents . split ( None , 1 )
output = self . filter_expression . resolve ( context )
def add ( self , item ) :
encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
def conditional_escape ( text ) :
raise ViewDoesNotExist (  "Could not import '%s.%s'. View is not callable." %  ( mod_name , func_name ) )
raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
def end_serialization ( self ) :
internal_use_only = True
self . instance = opts . model ( )
if isinstance ( data , bytes ) :
from django . utils . datastructures import MultiValueDict
return template_name
def __iter__ ( self ) :
step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
return value [ - 1 ]
j = match . end ( )
return ip_str
s = MLStripper ( )
self . remove ( item )
nodelist = parser . parse ( ( 'endverbatim' , ) )
if str ( number ) [ 0 ] == sign :
@ stringfilter
self . fail_silently = fail_silently
def do_extends ( parser , token ) :
for widget in self . widgets :
reloader_thread ( )
notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
css_classes = bf . css_classes ( )
pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
from django . utils import six
def b64_encode ( s ) :
s = s . encode ( 'utf-8' )
def get_current_timezone_name ( ) :
except NotImplementedError :
if six . PY3 :
from django . utils . text import unescape_entities
for name , block in six . iteritems ( blocks ) :
class Command ( BaseCommand ) :
self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
tried . append ( [ pattern ] )
return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
m = getattr ( lookup_view , '__module__' , None )
if options [ 'verbosity' ] > 0 :
from django . utils . deprecation import RemovedInDjango19Warning
def normalize_newlines ( text ) :
opts = model . _meta
@ stringfilter
if not prefix or not hasattr ( self , '_callback_str' ) :
self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = 'replace' ) ,  file_obj )
def debug ( parser , token ) :
def __str__ ( self ) :
parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
def same_origin ( url1 , url2 ) :
def __enter__ ( self ) :
apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
continue
def changed_data ( self ) :
return { "xmlns" : self . ns }
compare_to = None
field_name = disposition [ 'name' ] . strip ( )
def total_form_count ( self ) :
compiled_regex = re . compile ( regex , re . UNICODE )
import os
try :
for obj in objects :
domains = ( 'django' , )
cache = _create_cache ( alias )
def write ( data ) :
parser . add_argument ( '--pks' , dest = 'primary_keys' ,  help = "Only dump objects with given primary keys. "  "Accepts a comma separated list of keys. "  "This option will only work when you specify one model." )
_get_val = lazy ( _get_val , six . text_type )
else :
def strptime ( self , value , format ) :
widget . is_required = self . required
msg = self . style . HTTP_REDIRECT ( msg )
def __init__ ( self , subject ) :
form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
try :
basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
def url ( self , name ) :
val = self . get ( k , version = version )
self . _post , self . _files = self . parse_file_upload ( self . META , data )
FILTER_ARGUMENT_SEPARATOR = ':'
stream = open ( output , 'w' ) if output else None
dirs . remove ( dirname )
self . _cull_frequency = 3
if not self . is_bound :
if part in PALETTES :
from django . core . management . sql import sql_delete
output_transaction = True
formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )
self . current_app = current_app
parser . add_argument ( 'app_label' ,  help = 'App label of the application to squash migrations for.' )
return dec ( func )
if label_suffix is None :
from __future__ import unicode_literals
parser . delete_first_token ( )
for __ in xrange ( fill_to - sep ) :
for app_config in apps . get_app_configs ( ) :
return VariableNode ( filter_expression )
paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]
merge_migrations = [ ]
self . run ( ** options )
def write ( self , outfile , encoding ) :
import threading
exhaust ( self . _input_data )
def has_key ( self , key ) :
class Lexer ( object ) :
def _is_expired ( self , f ) :
return super ( EmailField , self ) . clean ( value )
command . stdout . write ( errors )
regex = property ( _get_regex , _set_regex )
unescape_string_literal = allow_lazy ( unescape_string_literal )
output = [ ]
from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
if self . output_transaction :
if hasattr ( self , '_choices' ) :
x = int ( x // len ( to_digits ) )
if new_value == value :
self . path = '%s/%s' % ( script_name . rstrip ( '/' ) ,  path_info . replace ( '/' , '' , 1 ) )
def get_template ( template_name , dirs = None ) :
return repr ( dict ( self ) )
except IOError as e :
return func ( * args , ** kwargs )
for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :
gettempdir = tempfile . gettempdir
addr = parseaddr ( force_text ( addr ) )
TRANSLATOR_COMMENT_MARK = 'Translators'
def make_aware ( value , timezone ) :
def deleted_forms ( self ) :
for error in self . error_list :
def get_limit_choices_to ( self ) :
check_for_migrations ( app_config , connection )
msgs , errors , status = popen_wrapper ( args )
if self . verbosity > 0 :
from django . template . base import Variable , Library , VariableDoesNotExist
self . months = months
for key in self . keyOrder :
return _trans . ungettext ( singular , plural , number )
help = "Deprecated - use 'migrate' instead."
from django . core . management . base import CommandError
def open ( self , name , mode = 'rb' ) :
msg += " You may need to add %r to ALLOWED_HOSTS." % domain
class NodeList ( list ) :
run_syncdb = True
cwords = os . environ [ 'COMP_WORDS' ] . split ( ) [ 1 : ]
else :
def __call__ ( self , environ , start_response ) :
self . mod = new
if cursor :
for form in self . saved_forms :
return self . client_address [ 0 ]
def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) :
break
self . charset = None
raise CommandError ( "Unknown application: %s" % app_label )
from django . utils . _os import upath
content_type = content_type . strip ( )
if self . localize :
for tag in open_tags :
except AmbiguityError :
for model in model_list :
if name . lower ( ) in ADDRESS_HEADERS :
try :
if value is None :
REQUEST = property ( _get_request )
def value_from_datadict ( self , data , files , name ) :
elif len ( fks_to_parent ) == 0 :
paras = re . split ( '\n{2,}' , value )
for meta_line in self . get_meta ( table_name ) :
return cls ( file_dict [ 'filename' ] ,  file_dict [ 'content' ] ,  file_dict . get ( 'content-type' , 'text/plain' ) )
MIMEText . __setitem__ ( self , name , val )
widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
raise IOError ( "%s exists and is not a directory." % directory )
import os
starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )
from django . utils import six
m = regex . match ( date )
if len ( hextet ) > 1 :
def __init__ ( self , server , params ) :
self . find_template_cache = { }
from django . utils . _os import upath
from django . utils . encoding import force_str
WEEKDAYS_REV = {  'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 ,  'saturday' : 5 , 'sunday' : 6  }
self . _response_middleware = [ ]
return default
warnings . warn ( 'Cache key will cause errors if used with memcached: '  '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) ,  CacheKeyWarning )
if hasattr ( signal , 'SIGTTOU' ) :
super ( MovedModule , self ) . __init__ ( name )
value = [ ]
class Module_six_moves_urllib_error ( _LazyModule ) :
widget = NullBooleanSelect
self . _request_middleware = None
@ stringfilter
class FileField ( Field ) :
try :
autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
if initial == 'False' :
other = other . __cast ( )
return loader . get_template ( template )
elif token . token_type == 2 :
if six . PY3 :
def phone2numeric_filter ( value ) :
from __future__ import unicode_literals
return key , pdict
self . per_page = int ( per_page )
iterkeys = _iterkeys
PY2 = sys . version_info [ 0 ] == 2
return render_value_in_context ( output , context )
else :
super ( Serializer , self ) . handle_field ( obj , field )
def decr ( self , key , delta = 1 , version = None ) :
import shutil
else :
Model = _get_model ( d [ "model" ] )
output = self . nodelist . render ( context )
label = 'label'
if not self . compile_function_error ( token , e ) :
return timedelta ( 0 )
timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
open_method , mode = self . compression_formats [ cmp_fmt ]
else :
from email . utils import formatdate
__init__ = type . __init__
nodelist_empty = None
try :
return '%02d' % self . data . second
connection = connections [ options [ 'database' ] ]
except TypeError :
from binascii import Error as BinasciiError
msg = "Invalid HTTP_HOST header: %r." % host
return self . nodelist_false . render ( context )
return ipv4_unpacked
self . _update_errors ( e )
try :
def close ( self ) :
class FixedOffset ( tzinfo ) :
class_name = model . __name__ + str ( 'Form' )
sign = ''
if filename . endswith ( extensions ) or filename in extra_files :
except TemplateSyntaxError as e :
return mark_safe ( linebreaks ( value , autoescape ) )
return strip_tags ( value )
else :
def __reversed__ ( self ) :
return None
def get_field_type ( self , connection , table_name , row ) :
from django . core . management . sql import sql_destroy_indexes
if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :
self . managed = True
try :
output = [ ]
message = _ ( 'Enter a valid URL.' )
load_template_source . is_usable = True
from django . utils import translation
def safeseq ( value ) :
parent = ( object , )
script_name = get_script_name ( environ )
return self . __cast ( ) == other
class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :
value = bytes_to_text ( value , self . encoding )
for candidate in ( ( d not in models or d in model_list ) for d in deps ) :
var = var [ 2 : - 1 ]
else :
return t [ 0 ]
use_grouping = use_grouping and grouping > 0
using = options . get ( 'database' )
class Loader ( BaseLoader ) :
compare_to = nodelist_true_output = self . nodelist_true . render ( context )
key = bytes_to_text ( key , self . encoding )
inner_text = [ ]
else :
self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
def start_serialization ( self ) :
graph = loader . graph
from django . utils import formats
try :
super ( SortedDict , self ) . clear ( )
headerlist = [ ]
continue
try :
else :
format_locations . append ( path + '.%s' )
locks . unlock ( fd )
self . active_writers -= 1
if value is not result :
return self . queryset . none ( )
if process_all :
from django . db import models
project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
from __future__ import unicode_literals
cursor . execute ( sql )
continue
handler . addQuickElement ( "ttl" , self . feed [ 'ttl' ] )
from django . utils . functional import cached_property
message = "%s\n\nRequest repr(): %s" % ( self . format ( record ) , request_repr )
cursor . execute ( "INSERT INTO %s (cache_key, value, expires) "  "VALUES (%%s, %%s, %%s)" % table ,  [ key , b64encoded , exp ] )
ip_address_validator_map = {  'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
class TypedChoiceField ( ChoiceField ) :
import sys
handler . addQuickElement ( "summary" , item [ 'description' ] , { "type" : "html" } )
self . verbatim = False
def parse_accept_lang_header ( lang_string ) :
cursor . execute ( "DELETE FROM %s WHERE cache_key = %%s" % table , [ key ] )
time_str = time_str . decode ( 'utf-8' )
default_settings = module_to_dict ( global_settings )
params = [ source [ 1 ] ]
from importlib import find_loader as importlib_find
for resultclass in resultclasses :
self . setlist ( k , v )
else :
def F ( self ) :
url , trimmed = escape ( url ) , escape ( trimmed )
def render ( self , context ) :
e . django_template_source = token . source
def parse_cookie ( cookie ) :
root = config . get ( 'root' , None )
self . keyOrder . remove ( result [ 0 ] )
dot = package . rindex ( '.' , 0 , dot )
int_part_gd = ''
if result :
try :
if formatter :
connection = connections [ options [ 'database' ] ]
@ stringfilter
def wordwrap ( value , arg ) :
else :
guid_attrs = { }
end_index = i
else :
return d [ key ]
if cookie == '' :
try :
self . nodelist_empty = nodelist_empty
app_names = sorted ( loader . migrated_apps )
raise CommandError ( "Unknown serialization format: %s" % format )
p = i
self . configure_logger ( name , loggers [ name ] )
def size ( self , name ) :
raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
def __getitem__ ( self , name ) :
pass
finder = sys . path_importer_cache [ entry ]
from __future__ import unicode_literals
args = [ ]
return
not_found . append ( e . args [ 0 ] )
else :
return strftime ( self , fmt )
self . children . append ( data )
from . html_parser import HTMLParser , HTMLParseError
return WEEKDAYS [ self . data . weekday ( ) ]
plural . append ( contents )
close = self . closed
else :
output = self . nodelist . render ( context )
if 'Location' in response and request . get_host ( ) :
while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
from django . utils . deprecation import RemovedInDjango20Warning
safe_data = { }
return data
color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
if not callable ( getattr ( template , 'render' , None ) ) :
try :
options [ option ] = value
while ch != '}' :
def __deepcopy__ ( self , memo ) :
def __init__ ( self , query_string = None , mutable = False , encoding = None ) :
thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
@ python_2_unicode_compatible
self . stream = six . StringIO ( stream_or_string )
@ python_2_unicode_compatible
except :
yield key , self [ key ]
try :
if attrs :
self . ignore_patterns = list ( set ( ignore_patterns ) )
token = parser . next_token ( )
factor -= 1
if not match :
new_environ [ "RUN_MAIN" ] = 'true'
def __setitem__ ( self , key , value ) :
formfield = formfield_callback ( f , ** kwargs )
if err_log :
return
else :
return strftime ( self , fmt )
stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
words = word_split_re . split ( force_text ( text ) )
from django . utils . http import urlquote
from __future__ import absolute_import
opts = model . _meta
else :
def merge ( self , other ) :
DEFAULT_PORT = "8000"
finally :
self . stdout . write ( errors )
raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
d = Decimal ( input_val )
if domain == 'djangojs' and file_ext in command . extensions :
if not isinstance ( error , ValidationError ) :
if self . __dispatch is None :
if ret :
from django . apps import apps
handler . addQuickElement ( "email" , item [ 'author_email' ] )
context . autoescape = self . setting
if os . path . isdir ( 'locale' ) :
self . validate ( display_num_errors = True )
i += 1
def get_major_version ( version = None ) :
msgs = msgs . replace ( old , new )
try :
from django . utils . timezone import get_current_timezone_name
if scheme not in self . schemes :
else :
def add_arguments ( self , parser ) :
def __wrapper__ ( * args , ** kw ) :
self . _post = QueryDict ( '' , mutable = True )
hidden_widget = MultipleHiddenInput
visible_issue_count += len ( issues )
match = None
UnlockFileEx = windll . kernel32 . UnlockFileEx
if hasattr ( mw_instance , 'process_response' ) :
django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
class GenericIPAddressField ( CharField ) :
if shutdown_message :
else :
p = i
if getattr ( current , 'do_not_call_in_templates' , False ) :
data [ field . name ] = field . to_python ( field_value )
link = cache_get ( key )
if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
else :
def _create_message ( self , msg ) :
connection . close ( )
lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
idstring = '.' + idstring
class LocalTimezone ( tzinfo ) :
self . full_clean ( )
if isinstance ( value , six . text_type ) :
def handle_inspection ( self , options ) :
break
databases = [ self . using , None ]
result = [ ]
def __bool__ ( self ) :
continue
class TimestampSigner ( Signer ) :
def get_commands ( ) :
ratio = ( value / max_value ) * max_width
function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
cleaned_data = form . cleaned_data
unichr = unichr
tpl = "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
except ValueError :
return random_module . choice ( value )
from django . utils . text import get_text_list
raise TemplateSyntaxError ( "Named cycle '%s' does not exist" % name )
try :
for path_to_remove in self . paths_to_remove :
errors = self . default_error_messages . copy ( )
empty_values = list ( validators . EMPTY_VALUES )
_trans = Trans ( )
if hasattr ( TemplateLoader , 'load_template_source' ) :
return super ( QueryDict , self ) . pop ( key , * args )
field_notes . append ( 'Field renamed to remove unsuitable characters.' )
self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )
def add_prefix ( self , index ) :
except UnicodeEncodeError :
model_list = app_config . get_models ( )
return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
def __getitem__ ( self , index ) :
self . handle_data ( rawdata [ i : j ] )
ns = app_list [ 0 ]
requires_system_checks = False
if truncate is None :
return [ ]
def get_parent ( self , context ) :
if name is None :
special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :
name = '.' . join ( parts )
self . cdata_tag = None
if isinstance ( arg , unicode ) :
_func_globals = "__globals__"
super ( MultiWidget , self ) . __init__ ( attrs )
fn = code_changed
from django . utils . six import StringIO
for key , value in six . iterlists ( self ) :
self . waiting_writers -= 1
prefix = settings . MEDIA_URL
for attr in _urllib_request_moved_attributes :
else :
def do_ntranslate ( singular , plural , number , translation_function ) :
if settings . USE_L10N and isinstance ( value , six . string_types ) :
if headerlist is not None :
if not qs . ordered :
else :
register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
self . verbatim = False
return self . _changed_data
iteritems = _iteritems
if self . can_import_settings :
def urlunquote ( quoted_url ) :
renderer = RadioFieldRenderer
raise AttributeError ( "You cannot set the upload handlers after the upload has been processed." )
return self . blocks [ name ] [ - 1 ]
import datetime
simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )
if number_equal > 40 :
@ register . filter ( is_safe = True )
return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
if f . rel and f . rel . to not in to_delete :
for i , handler in enumerate ( self . _upload_handlers ) :
raise self . warning
BLOCK_TAG_START = '{%'
else :
activate = lambda x : None
self . name = name
return d [ key ]
for choice in self . field . choice_cache :
super ( DebugLexer , self ) . __init__ ( template_string , origin )
self . validate_key ( key )
try :
break
return type ( self ) . __bool__ ( self )
def end_serialization ( self ) :
self . paths_to_remove = [ ]
yield self [ key ]
except :
updates = dict ( )
else :
def _isdst ( self , dt ) :
disable_existing = config . pop ( 'disable_existing_loggers' , True )
self . default_args = default_args or { }
app_list = resolver . app_dict [ ns ]
self . style_func = None
def __init__ ( self , dt ) :
super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
token = Token ( TOKEN_BLOCK , block_content )
patch_response_headers ( response , cache_timeout = - 1 )
timestamp = git_log . communicate ( ) [ 0 ]
except ( archive . ArchiveException , IOError ) as e :
class SingleZipReader ( zipfile . ZipFile ) :
criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
return list ( self . iterlists ( ) )
@ register . filter ( is_safe = False )
return s . get_data ( )
while not bit . endswith ( sentinal ) :
resolved_args = [ var . resolve ( context ) for var in self . args ]
urlconf = settings . ROOT_URLCONF
data = { }
self . encoding = encoding
return _decorator
year = year + ( ( 2000 - year ) // 28 ) * 28
inner_text . extend ( getInnerText ( child ) )
output . append ( str_hidden )
try :
from django . core . exceptions import DisallowedHost , ImproperlyConfigured
else :
from django . db import connections , DEFAULT_DB_ALIAS
pass
new_method = base . __dict__ . get ( new_method_name )
field_dict = OrderedDict ( field_list )
from django . utils . functional import allow_lazy
def close ( self ) :
if name == 'content-disposition' :
raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )
def get ( self , key , default = None , version = None ) :
add_to_builtins ( 'django.template.defaultfilters' )
try :
chunk_size = self . DEFAULT_CHUNK_SIZE
raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
self . open ( )
from django . core . management . base import BaseCommand , CommandError
return value
extensions = tuple (  handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )
path = join ( os . getcwdu ( ) , path )
except UnicodeEncodeError :
ns_pattern = ns_pattern + extra
parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
self . _pk_field = pk = self . model . _meta . pk
if not hasattr ( callback , '__name__' ) :
new_value . append ( self . coerce ( choice ) )
IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )
sys . exit ( 3 )
def add_item_elements ( self , handler , item ) :
raise InvalidCacheBackendError ( "Could not find backend '%s': %s" % (  backend , e ) )
def _add_fallback ( self ) :
pass
def get ( self , key , otherwise = None ) :
if with_base_fields :
if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :
for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :
return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
cursor . execute ( "DELETE FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
else :
super ( URLValidator , self ) . __init__ ( ** kwargs )
except TypeError :
handler . addQuickElement ( "email" , self . feed [ 'author_email' ] )
if args :
elif len ( bits ) == 6 :
def __init__ ( self , attrs = None ) :
i += 1
if location is None :
title = list_ [ i ]
m = dict ( zip ( new_keys , keys ) )
if row_data in seen_data :
return formatted_subject [ : 989 ]
if t is not None :
if self . save_as_new :
sub_ul_renderer . choice_input_class = self . choice_input_class
if not prefix . endswith ( '/' ) :
def is_url ( self , template ) :
class ContentFile ( File ) :
self . style = no_style ( )
if hasattr ( decorator , '__name__' ) :
if self . _num_pages is None :
from django . utils import six , lru_cache
class BadHeaderError ( ValueError ) :
return [ ]
if not hasattr ( values , '__len__' ) :
message = message % ( ', ' . join ( missing_fields ) ,  opts . model . __name__ )
self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
self . choice_cache = None
class WindowsError ( Exception ) :
_standard_context_processors = tuple ( processors )
compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
return "<BaseConverter: base%s (%s)>" % ( len ( self . digits ) , self . digits )
@ register . filter ( is_safe = True )
handlers = config . get ( 'handlers' , EMPTY_DICT )
return self . filter ( name , func , ** flags )
nodelist = parser . parse ( ( 'endfilter' , ) )
for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
class SimplerXMLGenerator ( XMLGenerator ) :
timeval = time . time ( )
if app_config . models_module is None :
self . _raw_ipv6 = True
m = self . INDEX_PATTERN . match ( rest )
choices = property ( _get_choices , _set_choices )
fp . write ( content )
def message_dict ( self ) :
output_transaction = True
try :
value = list . __getitem__ ( self , key )
if not settings . is_overridden ( 'TEST_RUNNER' ) :
response [ 'Cache-Control' ] = cc
from django . utils . module_loading import import_string
if hasattr ( _active , "value" ) :
from django . utils . safestring import mark_safe
def handle ( self , * args , ** options ) :
if option [ 1 ] :
return
class Signer ( object ) :
if max_num is None :
if len ( bits ) != 2 :
open_tags . insert ( 0 , tagname )
from . import six
if self . interactive :
digits . insert ( - exponent , '.' )
handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ 'link' ] } )
sys . exit ( exit_code )
if iterator is None :
msg = "System check identified some issues:\n%s" % msg
def forbid_multi_line_headers ( name , val , encoding ) :
related_att = getattr ( obj , field . get_attname ( ) )
for x , y in zip ( val1 , val2 ) :
return formats . date_format ( value , arg )
msgs = msgs . decode ( 'utf-8' )
def __promise__ ( cls , klass , funcname , method ) :
saved_locale = None
bits = [ ]
if mime_encode :
if ip_str . count ( '::' ) == 1 :
def date ( value , arg = None ) :
def get_language_from_path ( path ) :
if field . rel . through . _meta . auto_created :
self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
if six . PY2 :
def render ( self , context ) :
if hasattr ( value , 'close' ) :
self . add_handlers ( logger , handlers )
return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
os . remove ( name )
from collections import UserList
update_wrapper ( _wrapper , func )
@ register . tag
with context_instance . push ( dictionary ) :
def __str__ ( self ) :
output = [ ]
from importlib import import_module
return do_ntranslate ( singular , plural , number , 'ungettext' )
elif self . waiting_readers != 0 :
_called_from_command_line = False
with self . _lock :
for uclass , unique_check in all_unique_checks :
pass
@ property
handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
ret = b'' . join ( self . vals )
if value in self . empty_values :
class MLStripper ( HTMLParser ) :
self . _assert_mutable ( )
potfiles = self . build_potfiles ( )
if size == 0 :
old_attr = name
if not squash :
@ stringfilter
from django . template . loader import get_template
@ register . filter ( is_safe = False )
return msg_count
def is_hidden ( self ) :
klass . prefix = '\n' + find_indentation ( node )
int ( value )
self . _view_middleware . append ( mw_instance . process_view )
from django . utils import six , timezone
if fake :
if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :
def _setup ( self ) :
@ python_2_unicode_compatible
def U ( self ) :
meth = cls . __promise__ ( resultclass , k , v )
return token
value = normalize_newlines ( value )
qs = self . model . _default_manager . get_queryset ( )
if not re . search ( r'^[_a-zA-Z]' , name ) :
except ( OSError ) :
pass
new_method_name = renamed_method [ 1 ]
localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )
deps = [ ]
get_function_defaults = operator . attrgetter ( _func_defaults )
class Trans ( object ) :
return left
if input_formats is not None :
from django . utils import six
return self [ key ]
return self . _coerce ( value )
return self . as_ul ( )
security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  'request' : request  } )
from django . db . migrations import Migration
return field_dict
if settings . DEBUG_PROPAGATE_EXCEPTIONS :
def tag ( self ) :
if hasattr ( self , '_post' ) :
res = subject [ p : i ]
return changeset
self . stream . write ( '-' * 79 )
def __init__ ( self , * args , ** kwargs ) :
styles . reverse ( )
if self . verbosity > 1 :
if neg :
while model_dependencies :
self . check_migrations ( )
try :
return s
if len ( bits ) == 2 :
os . symlink ( original_path , symlink_path )
if field in form . cleaned_data :
raise TypeError (  "Variable must be a string or number, got %s" % type ( var ) )
class MIMEMixin ( ) :
__eq__ = new_method_proxy ( operator . eq )
merge_migrations . append ( migration )
self . stream . write ( "]" )
getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )
return output [ : : - 1 ]
page_range = property ( _get_page_range )
for f in self . instance . _meta . fields :
flup_module = 'server.' + options [ 'protocol' ]
return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
from django . db import models , DEFAULT_DB_ALIAS
if e . errno != errno . ENOENT :
from django . utils . functional import curry , Promise
_file . write ( chunk )
def getvalue ( self ) :
def render ( self , name , value , attrs = None ) :
except ImproperlyConfigured as exc :
dictConfigClass = DictConfigurator
if p . find ( ':_(' ) >= 0 :
return str ( o )
def _get_width ( self ) :
self . _post_render_callbacks . append ( callback )
class Node ( object ) :
return EscapeBytes ( bytes ( s ) )
random = random . SystemRandom ( )
self . xml . endElement ( "natural" )
return attrs
if isinstance ( template_name , ( list , tuple ) ) :
def handle_m2m_field ( self , obj , field ) :
try :
from __future__ import unicode_literals
if len ( bits ) == 4 :
return Truncator ( value ) . chars ( length , html = True )
obj_pk = obj_pk . pk
if value is None :
def __len__ ( self ) :
self . stdout . write ( "No fixture '%s' in %s." %  ( fixture_name , humanize ( fixture_dir ) ) )
self . attrs , self . choices = attrs , choices
supported = True
ttl = force_text ( ttl )
value = connections [ db ] . ops . process_clob ( row [ 1 ] )
parentloop = { }
self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
def render ( self , context ) :
def get_ns_resolver ( ns_pattern , resolver ) :
context = self . resolve_context ( self . context_data )
if isinstance ( widget , NumberInput ) :
except TypeError :
return ''
self . _assert_mutable ( )
orig_vars = cls . __dict__ . copy ( )
translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )
value = environ . get ( str ( key ) , str ( default ) )
def resolve ( self , path ) :
raise AppRegistryNotReady (  "The translation infrastructure cannot be initialized before the "  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
def reader ( self ) :
return list ( value )
raise ValueError ( 'No handler found with '  'name %r' % name )
sys . stderr . write ( "  installed flup, then make sure you have it in your PYTHONPATH.\n" )
self . backout . append ( self . pointer )
try :
val = force_text ( val )
return bool ( value )
return ZERO
try :
if isinstance ( s , bytes ) :
m = self . WORD_PATTERN . match ( rest )
def end_serialization ( self ) :
pass
self . xml . endElement ( "django-objects" )
for k , v in six . iteritems ( dict_ ) :
words = allow_lazy ( words )
from django . utils import six
class CommandParser ( ArgumentParser ) :
optimizer = MigrationOptimizer ( )
value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
return value . pk
try :
else :
def __add__ ( self , other ) :
return bytes ( s )
new = name
class CachedDnsName ( object ) :
httpd_cls = WSGIServer
sys . stdout = NullDevice ( )
current_timezone = timezone . get_current_timezone ( )
space = " "
@ register . filter ( is_safe = True )
self . _callback_str = callback
response . streaming_content = [ ]
try :
app_label = label
self . remaining = limit
for item in self . items :
def GET ( self ) :
if self . decimal_places is not None :
value = self . _empty_value
self . verbosity = options [ 'verbosity' ]
reloader ( wrapped_main_func , args , kwargs )
result . pop ( )
inner , outer = digest ( ) , digest ( )
v ( value )
if six . PY2 and not isinstance ( path , bytes ) :
else :
link_prev [ NEXT ] = link_next
try :
value = datetime_safe . new_datetime ( value )
class IfChangedNode ( Node ) :
elif args [ 1 ] [ 0 ] == '4' :
if value . __traceback__ is not tb :
def clear_checkbox_name ( self , name ) :
json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
def value_from_datadict ( self , data , files , name ) :
if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :
return from_current_timezone ( result )
import os
request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
escaped = False
def http_date ( epoch_seconds = None ) :
self . current_token = self . next_token ( )
except StandardError as e :
update_wrapper ( _wrapper , dummy )
from django . utils import six
try :
class LocaleRegexURLResolver ( RegexURLResolver ) :
if item [ 'description' ] is not None :
item = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
def render ( self , context ) :
def delete_many ( self , keys , version = None ) :
return self . _choices
else :
super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
if self . options . get ( "indent" ) :
if six . PY3 :
if categories :
error_messages = kwargs . get ( 'error_messages' ) or { }
self . json_kwargs = self . options . copy ( )
value = force_text ( value )
if value in self . empty_values :
ipv4_unpacked = _unpack_ipv4 ( ip_str )
COMMENT_TAG_START = '{#'
self . setlistdefault ( key ) . append ( value )
filters [ name ] = self . configure_filter ( filters [ name ] )
return True
class ComboField ( Field ) :
bits = arg . split ( ',' )
from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
return 'StopUpload: Consume request data, then halt.'
if app_config . models_module is None :
if not os . path . exists ( self . _dir ) :
self . xml . startDocument ( )
return list ( reversed ( modules ) )
else :
if inplural :
def pprint ( value ) :
def new_file ( self , file_name , * args , ** kwargs ) :
return ''
infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
src_data = prepare_js_for_gettext ( src_data )
substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
if 'pk' in d :
line = '%s\n' % plural_form_line
self . stdout . write ( self . style . MIGRATE_HEADING ( "Optimizing..." ) )
final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
os . utime ( dst , ( st . st_atime , st . st_mtime ) )
if not basedirs :
return func ( self . _wrapped , * args )
else :
return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )
pass
self . keyOrder . append ( key )
return value
return '%02d' % self . data . day
def format_html_join ( sep , format_string , args_generator ) :
def _set_name ( self , name ) :
nodelist = parser . parse ( ( 'endwith' , ) )
if match :
value = bool ( value )
def __reduce__ ( self ) :
else :
if not isinstance ( initial , list ) :
def as_widget ( self , widget = None , attrs = None , only_initial = False ) :
args = token . contents . split ( )
return self . source
_assertCountEqual = "assertCountEqual"
return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )
message = 'make sure the name begins with a letter or underscore'
data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
qs = qs . order_by ( self . model . _meta . pk . name )
raise CommandError ( "couldn't extract file %s to %s: %s" %  ( filename , tempdir , e ) )
self . connection = connection_class ( self . host , self . port , ** connection_params )
if autoescape :
if not hasattr ( mail , 'outbox' ) :
module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
value = bytes_to_text ( value , self . encoding )
return 0
want_unicode = True
from django . utils . six . moves import cPickle as pickle
i = i % j
return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
import glob
new_name = new_name . replace ( '__' , '_' )
if name == 'regex' :
if _file is not None :
elif _len ( cache ) >= maxsize :
del form . cleaned_data [ field ]
return value
@ classmethod
for app_config in apps . get_app_configs ( ) :
from __future__ import unicode_literals
e . django_template_source = source
value = escape ( value )
if format not in serializers . get_public_serializer_formats ( ) :
try :
end = kwargs . pop ( "end" , None )
for template_name in template_name_list :
def write_pot_file ( potfile , msgs ) :
message . message = error_messages [ message . code ]
def __copy__ ( self ) :
self . _tzname = self . tzname ( dt )
return super ( FileField , self ) . clean ( data )
if name . lower ( ) == 'subject' :
return total_forms
def render ( self , context ) :
import copy
return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
self . lasttag = tag = match . group ( 1 ) . lower ( )
if kwarg :
request_finished = Signal ( )
yield b'' . join ( self )
except ImportError as e :
comment_notes = [ ]
def __enter__ ( self ) :
try :
for match in matches :
if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
from django . utils . text import normalize_newlines , slugify as _slugify
@ register . filter ( is_safe = False )
__all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
output . append ( label_output )
status_code = 405
out = self . compress ( clean_data )
self . var_name = var_name
def new ( self , values = None ) :
raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : choice } ,  )
def __iter__ ( self ) :
app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
def value_from_datadict ( self , data , files , name ) :
if vary_on is None :
return results
potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
return value
else :
return ( ret == 0 )
raise NotImplementedError ( 'subclasses of BaseEmailBackend must override send_messages() method' )
cursor . execute ( "UPDATE %s SET value = %%s, expires = %%s "  "WHERE cache_key = %%s" % table ,  [ b64encoded , exp , key ] )
self . handle_endtag ( tag . lower ( ) )
from django . utils . html import escape
try :
all_locales = [ ]
parts = parts [ : - 1 ]
if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
try :
def handle_m2m ( value ) :
if comment_lineno_cache is not None :
from django . db . migrations . loader import MigrationLoader , AmbiguityError
if not token . contents :
from PIL import ImageFile as PillowImageFile
translation . activate ( saved_locale )
if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :
return result
from django . utils import six
if hasattr ( base , 'base_fields' ) :
self . attrs = { }
self . pos += 1
self . set_cdata_mode ( tag )
defaults , _ = parser . parse_args ( args = [ ] )
raise SyntaxError ( "Translation blocks must not include other block tags: %s (%sline %d)" % ( t . contents , filemsg , t . lineno ) )
if bf . label :
return '%02d' % self . data . minute
from django . conf import settings
msgs = msgs . replace (  "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self . domain , "" )
root = logging . root
else :
def _create_mime_attachment ( self , content , mimetype ) :
DEFAULT_MIN_NUM = 0
return None
self . key_func = get_key_func ( params . get ( 'KEY_FUNCTION' , None ) )
codecs . lookup ( content_params [ 'charset' ] )
@ wraps ( func )
return nodelist
pks = options . get ( 'primary_keys' )
cursor . execute ( statement )
from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
if definition :
output . append ( app_output )
yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
exc_value . __cause__ = exc
import warnings
return timezone . zone
if app_label not in executor . loader . migrated_apps :
return self . mapping . get ( self . tagtype , '' )
exts = extensions if extensions else [ 'js' ]
codecs . lookup ( encoding )
def fastcgi_help ( message = None ) :
return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
if self . verbosity >= 2 :
self . locale_paths . append ( os . path . abspath ( 'locale' ) )
from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )
raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
from django . apps import apps
return script_name . decode ( UTF_8 )
while len ( line ) > max_width :
self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
for name in namelist :
class Module_six_moves_urllib_parse ( _LazyModule ) :
return value . lower ( )
self . chunk_size = chunk_size
super ( FileField , self ) . __init__ ( * args , ** kwargs )
result = user_function ( * args , ** kwds )
return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
options = { }
return attrs
return None
if tried :
from django . utils . encoding import smart_text , force_str , force_text
def _handle_object ( self , node ) :
i = next_space_index ( subject , i )
decimal_separator = get_format ( 'DECIMAL_SEPARATOR' )
try :
else :
token = get_token ( request )
if not hextets [ index ] :
ctx = hashlib . md5 ( )
else :
token = "not in"
del self . _cache [ key ]
klass = import_string ( backend or settings . EMAIL_BACKEND )
def expression ( self , rbp = 0 ) :
ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :
declared_fields . pop ( attr )
return 1
for chunk in field_stream :
matches = False
def filesizeformat ( bytes ) :
return '\n' . join ( output )
status_code = 301
if model_list is None :
cmp_fmt = parts [ - 1 ]
urlresolvers . set_urlconf ( urlconf )
return value
exclude . append ( name )
else :
file = file_or_path
if model not in app_list_value :
value = force_str ( value )
def get_unbound_function ( unbound ) :
elif command . verbosity > 0 :
self . _files = MultiValueDict ( )
if self . callback ( record ) :
args = ''
return smart_text ( obj )
if isinstance ( level , int ) :
file_root , file_ext = os . path . splitext ( file_name )
opt_label += '='
class HiddenInput ( Input ) :
arg = args [ 1 ]
def add_arguments ( self , parser ) :
html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
@ register . filter ( is_safe = False )
sys . stdout , sys . stderr = so , se
attrs_plus = self . attrs . copy ( )
return
stats [ HITS ] += 1
locales = locale or all_locales
except LookupError :
else :
return SafeText ( data )
return result
def display ( self ) :
if expires is not None :
if propagate is not None :
selected_choices = set ( force_text ( v ) for v in selected_choices )
cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
_urlconfs . value = urlconf_name
except ( HTMLParseError , UnboundLocalError ) :
output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
def __repr__ ( self ) :
readinto = property ( lambda self : self . file . readinto )
result . append ( Group ( ( ( "%%(%s)s" % name ) , name ) ) )
chunk_length = len ( chunk )
return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )
import io
for k in keys :
if labels is not None :
handler . file . close ( )
class EndToken ( TokenBase ) :
def get ( self , key , default = None , version = None ) :
self . takes_context = takes_context
hextets += [ '' ]
__unicode__ = new_method_proxy ( unicode )
def handle ( self , * test_labels , ** options ) :
bf = self [ name ]
return ret
default_storage = DefaultStorage ( )
for key in self . bad_cookies :
if not response . has_header ( 'Expires' ) :
return force_text ( s , encoding , strings_only , errors )
super ( ValidationError , self ) . __init__ ( message , code , params )
UNKNOWN_SOURCE = '<unknown source>'
return self . getvalue ( )
app_models = app_config . get_models ( include_auto_created = True )
def save ( self , commit = True ) :
if upto != len ( token ) :
def get_path_info ( environ ) :
def send ( self , fail_silently = False ) :
return result
changed = False
templatetags_modules = [ ]
def render ( self , context ) :
if id_ :
return sys . modules [ name ]
raise CommandError ( "Type '%s help %s' for usage information." % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
if str ( '\n' ) in value or str ( '\r' ) in value :
if settings . FORCE_SCRIPT_NAME is not None :
return r
return d
def _wrapped_view ( request , * args , ** kwargs ) :
raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
class TemplateTagNode ( Node ) :
return ''
alternative_subtype = 'alternative'
break
WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
obj = '%s.%s' % ( app , model . _meta . object_name )
hlen = digest ( ) . digest_size
def __call__ ( self , value ) :
templatetags_modules = get_templatetags_modules ( )
date_keys = ( 'updateddate' , 'pubdate' )
self . _non_form_errors = None
return data
t = getattr ( _active , "value" , None )
m2m_value = lambda value : value . natural_key ( )
return False
return num_sent
if hasattr ( _urlconfs , "value" ) :
conflicts = loader . detect_conflicts ( )
return t . render ( context_instance )
parser . add_argument ( 'args' , nargs = argparse . REMAINDER ,  help = 'Various KEY=val options.' )
def request ( request ) :
view_path = url_name or self . _func_path
if six . PY3 :
self . to = [ ]
if default is not RAISE_ERROR :
return ''
self . renderer = renderer
ns = current_app
requires_system_checks = False
if default_list is None :
localize = kwargs . get ( 'localize' , False )
self . name = name
cleaned_data = self . clean ( )
def value ( self ) :
migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
def timestamp ( self ) :
return mark_safe ( data )
def _key_to_file ( self , key , version = None ) :
field_notes . append ( 'Field name made lowercase.' )
else :
wrap = allow_lazy ( wrap , six . text_type )
return self . __language
for handler in handlers :
return self . _files
class DjangoSafeDumper ( SafeDumper ) :
for t in type ( res ) . mro ( ) :
size = property ( _get_size , _set_size )
resource = resource_string ( app_config . name , pkg_name )
if self . _wrapped is empty :
from django . conf import settings
stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :
if value in ( None , '' ) :
class DisallowedHost ( SuspiciousOperation ) :
if settings . USE_I18N :
try :
if fk . unique :
self . buffer = b''
kwargs = { }
try :
if instance is not None :
try :
def urlencode ( value , safe = None ) :
res = ''
_active . value = timezone
class RequireDebugTrue ( logging . Filter ) :
from django . core . files . utils import FileProxyMixin
msg_data = msg . as_bytes ( )
import operator
def __init__ ( self , * args , ** kwargs ) :
return s
except UnicodeError :
request = record . request
except ValueError :
self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
class RenderContext ( BaseContext ) :
final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
return output
return self . _regex_dict [ language_code ]
piece += elt [ 0 ]
from django . utils . deprecation import RemovedInDjango19Warning
if unhandled_params :
self . add_error ( None , e )
path = parts [ 1 : ]
used_column_names = [ ]
return BlockNode ( block_name , nodelist )
self . _read_started = True
last = root [ PREV ]
else :
writelines = property ( lambda self : self . file . writelines )
file_pos = file . tell ( )
warnings . warn (  'import_by_path() has been deprecated. Use import_string() instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
text = force_text ( text )
if isinstance ( value , list ) :
result . parent = self
if self . feed [ 'feed_copyright' ] is not None :
import os
def _get_filename ( self ) :
try :
os . remove ( path_to_remove )
extra_attrs = self . widget_attrs ( widget )
if found :
def _add_doc ( func , doc ) :
try :
else :
self . buffer = b''
if hasattr ( self , '_files' ) :
return input_val
from django . core . management . sql import sql_flush , emit_post_migrate_signal
return Literal ( value )
break
self . _assert_mutable ( )
if not app_labels :
else :
self . validate_unique ( )
parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' ,  help = 'Fixture labels.' )
option_list = ( )
eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )
if not url_info . netloc and url_info . scheme :
def _get_image_dimensions ( self ) :
else :
raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )
return result
super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
DateTimeAwareJSONEncoder = DjangoJSONEncoder
cache [ key ] = oldroot
new_args = [ ]
def widget_attrs ( self , widget ) :
self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
try :
output = fp . read ( )
def add_arguments ( self , parser ) :
if isinstance ( choice_label , ( tuple , list ) ) :
self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )
from django . utils . six . moves . urllib . parse import urlparse
if data in self . children :
return ' ' . join ( extra_classes )
value = value . replace ( replacement , '' )
self . META = environ
payload = text . encode ( utf8_charset . output_charset )
return module . Command ( )
val1 = parser . compile_filter ( bits [ 1 ] )
for _ , nodelist in self . conditions_nodelists :
loader = MigrationLoader ( None , ignore_no_migrations = True )
final_path = abspathu ( join ( base , * paths ) )
apps = { }
self . _reverse_dict [ language_code ] = lookups
def npgettext ( context , singular , plural , number ) :
super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
with io . open ( fname , 'rb' ) as f :
if len ( val1 ) != len ( val2 ) :
readline = property ( lambda self : self . file . readline )
return mark_safe ( value )
def render ( self , context ) :
args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
self . state = state
def translation ( language ) :
self . msg = msg
response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
return self . _errors
if initial is None :
open_tags = open_tags [ i + 1 : ]
self . context . pop ( )
plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]
return node
for medium in extend :
_mtimes = { }
if language in _DJANGO_DEPRECATED_LOCALES :
def is_secure ( self ) :
line = sio . readline ( size )
self . settings_exception = None
self . verbose_name = 'cache entry'
changes = autodetector . changes ( graph = executor . loader . graph )
if status != STATUS_OK :
import mimetypes
value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
warning = kwargs [ 'warning' ]
parser . add_argument ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
attrs [ 'id' ] = auto_id
else :
def get ( self , key , default = None , version = None ) :
from django . conf import settings
import zipfile
inner_result , inner_args = [ ] , [ ]
class ViewDoesNotExist ( Exception ) :
def __str__ ( self ) :
logger . error ( 'Internal Server Error: %s' , request . path ,  exc_info = exc_info ,  extra = {  'status_code' : 500 ,  'request' : request  }  )
doublecolon_start = - 1
warnings . warn (  "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
if isinstance ( offset , timedelta ) :
return ugettext ( "Please correct the duplicate data for %(field)s." ) % {  "field" : unique_check [ 0 ] ,  }
filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
write_pot_file ( potfile , msgs )
for field , errors in self . error_dict . items ( ) :
return s . getvalue ( )
return _entity_re . sub ( _replace_entity , text )
from django . conf import settings
self . widget = widget
self . resolver_match = None
self . indent ( 1 )
msgattrib_options = [ '--no-obsolete' ]
if palette == PALETTES [ NOCOLOR_PALETTE ] :
kwargs = kwargs or { }
from django . db import connections , DEFAULT_DB_ALIAS
def writer ( self ) :
mtime = stat . st_mtime
def __new__ ( mcs , name , bases , attrs ) :
try :
from django . utils . encoding import force_unicode
def handle ( self , ** options ) :
class LazyObject ( object ) :
try :
SafeString = SafeText
from django . utils . module_loading import module_has_submodule
return found
except Exception as e :
else :
import re
stats [ HITS ] += 1
def connection ( self ) :
except :
daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )
return self . tag_function
from django . utils . module_loading import import_string
def __init__ ( self , name , nodelist , parent = None ) :
args = list ( args )
else :
if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :
flat = { }
@ property
parts = fixture_name . rsplit ( '.' , 2 )
return re_newlines . sub ( '\n' , text )
def __setstate__ ( self , state ) :
os . umask ( old_umask )
statement = [ ]
return re . sub ( r'>\s+<' , '><' , force_text ( value ) )
return self . file . close ( )
class ReferenceLocalTimezone ( tzinfo ) :
for key_value in related :
return getattr ( self , shell ) ( )
m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
show_traceback = options . get ( 'traceback' )
"""Close the cache connection"""
def parse_etags ( etag_str ) :
def join ( value , arg , autoescape = None ) :
def color_style ( ) :
host = self . META [ 'SERVER_NAME' ]
def run_checks ( self , app_configs = None , tags = None ) :
def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :
_add_doc ( get_unbound_function ,  """Get the function out of a possibly unbound function""" )
def sql_create ( app_config , style , connection ) :
response . add_post_render_callback ( _set_response_etag )
pass
from django . utils . encoding import force_str , force_text
raise KeyError ( "Unknown language code %s." % lang_code )
if settings . TEMPLATE_DEBUG and origin is None :
return j
for field in concrete_model . _meta . local_fields :
while rest :
parser . delete_first_token ( )
import django . core . checks . compatibility . django_1_6_0
def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :
if not os . path . exists ( self . default_locale_path ) :
self . validate_key ( key )
def getlist ( self , key ) :
app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
propagate = config . get ( 'propagate' , None )
for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
raise CommandError ( "App '%s' does not have migrations" % app_label )
from django . core import signals
@ deconstructible
def handle_field ( self , obj , field ) :
if serializers is None :
kwargs [ 'localize' ] = True
self . stderr . write ( msg )
return self
if six . PY3 :
@ register . tag ( 'with' )
def convert ( self , number , from_digits , to_digits , sign ) :
self . _post_clean ( )
def get_handler ( self , * args , ** options ) :
def modelform_defines_fields ( form_class ) :
domain_regex = re . compile (    r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ,  re . IGNORECASE )
g . flatten ( self , unixfrom = unixfrom )
value = super ( TypedChoiceField , self ) . clean ( value )
super ( Select , self ) . __init__ ( attrs )
delta = ( d - now ) if reversed else ( now - d )
class Library ( object ) :
self . _lock = threading . RLock ( )
from django . db . backends . utils import typecast_timestamp
import hashlib
def javascript_quote ( s , quote_double_quotes = False ) :
FormSet = modelformset_factory ( model , ** kwargs )
def quote_etag ( etag ) :
self . hint = hint
class TemplateSyntaxError ( Exception ) :
raise TemplateSyntaxError ( "'cycle' tag requires at least two arguments" )
elif ch == "^" :
result . parent = self
def w ( self ) :
else :
@ property
@ lru_cache . lru_cache ( maxsize = None )
try :
parts . reverse ( )
fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
return { }
def next_token ( self ) :
try :
return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
def utcoffset ( self , dt ) :
return True
from django . utils import six
raise ValidationError (  self . error_messages [ 'max_whole_digits' ] ,  code = 'max_whole_digits' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
def urlsafe_base64_decode ( s ) :
data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
self . _assert_mutable ( )
if self . silent :
if os . path . exists ( filename ) :
self . content_type_extra = content_type_extra
def __str__ ( self ) :
try :
format_key = 'TIME_INPUT_FORMATS'
settings . INSTALLED_APPS
def has_previous ( self ) :
del _active . value
if m is not None :
from logging import _checkLevel
if fields is not None and f . name not in fields :
name . append ( ch )
def __getitem__ ( self , alias ) :
def dec ( func ) :
del attr
from django . utils import six
return input_val
message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
def __init__ ( self , tokens ) :
keys = _iterkeys
self . unlink ( self . name )
except ImportError :
template , display_name = loader ( name , dirs )
attr_list = termios . tcgetattr ( fd )
if not isinstance ( candidate , six . string_types ) :
if self . translate :
for cat in self . feed [ 'categories' ] :
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
def memoize ( func , cache , num_args ) :
return force_bytes ( value , self . _charset )
url_schemes = [ 'http' , 'https' , 'ftp' ]
self . _content_length = content_length
unichr = chr
for migration in merge_migrations :
regex = re_words if words else re_chars
raise ValueError ( "Unable to convert %r" % value )
created_models . add ( model )
def ngettext ( singular , plural , number ) :
six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
if _default is None :
def render ( self , context ) :
from django . dispatch import Signal
value = None
from django . utils . encoding import force_bytes
for name in loggers :
from django . utils . safestring import mark_safe
help = ''
d [ k ] = val
elif len ( options . args ) < 1 :
super ( URLValidator , self ) . __call__ ( url )
return '%s. You passed in %r (%s)' % ( original , self . obj ,  type ( self . obj ) )
warnings . warn (  "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
self . empty_value = kwargs . pop ( 'empty_value' , '' )
def __iter__ ( self ) :
if self . variable_name :
raise ValueError ( "Non-reversible reg-exp portion: '(?P%s'" % ch )
html = starttag_re . sub ( '' , html )
try :
if not hasattr ( e , 'django_template_source' ) :
return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
return ResolverMatch ( self . callback , args , kwargs , self . name )
if app_config . models_module is None :
return '%02d' % self . g ( )
raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
def _update_unget_history ( self , num_bytes ) :
getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )
locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
def _isdst ( self , dt ) :
return self . _regex_dict [ language_code ]
_module = self . _resolve ( )
__all__ = [  'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' ,  'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' ,  'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' ,  'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' ,  'mail_managers' ,  ]
return self . has_key ( key )
status_code = 304
raise TypeError ( "invalid keyword arguments to print()" )
help = "Prints the custom table modifying SQL statements for the given app name(s)."
return self
super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )
args = [ self . name , self . value , self . attrs ]
contents = contents or self . label
def __repr__ ( self ) :
except AttributeError :
if p_pattern . startswith ( '^' ) :
return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )
def _media ( self ) :
class Context ( BaseContext ) :
attrs [ 'min' ] = self . min_value
raise ValueError ( "The file cannot be reopened." )
return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
self . _current_app = current_app
def namespace_dict ( self ) :
filepath = self . filepath . resolve ( context )
def unclosed_block_tag ( self , parse_until ) :
continue
if common_ancestor is None :
class EmailInput ( TextInput ) :
if p >= 0 :
self . _servers = server . split ( ';' )
return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
def eval ( self , context ) :
os . makedirs ( filename )
except AttributeError :
raise TemplateSyntaxError ( "%s requires %d arguments, %d provided" %  ( name , alen - dlen , plen ) )
filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]
return etags
if val is None :
def urlizetrunc ( value , limit , autoescape = None ) :
c = SimpleCookie ( )
kwargs = { }
loggers = config . get ( 'loggers' , EMPTY_DICT )
expires = row [ 2 ]
msgs , errors , status = popen_wrapper ( args )
pass
definition = { }
def _new_instance ( cls , children = None , connector = None , negated = False ) :
if end . endswith ( '/>' ) :
opts = self . _meta
yield self . read ( )
return t
pass
return getattr ( module , class_name )
self . _post_parse_error = True
def strptime ( self , value , format ) :
def __init__ ( self , variables ) :
try :
if settings . configured :
field_value = getInnerText ( node ) . strip ( )
self . tags [ name ] = compile_function
value = smart_text ( value ) . strip ( )
self . to = list ( to )
except ValueError :
return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
if varargs is None :
del _urlconfs . value
self . load_initial_data = options . get ( 'load_initial_data' )
if not hasattr ( self , '_files' ) :
return _generate_cache_key ( request , request . method , [ ] , key_prefix )
return True
exp = datetime . fromtimestamp ( timeout )
if not support_legacy :
msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
except Exception :
klass . deconstruct = deconstruct
return DebugNodeList ( )
class Field ( object ) :
def __getitem__ ( self , key ) :
self . _archive = zipfile . ZipFile ( file )
shutil . move ( the_path , guessed_path )
else :
return forms
raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )
from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
def delete_cookie ( self , key , path = '/' , domain = None ) :
class LocMemCache ( BaseCache ) :
hextets = ip_str . split ( ':' )
lookup_str = callback . __module__ + "." + callback . __class__ . __name__
try :
elif char in 'Yy' :
pass
self . _archive = tarfile . open ( file )
deactivate ( )
input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
self . _assert_mutable ( )
USE_INOTIFY = False
while factor >= 0 :
return unbound
return value . date ( )
from django . core . exceptions import ValidationError
try :
obj = "?"
e , tb = sys . exc_info ( ) [ 1 : ]
if '.' not in var and 'e' not in var . lower ( ) :
except ( ImportError , AttributeError ) as e :
from django . apps import apps
obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
self . check_test = boolean_check if check_test is None else check_test
def __init__ ( self , name , value , attrs , choice , index ) :
LANGUAGE_SESSION_KEY = '_language'
return tuple ( bits )
import os
def compile_filter ( self , token ) :
self . __offset = timedelta ( minutes = offset )
raise
tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
class Command ( AppCommand ) :
kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]
else :
if not isinstance ( node , ExtendsNode ) :
tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
def __getitem__ ( self , key ) :
try :
raise CommandError ( 'Unknown app in excludes: %s' % exclude )
WindowsError = WindowsError
raise TypeError ( "update expected at most 1 arguments, got %d" % len ( args ) )
raise
return result
raise ValueError ( "Zip-compressed fixtures must contain one file." )
if i >= len ( subject ) :
except AttributeError :
truncate = property ( lambda self : self . file . truncate )
args = token . split_contents ( )
@ register . filter ( is_safe = True )
out . write ( ' _(%s) ' % fmatch )
class JSONSerializer ( object ) :
except IndexError :
class CacheClass ( LocMemCache ) :
last = max ( 0 , end - 1 )
_localtime = pytz . timezone ( settings . TIME_ZONE )
return self . _client
bits = urlparse ( url )
return value
return lookup_view
if t is not None :
else :
result_args = new_args
return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
_load_serializers ( )
else :
try :
global _default
try :
filemsg = ''
def __deepcopy__ ( self , memo ) :
html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )
return f . fileno ( ) if hasattr ( f , 'fileno' ) else f
global _format_cache , _format_modules_cache
else :
for bit in smart_split_re . finditer ( text ) :
return None
def j ( self ) :
return getattr ( instance , name ) ( )
from django . utils . translation import trans_null as trans
def get_language_from_request ( request , check_path = False ) :
def __init__ ( self , out , style_func = None , ending = '\n' ) :
self . _num_pages = 0
from django . utils import formats , six
self . abstract = False
self . help_text = field . help_text or ''
raise InputStreamExhausted ( )
msg_data = msg_data . decode ( charset )
self . instance . full_clean ( exclude = exclude , validate_unique = False )
return
def clear ( self ) :
return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
if PY3 :
def value_encode ( self , val ) :
answer = None
return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )
return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
return s
try :
secret = settings . SECRET_KEY
return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
field = self . fields [ name ]
else :
self . stdout . write ( "    No custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
try :
items = _iteritems
members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
except ValueError :
if subject [ i ] in ( '"' , "'" ) :
extra_params . update ( field_params )
label_output = self . handle_label ( label , ** options )
del attr
if name in existing :
html_gunk_re = re . compile ( r'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )
def __init__ ( self , msg , params = ( ) ) :
handler . addQuickElement ( "category" , cat )
for message in messages :
return result
from django . forms import Form
from django . utils import six
old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )
if self . output_transaction :
return str ( '<%s %s (%s:%s) %s>' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
self . _initialize_handlers ( )
continue
else :
message . message ( )
kwargs = { }
from django . utils . encoding import force_text , python_2_unicode_compatible
return field_type , field_params , field_notes
if push is not None :
if self . data . hour > 12 :
for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :
raise ValueError ( "The view %s.%s didn't return an HttpResponse object. It returned None instead."  % ( callback . __module__ , view_name ) )
from django . core . files . move import file_move_safe
as_form = True
def autoescape ( parser , token ) :
else :
self . name = name
import calendar
_locs_ = frame . f_locals
def needs_multipart_form ( self ) :
from django . utils import six
for receiver , _ , _ in receivers :
__all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )
self . empty_variable ( token )
self . kwargs = kwargs
self . options = options
for i , word in enumerate ( words ) :
def bytes_to_text ( s , encoding ) :
url = smart_urlquote ( 'http://%s' % middle )
unhandled_params . pop ( 0 )
def to_language ( self ) :
if e . errno == errno . EEXIST :
pass
return format_html ( '<option value="{0}"{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )
kwargs = { }
_DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :
from itertools import groupby , cycle as itertools_cycle
elif param in kwargs :
itervalues = _itervalues
pass
from __future__ import absolute_import
def error ( self , token , msg ) :
else :
if self . verbosity > 1 :
from django . utils . encoding import force_text
class HTMLParser ( _html_parser . HTMLParser ) :
words [ i ] = escape ( word )
if self . verbosity >= 2 :
context_re = re . compile ( r"""^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*""" )
options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )
subject = self . subject
file_ . close ( )
def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
line = buffer_ + line
obj = base . build_instance ( Model , data , self . db )
def m ( self ) :
try :
from django . conf import settings
break
return list ( self . __iter__ ( ) ) [ idx ]
def wrap ( text , width ) :
return self . hashvalue
class File ( FileProxyMixin ) :
def get ( self , key , default = None ) :
if value and hasattr ( value , "url" ) :
if not os . access ( filename , os . W_OK ) :
return cookiedict
if not self . fail_silently :
from django . utils . encoding import force_text , smart_text
base_subdir = '%s_template' % app_or_project
six . reraise ( * exc_info )
result = [ ]
return { }
if data_list [ 1 ] in self . empty_values :
from django . utils import six
piece = '' . join ( source [ last : ] )
from unittest import *
class HttpResponseRedirectBase ( HttpResponse ) :
found = getattr ( found , frag )
for filename in files :
new_conn_created = self . open ( )
return mod . register
return _long_to_bin ( result , hex_format_string )
return int ( time . mktime ( self . data . timetuple ( ) ) )
language_code = get_language ( )
lines . append ( line )
def accessed_time ( self , name ) :
output . append ( "%s = %s" % ( key , user_settings [ key ] ) )
commands = get_commands ( )
return len ( value . split ( ) )
return 'https' if os . environ . get ( "HTTPS" ) == "on" else 'http'
inner_args . extend ( args )
class WSGIServer ( simple_server . WSGIServer , object ) :
if is_templatized :
return form . save ( commit = commit )
else :
return mark_safe ( self . format_output ( output ) )
_urlconfs = local ( )
model_identifier = node . getAttribute ( attr )
if ip_str . count ( '::' ) > 1 :
key = self . to_field_name or 'pk'
form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
mode = 'wb' if isinstance ( chunk , bytes ) else 'wt'
if response :
class Command ( BaseCommand ) :
kwargs . setdefault ( 'content_type' , 'application/json' )
return ZERO
migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
bits . append ( None )
if bmatch . group ( 1 ) :
return CsrfTokenNode ( )
for loader in self . _loaders :
attrvalue = attrvalue [ 1 : - 1 ]
def exit_command ( self ) :
end = s . find ( b';' , end + 1 )
jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1
else :
yield key
return s . get_data ( ) + s . rawdata
attrs . setdefault ( 'step' , step )
ch , escaped = next ( pattern_iter )
self . args = args
def add_arguments ( self , parser ) :
self . enter_command ( command , token )
self . active_readers = 0
try :
return self . nodelist_false . render ( context )
client = self . _lib . Client ( self . _servers )
def __eq__ ( self , other ) :
else :
dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
return [ f [ : - 3 ] for f in os . listdir ( command_dir )  if not f . startswith ( '_' ) and f . endswith ( '.py' ) ]
val2 = self . var2 . resolve ( context , True )
iter ( second_item )
def to_python ( self , value ) :
doublecolon_len = 0
self . setFeature ( handler . feature_external_ges , False )
def handle_app_config ( self , app_config , ** options ) :
for node in self . nodelist_loop :
except KeyError :
if text [ 0 ] in 'xX' :
class Command ( BaseCommand ) :
def strftime ( dt , fmt ) :
if can_fail :
TYPE = RAW
if self . obj is None :
self . name = name
from email . utils import formatdate , getaddresses , formataddr , parseaddr
def write ( self , s ) :
return self . __name
robotparser = sys . modules [ __name__ + ".moves.urllib_robotparser" ]
if not unused_char :
self . required , self . label , self . initial = required , label , initial
return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
if self . body :
processors = ( )
text_args = [ force_text ( v ) for v in args ]
id = "literal"
def __exit__ ( self , exc_type , exc_value , traceback ) :
return self . data . hour - 12
return _serializers [ format ] . Deserializer
def create_nodelist ( self ) :
patterns = getattr ( self . urlconf_module , "urlpatterns" , self . urlconf_module )
output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
top = bottom + self . per_page
return [ '' ] , [ [ ] ]
output_transaction = True
else :
def get_format_modules ( lang = None , reverse = False ) :
if sys . version_info [ : 2 ] >= ( 3 , 4 ) :
buf = self . readline ( )
from django . utils . html import format_html
c . append ( tok )
if func is None :
if len ( list_ ) == 0 :
if field not in self . errors :
field_type = 'TextField'
check_for_migrations ( app_config , connection )
clear_checkbox_label = ugettext_lazy ( 'Clear' )
msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
return attrs
defaults = {  'auto_id' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }
iter ( x )
delattr ( obj . __class__ , self . name )
output . append ( '</select>' )
def dumps ( self , obj ) :
parts = parts [ : - 1 ]
def __repr__ ( self ) :
return default
if primary_keys :
return cache
return code
return self . __offset ,
self . _choices = self . widget . choices = list ( value )
@ property
else :
else :
self . unclosed_block_tag ( parse_until )
parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
try :
class Command ( BaseCommand ) :
else :
if form . is_bound :
raise NotImplementedError ( 'subclasses of BaseCache must provide a clear() method' )
def __init__ ( self , server , params ) :
return default
for i in range ( 0 , len ( pieces ) - 1 , 3 ) :
if middle . startswith ( opening ) :
warnings . warn (  "`%s.%s` method should be renamed `%s`." %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
natural_key = obj . natural_key ( )
def id_for_label ( self ) :
var_obj = Variable ( var )
if not last_row . endswith ( row_ender ) :
super ( Command , self ) . run_from_argv ( argv )
n = getattr ( lookup_view , '__name__' , None )
pass
content = templatize ( src_data , orig_file [ 2 : ] )
i = self . pointer
if __name__ == '__main__' :
s = s [ end : ]
class StopUpload ( UploadFileException ) :
for base in inspect . getmro ( new_class ) :
def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :
if isinstance ( field_value , str ) :
except StopFutureHandlers :
return timedelta ( seconds = - time . timezone )
if not os . path . isfile ( pythonrc ) :
self . asvar = asvar
return _get_timezone_name ( get_default_timezone ( ) )
ch = next ( input_iter )
cursor . execute ( sql )
return timezone . make_aware ( value , current_timezone )
if e . errno != errno . ENOENT :
_file . close ( )
else :
return iter ( self . file )
sys . stderr = NullDevice ( )
return False
elif hasattr ( pattern , '_callback' ) :
def add_css ( self , data ) :
global _serializers
def __repr__ ( self ) :
parser . add_argument ( 'name' , help = 'Name of the application or project.' )
termios = None
def build_potfiles ( self ) :
except AttributeError :
yield buf
else :
raise ValidationError (  self . error_messages [ 'max_decimal_places' ] ,  code = 'max_decimal_places' ,  params = { 'max' : self . decimal_places } ,  )
deactivate_all ( )
get_callable . cache_clear ( )
raise CommandError ( "couldn't handle %s template %s." %  ( self . app_or_project , template ) )
if settings . DEBUG :
self . _add_fallback ( )
def __init__ ( self , argv = None ) :
class CheckRegistry ( object ) :
kwargs [ 'to_field' ] = self . fk . rel . field_name
if next_item and isinstance ( next_item , ( list , tuple ) ) :
else :
max_value = self . max_expr . resolve ( context )
attrs = flatatt ( attrs ) if attrs else ''
if not url_fields [ 1 ] :
return cache_key
return "<UTC>"
raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
locations = [ ]
if klass not in cls . __dispatch :
class Atom1Feed ( SyndicationFeed ) :
six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
klass = load_command_class ( app_name , subcommand )
return kwargs
self . endElement ( name )
obj . _constructor_args = ( args , kwargs )
form_field = self . fields [ field ]
final_output = [ ]
obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
f . save_form_data ( instance , cleaned_data [ f . name ] )
_assertRaisesRegex = "assertRaisesRegexp"
if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
attrs = [ ]
obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
def validate ( self , value ) :
self . message = message
try :
@ register . tag
file_field_list . append ( f )
self . files = files or { }
if fields is not None and f . name not in fields :
tt = ( 2037 , ) + tt [ 1 : ]
class IfEqualNode ( Node ) :
def get ( self , key , otherwise = None ) :
self . buffer = self . buffer [ size : ]
if not include_is_allowed ( filepath ) :
try :
from importlib import import_module
if not _serializers :
try :
delta = expires - expires . utcnow ( )
self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
def get_supported_language_variant ( lang_code , strict = False ) :
if params . get ( 'filename' ) :
return result
logger . handlers = [ ]
app_output = self . handle_app_config ( app_config , ** options )
msg = 'Module "%s" does not define a "%s" attribute/class' % (  dotted_path , class_name )
from xml . sax . expatreader import ExpatParser as _ExpatParser
assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
token = Token ( TOKEN_TEXT , token_string )
self . _catalog = translation . _catalog . copy ( )
warnings . warn ( '"validate" has been deprecated in favor of "check".' ,  RemovedInDjango19Warning )
fp = kwargs . pop ( "file" , sys . stdout )
raise ValueError ( "Key '%s' not found" % key )
return result
return form . save ( commit = commit )
if item [ 'comments' ] is not None :
except KeyboardInterrupt :
raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
return property ( fget , fset , fdel , doc )
return get_supported_language_variant ( accept_lang )
if token . token_type == TOKEN_BLOCK and token . contents == endtag :
class DecimalField ( IntegerField ) :
self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
output . append ( "### %s = %s" % ( key , user_settings [ key ] ) )
_ [ m [ k ] ] = v
def __init__ ( self ) :
def print_ ( * args , ** kwargs ) :
def callable ( obj ) :
if response . streaming :
@ classmethod
def is_ajax ( self ) :
response . add_post_render_callback ( callback )
from __future__ import unicode_literals
elif t . token_type == TOKEN_TEXT :
pass
file_name = force_text ( file_name , encoding , errors = 'replace' )
if sys . platform . startswith ( 'java' ) :
kwargs [ 'instance' ] = self . _existing_object ( pk )
raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
return "[Included template had syntax error: %s]" % e
self . waiting_readers += 1
extra_classes . add ( self . form . required_css_class )
translated = translated % rhs
for middleware_method in self . _template_response_middleware :
if not self . timezone :
if self . verbosity >= 1 and sql :
__import__ ( name )
return commands
self . unclosed_block_tag ( [ endtag ] )
try :
with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
else :
if isinstance ( rhs , dict ) and number :
def download ( self , url ) :
definition [ 'opts' ] = opts
return True
def _iteritems ( self ) :
def has_changed ( self ) :
temp_lib . filters [ name ] = lib . filters [ name ]
if os . fork ( ) > 0 :
raise
out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
try :
def prepend_token ( self , token ) :
return self . _get_image_dimensions ( ) [ 0 ]
for fmatch in constant_re . findall ( t . contents ) :
e . django_template_source = token . source
import re
try :
changeset = None
if value == self . empty_value or value in self . empty_values :
code = 'invalid'
return formats . localize_input ( value )
super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
def __iter__ ( self ) :
html = endtag_re . sub ( '' , html )
raise CommandError ( "Command doesn't accept any arguments" )
@ register . filter ( is_safe = True )
choices = property ( _get_choices , ChoiceField . _set_choices )
def import_module ( name , package = None ) :
c = config . pop ( '()' )
else :
result . append ( "." )
self . _files = MultiValueDict ( )
full_statement . append ( ');' )
url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )
statement = [ ]
yield line
reset_sequences = options . get ( 'reset_sequences' , True )
if isinstance ( value , list ) :
def __eq__ ( self , other ) :
class MinLengthValidator ( BaseValidator ) :
except IOError :
def exists ( self , name ) :
deps . append ( rel_model )
def int2byte ( i ) :
self . _done = True
self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
try :
return ip_str
return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )
del _active . value
name = self . get_available_name ( name )
original = UnicodeDecodeError . __str__ ( self )
if first :
et , ev , tb = sys . exc_info ( )
except ValueError :
if self . first :
import cgi
from django . utils import datastructures
class FirstOfNode ( Node ) :
continue
self . _app_dict [ language_code ] = apps
if not commit :
try :
import fnmatch
class CharField ( Field ) :
return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
class ContextPopException ( Exception ) :
class __proxy__ ( Promise ) :
from django . utils . module_loading import import_string
return True
i += 1
if not isinstance ( item , ( list , tuple ) ) :
def nodelist ( self ) :
else :
self . state = first
return path . split ( '/' , 1 )
input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
iterator = None
fixture_files . extend ( fixture_files_in_dir )
if self . max_digits is not None and digits > self . max_digits :
if app_path is None :
notifier . check_events ( timeout = None )
def get ( self , key , default = None ) :
interactive = options . get ( 'interactive' )
tok = '"REGEX"'
pass
def ssi ( parser , token ) :
@ register . filter ( is_safe = False )
if conflicts :
return qs
candidate_subs = text_kwargs
translation . activate ( settings . LANGUAGE_CODE )
for attr in _urllib_response_moved_attributes :
finally :
error = sys . modules [ __name__ + ".moves.urllib_error" ]
def resolve_template ( self , template ) :
self . error ( "bad end tag: %r" % ( rawdata [ i : j ] , ) )
return valid
current = getattr ( current , bit )
try :
return ''
def render ( self , context ) :
best_doublecolon_len = 0
raise ImproperlyConfigured ( "You must define a '%s' cache" % DEFAULT_CACHE_ALIAS )
self . validate_name ( app_name , "app" )
LOCK_NB = 0x1
elif token_string . startswith ( COMMENT_TAG_START ) :
if not supported_platform or not is_a_tty :
sub_tried = e . args [ 0 ] . get ( 'tried' )
return files . get ( name , None )
value = ugettext ( "%s GB" ) % filesize_number_format ( bytes / GB )
from django . conf import settings
else :
def run_validators ( self , value ) :
def create_nodelist ( self ) :
class TimeFormat ( Formatter ) :
from __future__ import unicode_literals
if token . contents == 'else' :
inplural = False
style = dummy ( )
parentloop = context [ 'forloop' ]
return property ( _media )
from email . message import Message
def _truncate_html ( self , length , truncate , text , truncate_len , words ) :
if status != STATUS_OK :
for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :
message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
def has_changed ( self ) :
file_move_safe ( content . temporary_file_path ( ) , full_path )
if is_templatized :
for format in BUILTIN_SERIALIZERS :
return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )
return repr ( list ( self ) )
output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
try :
from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
mw_instance = mw_class ( )
continue
cls . __bytes__ = cls . __bytes_cast
except AppRegistryNotReady :
return True
return '\x1b[%sm' % RESET
raise TemplateSyntaxError ( "'%s' cannot appear more than once in the same template" % bits [ 0 ] )
self . _changed_data = [ ]
m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
out . write ( ' #\n' )
continue
encode = curry ( _proxy_method , method = six . text_type . encode )
extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )
def compress_sequence ( sequence ) :
for sql in sql_list :
def ordered_forms ( self ) :
def slice_filter ( value , arg ) :
return normpath ( path )
return any ( w . needs_multipart_form for w in self . widgets )
except NotImplementedError :
memo = { }
for basedir in basedirs :
if name is not None :
error_text = str ( e )
if self . META . get ( header , None ) == value :
return getattr ( _default , translation_function ) ( singular , plural , number )
return _trans . get_language_from_path ( path )
if self . __language == settings . LANGUAGE_CODE :
handler . addQuickElement ( "uri" , self . feed [ 'author_link' ] )
locale = to_locale ( lang )
try :
WEEKDAYS = {  0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
from django . utils import dateformat , numberformat , datetime_safe
self . args = args
global _localtime
def wrapper ( * args , ** kwargs ) :
try :
self . path = ''
inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )
if not _cookie_encodes_correctly :
def urlencode ( self , safe = None ) :
app = TerminalIPythonApp . instance ( )
if var . endswith ( '.' ) :
connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
token = parser . next_token ( )
def getvalue ( self ) :
parentmod , submod = get_mod_func ( mod_name )
return format_html ( "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" , csrf_token )
else :
if 'error_messages' in kwargs :
def __new__ ( mcs , name , bases , attrs ) :
raise CommandError ( "Can't resolve dependencies for %s in serialized app list." %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
if urlconf is None :
from __future__ import unicode_literals
if item_date :
@ register . tag ( 'filter' )
new_key = self . key_func ( key , self . key_prefix , version )
if self . cdata_tag is not None :
self . object_list = list ( self . object_list )
if hasattr ( os , 'chmod' ) :
MIMEText . __init__ ( self , text , subtype , charset )
exclude = self . _get_validation_exclusions ( )
from django . core . files import locks
id_ = final_attrs . get ( 'id' , None )
self . show_hidden_initial = show_hidden_initial
return self . extract ( absolute_path )
if not self . compile_filter_error ( token , e ) :
def chunks ( self , chunk_size = None ) :
self . namespaces = [ ]
if categories :
else :
raise ValueError ( 'Not a valid Python identifier: %r' % s )
self . code = code
while '<' in value and '>' in value :
if not script_url :
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
if settings . DEBUG :
def _itervalues ( self ) :
if bytes_read > rollback :
e . args = ( "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s" % {  'app_label' : obj . object . _meta . app_label ,  'object_name' : obj . object . _meta . object_name ,  'pk' : obj . object . pk ,  'error_msg' : force_text ( e )  } , )
_format_cache = { }
return fastcgi_help ( "Invalid combination of host, port, socket." )
except serializers . SerializerDoesNotExist :
id_ += '_0'
else :
elif ch == ')' :
from django . utils . deprecation import RemovedInDjango20Warning
result |= x ^ y
if not m :
elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
class NoReverseMatch ( Exception ) :
class MultiWidget ( Widget ) :
except IOError :
class TextNode ( Node ) :
yield base . DeserializedObject ( obj , m2m_data )
i += 1
return result
_ = { }
except AttributeError :
namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
elif indexes [ column_name ] [ 'unique' ] :
condition = TemplateIfParser ( parser , bits ) . parse ( )
decimal_digits = '0123456789'
get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
self . username = settings . EMAIL_HOST_USER if username is None else username
deps = getattr ( model . natural_key , 'dependencies' , [ ] )
return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )
self . stdout . write ( 'examining files with the extensions: %s\n'  % get_text_list ( list ( self . extensions ) , 'and' ) )
sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
continue
return obj_dict
if charset == 'utf-8' :
def handle_app_config ( self , app_config , ** options ) :
warnings . warn ( "'get_cache' is deprecated in favor of 'caches'." ,  RemovedInDjango19Warning , stacklevel = 2 )
from django . core import signals
filename = os . path . basename ( path )
app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
unpack = num_loopvars > 1
super ( FileBasedCache , self ) . __init__ ( params )
if kwargs :
key = self . make_key ( key , version = version )
if attrs is not None :
output = force_text ( output )
cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
def __init__ ( self , display_name , loader , name , dirs ) :
return new_value
if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
return self . get_renderer ( name , value , attrs , choices ) . render ( )
if name not in parser . _namedCycleNodes :
loop_dict [ 'counter' ] = i + 1
condition = TemplateIfParser ( parser , bits ) . parse ( )
unhandled_params = unhandled_params [ : - len ( defaults ) ]
import time
return int ( value ) % int ( arg ) == 0
self . _regex_dict [ language_code ] = regex_compiled
except AmbiguityError :
else :
return cls
incomment = True
self . error_dict = { }
def __ne__ ( self , other ) :
try :
loaders . append ( loader )
try :
if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :
if self . _fname is None :
for field , messages in message . items ( ) :
from logging import NullHandler
for j in xrange ( int ( iterations ) ) :
def to_python ( self , value ) :
pass
self . _archive . close ( )
if not url :
import re
extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
del attrs [ attr ]
r = dklen - ( l - 1 ) * hlen
value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )
def has_bom ( fn ) :
__dispatch = None
parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
for key , value in data . items ( ) :
elif autoescape :
self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
super ( QueryDict , self ) . __setitem__ ( key , value )
return result
from django . db import DEFAULT_DB_ALIAS
def attach ( self , filename = None , content = None , mimetype = None ) :
for sublist in second_item :
if message_context :
filename = filename [ : - 1 ]
pass
@ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
else :
return self . strptime ( value , format )
else :
DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
return func ( context , self . first , self . second )
import traceback
def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
context_extras [ 'sql_queries' ] = connection . queries
data = ( form . cleaned_data [ field ] , ) + date_data
return False
from __future__ import unicode_literals
context_extras [ 'LANGUAGES' ] = settings . LANGUAGES
class BaseDatabaseCache ( BaseCache ) :
for i , ( seconds , name ) in enumerate ( chunks ) :
def _list_cache_files ( self ) :
msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
modified_code = None
continue
if not locale_dir :
doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
else :
response . _handler_class = self . __class__
result [ i ] += piece
if "help" in options :
ngettext_lazy = ngettext
self . can_read = threading . Semaphore ( 0 )
self . _max_entries = int ( max_entries )
with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
if hextets [ index ] == '0' :
return self . _headers [ header . lower ( ) ] [ 1 ]
return key_func
handler . startElement ( "author" , { } )
if six . PY3 :
callable = callable
if self . data . hour > 11 :
return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
sys . exit ( 1 )
args = match . groups ( )
hextets = [ '' ] + hextets
needs_multipart_form = False
self . run_validators ( value )
args = options . args
strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
import gettext
else :
self . _setup ( )
return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )
if t is not None :
from django . template . debug import DebugLexer , DebugParser
chunk = next ( self )
if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
def add_arguments ( self , parser ) :
self . cache_model_class = CacheEntry
if new is None :
return data_set != initial_set
from django . utils . encoding import force_bytes , force_str , force_text
self . fields = getattr ( options , 'fields' , None )
app_label = options [ 'app_label' ]
except StopIteration :
except ValueError :
toktext = match . group ( name )
base_name = '%s_name' % app_or_project
if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
pgettext_lazy = lazy ( pgettext , six . text_type )
@ classmethod
if response is None :
import sys
super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
handlers [ name ] = handler
if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
s = six . text_type ( s )
from django . utils import timezone
def handle_fk_field ( self , obj , field ) :
return [ ]
httpd . daemon_threads = True
else :
raise ImproperlyConfigured (  '"%s" is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )
result |= ord ( x ) ^ ord ( y )
write ( arg )
kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
return form
else :
class TranslatableFile ( object ) :
from django . core . serializers import base
global _default
args = args or [ ]
raise StopFutureHandlers ( )
if contents is not None :
result = SimpleLazyObject ( self . _setupfunc )
raise AttributeError ( attr )
def as_json ( self , escape_html = False ) :
if item [ 'updateddate' ] is not None :
if not settings . MANAGERS :
return otherwise
return type ( self ) . __next__ ( self )
if value :
self . blocks [ name ] . insert ( 0 , block )
value = self . coerce ( value )
from django . apps import apps
non_atomic_requests = getattr ( view , '_non_atomic_requests' , set ( ) )
m = _html_parser . attrfind . match ( rawdata , k )
else :
if language_code not in self . _reverse_dict :
if hasattr ( self , 'error_dict' ) :
i = i + 1
exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
return value
help = ( "Output the contents of the database as a fixture of the given "  "format (using each model's default manager unless --all is "  "specified)." )
return Operator
return result == 0
import contextlib
if secure :
raise NotImplementedError ( 'subclasses of LabelCommand must provide a handle_label() method' )
if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
yield ''
try :
if not matches :
result = self . __class__ ( )
relations = { }
if not template_dirs :
def urlize ( value , autoescape = None ) :
@ stringfilter
return self . func ( value )
self . _clean_fields ( )
out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )
if self . alternatives :
arg = int ( arg )
return SafeBytes ( data )
parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
if not self . recipients ( ) :
doublecolon_start = - 1
def __init__ ( self , dict_ = None ) :
for path in paths :
initial_forms = len ( self . initial ) if self . initial else 0
raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
else :
globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
class MultiValueField ( Field ) :
if settings . TEMPLATE_DEBUG and display_name :
self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
print ( "In the tar file %s the member %s is invalid: %s" %  ( name , member . name , exc ) )
link_prev , link_next , key , result = link
self . app_or_project = app_or_project
msg . attach ( self . _create_attachment ( * attachment ) )
self . _expire_info . clear ( )
return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
def __init__ ( self , value ) :
class RadioFieldRenderer ( ChoiceFieldRenderer ) :
def truncatewords ( value , arg ) :
else :
self . tags = { }
d = get_deserializer ( format )
from io import BytesIO , StringIO , UnsupportedOperation
from django . core . management . sql import sql_all
raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
kwargs [ 'stream' ] = None
def get_image_dimensions ( file_or_path , close = False ) :
return end , next
def __setitem__ ( self , key , value ) :
table = connections [ db ] . ops . quote_name ( self . _table )
middle = '<a href="%s"%s>%s</a>' % ( url , nofollow_attr , trimmed )
bad_app_labels = set ( )
while remaining != 0 :
old = '#: ' + work_file [ 2 : ]
@ register . filter ( is_safe = True )
if 'args' in options :
except TypeError :
parser . delete_first_token ( )
return result
doublecolon_len += 1
parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '+' ,  help = 'One or more application label.' )
def to_current_timezone ( value ) :
for ch in input_iter :
tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' )
commands = { name : 'django.core' for name in find_commands ( __path__ [ 0 ] ) }
old = '#: ' + work_file
return False
import time
return None
return super ( type ( dt ) , dt ) . strftime ( fmt )
if not self . fail_silently :
if hasattr ( data , 'read' ) :
def path ( self , name ) :
is_compressed = True
csrf_token = context . get ( 'csrf_token' , None )
def receive_data_chunk ( self , raw_data , start ) :
attachment = MIMEBase ( basetype , subtype )
wrapper . cache_info = cache_info
return 'th'
return obj
prefix = 'django_%s_template_' % self . app_or_project
yield buf . read ( )
if not self . data :
self . stdout . write ( "Cache table '%s' already exists." % tablename )
if header_end == - 1 :
return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )
return Media ( definition )
return _generate_cache_key ( request , method , headerlist , key_prefix )
if os . path . isfile ( fext ) :
import os
@ classmethod
self . interactive = options . get ( 'interactive' )
return dict ( self )
return False
except ImportError :
return s
self . _empty = False
neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )
return s
first = second = None
return value [ slice ( * bits ) ]
path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '/' )
connection = connections [ options . get ( 'database' ) ]
return super ( QueryDict , self ) . setdefault ( key , default )
context_extras [ 'debug' ] = True
if data is FILE_INPUT_CONTRADICTION :
def __len__ ( self ) :
return 'th'
fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
return
def add_to_builtins ( module ) :
if 'private' in cc and 'public' in kwargs :
settings . BASE_DIR
default_error_messages = {  'invalid' : _ ( 'Enter a valid date/time.' ) ,  }
from django . utils . deprecation import RemovedInDjango19Warning
if self . _wrapped is empty :
def pop ( self , k , * args ) :
raise
get_method_function = operator . attrgetter ( _meth_func )
return getattr ( module , self . attr )
file_name = data . name
def _dec ( * args , ** kwargs ) :
else :
self . models . add ( obj . object . __class__ )
for medium , paths in data . items ( ) :
return list ( _serializers )
self . __offset = timedelta ( minutes = offset )
query = query . lists ( )
value = list . pop ( self , idx )
def write_items ( self , handler ) :
return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
self . _post_parse_error = False
if self . forms :
return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
apps . get_model ( 'auth' , 'Permission' )
try :
def _get_context_stack_frame ( self , context ) :
value = timezone . normalize ( value )
elif version [ 3 ] != 'final' :
class HttpResponse ( HttpResponseBase ) :
return id_
klass = self . resolve ( config . pop ( 'class' ) )
pass
def error ( self , message ) :
if memo is None :
try :
super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
def incr ( self , key , delta = 1 , version = None ) :
raise
file . close ( )
return ( "%" + six . text_type ( arg ) ) % value
else :
return self . pointer < len ( self . subject )
return SpacelessNode ( nodelist )
new_name = 'field%s' % new_name
return self . _truncate_html ( length , truncate , text , truncate_len , False )
class IntegerField ( Field ) :
from django . core . management . base import BaseCommand , CommandError
def __init__ ( self , template_string , origin = None , name = None ) :
current_expires = result [ 1 ]
while remaining_bits :
return self . cleaned_data
return ''
elif t . token_type == TOKEN_COMMENT :
return list ( error ) [ 0 ]
else :
settings . USE_I18N = True
if cache_timeout is None :
if isinstance ( other , Promise ) :
def __repr__ ( self ) :
translation . activate ( settings . LANGUAGE_CODE )
if exp is None or exp > time . time ( ) :
form_class_attrs = {  'Meta' : Meta ,  'formfield_callback' : formfield_callback  }
except ValueError :
klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
selected_html = ''
thread . start_new_thread ( main_func , args )
if item [ 'pubdate' ] is not None :
if recursive :
return any ( "__call__" in klass . __dict__ for klass in type ( obj ) . __mro__ )
from django . utils . encoding import force_text , iri_to_uri
@ register . filter ( "escape" , is_safe = True )
from django . core . exceptions import ValidationError
valid = True
return LoadNode ( )
if status :
def escape_quotes ( m ) :
os . makedirs ( original_path )
has_old_option = hasattr ( self , 'requires_model_validation' )
self . choice_label = force_text ( choice [ 1 ] )
key = self . make_key ( key , version = version )
try :
new_msg = (  "Database %s couldn't be flushed. Possible reasons:\n"  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
return
if len ( name ) > 255 :
if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
deactivate ( )
if sys . version_info [ : 2 ] == ( 2 , 7 ) :
if kwarg_format :
all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
class ModelChoiceField ( ChoiceField ) :
self . stdout . write ( (  "%(started_at)s\n"  "Django version %(version)s, using settings %(settings)r\n"  "Starting development server at http://%(addr)s:%(port)s/\n"  "Quit the server with %(quit_command)s.\n"  ) % {  "started_at" : now ,  "version" : self . get_version ( ) ,  "settings" : settings . SETTINGS_MODULE ,  "addr" : '[%s]' % self . addr if self . _raw_ipv6 else self . addr ,  "port" : self . port ,  "quit_command" : quit_command ,  } )
return avoid_wrapping ( value )
if finder . find_module ( name , package_path ) :
try :
seen_data = set ( )
except LookupError :
def slugify ( value ) :
def _set_response_etag ( response ) :
i += 1
return getattr ( instance , name ) ( value )
if number < 1 :
attrs = super ( FloatField , self ) . widget_attrs ( widget )
assert content is not None
security_logger = logging . getLogger ( 'django.security.%s' %  e . __class__ . __name__ )
continue
if compare_to != state_frame [ self ] :
g = imatch . group ( 1 )
def delete ( self , key , version = None ) :
@ register . filter ( is_safe = False )
self . base_url = base_url
else :
from django . utils . deprecation import RemovedInDjango19Warning
self . verbosity = int ( options . get ( 'verbosity' ) )
from django . forms . utils import from_current_timezone , to_current_timezone
for operation in migration . merged_operations :
url_info = urlparse ( url )
result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
self . error_messages = getattr ( options , 'error_messages' , None )
import gettext as gettext_module
return ''
def transform ( self , node , results ) :
return timesince ( d , now , reversed = True )
def __init__ ( self , attrs = None ) :
def __delattr__ ( self , name ) :
os . chmod ( dst , mode )
new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
if 'message-id' not in header_names :
else :
self . connection = None
self . field_name = field_name
return value . strip ( )
return self . incr ( key , - delta , version = version )
return calendar . isleap ( self . data . year )
def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
elif options [ "daemonize" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :
@ register . tag
if csrf_token == 'NOTPROVIDED' :
if six . PY3 :
response = middleware_method ( request , response )
raise TypeError ( "can't delete _wrapped." )
handler . addQuickElement ( "subtitle" , self . feed [ 'subtitle' ] )
boolean_attrs = [ ]
def errors ( self ) :
logger . addHandler ( handler )
parser = self . create_parser ( prog_name , subcommand )
closing_tag , tagname , self_closing = tag . groups ( )
else :
from django . core . handlers . wsgi import WSGIHandler
if result :
class DebugVariableNode ( VariableNode ) :
pass
class Command ( BaseCommand ) :
if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :
field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
self . compile_messages ( locations )
return force_text ( iri_to_uri ( value ) )
self . new_objects . append ( self . save_new ( form , commit = commit ) )
except StandardError as e :
if self . timezone is None :
try :
new_result = [ ]
if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
@ property
six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
def __getitem__ ( self , index ) :
def _strip_once ( value ) :
fileno = property ( lambda self : self . file . fileno )
def render ( self , context ) :
raise NotImplementedError ( 'Subclasses must define this method.' )
self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
return True
def __contains__ ( self , item ) :
pass
elif form . has_changed ( ) :
if html :
return get_valid_filename ( name )
else :
self . stdout . write ( "No changes detected" )
else :
return ( source , make_origin ( display_name , loader , name , dirs ) )
except IndexError :
if use_base_manager :
def run_from_argv ( self , argv ) :
elif autoescape :
from django . core . mail . utils import DNS_NAME
def add_item_elements ( self , handler , item ) :
result = self . nodelist . render ( context )
self . vals = [ ]
elif pluralmatch :
if value in self . empty_values :
template = self . resolve_template ( self . template_name )
from datetime import datetime
return super ( SimpleTemplateResponse , self ) . content
class Warning ( CheckMessage ) :
def z ( self ) :
class BaseContext ( object ) :
parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
message_context = None
def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :
parser . add_argument ( '--failfast' ,  action = 'store_true' , dest = 'failfast' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
data = BytesIO ( self . _body )
def _construct_form ( self , i , ** kwargs ) :
words = words [ : length ]
if hasattr ( response , 'render' ) and callable ( response . render ) :
else :
field_notes = [ ]
from django . core . mail . utils import DNS_NAME
except ValueError :
except ImproperlyConfigured :
import zlib
memo [ id ( self ) ] = result
return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
@ register ( Tags . models , Tags . signals )
except StandardError as e :
self . model = getattr ( options , 'model' , None )
yield node
c = self . resolve ( c )
def format_output ( self , rendered_widgets ) :
msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
def utcoffset ( self , dt ) :
FILE_MODIFIED = 1
help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
return value
if code is not None :
else :
if not hasattr ( self , '_object_dict' ) :
best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )
if in_tag and token_string . startswith ( BLOCK_TAG_START ) :
obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
if self . lookups is not None :
bits = token . split_contents ( )
_MovedItems . _moved_attributes = _moved_attributes
if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
import copy
from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
if '.' in ip_str . split ( ':' ) [ - 1 ] :
from django . utils . translation import ugettext as _
try :
from django . core . files . base import File
args = '[fixture ...]'
key = self . cache_key ( template_name , template_dirs )
new_value = _strip_once ( value )
return self . as_table ( )
return t . render ( context )
raise base . SerializationError ( "Non-model object (%s) encountered during serialization" % type ( obj ) )
processors = tuple ( processors )
def extract ( self , filename ) :
from django . utils import six
else :
for field in concrete_model . _meta . many_to_many :
assert isinstance ( level , int ) , "The first argument should be level."
if hasattr ( data , 'temporary_file_path' ) :
try :
options = parser . parse_args ( argv [ 2 : ] )
return True
message = message . error_list
command = app_name
class PasswordInput ( TextInput ) :
response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
_upload_handlers = [ ]
TYPE = FIELD
for app_name , model_list in manifest . items ( ) :
return SafeText ( data )
raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
cursor = None
BytesIO = io . BytesIO
return super ( PythonSerializer , self ) . getvalue ( )
else :
self . cookies [ key ] [ 'domain' ] = domain
missing_args_message = "You must provide an application name."
def handle ( self , * args , ** options ) :
def has_leading_dir ( self , paths ) :
isolated_context = options . get ( 'only' , False )
from math import ceil
pass
if obj_list is None :
bits = token . contents . split ( )
colors = styles . pop ( ) . split ( '/' )
def list ( self , * args , ** kwargs ) :
tables = connection . introspection . django_table_names ( only_existing = True )
elif message_context [ 0 ] == "'" :
class TemplateResponse ( SimpleTemplateResponse ) :
compare = lambda self , a , b : a is not b
if self . verbosity >= 2 :
return get_git_changeset . cache
if self . is_bound :
errors = [ ]
if hasattr ( extra_classes , 'split' ) :
if reason is not None :
newlines = property ( lambda self : self . file . newlines )
consume_next = False
contents = conditional_escape ( contents )
HttpResponse . content . fset ( self , value )
elif action == "apply_success" :
def app_dict ( self ) :
super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
return ""
def add_arguments ( self , parser ) :
self . _populate ( )
from __future__ import unicode_literals
self . path_info = path_info
from django . conf import settings , global_settings
return make_middleware_decorator ( middleware_class ) ( )
from django . core import urlresolvers
if new_name . endswith ( '_id' ) :
import gzip
pass
import warnings
return exit_code
if "'format'" not in str ( te ) :
self . no_obsolete = options . get ( 'no_obsolete' )
extra_params . update ( params )
output = template_localtime ( output , use_tz = context . use_tz )
return super ( DateField , self ) . to_python ( value )
return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
orig = self . parent_instance . pk
return new_key
parser . StartDoctypeDeclHandler = self . start_doctype_decl
wm = pyinotify . WatchManager ( )
time_str = time_str . decode ( 'utf-8' )
self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
digits = len ( digittuple )
obj = getattr ( models . signals , name )
if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
if PY3 :
collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
else :
if timezone . is_aware ( expires ) :
except LookupError :
return self . _fqdn
from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
attr = import_string ( dotted_path )
from itertools import chain
return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
for d in reversed ( self . dicts ) :
def get_default_timezone_name ( ) :
return [ ]
for dict_ in self . dicts :
else :
from django . utils . encoding import smart_text
self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
def is_serious ( self ) :
def readlines ( self ) :
pass
@ property
class Lexer ( object ) :
def __eq__ ( self , other ) :
requires_system_checks = False
from django . core . checks . registry import registry
return self
rel_model = field . rel . to
continue
return
translated = func ( ** kwargs )
with Archive ( path ) as archive :
try :
def luhn ( candidate ) :
def add_arguments ( self , parser ) :
nm = Header ( nm , encoding ) . encode ( )
return self . number < self . paginator . num_pages
msg [ 'From' ] = self . extra_headers . get ( 'From' , self . from_email )
if PY3 :
class AssignmentNode ( TagHelperNode ) :
pass
def compile_function_error ( self , token , e ) :
def has_key ( self , key , version = None ) :
class MultipleObjectsReturned ( Exception ) :
def __init__ ( self , * args , ** kwargs ) :
bad_serializer = BadSerializer ( exc )
self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
item . update ( kwargs )
role = role . upper ( )
else :
messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
@ property
warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
from email . mime . multipart import MIMEMultipart
super ( PasswordInput , self ) . __init__ ( attrs )
super ( Command , self ) . add_arguments ( parser )
def __str__ ( self ) :
def resolve ( path , urlconf = None ) :
return True
arg = settings . DATE_FORMAT
if not self . is_required :
media = media + w . media
response . content = b''
orig_vars . pop ( '__dict__' , None )
try :
if ch == '?' :
self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
from django . utils . module_loading import import_string
if item [ 'author_name' ] is not None :
return urljoin ( prefix , path )
from django . utils . six . moves import xrange
raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
kwargs [ str ( param ) ] = value
comment_notes . append ( 'AutoField?' )
if not _serializers :
forms_valid = True
import os
except Exception as e :
def validate_unique ( self ) :
if self . _request_middleware is None :
def trim_whitespace ( s ) :
return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
pop_context = True
self . timezone = timezone
@ property
if options :
from itertools import product
def values ( self ) :
TOKEN_MAPPING = {  TOKEN_TEXT : 'Text' ,  TOKEN_VAR : 'Var' ,  TOKEN_BLOCK : 'Block' ,  TOKEN_COMMENT : 'Comment' ,  }
self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
defaults . update ( kwargs )
return import_string ( path ) ( * args , ** kwargs )
pathext = [ '' ]
data = self . _coerce ( data )
msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )
return chunk
def wrapper ( * args , ** kwds ) :
self . __to_language = to_language ( language )
@ register . tag ( 'include' )
def Y ( self ) :
widget . is_localized = True
signals . request_started . send ( sender = self . __class__ )
result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
return
nodelist_false = NodeList ( )
if self . isolated_context :
from __future__ import unicode_literals
_BROWSERS_DEPRECATED_LOCALES = {  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  }
if not func_name :
if self . verbosity >= 1 :
def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :
self . hashvalue = hash ( tup )
output . append ( '</optgroup>' )
sub_match = pattern . resolve ( new_path )
kwargs = { }
pass
change = fn ( )
obj = new_obj
def __init__ ( self ) :
internal_use_only = False
return context
return val
if key_prefix is None :
if timeout == DEFAULT_TIMEOUT :
def __deepcopy__ ( self , memo ) :
T = [ F ( x ) for x in range ( 1 , l ) ]
try :
if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
return self . _count
new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
def compile_filter_error ( self , token , e ) :
if graph . nodes [ plan_node ] . replaces :
def wrapper ( cls ) :
settings . configure ( )
class Loader ( BaseLoader ) :
key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
class TemplateDoesNotExist ( Exception ) :
return escapejs ( value )
try :
else :
if self . activated :
self . plural = lambda n : int ( n != 1 )
settings . configure ( USE_I18N = True )
try :
return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]
from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
def encoding ( self ) :
for middleware_method in self . _response_middleware :
from django . utils import six
for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
if not roots :
except UnicodeError :
continue
for i , item in enumerate ( values ) :
data = data ( )
if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) :
for key , value in six . iteritems ( kwargs ) :
@ property
for item in sorted_items :
continue
self . choices = [ ( "" , "---------" ) ]
self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
Signer = import_string ( settings . SIGNING_BACKEND )
func = import_string ( path )
suffixes = ( '.' . join ( ext for ext in combo if ext )  for combo in product ( databases , ser_fmts , cmp_fmts ) )
try :
return '\n' . join ( statements )
c = config . pop ( '()' )
both_after = [  Tok ( "other" , r"." ) ,  ]
age = time . time ( ) - timestamp
if s_len > length :
def gettext ( message ) :
if host [ - 1 ] == ']' :
return LoaderOrigin ( display_name , loader , name , dirs )
def handle_field ( self , obj , field ) :
if self . _errors is None :
else :
from collections import OrderedDict
request_class = WSGIRequest
self . none_value = ( 0 , empty_label )
current_fields . append ( ( key , value ) )
self . _errors = [ ]
if language not in _translations :
if node . hasAttribute ( 'pk' ) :
except NameError :
return value . replace ( tzinfo = None )
for root , dirs , files in os . walk ( template_dir ) :
target_dir = path . join ( top_dir , relative_dir )
gettext . _translations = { }
except StandardError as e :
class Command ( AppCommand ) :
clean = lambda self , x : len ( x )
if sys . version_info [ : 2 ] >= ( 3 , 3 ) :
def __wrapper__ ( self , * args , ** kw ) :
class RequestContext ( Context ) :
connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
@ property
obj = form . save ( commit = False )
if not app_config . path :
class DefaultCacheProxy ( object ) :
if isinstance ( elt , NonCapture ) :
return cursor . fetchone ( ) is not None
text = unicodedata . normalize ( 'NFC' , self . _wrapped )
super ( SortedDict , self ) . __init__ ( )
fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
try :
if self . asvar is None :
raise DisallowedRedirect ( "Unsafe redirect to URL with protocol '%s'" % parsed . scheme )
def tell ( self ) :
return tempdir
def __init__ ( self , * args , ** kwargs ) :
base36 . append ( digits [ i // j ] )
seen = set ( )
for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :
ch , escaped = next ( pattern_iter )
return self . _callback
self . help_text = help_text
exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
if is_ignored ( file_path , self . ignore_patterns ) :
if translators_comment_start is not None and lineno >= translators_comment_start :
return result
path , module = name . rsplit ( '.' , 1 )
self . appendlist ( key , value )
class SafeData ( object ) :
self . stdout . write ( self . style . MIGRATE_HEADING ( "Synchronizing apps without migrations:" ) )
l = lambda x : self . make_key ( x , version = version )
parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the "default" database.' )
def save ( self , commit = True ) :
try :
lib = get_library ( taglib )
m = int ( d ) - d
sys . stderr . write ( "  http://www.saddi.com/software/flup/   If you've already\n" )
import warnings
raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )
widget = CheckboxInput
def _import_module ( name ) :
self . func = func
if pop_context :
if value is None :
if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :
self . view_name = ':' . join ( self . namespaces + [ view_path ] )
cursor . close ( )
self . json_kwargs [ 'separators' ] = ( ',' , ': ' )
__delitem__ = complain
data = self . form . initial . get ( self . name , self . field . initial )
targets = [ ( app_label , migration . name ) ]
c = [ ]
return True
class Command ( CheckCommand ) :
def to_bytes ( val , encoding ) :
super ( Command , self ) . execute ( * args , ** options )
from django . db . migrations . loader import AmbiguityError
_cookie_allows_colon_in_names = False
if not tag or current_len >= truncate_len :
def pop ( self , key , * args ) :
else :
DEFAULT_MAX_NUM = 1000
supports_microseconds = False
from __future__ import unicode_literals
if empty_label is not None :
self . _loaders = loaders
if self . _delegate_bytes and six . PY2 :
if app_config . models_module is None :
yield node
messages = { }
try :
processors = [ ]
else :
location = '//%s' % self . get_full_path ( )
from django . conf import settings
for form in valid_forms :
exclude . append ( f . name )
_assertRaisesRegex = "assertRaisesRegex"
raise AttributeError ( "This QueryDict instance is immutable" )
from django . db import connections , DEFAULT_DB_ALIAS
raise AttributeError ( "%s could not be imported " % self . name )
del self . _headers [ header . lower ( ) ]
lock = RLock ( )
return "%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :
pieces = [ ]
else :
if domain :
return dot_re . sub ( char , src )
return statements
from django . db import connections , DEFAULT_DB_ALIAS
return SafeString ( str ( s ) )
output = ''
if 'file_path' in kwargs :
from __future__ import unicode_literals
handler . addQuickElement ( "title" , item [ 'title' ] )
def extract ( self , to_path = '' ) :
if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) :
self . var = var_obj
ser_fmt = parts [ - 1 ]
def camel_case_to_spaces ( value ) :
finally :
super ( ExternalReferenceForbidden , self ) . __init__ ( )
self . _done = True
pass
elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :
return
file_move_safe ( tmp_path , fname , allow_overwrite = True )
if os . path . exists ( fname ) :
if self . save_as_new :
def __init__ ( self , * args , ** kwargs ) :
value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )
def is_naive ( value ) :
return value
def create_select ( self , name , field , value , val , choices , none_value ) :
__all__ = (  'Field' , 'CharField' , 'IntegerField' ,  'DateField' , 'TimeField' , 'DateTimeField' ,  'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
try :
return message
from django . apps import apps
formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
from email . mime . base import MIMEBase
def __init__ ( self , file , name = None ) :
relative_dir = path_rest . replace ( base_name , name )
DEFAULT_CACHE_ALIAS = 'default'
try :
check_for_language . cache_clear ( )
try :
def wrapper ( * args , ** kwds ) :
value = value . pk
@ register . tag
def file_complete ( self , file_size ) :
create_bound_method = types . MethodType
debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]
return super ( SimpleTemplateResponse , self ) . __iter__ ( )
raise EmptyPage ( 'That page number is less than 1' )
file = data . temporary_file_path ( )
import logging . handlers
elif args [ 1 ] [ 0 ] == '3' :
self . test_runner = arg [ len ( option ) : ]
finally :
del self . _expire_info [ key ]
for f in fields :
work_file = os . path . join ( self . dirpath , thefile )
continue
class NullBooleanSelect ( Select ) :
self . _cache . delete_multi ( map ( l , keys ) )
except ( TypeError , AttributeError ) :
self . literal = None
try :
retval = self . tokens [ self . pos ]
super ( FloatField , self ) . validate ( value )
else :
strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
if not form . is_valid ( ) :
try :
c . load ( cookie )
data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
line = line [ space : ]
decompress = False
return self . __bytes_cast ( )
length = int ( arg )
cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
if self . message_context :
if app_config . label in loader . migrated_apps :
path_info = '/'
parent_name = parser . compile_filter ( bits [ 1 ] )
self . connector = conn_type
from django . core . mail . backends . base import BaseEmailBackend
return r'\"'
def extract ( path , to_path = '' ) :
sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
return unbound . im_func
def check_model_signals ( app_configs = None , ** kwargs ) :
return False
LOCK_EX = fcntl . LOCK_EX
del self . _cache [ key ]
sites . append ( j )
result . setlist ( key , value )
continue
_mutable = True
dict . __setitem__ ( self , key , M )
if resource_string is not None :
thefile = self . file
break
self . stdout . write ( "  You should commit this migration but leave the old ones in place;" )
return value
handler . endElement ( "feed" )
class InvalidPage ( Exception ) :
try :
self . buffer = b''
raise CommandError ( "You can only use --pks option with one model" )
def accessed_time ( self , name ) :
invalid_apps . append ( app_name )
self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )
else :
t = getattr ( _active , "value" , None )
self . bad_cookies . add ( key )
from django . core . cache import caches
if self . _isdst ( dt ) :
if urlconf is None :
def parse_color_setting ( config_string ) :
using_sysrandom = True
from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
from django . utils . safestring import SafeData , EscapeData
class DebugParser ( Parser ) :
if min_length is not None :
except IndexError :
def u ( s ) :
to_unicode = lambda s : force_text ( s , strings_only = True )
if not self . user_regex . match ( user_part ) :
raise RuntimeError (  "The method to extend accepted command-line arguments by the "  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
@ deconstructible
shown . add ( plan_node )
from django . utils . deprecation import RemovedInDjango19Warning
def _get_page ( self , * args , ** kwargs ) :
value = data . get ( name , None )
new_operations = optimizer . optimize ( operations , migration . app_label )
return args , kwargs
self . seek ( 0 )
file . seek ( file_pos )
def pretty_name ( name ) :
return kwargs
try :
kwargs [ 'label' ] = labels [ f . name ]
self . handle_field ( obj , field )
def mark_for_escaping ( s ) :
usage = [  "" ,  "Type '%s help <subcommand>' for help on a specific subcommand." % self . prog_name ,  "" ,  "Available subcommands:" ,  ]
import socket
else :
cmatch = constant_re . match ( parts [ 0 ] )
if finder is None :
cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
class DateFormat ( TimeFormat ) :
widget = DateInput
args = hashlib . md5 ( force_bytes ( key ) )
get_text_list = allow_lazy ( get_text_list , six . text_type )
if not language_code_re . search ( lang_code ) :
super ( SortedDict , self ) . __setitem__ ( key , value )
def clean ( self , value ) :
pop = complain
self . filter_expr , self . nodelist = filter_expr , nodelist
module_values = set ( sys . modules . values ( ) )
import codecs
last = self . data . day % 10
data = json . dumps ( data , cls = encoder )
def get_dump_object ( self , obj ) :
field_notes . append ( "Field renamed because it wasn't a valid Python identifier." )
else :
def validate ( self , value ) :
return
for file in options [ 'files' ] :
requires_system_checks = False
_localtime = None
self . active_readers -= 1
if middle . endswith ( punctuation ) :
if self . timezone and self . timezone . dst ( self . data ) :
locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )
def __init__ ( self , context , base , sysid , pubid ) :
number = '' . join ( reversed ( digits ) )
weight += 2
pass
def _has_changed ( self , initial , data ) :
if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :
templatetags_modules_candidates += [ '%s.templatetags' % app_config . name  for app_config in apps . get_app_configs ( ) ]
def represent_decimal ( self , data ) :
class _MovedItems ( _LazyModule ) :
parser . add_argument ( '--no-initial-data' , action = 'store_false' ,  dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
if self . field . cache_choices :
if e . errno != errno . ENOENT :
def __init__ ( self , takes_context , args , kwargs , target_var ) :
self . _boundary = boundary
return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
j = 36 ** factor
try :
self . loopvars , self . sequence = loopvars , sequence
extra_params [ 'primary_key' ] = True
try :
finally :
orig_vars . pop ( '__weakref__' , None )
all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
common_prefix = prefix
for accessor_name , object_list in self . m2m_data . items ( ) :
from django . forms . widgets import HiddenInput
if self . number == self . paginator . num_pages :
if options . get ( 'no_color' ) :
import cgi
try :
encoding = self . encoding or settings . DEFAULT_CHARSET
try :
import re
kwargs [ 'number' ] = number
if check not in self . registered_checks :
return sys . modules [ name ]
if self . ignore and field_name not in model_fields :
output_transaction = True
hextets = ip_str . split ( ":" )
from __future__ import unicode_literals
return mark_safe ( '\n' . join ( inputs ) )
except InputStreamExhausted :
else :
output . append ( '%s<li>%s%s</li>' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
return result
super ( NoArgsCommand , self ) . __init__ ( )
os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
self . stdout . write ( self . style . NOTICE ( "Run 'python manage.py migrate' to apply them.\n" ) )
except KeyError :
def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :
param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
return self . id
class IfParser ( object ) :
self . tag ( function_name , compile_func )
else :
self . validators . remove ( self . _regex_validator )
return repr ( self . value )
self . using = options . get ( 'database' )
self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
for i in range ( 0 , self . total_form_count ( ) ) :
if '()' in config :
if ch in '*?+' :
old_field_name = None
if member . isdir ( ) :
yield 'from %s import models' % self . db_module
return template
day = int ( m . group ( 'day' ) )
def find_template_loader ( loader ) :
continue
self . stdout . write ( "Extracting %s\n" % filename )
return False
original_path = os . path . join ( tmpdir , 'original' )
elif ch != 'P' :
buffer_ = None
return getattr ( trans , real_name )
if id_ :
return response
if not data :
raise DTDForbidden ( name , sysid , pubid )
qs = f . value_from_object ( instance )
return item in self . dict
if path . exists ( absolute_path ) :
warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` '  'instead.' , RemovedInDjango19Warning , 2 )
sys . modules [ __name__ + ".moves." + attr . name ] = attr
else :
if imatch . group ( 2 ) :
except ImportError :
if param :
from IPython . Shell import IPShell
message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' )
if auto_id and '%s' in smart_text ( auto_id ) :
if min_value is not None :
from django . utils import six
logger . propagate = propagate
if options . get ( "list" , False ) :
from django . middleware . csrf import get_token
def _sanitize_ipv4_mapping ( ip_str ) :
self . fed = [ ]
from django . core . management . base import BaseCommand , CommandError
doy += 1
month = months [ date . month - 1 ]
defaults = dict ( defaults . __dict__ , ** options )
return time_str + '-0000'
self . validate_name ( project_name , "project" )
stream . unget ( chunk [ header_end + 4 : ] )
self . can_write . release ( )
nesting += 1
return check
args_check = staticmethod ( args_check )
except Exception :
os . chmod ( path , stat . S_IWRITE )
try :
raise ImportError
self . _non_form_errors = self . error_class ( )
def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :
elif bytes < TB :
self . attach ( filename , content , mimetype )
except ImportError :
class SsiNode ( Node ) :
def save_new ( self , form , commit = True ) :
class Token ( object ) :
p = language . find ( '-' )
return tpl . format ( self . name , self . sysid , self . pubid )
if count == 0 :
obj_pk = obj . _get_pk_val ( )
if isinstance ( value , datetime . time ) :
url_fields = split_url ( urlunsplit ( url_fields ) )
raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
else :
def initial_forms ( self ) :
app = model . _meta . app_label
compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
directories , files = [ ] , [ ]
try :
from django . core . mail import get_connection
for cache_alias in settings . CACHES :
if isinstance ( number , int ) :
value = force_text ( value )
self . stdout . write ( "No conflicts detected to merge." )
data_set = set ( force_text ( value ) for value in data )
if hasattr ( parent , 'render' ) :
args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' )
s . serialize ( queryset , ** options )
def clear ( self ) :
return b''
git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
try :
if has_bom ( po_path ) :
import StringIO
def content ( self , value ) :
from django . conf import settings
return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
if isinstance ( source , NonCapture ) :
args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
cursor . execute ( "SELECT cache_key FROM %s "  "WHERE cache_key = %%s and expires > %%s" % table ,  [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
field_params [ 'db_column' ] = col_name
chunk_size = self . DEFAULT_CHUNK_SIZE
elif piece :
def create_variable_node ( self , filter_expression ) :
num += 1
if isinstance ( slots , str ) :
if token . token_type == 0 :
if self . forms :
for base in reversed ( new_class . __mro__ ) :
return dec
parser . add_argument ( 'migration_name' ,  help = 'Migration name to print the SQL for.' )
if settings . TEMPLATE_DEBUG :
def from_current_timezone ( value ) :
return widget . id_for_label ( id_ )
except Exception as e :
return attrs
raise ValidationError ( errors )
return number_format ( value , use_l10n = use_l10n )
def __hash__ ( self ) :
return None
if bit :
else :
new_name += '_field'
else :
class ImmutableList ( tuple ) :
try :
try :
if end is None :
return template , None
def management_form ( self ) :
raise NotImplementedError ( 'subclasses of Widget must provide a render() method' )
statements = sql_all ( app_config , self . style , connection )
t = file_name
replaces = [ ]
return False
if not cls :
parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :
if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :
if sys . version_info [ 1 ] <= 1 :
else :
return formats . time_format ( value , arg )
result = super ( SortedDict , self ) . popitem ( )
dirs = [ os . path . join ( basedir , l , 'LC_MESSAGES' ) for l in locales ]
warnings . warn (  "SortedDict is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2  )
from django . utils import six
for state , rules in states . items ( ) :
if isinstance ( stream_or_string , bytes ) :
if subcommand_cls . use_argparse :
pass
possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
def build_instance ( Model , data , db ) :
import re
return "<Block Node: %s. Contents: %r>" % ( self . name , self . nodelist )
values = self . sequence . resolve ( context , True )
if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :
raise ImportError
except zlib . error as e :
else :
end = index
def validate ( self , value ) :
try :
def widget_attrs ( self , widget ) :
if jan1_weekday > 4 :
if format not in _serializers :
self . file_path = kwargs . pop ( 'file_path' )
super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
value = map ( force_text , value )
if doublecolon_start == - 1 :
def value_from_datadict ( self , data , files , name ) :
os . chdir ( our_home_dir )
result = cache_get ( key , root )
seconds = self . Z ( )
except KeyError :
_prefixes . value = prefix
continue
def total_error_count ( self ) :
from django . utils import six
for migration in migrations_to_squash :
if not bits :
basetype , subtype = mimetype . split ( '/' , 1 )
def Deserializer ( stream_or_string , ** options ) :
ugettext = gettext
meta = type ( str ( 'Meta' ) , ( object , ) , { } )
if to_lower :
if hasattr ( response , 'render' ) and callable ( response . render ) :
raise CommandError ( 'There is no system check with the "%s" tag.' % invalid_tag )
raise KeyError ( key )
if error_messages and f . name in error_messages :
class BaseEmailBackend ( object ) :
return candidate_pat % candidate_subs
return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
try :
from django . utils import six
def lazy ( func , * resultclasses ) :
from django . utils . translation import ugettext , ungettext
choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
existing . remove ( name )
safe = isinstance ( value , SafeData )
start_response ( force_str ( status ) , response_headers )
def __init__ ( self , table ) :
def add_error ( self , field , error ) :
from django . utils . functional import cached_property
from django . core . mail import get_connection
self . addr = ''
bits = token . split_contents ( )
def __copy__ ( self ) :
self . verbose_name_plural = 'cache entries'
if not_installed_models :
def end_serialization ( self ) :
return proxy
try :
return self . _choices
super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
return inner
additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
if last == 2 :
if migration . replaces :
data = method ( self , * args , ** kwargs )
xreadlines = property ( lambda self : self . file . xreadlines )
prec = abs ( p ) + units + 1
if unicodedata . combining ( char ) :
ns_pattern = ''
from django . utils . encoding import iri_to_uri , force_bytes , force_text
if p >= 0 :
all_models = [ ]
import time as _time
widget = self . field . widget
def send_messages ( self , email_messages ) :
safe_data [ key ] = value
import os
if os . path . exists ( potfile ) :
self . m2m_data = m2m_data
raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
return ip_address_validator_map [ protocol . lower ( ) ]
dir_name , file_name = os . path . split ( name )
from django . utils . formats import localize
pass
else :
setattr ( self , real_name , getattr ( trans , real_name ) )
self . _encoding = value
self . handle_starttag ( tag , attrs )
def parse_name ( self , fixture_name ) :
headerlist . append ( 'HTTP_' + header )
parser . add_option ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
return dec
if url . startswith ( '///' ) :
if not bytes :
except VariableDoesNotExist :
def back ( self ) :
continue
__D2 = r'(?P<day>[ \d]\d)'
if not chunk_size :
if hasattr ( mw_instance , 'process_exception' ) :
return self . _callback
continue
for renamed_method in cls . renamed_methods :
if '-' not in lang_code :
url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
_urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]
DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]
if i + 1 < len ( chunks ) :
self . proxy = False
return TemplateTagNode ( tag )
output = [ ]
with self . _lock . writer ( ) :
elif not isinstance ( end , str ) :
def decode ( self , s ) :
return [ form . cleaned_data for form in self . forms ]
if m is None :
import posixpath
remaining = self . _remaining if size is None else size
return True
dig2 . update ( dig1 . digest ( ) )
value = [ conditional_escape ( v ) for v in value ]
from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
return force_bytes ( s , encoding , strings_only , errors )
key = self . cache_key ( name , dirs )
return new_class
base64d = b64_encode ( data )
objects_in_fixture += 1
return base . DeserializedObject ( obj , m2m_data )
raise TemplateSyntaxError ( "second argument to 'regroup' tag must be 'by'" )
return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
pass
if self . validate_domain_part ( domain_part ) :
import sys
self . add_item_elements ( handler , item )
parser . add_option ( opt )
self . stream . flush ( )
print ( opt_label )
from django . utils import six
return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
else :
def blankout ( src , char ) :
ext_list [ i ] = '.%s' % ext_list [ i ]
return super ( TimeField , self ) . to_python ( value )
valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
@ property
values = [ ]
super ( DateTimeBaseInput , self ) . __init__ ( attrs )
def add_move ( move ) :
pk = self . data [ pk_key ]
self . file = file
return value
def extend_nodelist ( self , nodelist , node , token ) :
message %= error . params
except Exception as e :
self . delete ( key , version = version )
db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
self . months = MONTHS
if not value :
content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
elif auto_id :
finally :
else :
digits . append ( '0' )
self . mode = file . mode
raise CommandError (  "errors happened while running msgattrib\n%s" % errors )
class TemporaryFileUploadHandler ( FileUploadHandler ) :
except LookupError :
def n ( self ) :
absolute_max = max_num + DEFAULT_MAX_NUM
pop_context = False
def __init__ ( self , name , old , new = None ) :
memo [ id ( self ) ] = self
import sys
try :
k = force_bytes ( k , self . encoding )
return exclude
meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
from django . utils . encoding import force_str , force_text
if self . to_field :
for node in self . nodelist :
if name is None :
result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
for dirname in dirnames [ : ] :
loaded_objects_in_fixture = 0
def __repr__ ( self ) :
if _time . daylight :
finally :
self . _load_post_and_files ( )
if len ( tablenames ) :
import pickle
if not self . can_import_settings :
accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )
if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :
urlconf_repr = repr ( self . urlconf_name )
def make_style ( opts = ( ) , ** kwargs ) :
namespaces [ pattern . namespace ] = ( p_pattern , pattern )
models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
self . orphans = int ( orphans )
for alternative in self . alternatives :
self . level = level
view = transaction . atomic ( using = db . alias ) ( view )
for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :
def smart_urlquote ( url ) :
builtins . append ( import_library ( module ) )
from django . utils . encoding import force_text
pass
class NonCapture ( list ) :
self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
else :
if value in ( None , '' ) :
import importlib
checks = self . registered_checks
def allow_lazy ( func , * resultclasses ) :

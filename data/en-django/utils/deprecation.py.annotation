import inspect
#ANNOTATION: import module inspect.
import warnings
#ANNOTATION: import module warnings.


class RemovedInDjango20Warning(PendingDeprecationWarning):
#ANNOTATION: derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
    pass
#ANNOTATION: do nothing.


class RemovedInDjango19Warning(DeprecationWarning):
#ANNOTATION: derive the class RemovedInDjango19Warning from DeprecationWarning base class.
    pass
#ANNOTATION: do nothing.


RemovedInNextVersionWarning = RemovedInDjango19Warning
#ANNOTATION: substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.


class warn_about_renamed_method(object):
#ANNOTATION: derive the class warn_about_renamed_method from object base class.
    def __init__(self, class_name, old_method_name, new_method_name, deprecation_warning):
#ANNOTATION: deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
        self.class_name = class_name
#ANNOTATION: substitute class_name for self.class_name.
        self.old_method_name = old_method_name
#ANNOTATION: substitute old_method_name for self.old_method_name.
        self.new_method_name = new_method_name
#ANNOTATION: substitute new_method_name for new_method_name.
        self.deprecation_warning = deprecation_warning
#ANNOTATION: substitute deprecation_warning for self.deprecation_warning.

    def __call__(self, f):
#ANNOTATION: define the method __call__ with 2 arguments: self and f.
        def wrapped(*args, **kwargs):
#ANNOTATION: define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
            warnings.warn(
                "`%s.%s` is deprecated, use `%s` instead." %
                (self.class_name, self.old_method_name, self.new_method_name),
                self.deprecation_warning, 2)
#ANNOTATION: call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.",
#ANNOTATION: formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.
            return f(*args, **kwargs)
#ANNOTATION: call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
        return wrapped
#ANNOTATION: return wrapped.


class RenameMethodsBase(type):
#ANNOTATION: derive the class RenameMethodsBase from type base class.
    """
    Handles the deprecation paths when renaming a method.

    It does the following:
        1) Define the new method if missing and complain about it.
        2) Define the old method if missing.
        3) Complain whenever an old method is called.

    See #15363 for more details.
    """
#ANNOTATION: docstring

    renamed_methods = ()
#ANNOTATION: renamed_methods is an tuple.

    def __new__(cls, name, bases, attrs):
#ANNOTATION: define the method __new__ with 4 arguments: cls, name, bases and attrs.
        new_class = super(RenameMethodsBase, cls).__new__(cls, name, bases, attrs)
#ANNOTATION: call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.

        for base in inspect.getmro(new_class):
#ANNOTATION: call the method inspect.getmro with an argument new_class, for every base in the result,
            class_name = base.__name__
#ANNOTATION: substitute base.__name__ for class_name.
            for renamed_method in cls.renamed_methods:
#ANNOTATION: for every renamed_method in cls.renamed_methods,
                old_method_name = renamed_method[0]
#ANNOTATION: substitute first element of renamed_method for old_method_name.
                old_method = base.__dict__.get(old_method_name)
#ANNOTATION: get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
                new_method_name = renamed_method[1]
#ANNOTATION: substitute second element of renamed_method for new_method_name.
                new_method = base.__dict__.get(new_method_name)
#ANNOTATION: get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
                deprecation_warning = renamed_method[2]
#ANNOTATION: substitute third element of renamed_method for deprecation_warning.
                wrapper = warn_about_renamed_method(class_name, *renamed_method)
#ANNOTATION: call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.

                # Define the new method if missing and complain about it
                if not new_method and old_method:
#ANNOTATION: if new_method is false and old_method is true,
                    warnings.warn(
                        "`%s.%s` method should be renamed `%s`." %
                        (class_name, old_method_name, new_method_name),
                        deprecation_warning, 2)
#ANNOTATION: call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.",
#ANNOTATION: formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.
                    setattr(base, new_method_name, old_method)
#ANNOTATION: set new_method_name attribute of the base object to old_method.
                    setattr(base, old_method_name, wrapper(old_method))
#ANNOTATION: set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.

                # Define the old method as a wrapped call to the new method.
                if not old_method and new_method:
#ANNOTATION: if old_method is false and new_method is true,
                    setattr(base, old_method_name, wrapper(new_method))
#ANNOTATION: set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.

        return new_class
#ANNOTATION: return new_class.

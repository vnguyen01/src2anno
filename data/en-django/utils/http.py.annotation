from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

import base64
#ANNOTATION: import module base64.
import calendar
#ANNOTATION: import module calendar.
import datetime
#ANNOTATION: import module datetime.
import re
#ANNOTATION: import module re.
import sys
#ANNOTATION: import module sys.

from binascii import Error as BinasciiError
#ANNOTATION: from binascii import Error as BinasciiError into default name space.
from email.utils import formatdate
#ANNOTATION: from email.utils import formatdate into default name space.

from django.utils.datastructures import MultiValueDict
#ANNOTATION: from django.utils.datastructures import MultiValueDict into default name space.
from django.utils.encoding import force_str, force_text
#ANNOTATION: from django.utils.encoding import force_str and force_text into default name space.
from django.utils.functional import allow_lazy
#ANNOTATION: from django.utils.functional import allow_lazy into default name space.
from django.utils import six
#ANNOTATION: from django.utils import six into default name space.
from django.utils.six.moves.urllib.parse import (
    quote, quote_plus, unquote, unquote_plus, urlparse,
    urlencode as original_urlencode)
#ANNOTATION: from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.

ETAG_MATCH = re.compile(r'(?:W/)?"((?:\\.|[^"])*)"')
#ANNOTATION: call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.

MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec'.split()
#ANNOTATION: MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
__D = r'(?P<day>\d{2})'
#ANNOTATION: __D is a raw string '(?P<day>\d{2})'.
__D2 = r'(?P<day>[ \d]\d)'
#ANNOTATION: __D2 is a raw string '(?P<day>[ \d]\d)'.
__M = r'(?P<mon>\w{3})'
#ANNOTATION: __M is a raw string '(?P<mon>\w{3})'.
__Y = r'(?P<year>\d{4})'
#ANNOTATION: __Y is a raw string '(?P<year>\d{4})'.
__Y2 = r'(?P<year>\d{2})'
#ANNOTATION: __Y2 is a raw string '(?P<year>\d{2})'.
__T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
#ANNOTATION: __T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
RFC1123_DATE = re.compile(r'^\w{3}, %s %s %s %s GMT$' % (__D, __M, __Y, __T))
#ANNOTATION: call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,
#ANNOTATION: substitute the result for RFC1123_DATE.
RFC850_DATE = re.compile(r'^\w{6,9}, %s-%s-%s %s GMT$' % (__D, __M, __Y2, __T))
#ANNOTATION: call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,
#ANNOTATION: substitute the result for RFC850_DATE.
ASCTIME_DATE = re.compile(r'^\w{3} %s %s %s %s$' % (__M, __D2, __T, __Y))
#ANNOTATION: call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,
#ANNOTATION: substitute the result for ASCTIME_DATE.


def urlquote(url, safe='/'):
#ANNOTATION: define the function urlquote with 2 arguments: url and safe set to '/'.
    """
    A version of Python's urllib.quote() function that can operate on unicode
    strings. The url is first UTF-8 encoded before quoting. The returned string
    can safely be used as part of an argument to a subsequent iri_to_uri() call
    without double-quoting occurring.
    """
#ANNOTATION: docstring
    return force_text(quote(force_str(url), force_str(safe)))
#ANNOTATION: call the function quote with 2 arguments: result of the function force_str called with an argument url,
#ANNOTATION: and result of the function force_str called with an argument safe,
#ANNOTATION: use the result as an argument for the call to the function force_text, return the result.
urlquote = allow_lazy(urlquote, six.text_type)
#ANNOTATION: call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.


def urlquote_plus(url, safe=''):
#ANNOTATION: define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
    """
    A version of Python's urllib.quote_plus() function that can operate on
    unicode strings. The url is first UTF-8 encoded before quoting. The
    returned string can safely be used as part of an argument to a subsequent
    iri_to_uri() call without double-quoting occurring.
    """
#ANNOTATION: docstring
    return force_text(quote_plus(force_str(url), force_str(safe)))
#ANNOTATION: call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,
#ANNOTATION: and result of the function force_str called with an argument safe,
#ANNOTATION: use the result as an argument for the call to the function force_text, return the result.
urlquote_plus = allow_lazy(urlquote_plus, six.text_type)
#ANNOTATION: call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.


def urlunquote(quoted_url):
#ANNOTATION: define the function urlunquote with an argument quoted_url.
    """
    A wrapper for Python's urllib.unquote() function that can operate on
    the result of django.utils.http.urlquote().
    """
#ANNOTATION: docstring
    return force_text(unquote(force_str(quoted_url)))
#ANNOTATION: call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,
#ANNOTATION: use the result as an argument for the call to the function force_text, return the result.
urlunquote = allow_lazy(urlunquote, six.text_type)
#ANNOTATION: call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.


def urlunquote_plus(quoted_url):
#ANNOTATION: define the function urlunquote with an argument quoted_url.
    """
    A wrapper for Python's urllib.unquote_plus() function that can operate on
    the result of django.utils.http.urlquote_plus().
    """
#ANNOTATION: docstring
    return force_text(unquote_plus(force_str(quoted_url)))
#ANNOTATION: call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,
#ANNOTATION: use the result as an argument for the call to the function force_text, return the result.
urlunquote_plus = allow_lazy(urlunquote_plus, six.text_type)
#ANNOTATION: call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.


def urlencode(query, doseq=0):
#ANNOTATION: define the function urlencode with 2 arguments query and doseq set to integer 0.
    """
    A version of Python's urllib.urlencode() function that can operate on
    unicode strings. The parameters are first cast to UTF-8 encoded strings and
    then encoded as per normal.
    """
#ANNOTATION: docstring
    if isinstance(query, MultiValueDict):
#ANNOTATION: if query is an instance of MultiValueDict class,
        query = query.lists()
#ANNOTATION: call the method query.lists, substitute the result for query.
    elif hasattr(query, 'items'):
#ANNOTATION: otherwise if query has an attribute 'items',
        query = query.items()
#ANNOTATION: call the method query.items, substitute the result for query.
    return original_urlencode(
        [(force_str(k),
         [force_str(i) for i in v] if isinstance(v, (list, tuple)) else force_str(v))
            for k, v in query],
        doseq)
#ANNOTATION: call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,
#ANNOTATION: and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple, 
#ANNOTATION: otherwise second element is result of the function force_str with an argument v, for every k and v in query,
#ANNOTATION: and doseq, return the result.


def cookie_date(epoch_seconds=None):
#ANNOTATION: define the function cookie_date with an argument epoch_seconds set to None.
    """
    Formats the time to ensure compatibility with Netscape's cookie standard.

    Accepts a floating point number expressed in seconds since the epoch, in
    UTC - such as that outputted by time.time(). If set to None, defaults to
    the current time.

    Outputs a string in the format 'Wdy, DD-Mon-YYYY HH:MM:SS GMT'.
    """
#ANNOTATION: docstring
    rfcdate = formatdate(epoch_seconds)
#ANNOTATION: call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
    return '%s-%s-%s GMT' % (rfcdate[:7], rfcdate[8:11], rfcdate[12:25])
#ANNOTATION: return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,
#ANNOTATION: and elements of rfcdate from 12-th to the 25-th index.


def http_date(epoch_seconds=None):
#ANNOTATION: define the function http_date with an argument epoch_seconds set to None.
    """
    Formats the time to match the RFC1123 date format as specified by HTTP
    RFC2616 section 3.3.1.

    Accepts a floating point number expressed in seconds since the epoch, in
    UTC - such as that outputted by time.time(). If set to None, defaults to
    the current time.

    Outputs a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.
    """
#ANNOTATION: docstring
    return formatdate(epoch_seconds, usegmt=True)
#ANNOTATION: call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.


def parse_http_date(date):
#ANNOTATION: define the function parse_http_date with an argument date.
    """
    Parses a date format as specified by HTTP RFC2616 section 3.3.1.

    The three formats allowed by the RFC are accepted, even if only the first
    one is still in widespread use.

    Returns an integer expressed in seconds since the epoch, in UTC.
    """
#ANNOTATION: docstring
    # emails.Util.parsedate does the job for RFC1123 dates; unfortunately
    # RFC2616 makes it mandatory to support RFC850 dates too. So we roll
    # our own RFC-compliant parsing.
    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:
#ANNOTATION: for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
        m = regex.match(date)
#ANNOTATION: call the method regex.match with an argument date, substitute the result for m. 
        if m is not None:
#ANNOTATION: if m is not None,
            break
#ANNOTATION: break from the loop execution.
    else:
#ANNOTATION: if not,
        raise ValueError("%r is not in a valid HTTP date format" % date)
#ANNOTATION: raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
    try:
#ANNOTATION: try,
        year = int(m.group('year'))
#ANNOTATION: call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
        if year < 100:
#ANNOTATION: if year is lesser than integer 100, 
            if year < 70:
#ANNOTATION: if year is lesser than integer 70,
                year += 2000
#ANNOTATION: increment year by integer 2000.
            else:
#ANNOTATION: if not,
                year += 1900
#ANNOTATION: increment year by integer 1900.
        month = MONTHS.index(m.group('mon').lower()) + 1
#ANNOTATION: call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,
#ANNOTATION: method MONTHS.index, increment the result by integer 1, substitute it for month.
        day = int(m.group('day'))
#ANNOTATION: call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
        hour = int(m.group('hour'))
#ANNOTATION: call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
        min = int(m.group('min'))
#ANNOTATION: call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
        sec = int(m.group('sec'))
#ANNOTATION: call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
        result = datetime.datetime(year, month, day, hour, min, sec)
#ANNOTATION: call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
        return calendar.timegm(result.utctimetuple())
#ANNOTATION: call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
    except Exception:
#ANNOTATION: if Exception exception is caught.
        six.reraise(ValueError, ValueError("%r is not a valid date" % date), sys.exc_info()[2])
#ANNOTATION: call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,
#ANNOTATION: "%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.


def parse_http_date_safe(date):
#ANNOTATION: define the function parse_http_date_safe an argument date.
    """
    Same as parse_http_date, but returns None if the input is invalid.
    """
#ANNOTATION: docstring
    try:
#ANNOTATION: try,
        return parse_http_date(date)
#ANNOTATION: call the function parse_http_date with an argument date, return the result. 
    except Exception:
#ANNOTATION: if Exception exception is caught.
        pass
#ANNOTATION: do nothing.


# Base 36 functions: useful for generating compact URLs

def base36_to_int(s):
#ANNOTATION: define the functionbase36_to_int with an argument s.
    """
    Converts a base 36 string to an ``int``. Raises ``ValueError` if the
    input won't fit into an int.
    """
#ANNOTATION: docstring
    # To prevent overconsumption of server resources, reject any
    # base36 string that is long than 13 base36 digits (13 digits
    # is sufficient to base36-encode any 64-bit integer)
    if len(s) > 13:
#ANNOTATION: if length of s is greater than integer 13,
        raise ValueError("Base36 input too large")
#ANNOTATION: raise an ValueError exception with an argument string "Base36 input too large".
    value = int(s, 36)
#ANNOTATION: convert s to integer of base 36, substitute it for value.
    # ... then do a final check that the value will fit into an int to avoid
    # returning a long (#15067). The long type was removed in Python 3.
    if six.PY2 and value > sys.maxint:
#ANNOTATION: if six.PY2 is true and value is greater than sys.maxint,
        raise ValueError("Base36 input too large")
#ANNOTATION: raise an ValueError exception with an argument string "Base36 input too large".
    return value
#ANNOTATION: return value.


def int_to_base36(i):
#ANNOTATION: define the function int_to_base36 with an argument i.
    """
    Converts an integer to a base36 string
    """
#ANNOTATION: docstring
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
#ANNOTATION: digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
    factor = 0
#ANNOTATION: factor is integer 0.
    if i < 0:
#ANNOTATION: if i is smaller than integer 0,
        raise ValueError("Negative base36 conversion input.")
#ANNOTATION: raise an ValueError exception with an argument string "Negative base36 conversion input.".
    if six.PY2:
#ANNOTATION: if six.PY2 is true,
        if not isinstance(i, six.integer_types):
#ANNOTATION: if i is not an instance of six.integer_types class,
            raise TypeError("Non-integer base36 conversion input.")
#ANNOTATION: raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
        if i > sys.maxint:
#ANNOTATION: if i is greater than sys.maxint,
            raise ValueError("Base36 conversion input too large.")
#ANNOTATION: raise an ValueError exception with an argument string "Base36 conversion input too large.".
    # Find starting factor
    while True:
#ANNOTATION: endless loop,
        factor += 1
#ANNOTATION: increment factor by one.
        if i < 36 ** factor:
#ANNOTATION: bring integer 36 to the power of factor, if i is smaller than the result,
            factor -= 1
#ANNOTATION: decrement factor by one.
            break
#ANNOTATION: break from the loop execution.
    base36 = []
#ANNOTATION: base36 is an empty list.
    # Construct base36 representation
    while factor >= 0:
#ANNOTATION: while factor is greater or equal to integer 0,
        j = 36 ** factor
#ANNOTATION: bring integer 36 to the power of factor, substitute the result for j.
        base36.append(digits[i // j])
#ANNOTATION: floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
        i = i % j
#ANNOTATION: i is the reminder of the division of i by j.
        factor -= 1
#ANNOTATION: decrement factor by one.
    return ''.join(base36)
#ANNOTATION: join elements of base36 into a string, return it.


def urlsafe_base64_encode(s):
#ANNOTATION: define the function urlsafe_base64_encode with an argument s.
    """
    Encodes a bytestring in base64 for use in URLs, stripping any trailing
    equal signs.
    """
#ANNOTATION: docstring
    return base64.urlsafe_b64encode(s).rstrip(b'\n=')
#ANNOTATION: call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.


def urlsafe_base64_decode(s):
#ANNOTATION: define the function urlsafe_base64_decode with an argument s.
    """
    Decodes a base64 encoded string, adding back any trailing equal signs that
    might have been stripped.
    """
#ANNOTATION: docstring
    s = s.encode('utf-8')  # base64encode should only return ASCII.
#ANNOTATION: call the method s.encode with an argument string 'utf-8', substitute the result for s.
    try:
#ANNOTATION: try,
        return base64.urlsafe_b64decode(s.ljust(len(s) + len(s) % 4, b'='))
#ANNOTATION: left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,
#ANNOTATION: pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,
#ANNOTATION: return the result.
    except (LookupError, BinasciiError) as e:
#ANNOTATION: if LookupError or BinasciiError, renamed to e, exceptions are caught.
        raise ValueError(e)
#ANNOTATION: raise an ValueError exception with an argument e.


def parse_etags(etag_str):
#ANNOTATION: define the function parse_etags with an argument etag_str.
    """
    Parses a string with one or several etags passed in If-None-Match and
    If-Match headers by the rules in RFC 2616. Returns a list of etags
    without surrounding double quotes (") and unescaped from \<CHAR>.
    """
#ANNOTATION: docstring
    etags = ETAG_MATCH.findall(etag_str)
#ANNOTATION: call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
    if not etags:
#ANNOTATION: if etags is false,
        # etag_str has wrong format, treat it as an opaque string then
        return [etag_str]
#ANNOTATION: return a list with an element etag_str.
    etags = [e.encode('ascii').decode('unicode_escape') for e in etags]
#ANNOTATION: for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,
#ANNOTATION: string 'unicode_escape', substitute the list of results for etags.
    return etags
#ANNOTATION: return etags.


def quote_etag(etag):
#ANNOTATION: define the function quote_etag with an argument etag.
    """
    Wraps a string in double quotes escaping contents as necessary.
    """
#ANNOTATION: docstring
    return '"%s"' % etag.replace('\\', '\\\\').replace('"', '\\"')
#ANNOTATION: return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"',
#ANNOTATION: is replaced with '\\"'.


def same_origin(url1, url2):
#ANNOTATION: define the function same_origin with 2 arguments url1 and url2.
    """
    Checks if two URLs are 'same-origin'
    """
#ANNOTATION: docstring
    p1, p2 = urlparse(url1), urlparse(url2)
#ANNOTATION: substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
    try:
#ANNOTATION: try,
        return (p1.scheme, p1.hostname, p1.port) == (p2.scheme, p2.hostname, p2.port)
#ANNOTATION: if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
    except ValueError:
#ANNOTATION: if ValueError exception is caught.
        return False
#ANNOTATION: return boolean False.


def is_safe_url(url, host=None):
#ANNOTATION: define the function is_safe_url with 2 arguments url and host set to None.
    """
    Return ``True`` if the url is a safe redirection (i.e. it doesn't point to
    a different host and uses a safe scheme).

    Always returns ``False`` on an empty url.
    """
#ANNOTATION: docstring
    if not url:
#ANNOTATION: if url is false,
        return False
#ANNOTATION: return boolean False.
    # Chrome treats \ completely as /
    url = url.replace('\\', '/')
#ANNOTATION: replace every occurrence of '\\' in url with '/'.
    # Chrome considers any URL with more than two slashes to be absolute, but
    # urlparse is not so flexible. Treat any url with three slashes as unsafe.
    if url.startswith('///'):
#ANNOTATION: if url starts with '///',
        return False
#ANNOTATION: return boolean False.
    url_info = urlparse(url)
#ANNOTATION: call the function urlparse with an argument url, substitute the result for url_info.
    # Forbid URLs like http:///example.com - with a scheme, but without a hostname.
    # In that URL, example.com is not the hostname but, a path component. However,
    # Chrome will still consider example.com to be the hostname, so we must not
    # allow this syntax.
    if not url_info.netloc and url_info.scheme:
#ANNOTATION: if url_info.netloc is false and url_info.scheme is true,
        return False
#ANNOTATION: return boolean False.
    return ((not url_info.netloc or url_info.netloc == host) and
            (not url_info.scheme or url_info.scheme in ['http', 'https']))
#ANNOTATION: if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
#ANNOTATION: strings 'http' or 'https', return boolean True, otherwise return boolean False.

# Copyright (c) 2010 Guilherme Gondim. All rights reserved.
# Copyright (c) 2009 Simon Willison. All rights reserved.
# Copyright (c) 2002 Drew Perttula. All rights reserved.
#
# License:
#   Python Software Foundation License version 2
#
# See the file "LICENSE" for terms & conditions for usage, and a DISCLAIMER OF
# ALL WARRANTIES.
#
# This Baseconv distribution contains no GNU General Public Licensed (GPLed)
# code so it may be used in proprietary projects just like prior ``baseconv``
# distributions.
#
# All trademarks referenced herein are property of their respective holders.
#

"""
Convert numbers from base 10 integers to base X strings and back again.

Sample usage::

  >>> base20 = BaseConverter('0123456789abcdefghij')
  >>> base20.encode(1234)
  '31e'
  >>> base20.decode('31e')
  1234
  >>> base20.encode(-1234)
  '-31e'
  >>> base20.decode('-31e')
  -1234
  >>> base11 = BaseConverter('0123456789-', sign='$')
  >>> base11.encode('$1234')
  '$-22'
  >>> base11.decode('$-22')
  '$1234'

"""
#ANNOTATION: docstring

BASE2_ALPHABET = '01'
#ANNOTATION: BASE2_ALPHABET is a string '01'.
BASE16_ALPHABET = '0123456789ABCDEF'
#ANNOTATION: BASE16_ALPHABET is a string '0123456789ABCDEF'.
BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
#ANNOTATION: BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
#ANNOTATION: BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
#ANNOTATION: BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
BASE64_ALPHABET = BASE62_ALPHABET + '-_'
#ANNOTATION: append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET. 


class BaseConverter(object):
#ANNOTATION: derive class BaseCOnverter from object base class.
    decimal_digits = '0123456789'
#ANNOTATION: decimal_digits is a string '0123456789'.

    def __init__(self, digits, sign='-'):
#ANNOTATION: define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
        self.sign = sign
#ANNOTATION: substitute sign for self.sign.
        self.digits = digits
#ANNOTATION: substitute digits for self.digits.
        if sign in self.digits:
#ANNOTATION: if sign is contained in self.digits,
            raise ValueError('Sign character found in converter base digits.')
#ANNOTATION: raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.

    def __repr__(self):
#ANNOTATION: define private method __repr__ with argument self.
        return "<BaseConverter: base%s (%s)>" % (len(self.digits), self.digits)
#ANNOTATION: replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.

    def encode(self, i):
#ANNOTATION: define the method encode with self class instance and i as arguments.
        neg, value = self.convert(i, self.decimal_digits, self.digits, '-')
#ANNOTATION: call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
        if neg:
#ANNOTATION: if neg is true, 
            return self.sign + value
#ANNOTATION: append value to the self.sign, return the result.
        return value
#ANNOTATION: return value.

    def decode(self, s):
#ANNOTATION: define the decode method with self class instance and s as arguments.
        neg, value = self.convert(s, self.digits, self.decimal_digits, self.sign)
#ANNOTATION: call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
        if neg:
#ANNOTATION: if neg is true,
            value = '-' + value
#ANNOTATION: append value to the '-', substitute it for value.
        return int(value)
#ANNOTATION: convert value to an integer, return it.

    def convert(self, number, from_digits, to_digits, sign):
#ANNOTATION: define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
        if str(number)[0] == sign:
#ANNOTATION: convert number to string, if first element equals to sign,
            number = str(number)[1:]
#ANNOTATION: convert number to a string, truncate first element.
            neg = 1
#ANNOTATION: neg is integer 1.
        else:
#ANNOTATION: if not,
            neg = 0
#ANNOTATION: neg is integer 0.

        # make an integer out of the number
        x = 0
#ANNOTATION: x is integer 0.
        for digit in str(number):
#ANNOTATION: for every digit in number coverted to a string,
            x = x * len(from_digits) + from_digits.index(digit)
#ANNOTATION: multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.

        # create the result in base 'len(to_digits)'
        if x == 0:
#ANNOTATION: if x equals to integer 0,
            res = to_digits[0]
#ANNOTATION: substitute first element of to_digits for res.
        else:
#ANNOTATION: if not,
            res = ''
#ANNOTATION: res is an empty string.
            while x > 0:
#ANNOTATION: while x is greater than zero,
                digit = x % len(to_digits)
#ANNOTATION: calculate reminder of division of x by length to_digits, substitute it for digit.
                res = to_digits[digit] + res
#ANNOTATION: increment res by element of to_digit at the digit index.
                x = int(x // len(to_digits))
#ANNOTATION: divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
        return neg, res
#ANNOTATION: return neg and res.

base2 = BaseConverter(BASE2_ALPHABET)
#ANNOTATION: call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
base16 = BaseConverter(BASE16_ALPHABET)
#ANNOTATION: call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
base36 = BaseConverter(BASE36_ALPHABET)
#ANNOTATION: call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
base56 = BaseConverter(BASE56_ALPHABET)
#ANNOTATION: call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
base62 = BaseConverter(BASE62_ALPHABET)
#ANNOTATION: call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
base64 = BaseConverter(BASE64_ALPHABET, sign='$')
#ANNOTATION: call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.

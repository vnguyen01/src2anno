# Autoreloading launcher.
# Borrowed from Peter Hunt and the CherryPy project (http://www.cherrypy.org).
# Some taken from Ian Bicking's Paste (http://pythonpaste.org/).
#
# Portions copyright (c) 2004, CherryPy Team (team@cherrypy.org)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of the CherryPy Team nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from __future__ import absolute_import  # Avoid importing `importlib` from this package.
#ANNOTATION: from __future__ import absolute_import into default name space.

import os
#ANNOTATION: import module os.
import signal
#ANNOTATION: import module signal.
import sys
#ANNOTATION: import module sys.
import time
#ANNOTATION: import module time.
import traceback
#ANNOTATION: import module traceback.

from django.apps import apps
#ANNOTATION: from django.apps import apps into default name space.
from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.core.signals import request_finished
#ANNOTATION: from django.core.signals import request_finished into default name space.
try:
#ANNOTATION: try,
    from django.utils.six.moves import _thread as thread
#ANNOTATION: from django.utils.six.moves import _thread as thread into default name space.
except ImportError:
#ANNOTATION: if imoportError exception is caught,
    from django.utils.six.moves import _dummy_thread as thread
#ANNOTATION: from django.utils.six.moves import _dummy_thread as thread into default name space.

# This import does nothing, but it's necessary to avoid some race conditions
# in the threading module. See http://code.djangoproject.com/ticket/2330 .
try:
#ANNOTATION: try,
    import threading  # NOQA
#ANNOTATION: import threading module.
except ImportError:
#ANNOTATION: if ImportError exception is caught,
    pass
#ANNOTATION: do nothing.

try:
#ANNOTATION: try,
    import termios
#ANNOTATION: import termios module.
except ImportError:
#ANNOTATION: if ImportError exception is caught,
    termios = None
#ANNOTATION: termios is None.

USE_INOTIFY = False
#ANNOTATION: USE_INOTIFY is boolean False.
try:
#ANNOTATION: try,
    # Test whether inotify is enabled and likely to work
    import pyinotify
#ANNOTATION: import pyinotify module.

    fd = pyinotify.INotifyWrapper.create().inotify_init()
#ANNOTATION: call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
    if fd >= 0:
#ANNOTATION: if fd is greater or equal to integer 0.
        USE_INOTIFY = True
#ANNOTATION: USE_INOTIFY is boolean True.
        os.close(fd)
#ANNOTATION: close fd file descriptor.
except ImportError:
#ANNOTATION: if ImportError exception is caught,
    pass
#ANNOTATION: do nothing.

RUN_RELOADER = True
#ANNOTATION: RUN_RELOADER is boolean True.

FILE_MODIFIED = 1
#ANNOTATION: FILE_MODIFIED is integer 1.
I18N_MODIFIED = 2
#ANNOTATION: I18N_MODIFIED is integer 2

_mtimes = {}
#ANNOTATION: _mtimes is an empty dictionary.
_win = (sys.platform == "win32")
#ANNOTATION: _win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.

_error_files = []
#ANNOTATION: _error_files is an empty list.
_cached_modules = set()
#ANNOTATION: _cached_modules is an empty set.
_cached_filenames = []
#ANNOTATION: _cached_filenames is an empty list.


def gen_filenames(only_new=False):
#ANNOTATION: define the function gen_filenames with an argument only_new defaulting to boolean False.
    """
    Returns a list of filenames referenced in sys.modules and translation
    files.
    """
#ANNOTATION: docstring
    # N.B. ``list(...)`` is needed, because this runs in parallel with
    # application code which might be mutating ``sys.modules``, and this will
    # fail with RuntimeError: cannot mutate dictionary while iterating
    global _cached_modules, _cached_filenames
#ANNOTATION: declare that we use global variables cached_modules and _cached_filenames in this function. 
    module_values = set(sys.modules.values())
#ANNOTATION: module_values is a set created from the elements of sys.modules.values method return value.
    if _cached_modules == module_values:
#ANNOTATION: if _cached_modules equals to module_values,
        # No changes in module list, short-circuit the function
        if only_new:
#ANNOTATION: if only_new is true,
            return []
#ANNOTATION: return an empty list.
        else:
#ANNOTATION: if not,
            return _cached_filenames
#ANNOTATION: return _cached_filenames.

    new_modules = module_values - _cached_modules
#ANNOTATION: subtract _cached_modules from module_values, assign the result to new_modules.
    new_filenames = [filename.__file__ for filename in new_modules
                     if hasattr(filename, '__file__')]
#ANNOTATION: create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.

    if not _cached_filenames and settings.USE_I18N:
#ANNOTATION: if _cached_filenames is empty and settings.USE_I18N is True,
        # Add the names of the .mo files that can be generated
        # by compilemessages management command to the list of files watched.
        basedirs = [os.path.join(os.path.dirname(os.path.dirname(__file__)),
                                 'conf', 'locale'),
                    'locale']
#ANNOTATION: return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
        for app_config in reversed(list(apps.get_app_configs())):
#ANNOTATION: for app_config in reversed list of apps.get_app_configs() elements,
            basedirs.append(os.path.join(app_config.path, 'locale'))
#ANNOTATION: join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
        basedirs.extend(settings.LOCALE_PATHS)
#ANNOTATION: extend basedirs list with settings.LOCALE_PATHS.
        basedirs = [os.path.abspath(basedir) for basedir in basedirs
                    if os.path.isdir(basedir)]
#ANNOTATION: replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
        for basedir in basedirs:
#ANNOTATION: for every basedir in basedirs,
            for dirpath, dirnames, locale_filenames in os.walk(basedir):
#ANNOTATION: for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
                for filename in locale_filenames:
#ANNOTATION: for every filenam in locale_filenames,
                    if filename.endswith('.mo'):
#ANNOTATION: if filename ends with string '.mo',
                        new_filenames.append(os.path.join(dirpath, filename))
#ANNOTATION: join dirpath and filename into a path separated by '/', append it to new_filenames.

    if only_new:
#ANNOTATION: if only_new is True,
        filelist = new_filenames
#ANNOTATION: substitute new_filenames for filelist.
    else:
#ANNOTATION: if not,
        filelist = _cached_filenames + new_filenames + _error_files
#ANNOTATION: sum _cached_filenames, new_filenames and _error_files, store the result in filelist.
    filenames = []
#ANNOTATION: filenames is an empty list.
    for filename in filelist:
#ANNOTATION: for every filename is filelist,
        if not filename:
#ANNOTATION: if filename is empty,
            continue
#ANNOTATION: skip this loop iteration,
        if filename.endswith(".pyc") or filename.endswith(".pyo"):
#ANNOTATION: if filename ends with string ".pyc" or it ends with ".pyo",
            filename = filename[:-1]
#ANNOTATION: truncate the last element of filename.
        if filename.endswith("$py.class"):
#ANNOTATION: if filename ends with string "$py.class", 
            filename = filename[:-9] + ".py"
#ANNOTATION: truncate last 9 elements of filename and append it string ".py".
        if os.path.exists(filename):
#ANNOTATION: if file filename exists,
            filenames.append(filename)
#ANNOTATION: append filename to filenames.
    _cached_modules = _cached_modules.union(new_modules)
#ANNOTATION: add elements from new_modules set to _cached_modules set.
    _cached_filenames += new_filenames
#ANNOTATION: append new_filenames to _cached_filenames.
    return filenames
#ANNOTATION: return filenames.


def reset_translations():
#ANNOTATION: define the function reset_translation.
    import gettext
#ANNOTATION: import gettext module.
    from django.utils.translation import trans_real
#ANNOTATION: from django.utils.translation import trans_real into default namespace.
    gettext._translations = {}
#ANNOTATION: gettext._translations is an empty dictionary.
    trans_real._translations = {}
#ANNOTATION: trans_real._translations is an empty dictionary.
    trans_real._default = None
#ANNOTATION: trans_real._default is None.
    trans_real._active = threading.local()
#ANNOTATION: call the threading.local method, assign the result to trans_real._active.


def inotify_code_changed():
#ANNOTATION: define the function inotify_code_changed.
    """
    Checks for changed code using inotify. After being called
    it blocks until a change event has been fired.
    """
#ANNOTATION: docstring
    class EventHandler(pyinotify.ProcessEvent):
#ANNOTATION: derive the EventHandler class from the base class pyinotify.ProcessEvent.
        modified_code = None
#ANNOTATION: modified_code is None.

        def process_default(self, event):
#ANNOTATION: define the method process_default with self class instance and event as arguments.
            if event.path.endswith('.mo'):
#ANNOTATION: if event.path ends with string '.mo',
                EventHandler.modified_code = I18N_MODIFIED
#ANNOTATION: EventHandler.modified_code is I18N_MODIFIED.
            else:
#ANNOTATION: if not,
                EventHandler.modified_code = FILE_MODIFIED
#ANNOTATION: EventHandler.modified_code is FILE_MODIFIED.

    wm = pyinotify.WatchManager()
#ANNOTATION: call the pyinotify.WatchManager method, assign the result to wm.
    notifier = pyinotify.Notifier(wm, EventHandler())
#ANNOTATION: call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.

    def update_watch(sender=None, **kwargs):
#ANNOTATION: define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
        if sender and getattr(sender, 'handles_files', False):
#ANNOTATION: if sender is true and sender attribute 'handles_files' is also True,
            # No need to update watches when request serves files.
            # (sender is supposed to be a django.core.handlers.BaseHandler subclass)
            return
#ANNOTATION: return nothing.
        mask = (
            pyinotify.IN_MODIFY |
            pyinotify.IN_DELETE |
            pyinotify.IN_ATTRIB |
            pyinotify.IN_MOVED_FROM |
            pyinotify.IN_MOVED_TO |
            pyinotify.IN_CREATE
        )
#ANNOTATION: perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,
#ANNOTATION: pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.
        for path in gen_filenames(only_new=True):
#ANNOTATION: for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
            wm.add_watch(path, mask)
#ANNOTATION: call the method wm.add_watch with path and mask as arguments.

    # New modules may get imported when a request is processed.
    request_finished.connect(update_watch)
#ANNOTATION: call the method request_finished.connect with argument update_watch.

    # Block until an event happens.
    update_watch()
#ANNOTATION: call the method update_watch.
    notifier.check_events(timeout=None)
#ANNOTATION: call the method notifier.check_events with argument timeout set to None.
    notifier.read_events()
#ANNOTATION: call the method notifier.read_events.
    notifier.process_events()
#ANNOTATION: call the method notifier.process_events.
    notifier.stop()
#ANNOTATION: call the method notifier.stop.

    # If we are here the code must have changed.
    return EventHandler.modified_code
#ANNOTATION: return EventHandler.modified_code.


def code_changed():
#ANNOTATION: define the function code_changed.
    global _mtimes, _win
#ANNOTATION: use the global variables _mtimes and _win in this function.
    for filename in gen_filenames():
#ANNOTATION: for every filename in gen_filenames(),
        stat = os.stat(filename)
#ANNOTATION: call the os.stat function with argument filename, store the return value in stat.
        mtime = stat.st_mtime
#ANNOTATION: substitute stat.st_mtime for mtime.
        if _win:
#ANNOTATION: if _win is true,
            mtime -= stat.st_ctime
#ANNOTATION: decrement mtime by stat.st_ctime.
        if filename not in _mtimes:
#ANNOTATION: if filename is not contained in _mtimes,
            _mtimes[filename] = mtime
#ANNOTATION: substitute mtime for the value under the filename key of _mtimes dictionary.
            continue
#ANNOTATION: skip this loop iteration.
        if mtime != _mtimes[filename]:
#ANNOTATION: if mtime is different than the value of dictionary _mtimes under the key filename,
            _mtimes = {}
#ANNOTATION: _mtimes is an empty dictionary.
            try:
#ANNOTATION: try,
                del _error_files[_error_files.index(filename)]
#ANNOTATION: remove the first occurrence of the filename value in the _error_files list.
            except ValueError:
#ANNOTATION: if ValueError exception is caught,
                pass
#ANNOTATION: do nothing.
            return I18N_MODIFIED if filename.endswith('.mo') else FILE_MODIFIED
#ANNOTATION: if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
    return False
#ANNOTATION: return boolean False.


def check_errors(fn):
#ANNOTATION: define the function check_errors with argument fn.
    def wrapper(*args, **kwargs):
#ANNOTATION: define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
        try:
#ANNOTATION: try,
            fn(*args, **kwargs)
#ANNOTATION: call the function fn with list of arguments args and dictionary of argument values kwargs. 
        except (ImportError, IndentationError, NameError, SyntaxError,
                TypeError, AttributeError):
#ANNOTATION: if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
            et, ev, tb = sys.exc_info()
#ANNOTATION: call the sys.exc_info function, assign the result to et, ev and tb, respectively.

            if getattr(ev, 'filename', None) is None:
#ANNOTATION: if 'filename' attribute of ev is None,
                # get the filename from the last item in the stack
                filename = traceback.extract_tb(tb)[-1][0]
#ANNOTATION: call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
            else:
#ANNOTATION: if not,
                filename = ev.filename
#ANNOTATION: substitute ev.filename for filename.

            if filename not in _error_files:
#ANNOTATION: if filename is not contained in _error_files,
                _error_files.append(filename)
#ANNOTATION: append filename to _error_files.

            raise
#ANNOTATION: raise an exception.

    return wrapper
#ANNOTATION: return wrapper.


def ensure_echo_on():
#ANNOTATION: define ensure_echo_on function.
    if termios:
#ANNOTATION: if termios is true,
        fd = sys.stdin
#ANNOTATION: substitute sys.stdin for fd.
        if fd.isatty():
#ANNOTATION: evaluate the fd.isatty method, if the result is true,
            attr_list = termios.tcgetattr(fd)
#ANNOTATION: call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
            if not attr_list[3] & termios.ECHO:
#ANNOTATION: if fourth element of attr_list and termios.ECHO are both true,
                attr_list[3] |= termios.ECHO
#ANNOTATION: perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
                if hasattr(signal, 'SIGTTOU'):
#ANNOTATION: if signal has an attribute 'SIGTTOU',
                    old_handler = signal.signal(signal.SIGTTOU, signal.SIG_IGN)
#ANNOTATION: call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
                else:
#ANNOTATION: if not,
                    old_handler = None
#ANNOTATION: old_handler is None.
                termios.tcsetattr(fd, termios.TCSANOW, attr_list)
#ANNOTATION: call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
                if old_handler is not None:
#ANNOTATION: if old_handler is not None,
                    signal.signal(signal.SIGTTOU, old_handler)
#ANNOTATION: call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.


def reloader_thread():
#ANNOTATION: define the function reloader_thread.
    ensure_echo_on()
#ANNOTATION: call the function ensure_echo_on.
    if USE_INOTIFY:
#ANNOTATION: if USE_INOTIFY is true,
        fn = inotify_code_changed
#ANNOTATION: substitute inotify_code_changed for fn.
    else:
#ANNOTATION: if not, 
        fn = code_changed
#ANNOTATION: substitute code_changed for fn.
    while RUN_RELOADER:
#ANNOTATION: while RUN_RELOADER is true.
        change = fn()
#ANNOTATION: assign the return value of the function fn to change.
        if change == FILE_MODIFIED:
#ANNOTATION: if change equals to FILE_MODIFIED,
            sys.exit(3)  # force reload
#ANNOTATION: call the function sys.exit with argument integer 3.
        elif change == I18N_MODIFIED:
#ANNOTATION: otherwise id change equals to I18N_MODIFIED,
            reset_translations()
#ANNOTATION: call the function reset_translations. 
        time.sleep(1)
#ANNOTATION: call the function time.sleep with an argument integer 1.


def restart_with_reloader():
#ANNOTATION: define the function restart_with_reloader. 
    while True:
#ANNOTATION: endless loop,
        args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + sys.argv
#ANNOTATION: in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
        if sys.platform == "win32":
#ANNOTATION: if sys.platform equals to string "win32",
            args = ['"%s"' % arg for arg in args]
#ANNOTATION: args is a list containing arg surrounded by double quotes for every arg in args.
        new_environ = os.environ.copy()
#ANNOTATION: call the method os.environ.copy, substitute the result for new_environ.
        new_environ["RUN_MAIN"] = 'true'
#ANNOTATION: value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
        exit_code = os.spawnve(os.P_WAIT, sys.executable, args, new_environ)
#ANNOTATION: call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
        if exit_code != 3:
#ANNOTATION: if exit_code is not equal to integer 3.
            return exit_code
#ANNOTATION: return exit_code.


def python_reloader(main_func, args, kwargs):
#ANNOTATION: define the function python_reloader with main_func and kwargs as arguments.
    if os.environ.get("RUN_MAIN") == "true":
#ANNOTATION: if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
        thread.start_new_thread(main_func, args, kwargs)
#ANNOTATION: call the function thread.start_new_thread with main_func, args and kwargs as arguments.
        try:
#ANNOTATION: try,
            reloader_thread()
#ANNOTATION: call the function reloader_thread.
        except KeyboardInterrupt:
#ANNOTATION: if KeyboardInterrupt exception is caught,
            pass
#ANNOTATION: do nothing.
    else:
#ANNOTATION: if not,
        try:
#ANNOTATION: try,
            exit_code = restart_with_reloader()
#ANNOTATION: call the function restart_with_reloader, substitute the return value for exit_code.
            if exit_code < 0:
#ANNOTATION: if exit_code is lesser than integer 0,
                os.kill(os.getpid(), -exit_code)
#ANNOTATION: call the function os.kill with os.getpid() and negative exit_code as arguments.
            else:
#ANNOTATION: if not,
                sys.exit(exit_code)
#ANNOTATION: call the function sys.exit with argument exit_code.
        except KeyboardInterrupt:
#ANNOTATION: if KeyboardInterrupt exception is caught,
            pass
#ANNOTATION: do nothing,


def jython_reloader(main_func, args, kwargs):
#ANNOTATION: define the function jython_reloader with main_func, args and kwargs as arguments.
    from _systemrestart import SystemRestart
#ANNOTATION: from _systemrestart import SystemRestart into default name space.
    thread.start_new_thread(main_func, args)
#ANNOTATION: call the function thread.start_new_thread with main_func and args as arguments.
    while True:
#ANNOTATION: endless loop,
        if code_changed():
#ANNOTATION: if return value of the code_changed function is true,
            raise SystemRestart
#ANNOTATION: raise an SystemRestart exception,
        time.sleep(1)
#ANNOTATION: call the function time.sleep with argument integer 1.


def main(main_func, args=None, kwargs=None):
#ANNOTATION: define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
    if args is None:
#ANNOTATION: if args is None,
        args = ()
#ANNOTATION: args is a empty tuple.
    if kwargs is None:
#ANNOTATION: if kwargs is None,
        kwargs = {}
#ANNOTATION: kwargs is a empty dictionary.
    if sys.platform.startswith('java'):
#ANNOTATION: if sys.platform starts with string 'java',
        reloader = jython_reloader
#ANNOTATION: substitute jython_reloader for reloader.
    else:
#ANNOTATION: if not,
        reloader = python_reloader
#ANNOTATION: substitute python_reloader for reloader.

    wrapped_main_func = check_errors(main_func)
#ANNOTATION: call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
    reloader(wrapped_main_func, args, kwargs)
#ANNOTATION: call the function reloader with wrapped_main_func, args and kwargs as arguments. 

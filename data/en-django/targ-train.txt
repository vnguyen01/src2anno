call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.",
if value is contained in self.empty_values,
raise an ValidationError with an argument errors.
if template_dir is directory,
return commands.
if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.
from django.utils.safestring import mark_safe and SafeData into default name space.
property decorator,
while bits is true,
if not,
derive class ImageFile from the base class File.
define the method __next__ with an argument self.
return f.
substitute charset for self.encoding.
call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
call the method self.write_migration_files with an argument changes.
try,
try,
append cleaned_lien to statement.
call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,
define the method __str__ with an argument self.
call the method msg.attach with an argument attachment.
call the method connection.introspection.table_names, substitute the result for tables.
call the function params.update with argument kwargs.
open out_log flie in append mode with buffering size of input buffer, substitute the result for so.
return integer 12.
define the function truncatechars_html with 2 arguments value and arg.
while self.tokens is true,
for every fixture_dir in fixture_dirs,
call the method callback.rindex with an argument character '.', substitute the result for dot.
with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,
if six.PY3 is true,
call the method s.decode with encoding and errors as the arguments, substitute the result for s.
return value.
if ImportError exception is caught,
subtract _cached_modules from module_values, assign the result to new_modules.
derive the class NullDevice.
if not,
substitute size for self.size.
call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.
define the method close with an argument self.
raise an FieldError exception with an argument message.
substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
subtract decimals from digits, substitute the result for whole_digits.
append string ', ' to field_desc.
if commit is true,
substitute pos for end_text_pos.
field.attname of the data dictionary.   if not,
if not,
define the function b64_decode with an argument s.
define the method __init__ with 3 arguments: self, filepath and parsed.
call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,
return result.
define the method appendlist with 3 arguments: self, key and value.
from django.core import signals into default name space.
define the method __len__ with an argument self.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if ImportError, renamed to e, exception is caught,
for every statements in sql_statements:
if end is lesser than integer 0,
if self.verbosity is greater or equal to integer 1,
if ascii value of char is smaller than integer 33 or is equal to integer 127,
if not,
if function form.has_changed evaluates to false,
substitute the return value of the function abspathu with self.base_location as argument for self.location.
substitute e for message.
call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.
substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions,   only if s_opt.option_strings is true,   if not,
result of the function force_text with an argument option_label, return the result.   define the method render_options with 3 arguments: self, choices and selected_choices.
call the function is_aware with an argument date, if it evaluates to true,
define initialization method __init__ with self instance of the class as an argument.
call the method boundary with an argument string 'ascii', use the result to call to the parse_header function,
remove k element from self.keyOrder dictionary.
derive the class DeserializedObject from the object base class.
substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
with unpacked list value as an argument, return the pk field of the result.   if not,
define the method get_data with an argument self.
result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,
for every model in app_models,
for every key and value in data.items method return value,
if ImportError exception occurred,
call the method fixture.close.
derive the class ManagementUtility from object base class.
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.
define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.
substitute bp for lbp.
write string "  you can delete them." to self.stdout.
from threading import local into default name space.
call the method self.error_class with an argument error_class as an string 'nonfield',
if the UnicodeEncodeError exception is caught,
skip this loop iteration.
child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.
substitute nonlocal_root for a tuple with an element root.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
substitute length of existing for num_existing.
define the function ljust with 2 arguments value and arg.
call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.
append data to self.children.
if self._count is None,
call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.
define the method create_table with arguments self, database and tablename.
input_type is a string 'url'.
define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
syear is a string "%04d" formated with dt.year.
substitute the result for block_re.   call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
define the method source_error with 3 arguments: self, source and msg.
help is a string "Runs this project as a FastCGI application. Requires flup.".
called with an argument result of the method self.latest_post_date.   if value under the 'ttl' key of the self.feed dictionary is not None,
create a tuple out of types of v, for every v in args, extend key tuple with the result.
from django.conf import settings into default name space.
call the function mark_safe with an argument output.
define the method _has_changed with arguments self, data and initial.
if content is empty, substitute it for an empty string.
import module re.
define the function deactivate_all.
from django.core.exceptions import ImproperlyConfigured into default name space.
for every base in reversed order of bases,
get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.",
call the method self.configurator.convert with an argument value, substitute the result for result.
substitute error.error_dict for error.
define the function find_template with 2: template_name and dirs set to None.
if self is not contained in context.render_context,
call the method f.formfield with an argument, unpacked dictionary kwargs, substitute the result for formfield.
d is an instance of class Decimal, created with result of the function force_text,
call the function get_language, substitute the result for lang.
call the method o.isoformat substitute the result for r.
called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.   derive the class DateTimeBaseInput from the TextInput base class.
try,
call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
if not,
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.
substitute last four elements of base for base.
if mimetype is not None raise an error.
call method __init__ from the base class of the class MemcachedCache with arguments: server, params,
call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked,
from collections import namedtuple.
and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean True.
define the function ngettext with 3 arguments: singular, plural and number.
call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
skip this loop iteration.
join elements of output into a string, separated by newline characters, return it.
substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
derive the class VariableDoesNotExist form the base class Exception.
if self.sep is not contained in signed_value,
return an empty string,
if msg is true,
if timezone is None,
substitute cache_clear for wrapper.cache_clear.
consume_next is boolean True.
call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
substitute the result for url_fields.   call the function urlunsplit with an argument url_fields, substitute the result for value.
import module subprocess.
call the function force_text with an argument ttl, substitute the result for ttl.
from django.utils.translation import ungettext and ugettext as _ into default name space.
define the method created_time with arguments self and name.
try,
self._is_rendered is boolean False.
from django.utils.timesince import timesince and timeuntil into default name space.
append ch to result.
if key is contained in cache,
define the method unsign with arguments self and signed_value.
if not,
if request._post_parse_error is true,
convert self.literal into an integer, substitute it for self.literal.
if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
from django.utils.module_loading import import_string into default name space.
return boolean False.
substitute path_override for path if path_override is not None, otherwise substitute request.path for path
for every model in return value of the function router.get_migratable_models, called with arguments:
from datetime import datetime into default name space.
use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
if count does not equals to integer 0,
define the method _createdir with argument self.
level is an integer 0.
substitute bits without the first element for remaining_bits.
nesting is integer 1.
call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,
yield string "#   * Rearrange models' order" as the result.
with '%s' substituted for name_str, as argument.   run_syncdb is boolean False.
if error has an attribute 'error_dict',
from __future__ import unicode_literals into default name space.
call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.
if value is not an instance of bytes or six.text_type classes,
with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.   otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
substitute SafeBytes for SafeString.
split x by character '=' and append first element of the result to the prev_opts list.   for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.
renamed is boolean False.
define the method tzname with 2 arguments: self and dt.
try,
ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.
return boolean True.
define the method render with 2 arguments: self and context.
self.dicts is an list with element builtins.
if ValueError exception is caught,
and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
define the method _get_to_python with 2 arguments: self and field.
define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.
and result of the function humanize called with an argument fixture_dir.   if length of fixture_files_in_dir is greater than 1,
return an empty string,
if ValueError exception is caught,
take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:
if timeouts is None return None, otherwise return the sum of function time.time return value and timeout.
call the method handler.startElement with 2 arguments: string "channel" and result of the method self.root_attributes.
from django.utils.safestring import mark_safe into default name space.
call the method self.stdout.write with an argument string "Checking %s for fixtures...",
call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True,
define the method _resolve_lookup with 2 arguments: self and context.
substitute language for self.__language.
call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.
perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,
call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,
define the method __iter__ with an argument self.
substitute smart_bytes for smart_str.
decorator function wraps with an argument fdel.
substitute namespace for self.namespace.
if processors is None,
call the method self._close_files.
raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with,
convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
raise an TemplateSyntaxError exception with an argument string "Invalid templatetag argument: '%s'. Must be one of: %s",
from django.utils.six.moves.urllib.parse import quote into default name space.
decorator function register.filter with an argument string "escapejs".
return boolean False.
define the serialize content with an argument self.
if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
for every v in value, return the list of results.   call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
want_unicode is boolean True.
return result.
define the method B with an argument self.
replace '%s' in string "'%s' already exists" with top_dir, substitute it for message.
return nothing.
from django import http into default name space.
derive the class Command from the BaseCommand base class.
if ValueError or TypeError exceptions are caught,
if self.queryset is not None,
call the self._load_post_and_files method.
call the function copystat with old_file_name and new_file_name as arguments.
if not,
if origin is true,
substitute result for value under key key of self dictionary.
join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path,
if s is an instance of SafeData.
if first and second elements of value are contained in self.empty_values,
call the method t.to_language, return the result.
derive the class Command from the BaseCommand base class.
if ImportError exception is caught,
if self.asvar is true,
try,
from django.core.handlers import base into default name space.
substitute value under the field_name key of the self.fields dictionary for formfield.
call the method self.error_class with an argument list with a element: result of the method self.get_form_error,
yield representative and boolean True.
substitute default for value under the key key of self dictionary.
for every bit in bits,
for every obj in result of the method queryset.iterator,
if PY3 filed of six is boolean True,
self._wrapped.
define the function cycle with 2 arguments: parser and token.
if old_attr is None,
if self.negated,
call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
substitute result for the value of the memo dictionary, with identity of the self object as an key.
import module pickle.
if pattern.app_name is true,
call the os.umask function with argument integer 0, substitute the result for old_umask.
replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
substitute Rss201rev2Feed for DefaultFeed.
return self.
self.tokens is an empty dictionary.
if not,
substitute silent for self.silent.
call the function import_module with an argument app_name.
raise an Exception exception with an argument string "This %s instance is not writable",
if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
delete the value under key key of self._expire_info.
import module sys.
if ImportError exception is caught,
use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method modified_time with arguments self and name.
call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
if not,
choice and i, substitute the result for w.   call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,
substitute instance._meta for opts.
if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.
call the method qs.using with an argument form.instance._state.db, substitute the result for qs.
substitute pattern.regex.pattern for p_pattern.
string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'max_length'
return result.
call the method self.val_expr.resolve with an argument context, substitute the result for value.
substitute self.auto_id for auto_id.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
'App label of an application to synchronize the state.' as arguments.   call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string,
if IndexError exception is caught,
if self.localize is true,
call the method self.make_bytes with an argument value, substitute the result for value.
get the type of self object, call the __bool__ method on the result with an argument self, return the result.
cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
child_nodelists is an tuple with an element 'nodelist'.
join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists,
assign the result to ctypes and opts.   get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
content_length is integer 0.
return a tuple with 2 elements: integer 0 and second element of k.
if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
define method clear_cdata_mode, with self class instance as an argument.
define the method _has_changed with arguments self, initial and data.
call the method self.run_validators with an argument value.
convert exclude elements to list, substitute it for construct_instance_exclude.
if options is true,
substitute col_name for value under the 'db_column' key of the field_params dictionary.
substitute content for self.content.
call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.
derive the class ResolverMatch with object as base class.
do nothing.
append d to self.fed.
get 'exec' attribute from the moves.builtins object, substitute it for exec_.
import module sys.
call the function zlib.compress with an argument data, substitute the result for compressed.
try,
define the method render with 2 arguments: self and context.
otherwise if self.verbosity is greater than integer 0,
from datetime import datetime,  timedelta and tzinfo into default name space.
if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
from django.utils._os import npath and upath into default name space.
and help set to 'Fixture labels.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
if fields is true,
define the method split_contents with an argument self.
derive the class EscapeData from object base class.
and request_repr, respectively.   reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,
return None.
derive the class FloatField from the base class IntegerField class.
decorator python_2_unicode_compatible,
set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,
url_markup_template is a string '<a href="{0}">{1}</a>'.
decorator stringfilter,
define function dictitem with s as an argument.
define method _get_height with self class instance as the argument.
substitute decimals for digits.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if register_to is true,
joined into a string, separated by whitespaces, substitute the result for loopvars.   for every var in loopvars,
substitute the result for self.event_stream.   remove the 'using' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute
define the method __init__ with 3 arguments self, states and first.
substitute attrs for self.attrs.
substitute MultipleHiddenInput for hidden_widget.
decrement week_number by integer 1.
if new_name is contained in used_column_names,
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
if TemplateSyntaxError, renamed to e, exception is caught,
derive the class override from the object base class.
substitute the resulting string for choices.   call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value,
append self.pointer to self.backout.
where '%s' is replaced with first element of bits.   return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
if elt is an instance of Choice or NonCapture classes,
from django.utils.six.moves import input into default name space.
if not,
for every f in fields,
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
derive the class classonlymethod from the classmethod base class.
if cache_timeout equals to None,
convert values into a list, substitute it for value.
call the method clean with an argument data from the base class of the class URLField, return the result.
if label_output is true,
substitute NumberInput for widget.
substitute save_m2m for self.save_m2m.
try,
call the self.delete method with key and version set to version as arguments.
define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.
return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
for every migration in merge_migrations,
return an empty string.
use global variable _supported.
if status is not equal to STATUS_OK,
call the method self.has_key with an argument key, return the result.
if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.
__expire_info is an empty dictionary.
append arg to ',', substitute the result for arg.
substitute self for value.configurator.
convert the result into a lowercase, append it to ret_ip.   join elements of ret_ip into a string separated with ':', return it.
unpacked dictionary kwargs.   call the method self._set_regex with an argument regex.
define the method as_table with an argument self.
return an empty string.
decorator function register.filter with an argument is_safe set to boolean False.
define the method _archive_cls with an argument file.
if chunk is None,
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.
call the function timedelta with an argument seconds as negative time.altzone, return the result.
substitute new_name, without the last 3 elements for new_name.
derive the class InlineForeignKeyField from the Field base class.
if not,
return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.
define the method make_view_atomic, with self class instance and view as the arguments.
define the method close with self class instance as the argument.
if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr,
define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None,
define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
if TypeError exception is caught,
call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
try,
define the method check_migrations with an argument self.
compile self.match regular expression, substitute it for self.match_re.
from django.core.exceptions import ImproperlyConfigured into default name space.
if not,
if escaped is true,
call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.
substitute BytesIO for stream_class.
replace tags for check.tags.
remove first 7 elements form template.
__all__ is an list with an element 'luhn'.
if i is not an instance of six.integer_types class,
define the method compile_filter_error with 3 arguments: self, token and e.
try,
if OSError, renamed to e, exception is caught,
otherwise if f.unique is true,
define the function receive_data_chunk with arguments self, raw_data and start.
for every log in existing,
try,
__all__ is an list containing 6 elements: 'get_cache', 'cache', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError',
if lang_code is not None,
substitute self.choices for self.widget.choices.
substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it,
if not,
resource_string is None.
define the method led with 3 arguments self, left and parser.
derive class Command from the base class BaseCommand.
BASE2_ALPHABET is a string '01'.
from __future__ import unicode_literals into default name space.
substitute complain for __imul__.
msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it.
dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.   call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent',
cached_loaders is an empty list.
from __future__ import unicode_literals into default name space.
if opts.managed is true,
from django.conf import settings.
define the method self and name.
import module os.
append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C',
_anonymous_ is a list containing one string: '_offset_union'.
if data is an instance of bytes,
write new line to the self.stream file stream.
derive the class RadioSelect from the RendererMixin and Select base classes.
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
if not,
where '%s' is replaced with first element of bits.   otherwise if options equals 'only',
decorator function register.filter with an argument is_safe set to boolean True.
define the method clean with arguments self, data and initial set to None.
if maxsize equals integer 0,
define the method __repr__ with an argument self.
return an empty string.
define the method handle_m2m_field with self, obj and field arguments.
help is a string "Prints the CREATE INDEX SQL statements for the given model module name(s).".
call the method parser.delete_first_token.
return maybe.
append filepath to tried.
call the function restart_with_reloader, substitute the return value for exit_code.
substitute '%s' in string '%s_%s' with id_ and first_select, return it.
if fg is contained in color_names,
call the function get_commands, substitute the value under the name key of the return value, for app_name.
call the method self.setlist with 2 arguments: key and default_list.
substitute length and mime_type for self.length and self.mime_type.
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
if PY3 is true,
split header string at string '\r\n', for every line in result,
substitute stream for self.stream.
return boolean True.
define the method __getitem__ with 2 arguments: self and key.
call the method base64.b64encode with argument pickled, substitute the result for b64encoded.
call the function _trans.check_for_language with an argument lang_code, return the result.
derive the class Loader from the BaseLoader base class.
do nothing.
define the function flatten_result with an argument source.
define the method _post_clean with an argument self.
with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name,   evaluates to true,   if upload is true,
categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.   call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.
from django.db import router and DEFAULT_DB_ALIAS into default name space.
raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument,
append form.errors to self._errors.
try,
return new_class.
if self._wrapped is contained in empty,
call the method viewname.split, with an argument ':', substitute the result for parts.
if compress is true,
and unpacked dictionary kwargs, return the result.   property decorator,
return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,
substitute value for self.value.
print FASTCGI_HELP to the standard output.
from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
singular is an empty list.
if old_style_list is true,
message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
define the method add_arguments with 2 arguments self and parser.
if attrvalue is not an empty string,
call the method self._populate.
if any exception is caught,
call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
call the __init__ method with arguments file and name, from the base class of the UploadedFile class.
args is an empty tuple.
derive the class HttpResponseNotAllowed from the HttpResponse base class.
call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
use the result as an argument for the call to the method filterer.addFilter.   if StandardError, renamed to e, exception is caught,
derive the class CycleNode from Node base class.
from __future__ import unicode_literals into default name space.
import rlcompleter.
return value.
from django.utils.functional import lazy into default name space.
if not,
response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.
evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32'
define the method values with an argument self.
from __future__ import unicode_literals into default name space.
result is None.
try,
break from the loop execution
action set to 'append', default is a list containing string 'py' and help set to string:   'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.'.   call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',
months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.
if not,
try,
connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.
if index is not None,
from django.core.validators import EMPTY_VALUES into default name space.
from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.
derive the class RegexValidator form the object base class.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
silent is boolean True.
raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
return the result.   define the function pgettext with 2 arguments: context and message.
define the method emit with 2 arguments: self and record.
otherwise if prefix is not equal to common_prefix,
if response.streaming is true,
if exception OSError occurred,
return result.
join self.file_path and fname into a valid file path, substitute it for self._fname.
to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,
remove the first element of context.
where '%s' is replaced with filename.   return cls.
with the result,   call the method connection.cursor, with the result as cursor,
from django.utils import six into default name space.
append the results into a list, substitute it for value.   node is an instance CycleNode class, created with  values,name and silent set to silent.
substitute newline character for newline.
if bf_errors is true,
break from the loop execution,
call the method self.__dict__.copy, substitute the result for state.
call the method self.iteritems, return the list of results.
self._deleted_form_indexes is an empty list.
call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.
filenames is an empty list.
derive the class cached_property from the object base class.
if att_name equals string 'id' and extra_params equals a dictionary with 1 entry: boolean True for 'primary_key',
if s is not an instance of the object six/string_types,
return the_path.
value is an instance of ConvertingList class, created with an argument value.
if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
if self.verbosity is integer 1,
from django.conf import settings into default name space.
from itertools import chain into default name space.
if field is not None,
call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
label set to return value of the function _ called with an string 'Order' and required as boolean False.   if self.can_delete is true,
'status_code' with value 403, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.warning function.   call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.
raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary,
from django.core.files import File into default name space.
default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.   call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true',
define the function default_key_func with 3 arguments, key, key_prefix and version.
if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix,
define the function b with an argument s.
call the method token.split_contents, substitute the result for bits.
add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the "default" database.'.   call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append',
define the method __init__ with 4 arguments: self, form, field and name.
call the method closable.close.
call the method self._assert_mutable.
if takes_context is true,
define the function deactivate_all.
define the function do_translate with 2 arguments: message and translation_function.
otherwise if rhs is an instance of SafeBytes,
if using_sysrandom is false,
return result.
add decimal_sep and dec_part, substitute the result for dec_part.
return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
call the function sanitize_address with arguments addr and encoding, for every addr in return value of the getadresses function with tuple containing val as argument, join all the results into a string separated by ', ', substitute the result for val.
substitute self for value under the 'block' key of context dictionary.
derive the class Command from the BaseCommand base class.
substitute iter for iterbytes.
substitute Field.creation_counter for self.creation_counter.
call the method self.file.write with argument raw_data.
define the function import_library with an argument taglib_module.
if transfer_encoding equals string 'base64',
for every field in model._meta.fields,
substitute new_filenames for filelist.
return the result.   decorator function register.filter with an argument is_safe set to boolean True.
where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.   if not,
define the method getvalue with an argument self.
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.
substitute self._rollback for rollback.
extend comment_notes list with notes.
ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
call the function new_method_proxy with an argument str, substitute the result for __str__.
raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
return form.
return value.
call the function render_value_in_context with 2 arguments: value and context, return the result.
error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
call self._delete method with argument fname.
substitute app_name for klass.
text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
if obj.pk is None,
call the function get_supported_language_variant with an argument lang_code, return the result.
write item to zfile stream.
substitute elements of middle from the beginning to the negative length of closing, for middle.
DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.
in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.
define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
call the traceback.print_exc method.
define the function length with an argument value.
split str_number by '.', substitute the result for int_part and dec_part, respectively.
call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
import warnings.
derive the class override from the object base class.
call the method stream.unget with an argument chunk.
get name attribute from the instance object, call it and return the result.
assign the result for year_val, month_val and day_val, respectively.   html is an empty dictionary.
pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i,
define the method upload_handlers with arguments: self and upload_handlers.
from django.conf import settings into default name space.
do nothing.
try,
call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:
define the method __init__ with 3 arguments: self, tup and hash set to hash.
split t.contents by '|' symbol, substitute the result for parts,
from django.core.management.color import no_style into default name space.
if neg is true,
call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,
if not,
if not,
get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
derive the class Operator from the base class TokenBase.
do nothing.
no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',
where '%s' is replaced with token.contents.   call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index,
call the function get_wsgi_application, return the result.
call the method node.clone, substitute the result for klass.
substitute level for rv.
from threading import local into default name space.
derive the class CacheClass from the DummyCache base class.
delete entry under the attr key of obj_dict dictionary.
convert text without first element to hexadecimal integer, substitute it for c.
if last element of line is newline or carriage return character,
call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.
if not,
define get_script_name function with environ as an argument.
define function fix_location_header with request and response as arguments.
strip whitespaces from both sides of the value, substitute it for value.
define the method __deepcopy__ with 2 arguments: self and memo.
dest as a string 'interactive', default set to boolean True,   and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
if col_name is not equal to new_name and field_notes is true,
substitute lookup_view for original_lookup,
call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
fill_to is an integer 7.
do nothing.
substitute serialize_headers for __bytes__.
convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
if not, substitute template_dirs for key.   get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
self._leftover is an empty string.
sort the result and substitute it for options.   for every option in options,
from django.core.management.utils import find_command and popen_wrapper into default name space.
derive the class CommentNode from Node base class.
call the function bytes with an argument value, return the result.
call the the method __init__ from the base class of the class Context.
import module inspect.
if ImportError exception is caught,
if not,
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.
join fixture_dir, fixture_name with appended character '*' into a valid file path,
from django.utils import six into default name space.
convert value to an floating point number if it is not equal to integer 1,
define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
split value by newline characters, substitute the result for lines.
self._view_middleware is an empty list.
call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
for every f in return value of the return value of the method chain.from_iterable called with argument:
return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.   define the function validate_ipv6_address with an argument value.
compatibility is a string 'compatibility'.
call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.
call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,
call the method logger.removeHandler with an argument h.
call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',
try,
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
from django.forms.utils import ErrorList into default name space.
call the method posixpath.splitext with an argument the_path.
find the ending position of the regular expression match of the object match, substitute the result for k.
return major.
self.lineno is integer 1.
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
prefix set to None, queryset set to None and unpacked dictionary kwargs.   substitute queryset for self.queryset.
if parser doesnt have an '_namedCycleNodes' attribute,
if self.number is greater than integer 1, return boolean True, otherwise return boolean False.
that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.   writer is instance of MigrationWriter class, created with new_migration argument.
call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.
dest set to string 'list_tags' and help set to string 'List available tags.'.   define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.
try,
substitute self.widget if the widget is false, otherwise substitute widget for widget.
and stacklevel set to 2 as arguments.   call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.
call the function get_language, substitute the result for lang.
call the os.utime unction, with path and None as arguments.
derive the class BaseModelForm from the BaseForm base class.
import module shutil.
call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
subtract third element of tupl from length of second element of tupl, substitute the result for units.
and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.   append a tuple containing 2 elements: full_file and f to self.choices list.
call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
from django.utils.html import escape into default name space.
substitute self for value.configurator.
from django.utils import termcolors into default name space.
decorator method register.tag with an argument 'extends',
from django.core.exceptions import ImproperlyConfigured into default name space.
call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
if ValueError exception is caught,
if sum of the top and self.orphans is greater or equal to self.count,
derive the class ConvertingDict from dict base class.
if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
call the method base64.urlsafe_b64decode with sum of s and pad as argument.
if six.PY2 is true,
self.path_info is an empty string.
for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,
from django.conf import settings into default name space.
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
from django.conf import settings into default name space.
call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
for every path in self.locale_paths,
derive the class Command from the base class BaseCommand.
define the method __init__ with 2 arguments: self and text.
otherwise if name is not None and filter_func is None,
define class dummy.
with the result renamed to fp, perform the following:   call the method fp.read, substitute the result for src_data.
from collections import defaultdict into default name space.
if value is an instance of datetime.datetime,
call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
field_output is an list containing 2 elements: return value of the function qn called with an argument f.name,
substitute changeset for get_git_changeset.cache.
for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,
if not,
if error.code equals code,
define the method as_data with an argument self.
python_2_unicode_compatible decorator
if six.PY3 is true,
substitute the result for starttag_re.   call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
call the method self._delete with argument key.
args is a list containing arg surrounded by double quotes for every arg in args.
if MultiPartParserError exception is caught,
define method add_arguments with class instance self and parser as the input arguments.
if GeneratorExit exception is caught,
call the function flatten_result with an argument item, assign the result to res and args, respectively.
delete self._get.
if model_identifier is false,
substitute whitelist for self.domain_whitelist.
from django.core.management.color import color_style into default name space.
delete name attribute of the _MovedItems object.
return self.STDOFFSET.
call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n",
if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,
for every d in reversed list self.dicts,
define the method flatten with an argument self.
if not,
import module os.
import module warnings.
call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,
raise an exception.
call the method self.configure_custom with an argument config, substitute the result for result.
split part by '=' character, substitute the result for role and instructions, respectively.
call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs,
define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
import module warnings.
if qs._result_cache is not None,
call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
substitute self.source for e.django_template_source.
do nothing.
substitute the result for value under 'mailhost' key of config dictionary.   otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
derive the class NumberAwareString from the resultclass base class.
define the method copy_plural_forms with arguments self, msgs and locale.
substitute content_type for self.content_type.
define the method upload_complete with argument self.
raise an exception.
try,
initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
from django.utils.timezone import is_aware into default name space.
convert value into an floating point number, substitute it for value.
otherwise if ch equals a string ')',
exit program with code integer 0.
decorator deconstructible,
substitute self.field.widget for widget.
try,
put the double qoutes around encoded.
call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.
status_code is an integer 403.
substitute cls.__bytes_cast for cls.__str__.
call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
ch is None.
renamed is boolean True.
register.tag decorator,
define the method add_arguments with self class instance and parse as the arguments.
if name is contained in MEDIA_TYPES,
otherwise if obj is an instance of EscapeData,
return an empty string.
define the method send_messages with arguments self and email_messages.
define the method __str__ with argument self.
call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.
define the method validate_unique with an argument self.
try,
return boolean False.
logger.propagate is boolean True.
substitute first element of self.locale_paths for self.default_locale_path.
_cached_filenames is an empty list.
url is an empty string.
slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
return data.
self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.
current_chunk is None.
define the method clean with arguments self and value.
call the method self.compression_formats.keys, convert it to list, substitute it for cmp_fmts if cmp_fmt is None,
call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,
If you see valid patterns in the file then the issue is probably caused by a circular import."   raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
if MiddlewareNotUsed exception is raised,
if value is not an instance of list or tuple types,
value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
substitute regex for self.regex.
internal_use_only is a boolean False.
get 'getvalue' attribute of the self.stream object, if it exists and is callable,
for every key in return value of the method c.keys call,
if o.microsecond is true,
get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument:
substitute all_locales for locales.
decrement end by one.
attribute of the self object for name converted into a string.   raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
append string '_0' to id_.
if not,
if e doesnt have an 'django_template_source' attribute,
call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
if not,
define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
from __future__ import unicode_literals into default name space.
join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
return supported.
from collections import OrderedDict into default name space.
substitute self.fixture_dirs for fixture_dirs.
do nothing.
while i is smaller than list_length,
file is an instance of BytesIO class created with an argument: return value of the method data.read.
return boolean False.
if old_field_name is true,
from django.utils.regex_helper import normalize into default name space.
return context_extras.
call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',
define the function sql_custom with 3 arguments: app_config, style and connection.
define the function unlock with argument f.
substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.   call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults,
yield string "# You'll have to do the following manually to clean this up:" as the result.
if ttl is not None,
define the method G with an argument self.
define the method __getitem__ with 2 arguments: self and header.
candidate_pat formated with candidate_subs and re.UNICODE.   candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,
raise an TemplateSyntaxError exception with an argument string "%r takes two arguments",
return an instance of SafeText, created with an argument t.
substitute lineno for translators_comment_start.
call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function,
append resolved_args to a list containing context element, substitute it for resolved_args.
if KeyError exception is caught,
where '%r' are replaced by val and name, respectively.   try,
sum _cached_filenames, new_filenames and _error_files, store the result in filelist.
define the method __init__ with 4 arguments: self, message, code set to None and params set to None.
if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,
dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.   define the method _ipython_pre_011 with an argument self.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
substitute space for end.
substitute value for field.name key of self._current dictionary.
define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
define the method decompress with 2 arguments: self and value.
call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
self._errors is None.
call the function exhaust with an argument self._input_data.
if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.
substitute c_int64 for ULONG_PTR.
get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.
substitute object_list for self.object_list.
has_bz2 is boolean True.
call the method check_for_migrations with arguments: app_config and connection.
try,
append the result to old_app_dirs.   if file path old_app_dir exists,
import module datetime.
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments:
call the method self._setupfunc, substitute the result for self._wrapped.
raise an StopIteration exception,
return templatetags_modules.
if length of args is not equal to the sum of the lengths of params and prefix_args,
define the method __init__ with arguments self, argument list args and dictionary of arguments kwargs.
return name.
define the method more with an argument self.
of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL',   and result of the method record.getMessage.   call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,
call the function exc_type with an argument string "Unsupported value: %r. You should install pytz.", replace '%s' with dt,
floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
define the method __iter__ with an argument self.
self._callback_strs is an empty set.
and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or',   result of the function inflix called with 2 arguments, integer 7,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and',   result of the function prefix called with 2 arguments, integer 8,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context),   for 'not in', result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=',   result of the function inflix called with 2 arguments, integer 10 and,   lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than y.eval(context) for '<',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',   call the function OPERATORS.items, for every key and op in result,
raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
substitute bits, without the first two elements, substitute the result for remaining_bits.
call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.
derive the class UnreadablePostError from the base class IOError.
filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*
_iteritems is a string "iteritems".
append string "UNIQUE" to field_output.
if not,
define the method send_messages with arguments self and messages.
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
return boolean True.
call the method dict_.getlist with an argument key, return the result.
shells is a list containing 2 elements: string 'ipython' and string 'bpython'.
decorator function wraps with an argument func.
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
if self.cdata_tag is not None,
remove symlink_path file.
label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1,   and required as boolean False.   if not,
call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.
__all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.
otherwise if tzinfo is not None,
if not,
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
call the method self.namelist, if the length of the result is not integer 1,
from django.utils.safestring import SafeData and mark_safe into default name space.
self.resolver_match is None.
filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.   map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
from django.utils.encoding import force_str and force_text into default name space.
use it as an argument for the call to the mark_safe function, return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
from django.utils.html import avoid_wrapping into default name space.
from django.utils.six.moves import html_entities into default name space.
skip this loop iteration.
define the method __repr__ with an argument self.
call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,
set result attribute name to value value.
match regex time_re with value, substitute the result for match.
call the function timesince with 2 arguments: value and arg, return the result.
if ImportError exception is caught,
substitute kwargs for params.
"test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."   if test_runner_class has an attribute 'add_arguments',
if name is false,
for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
if message is an instance of SafeData.
substitute paginator for self.paginator.
name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.   return combined.
return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,
while i is smaller than l,
if not,
if error_class is None,
self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary,
call the method self.as_table, return the result.
call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
from django.utils.encoding import force_text into default name space.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
if imoportError exception is caught,
get the value under the 'indent' key of self.options dictionary, if it is true,
if dt.year is greater than or equal to integer 1900,
append orig_file to string '#: ', substitute it for new.
MEMCACHE_MAX_KEY_LENGTH is integer 250.
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.
if filename path doesnt exists,
return an instance of FilterExpression class, created with 2 arguments: token and self.
substitute _iteritems for items.
if command is contained in parse_until,
try,
convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.
for every key in self,
self.children is an list with 2 elements: obj and data.
raise an SystemRestart exception,
call the function super_set with 2 arguments: key and value.
tf is an instance of TimeFormat class, created with an argument value.
if host ends with '.', remove the last element from host.
for every e in all_issues,   raise an CommandError with argument msg,
from django.core import signing into default name space.
try
put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.   evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.
define the method _render with 2 arguments self and context.
substitute complain for __iadd__.
import module sys.
if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.
get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,
define the function activate with an argument language.
define the function length_is with 2 arguments value and arg.
call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
delete the value under the 'liveserver' key of the options dictionary.
substitute empty string, word an empty string for lead, middle and trail, respectively.
self._container is a list containing element value.
from django.conf import urls into default name space,
substitute email_backend for self.email_backend.
derive the class BaseLoader from the object base class.
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
substitute object_list for self.object_list.
define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
substitute t.nodelist for self.nodelist.
if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
return string first element of t, '=', second element of t.
import code.
from django.db.migrations.state import ProjectState into default name space.
join self._container elements into a string, return it.
output is an empty list.
call the function resolve with arguments path and urlconf.
with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.   if self.paths_to_remove is true,
"Use django.utils.timezone.get_default_timezone instead." and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.
_iterlists is a string "lists".
get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
skip this loop iteration.
return _localtime.
for every ch and escaped in input_iter,
decorator function register.filter with an argument is_safe set to boolean True.
from django.conf import settings into default name space.
increment i by integer 1.
if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
if KeyError exception is caught,
call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
from django.utils.six import StringIO into default name space.
return nothing.
define the method load_template with 3 arguments: self, template_name, template_dirs set to None.
if m is false and p is lesser than integer 0,
sum trail and closing, substitute the result for lead.
define the method _get_size with argument self.
derive the class TagHelperNode form the base class Node.
divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.
if name is not contained in logging._handlers,
if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
return FASTCGI_HELP.
inplural is boolean True.
return boolean True if self.level is greater than or equals to ERROR, otherwise return boolean False.
if is_templatized is true,
define the method render_node with 3 arguments: self, node and context.
write msg to self.stderr stream.
if not,
if not,
append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,
break from the loop execution.
from email.mime.message import MIMEMessage into default name space.
substitute the result for origin.   try,
with the result,   evaluate method connection.cursor, with return value as curs,
if sign is contained in self.digits,
get the position of the file self.file pointer, substitute it for size.
or value equals return value of the call to Decimal with argument '-Inf'   raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
if ValueError, TypeError or ValidationError exception is caught,
call the self.indent method with integer 0 as an argument.
call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
call the self.stderr.write method with string "    Failed to install custom SQL for %s.%s model: %s\n" as argument,
try,
RemovedInDjango19Warning and integer 2 as arguments.   if self does not have an '_request' attribute,
call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
if not substitute field.initial for initial.   call the method filed.clean with arguments value and initial, substitute the result for value.
and remove_tags.   from django.utils.http import urlquote into default name space.
extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.error function.   if settings.DEBUG is True,
define the function parse_datetime with an argument value.
get format_type attribute of module object, substitute the result for val.
__T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
if not,
if number equals integer 1,
call the method self.resolve with an argument c, substitute the result for c.
call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
define the method list with an argument self.
if fields is true and f.name is not contained in fields,
if ImportError exception is caught,
third element of the result of the function sys.exc_info.   define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.
self.app_label is a string 'django_cache'.
raise an CommandError exception with an argument string "%r is not a valid port number.", where '%r' is repaced with self.port.
self.first is boolean True.
call the method self._delete with argument k.
import module sys.
call the method self.validate_key with argument key.
append block to the value under the name key of self.blocks dictionary.
define the method setdefault with 3 arguments: self, key and default set to None.
call the self.style.MIGRATE_HEADING method, with string "Operations to perform:" as an argument,
call the encode function on the Header class instance, created with argument val, substitute the result for val.
with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,   yield one element of the itterable obj.
call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
self.connection is None.
raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n"
register.tag decorator,
derive the class EmailValidator form the object base class.
from django.utils.translation import templatize into default namespace.
define the function safe_join with 2 arguments base and unpacked dictionary paths.
if receiver is an instance of types.FunctionType type,
if lang is None,
call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.",
define the method parse with an argument self.
substitute _iterkeys for __iter__.
if settings.DEBUG is true,
from django.core.exceptions import ImproperlyConfigured into default name space.
define the function deconstruct with an argument obj.
substitute compare_to for value under the state_frame dictionary under the self key.
called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.   if self.is_required is false,
import module random.
define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
call the method unicodedata.combining with an argument char, if it evaluates to false,
from django.utils.dates import MONTHS into default name space.
substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
if not,
call the function __current_timezone with an argument value, return the result.
if not,
remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments:
return result.
substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
substitute app_name for self.app_name.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.
fork a child process, if the result equals integer 0,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock',
return an instance of Context class, created with an argument context.
remove the entry under the 'fields' key of the self.json_kwargs dictionary.
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
if not,
define the method O with an argument self.
if ignore is true,
get the value under the 'indent' key of the options dictionary, substitute the result for indent.
call the method cursor.close,
delete _prefixes.values.
from django.apps import apps into default name space.
self._unget_history is an empty list.
define the method render with 4 arguments: self, name, value and attrs set to None.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,
if settings.FILE_UPLOAD_TEMP_DIR is true,
if color_setting is True,
if x equals to integer 0,
from django.utils.translation import get_language, to_locale and check_for_language into default name space.
if self._callback is not None,
call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,
if first element of new_name is digit,
derive the class ContextDict from the dict base class.
if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
if dirname is true and dirname path doesnt exists,
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
convert keys of dictionary self.dict into a iterable, return it.
if new_mod is None,
define the method write_items with 2 arguments: self and handler.
created with arguments sys.stderr and self.style.ERROR.   replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.
define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:
assign the values to the callback, callback_args, callback_kwargs, respectively, from the resolver_match tuple.
define the method __iter__ with an argument self.
incremental is boolean False.   EMPTY_DICT is an empty dictionary.
from django.contrib.auth import get_user_model into default name space.
if code is not None,
substitute settings.DEFAULT_CHARSET for encoding.
convert value to an string and substitute it for value.
call the method self.write_migration_files with an argument changes.
define the method compile_string with 2 arguments: template_string and origin.
if not,
get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x",
for statements is sql,
if not,
call the method parser.expression with an argument bp, substitute it for self.seconds.
_iterkeys is a string "iterkeys".
raise an IOError exception with string "Destination file %s exists and allow_overwrite is False" as argument, where '%s' is replaced by new_file_name.
if length of bits is lesser than integer 2,
substitute jython_reloader for reloader.
for every sub_stream in boundarystream,
if not,
define the method open with argument self.
'and "requires_system_checks", which is illegal. Use only "requires_system_checks".', replace '%s' for self.__class__.__name__.   call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true,
if TypeError or VariableDoesNotExist exceptions are caught,
join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.
try,
if self.data.day equals integer 11, 12 or 13,
if label_suffix is not None substitute label_suffix for self.label_suffix,
define private method __repr__ with argument self.
if tuple current_version elements are greater or equal to (3, 4), respectively,
call the method self.non_field_errors, substitute the result for top_errors.
call the method self.validate_key with argument key.
kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with:
if TypeError or ValueError exceptions are caught,
call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.
if bad_app_labels is true,
from django.utils import six into default name space.
if data is an instance of MultiValueDict or MergeDict,
convert self.forms into an iterable, return it.
define the function iri_to_uri with iri as an argument.
if value is contained in self.empty_values,
call the method self.format with an argument string '0', substitute the result for name.
if ImportError exception is caught.
cat for 'term'.   if value under the 'item_copyright' key of the item dictionary is not None,
to the function url.hexdigest(), respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
define the function iterbytes with an argument buf.
if not,
if field is contained in self.cleaned_data,
call the import_string with argument backend, substitute it for backend_cls.
for every chunk in return value of the method self.chunks,
fetch next entry for the database that cursor points into, substitute first element of it for num.
split self._wrapped into words, substitute the result for words.
define the function check_errors with argument fn.
call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,
define the function b64_hmac with arguments salt, value and key.
declare that we use global variables cached_modules and _cached_filenames in this function.
for every bit in bits,
call the method self._base_set with string 'set', key, value and timeout as arguments.
return string 'https'.
if not,
self._namespace_dict is an empty dictionary.
call the method self._add_installed_apps_translations.
call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.
define the method _get_choices with an argument self.
define the method __str__ with an argument self.
call the self.stdout.write method with string "    Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
if last element of args is not equal to a string "silent",
define the method __repr__ with argument self.
break from the loop execution,
call the method self.render, return the result.
use the result as an argument for the call to the function binascii.unhexlify, return the result.   if hashlib had an instance "pbkdf2_hmac",
substitute the resulting list for app_config.   if not,
if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
value under the 'feed_url' key of the self.feed dictionary for 'href'.   if value under the 'language' key of the self.feed dictionary is not None,
if not,
output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.
mime_type is a string 'application/atom+xml; charset=utf-8'.
format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
_version is a string "2.0".
call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,
if IndexError exception is caught,
call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
if NameError exception is caught,
call the function meta with 3 arguments: name, base and d.
if not,
append self.fk.name to form._meta.fields.
extend errors list with m for every m in e.error_list, only if m is not in errors.
get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.
from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii',
define the method copy with an argument self.
sum item and i_item together, append the result to new_result.
if filename is an instance of MIMEBase,
from django.core.management.sql import check_for_migrations into default name space.
if ImportError, renamed to e, exception is caught,
EventHandler.modified_code is I18N_MODIFIED.
and name set to None.   define the function dec with an argument func.
default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.   call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false',
call the method self.indent with argument integer 2.
derive the class HttpResponseBase from the six.Iterator base class.
join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
from collections import OrderedDict into default name space.
return boolean False,
raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.",
if not,
append decimals to parts.
increment weight by integer 2.
get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
decorator register.filter.
call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list,
do nothing.
derive the class Command from the AppCommand base class.
decorator deconstructible,
if ImportError exception is caught,
return self.var.
call the method self.validate_key with argument key.
if option_value is None,
define the method negate with an argument self.
convert fist p elements of locale to lowercase, append '_' to it,
substitute TemplateSyntaxError for error_class.
import module time.
define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
if self.is_bound is false,
if UnicodeDecodeError exception is caught,
call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.
call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.
derive DatabaseCache from the BaseDatabaseCache base class.
call the function force_str with an argument signature, return the result.
for field in self if field.is_hidden is true, append field to a list, return the resulting list.
define the method update with 2 arguments: self and dict_.
return self.__to_language.
if app_config.models_module is None or app_config is contained in excluded_apps,
if string 'id' is contained in self.attrs,
replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
if ValueError or TypeError exceptions occurred,
and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.",
define the method url_patterns with an argument self.
define the function handle_m2m with an argument value,
call the method self.add_library with an argument lib.
modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
property decorator,
Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.   from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
set the file pointer at the beginning of the self.file file.
if f is a file,
return string 'form'.
split lang_code by '-', substitute the first element of the result for generic_lang_code.
exception_middleware is an empty list.
call the self._delete method with argument f.name.
call the method _trans.gettext with an argument message.
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
from django.utils.six.moves import xrange into default name space.
substitute the result for value under the 'microsecond' key of the kw dictionary.   remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
call the method self.next_token, substitute the result for self.current_token.
data is an empty list.
if best_doublecolon_end equals length of hextets,
try,
call the method self._archive.extractfile with an argument member, substitute the result for extracted.
return an empty string.
define the method has_header with 2 arguments: self and header.
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',
define the function get_version with version set to None as argument.
substitute set of the results for self.value.   define the method is_checked with an argument self.
self._is_rendered is boolean True.
call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.
call the method form.save_m2m.
import module opera.
yield subnode.
call the self.get method with arguments key and version set to version, substitute the result for value.
try,
define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
if this_bases is None,
define the function get_valid_filename with an argument s.
return _make_decorator.
try,
if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
errors is an empty list.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if length of value is not equal to integer 1,
call the function trim_url with an argument middle, substitute the result for trimmed.
if field.help_text is true,
if prefix is false,
decorator stringfilter,
substitute i for self.pointer.
get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
_meth_func is a string "im_func".
from django.apps import apps into default name space.
call the function self.create_var with an argument token, return the result.
return the value under the self.data.month key of the MONTHS_3 dictionary.
call the function new_method_proxy with an argument bool, substitute the result for __bool__.
substitute model._base_manager for objects.
daemon_kwargs is an empty dictionary.
substitute doublecolon_start for best_doublecolon_start.
define the method __repr__ with an argument self.
substitute self.none_value for self.day_none_value.
define the function linebreaksbr with 2 arguments value and autoescape set to None.
otherwise if func is callable,
for every supported_code in _supported,
LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
convert bytes to floating point number, substitute it for bytes.
try,
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
return host and an empty string.
if not,
if is_templatized is true,
define the method render_node with 3 arguments: self, node and context.
if value is an instance of six.text_type class,
define the method lists with an argument self.
request is None.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.
define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
join package.__name__ and module_name into a string separated with '.', substitute it for name.
call the method self.configure_root with 2 arguments: root and boolean True.
call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.
call the function contains with 2 arguments: elt and inst, if it evaluates to true,
dest set to string 'no_color' default set to boolean False and help set to a string "Don't colorize the command output.".   for every opt in self.option_list,
try,
assign the handle to stream.   old_field_name is None.
if sys.warnoptions is false,
write a new line to the self.stream file stream.
call the function os.stat with an argument filename, substitute the result for st.
if answer equals a string 'y',
define the method push with 3 arguments: self, name and block.
if KeyboardInterrupt exception is caught,
if query_string is an instance of bytes,
derive the class InclusionNode form the base class TagHelperNode.
define the function dec with an argument func,
if StopIteration exception,
decorator decorator.
define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
if ValueError exception is caught,
call the function random.randrange with argument integer 100000, substitute the result for randint.
field_list is an empty list.
call the method value.center with an argument, arg converted into a integer, return the result.
call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the function hook with an argument entry, substitute the result for finder.
try,
substitute value for value under name key of msg dictionary.
get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
define the method __init__ with 3 arguments: self, widgets and attrs set to None.
define the method dst with 2 arguments: self and dt.
define the method close with an argument self.
open new_path file in 'wb' mode, with file descriptor renamed to new_file,
if KeyError exception is caught,
call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
define the method items with an argument self.
is_compressed is boolean False.
return guessed_path.
create directories from the elements in filename.
raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
self._populated is boolean True.
self.waiting_readers is integer 0.
if self.is_bound is true and i is smaller than self.initial_form_count,
if not,
raise an exception.
define the method _has_changed with arguments self, initial and data.
return singular_suffix.
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
call the get_complete_version function with version as argument, store the result in version.
define the method utcoffset with 2 arguments: self and dt.
call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
return an empty list.
return wrapper.
derive the InMemoryUploadedFile class from the UploadedFile base class.
define the method __getstate__ with an argument self.
update flat dictionary with d.
append the result to sql_files.   join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function,
and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.   if length of fks_to_parent is integer 1,
define the method __repr__ with an argument self.
decorator stringfilter,
if not,
set value under the 'bindAddress' key of wsgi_opts to None.
for every path in self.locale_paths,
called with 2 arguments: singular and trimmed, write the result to out.   if not,
expires is None.
insert mw_instance.process_template_response at the beginning of self._template_response_middleware.
from django.utils.module_loading import module_has_submodule into default name space.
with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.   define the method as_ul with an argument self.
property decorator,
substitute schemes for self.schemes.
raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.
if value is not None,
pytz is None.
'Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.   if length of value is not equal to integer 2,
separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_ul with an argument self.
return nothing.
do nothing.
define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.
return obj.
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
update the self._catalog dictionary with other._catalog.
skip this loop iteration.
call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value,
if print_ is None,
if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.
evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.
call method sort on the headerlist.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
for every template_dir in template_dirs,
increment bytes_read by length of bytes.
if ch2 equals string '?',
if self has an attribute '_files',
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
requires_system_checks is boolean False.
substitute regex for self._regex.
define the method __getitem__ with 2 arguments: self and idx.
substitute the result for value.   substitute value for the value under the name key of the self.cleaned_data dictionary.
for every dict_ in self.dicts,
if fake is true,
and dictionary of arbitrary length **kwargs as arguments.   call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,
define the method __mod__ with 2 arguments: self and rhs.
define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
return nothing.
if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
if t is contained in self.__dispatch,
import module operator.
if field.serialize is true,
define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
reverse settings.LOCALE_PATHS element order, for every localedir in the result,
HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone,   HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.   from django.http.utils import fix_location_header and conditional_content_removal into default name space.
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA into default name space.
try,
call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
if TypeError, renamed to te, exception is caught,
break from the loop execution.
if StandardError, renamed to e, exception is caught,
try,
define the method clean with arguments self and value.
define the function get_template_from_string with 3: source, origin set to None and name set to None.
get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.
input_type is None.
substitute obj for self.obj.
define the function import_string with an argument dotted_path.
decorator stringfilter,
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
derive the class Serializer from the PythonSerializer base class.
for every elt in source,
call the self._createdir method.
substitute self.toks for toks.
if string '--commands' is contained in args,
return nothing.
if not,
if relative_dir is true,
call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
if url is true,
get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
substitute name, nodelist and parent for self.name, self.nodelist and self.parent.
call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
call the method date_value.strftime with an argument input_format, return the result.
if not,
if stream_created is true,
if _win is true,
return data.
otherwise if self.file_path file path doesnt exists,
if middleware has an attribute 'process_request',
return an empty list.
or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables,   invert the evaluated expression and return it.   manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
kwargs is an empty dictionary.
return an instance of BoundField class, created with arguments self, field and name.
operations is an empty list.
define the method widget_attrs with arguments self and widget.
parsed is boolean True.
substitute registry.register for register.
for eery app_config in app_configs,
if parent is false,
call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
if want_unicode is false,
define the method __next__ with an argument self.
subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:
if name is None and filter_func is None,
derive the class DefusedXmlException from the ValueError base class.
define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
get is a string '<could not parse>'.
if not,
if AttributeError exception is raised,
subtype and charset, respectively.   if not,
define the function remove_tags with 2 arguments: html and tags.
if not,
otherwise if value is not an instance of list ot tuple type,
call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,
define function get_max_age with response as an argument.
substitute connection.ops.quote_name for qn.
open writer.path file in write mode, with the file descriptor as fh, perform,
call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.
return an instance of FixedOffset class, created with 2 arguments: offset and name.
if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,
if mode equals to string 'add' and current_expires is lesser than now, or mode equals to string 'set', and result is true,
open '/dev/null' file in read mode, substitute the result for si.
finally perform,
raise an OverflowError exception with an argument string 'dklen too big'.
if cache is None,
substitute file_name for self.file_name.
if id_ is true,
define the method pop with 3 arguments: self, key and default set to None.
call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set,
replace every occurrence of ' ' in value for '\xa0', return the result.
substitute value under the backend key of settings.CACHES dictionary for conf.
define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.
msg is a string "%s doesn't look like a module path" formated with dotted_path.
define the method strftime with 2 arguments: self and fmt.
substitute self.old_timezone for _active.value.
increment self.waiting_writers by integer 1,
if path_info is empty,
import module '.management' from the package app_config.name.
join app_config.path and string 'management' into a file path, substitute it for path.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
with one entry 'status_code' is integer 400, as arguments.   call the http.HttpResponseBadRequest function, assign the result to the response.
from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
increment the lineno by the count of the newlines in self.__starttag_text.
if args is true,
self._headers is an empty dictionary.
call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.
sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
call the method self._get_validation_exclusions, substitute the result for exclude.
if KeyError exception is caught,
define the method body with an argument self.
call the method s.feed with an argument value.
define the method d with an argument self.
if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true,
if self._non_form_errors is None,
if _serializers is false,
default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.   call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',
call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
otherwise if value is an instance of datetime.time,
define the function lock with arguments f and flags.
if resolved_path is true,
import module sys.
call the method copy.copy with an argument self, return the result.
call the method content.message, substitute the result for content.
substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
from django.conf import settings into default name space.
string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.   define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.
if exception http.Http404 as e is caught,
"apps registry is ready. Check that you don't make non-lazy gettext calls at import time.".   for every app_config in app_configs,
return boolean False.
error is an instance of ValidationError created with an argument error.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the function calculate_app_template_dirs.
if chunks is false,
if html is true,
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.
covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
for every field in unique_check, if field is contained in form.cleaned_data.   create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,
import module types.
call the function to_current_timezone with an argument value, substitute the result for value.
return an instance of ModelChoiceIterator class, created with an argument self.
call the getvalue method of the base class of the PythonSerializer class, return the result.
define the method __get__ with 3 arguments: self, obj and tp.
element of data at the index last equals to newline bytes character.
required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text,   unpacked list args, unpacked dictionary kwargs.   if self.required is true,
call the import_string with app_path as an argument, return the result.
decorator stringfilter,
with an argument string 'object', return the result.   define the method _get_model_from_node with arguments self, node and attr.
substitute True for self.close_called.
call the method self.iterkeys, return the list of results.
substitute str for string_types.
field_params is an instance of a class OrderedDict.
call the method self.find_template_cache.clear.
values is an dictionary with entries: return value of the method var.resolve with an argument context for name,
returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.   if row_data is true and None is not contained in row_data,
read size number of bytes from self.stream stream, store the result in the result.
opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',
define the method ext_convert with 2 arguments: self and value.
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
substitute allow_empty_first_page for self.allow_empty_first_page.
type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.   call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database',
call the function constant_time_compare with 2 arguments: val1 and val2.
call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.
return an string "<IfEqualNode>".
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
only if member.name is not equal to string 'pax_global_header'.   call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
substitute _ for ret.
if not,
append value to the self.sign, return the result.
convert language to lowercase, return it.
add model to excluded_models set.
return name and tuple containing 2 elements value and params.
use the result and file_obj as arguments for the call to the method self._files.appendlist.   break the loop execution.
call the function conditional_escape with an argument arg, call the method join on the result with an argument value,
define the function truncatewords_html with 2 arguments value and arg.
if self.data.hour is greater than integer 11,
call the method self.clear_cdata_mode.
for every label in app_labels,
while answer is false or answer is not contained in string "yn", perform the following,
if index is lesser than integer 0,
statements is an empty list.
call the method self._update_unget_history with length of bytes as an argument.
call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments,
convert to integer the value of dictionary cc under the key 'max-age', and return it
if not,
zip elements of result and result_args into a list of tuples, for every item and args in the result,
if both cursor and close_connection are true,
substitute reason for self.reason_phrase.
call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
import module datetime.
if renamed is boolean False,
substitute instance for self.instance.
FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',
return token.
otherwise if name is not None and compile_function is not None,
define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.
substitute file_size for self.file.size.
and code set to an string 'required'.   for every val in value,
import module os.
call the function warnings.warn with previous string and CacheKeyWarning as arguments.   define the method incr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
from django.core.management.base import CommandError into default name space.
return style.
raise an exception.
define the function ngettext with 4 arguments: context, singular, plural and number.
regex is an empty string.
if AttributeError exception is caught,
if commit is true and form has an attribute 'save_m2m',
call the method sign on the result with an argument value, substitute the result for value.   call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
derive the class SimpleLazyObject from the LazyObject base class.
try,
substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if OSError, renamed to e, is caught,
if not,
library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.   decorator cached_property,
inputs is an empty list.
parts is an empty list.
if filename ends with string "$py.class",
define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
call the method _trans.ngettext with 3 arguments singular, plural and number.
define the method writer_leaves with an argument self.
call the function inline_re.match with an argument t.contents, substitute the result for imatch.
call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.
call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.
decorator register with argument Tags.compatibility.
substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
from django.utils.daemonize import become_daemon into default name space.
define the function make_msgid with argument idstring set to None.
define the method add_arguments with self and parser.
call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,
substitute value_not_found_exception for self.LibraryValueNotFoundException.
from __future__ import unicode_literals into default name space.
convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
join self.dirpath and self.file into a file path, return it.
if key is not contained in self,
substitute charset for self.charset.
define the method l with an argument self.
call the method self.validate_key with argument key.
cache is an empty dictionary.
define the method exists with arguments self and name.
stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.   if OSError, renamed to e, exception is caught,
for every message is message,
import module os.
break the loop execution.
try,
if current_app and is true and current_app is contained in app_list,
return source and display_name.
from django.utils import datetime_safe into default name space.
if self.allow_folders is true,
call the function six.text_type with an argument name, return the result.
confirm is a string 'yes'.
define the method encoding with an argument self.
derive the class ModelFormOptions from object base class.
return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label,
from django.utils.encoding import force_text into default name space.
subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index,
_anonymous_ is a list containing one string: '_offset'.
for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments,
cookiedict is an empty dictionary.
remove slots_var key from the orig_vars dictionary.
call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
call the function force_text with an argument template_string.
substitute value for url.
import module time.
from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
if data is false and initial is true,
try,
if field equals NON_FIELD_ERRORS,
in_tag is boolean True if in_tag is False, otherwise is boolean False.
do nothing.
derive the class Rss201rev2Feed from the RssFeed base class.
derive the class SplitDateTimeField from the base class MultiValueField class.
raise an CommandError exception with an argument "Database inspection isn't supported for the currently selected database backend.".
__all__ is an tuple containing string 'SelectDateWidget'.
if self.choices is true,
RemovedInDjango19Warning and stacklevel set to integer 2.   if not,
from django.utils.functional import Promise into default name space.
loaders is an empty list.
split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.
call the method self.setlistdefault with an argument key, append value to the result.
if not,
if decimal_separator is contained in value,
return raw_data.
if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
call the method instance.save.
substitute chr for int2byte.
break from the loop execution.
return self.empty_form.media.
import module os.
extend errors list with e.error_list.
call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,
substitute labels for value under the 'labels' key of attrs dictionary.
define the method use_argparse with an argument self,
for every x in argset,
raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag or filter in tag library '%s'",
fail_message is a string 'created'.
otherwise if value is an instance of datetime.datetime,
do nothing.
substitute the result for new_obj.   if not,
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
if not,
call the function _ with an argument string 'noon', return the result.
substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
add self.buffer and self._read_limited method return value together, store it in result.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
define the method tags_available with argument self.
define the function get_language_from_path with an argument request.
if _default is None
return input_val.
if over_bytes is true,
if ImportError exception is caught,
for every pos and elt in enumerated iterable source,
call the method update_watch.
define the function is_safe_url with 2 arguments url and host set to None.
if not,
call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
define the function unregister_serializer with an argument format.
if not,
return content.
call the method node.render with an argument context, return the result.
unpacked list field_value as an argument, substitute the result for obj.   get field.rel.field_name attribute of the object obj, substitute it for value.
call the method connection.constraint_checks_disabled, with the result perform,
define the method __getitem__ with 2 arguments: self and name.
if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
from django.utils.six.moves import html_parser as _html_parse into default name space.
define the function get_serializer with an argument format.
define the method keys with an argument self.
use the result as an key to get the value of the form.data dictionary, assign it value None.   call the method form.add_prefix with an argument self.fk.name,
append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings,
call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
define the method __init__ with 2 arguments: self and unpacked list dicts.
call the sio.readline method, substitute the result for line.
return an empty dictionary.
rise an KeyError exception with an argument key.
import module time.
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
call the method self._setup.
call the method add_arguments from the base class of the class Command, with an argument parser.
OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,
tried is an empty list.
substitute '%s' in a string "  %s:\n" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,
call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,
terminal_char is an string ')'.
a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.
add ext to f, substitute the result for fext.
define the method _ipython with an argument self.
if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,
get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,
match regex datetime_re with value, substitute the result for match.
if length of parts is greater than integer 1.
if arg is true,
call the function debug.technical_404_response with request and e as arguments, assign the result to response.
get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
remove first element from name, substitute the result for used.
return new_class.
self.loaded_object_count is integer 0.
substitute memoryview for memoryview.
increment i by integer 1.
from django.conf import settings into default name space.
for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
define the method __init__ with 3 arguments: self, producer and length set to None.
do nothing.
join statements into a string, separated by newlines, return it.
value under the 'blank' key of the extra_params dictionary is boolean True.
call the function conf.copy, substitute it for params.
define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.
for every entry in package_path,
call the method self.parent_name.resolve with an argument context.
if self has an attribute '_coerce',
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.
return self.__name.
call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
return self.
call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
define function _i18n_cache_key_suffix, with request and cache_key as arguments.
substitute boolean False for cache_choices.
otherwise if maxsize is None,
call the method logging._releaseLock.
DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',
define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
define the method __init__, with 3 arguments: self, m2m and data set None.
for every f in opts.fields,
if truncate_text is true,
define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,
substitute self.current_token for t.
where '%s' is replaced with bit and '%r' is replaced with current.   if current is callable object,
_assertCountEqual is a strnig "assertItemsEqual".
for every base in reversed order of bases,
result is an empty list.
if length of self.dicts is equal to an integer 1,
if imatch is true,
decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts,   substitute the result for suffixes.   join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.
call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.
name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.   substitute func.__doc__ for compile_func.__doc__.
define the method receive_data_chunk with arguments: self, raw_data and start.
if self.addr is true,
append child.data to the inner_text list.
for every v in self.validators,
define the method get_connection with arguments self and fail_silently set to boolean False.
define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
try,
create list of first remaining elements of chunk, substitute it for emitting.
if InvalidTemplateLibrary, renamed to e, exception is caught,
return neg and res.
use it as an argument for the call to the force_str function, return the result.   define the method add_prefix with arguments self and prefix.
if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
return the result.   if UnicodeDecodeError exception is caught,
call the function is_library_missing with an argument taglib_module, if it evaluates to true,
from django.utils.six.moves.urllib.request import urlretrieve into default name space.
define the method validate_domain_part with arguments self and domain_part.
return self.text.
if app_config is None,
call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.
from __future__ import unicode_literals into default name space.
define the method __iter__ with an argument self.
for every name in handlers,
if cnt is true and remained of dividing cnt with grouping is zero,
call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
with previous result and list containing cull_num, respectively as arguments.   call the method cursor.execute with string "DELETE FROM %s WHERE cache_key < %%s" as argument,
derive the class EmailBackend from the BaseEmailBackend base class.
call the method self.iteritems, return list of results.
return nothing.
call the method var.resolve with 2 arguments: context and True, substitute the result for value.
substitute _globs_ with an argument _locs_.
call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params,
call the method parser.delete_first_token.
while current_len is smaller than or equal to length,
if timeout is greater than integer 2592000,
call the function signals.request_finished.connect with argument cache.close.
kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset',
define the method tokenize with an argument self.
property decorator,
if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.
if self.verbosity is greater than integer 1,
for every domain in domains,
for every i and choice in enumerated iterable self.choices,
call the method cursor.execute with string "DELETE FROM %s WHERE expires < %%s" as argument,
derive the class DeserializationError from the Exception base class.
from django.utils.encoding import force_str into default name space.
if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,
raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
if not,
read chunk_size bytes from file and store it in data.
define the function get_callable with arguments lookup_view and can_fail set to boolean False.
call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.
return instance.
convert number to a string, truncate first element.
define the method content with an argument self.
set value under the 'timeout' key of the connection_params to self.timeout.
from .registry import register, run_checks, tag_exists and Tags into default name space.
define the function get_bytes_from_wsgi with environ, key and default as arguments.
if failures is true,
define the function rfc2822_date with an argument date.
for every locale in locales,
for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
define the method empty_block_tag with 2 arguments: self and token.
define the method __str__ with argument self.
call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function,
derive the WSGIHandler class from the base class base.BaseHandler.
call the method parser.next_token, substitute the result for token.
define the method incr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
if filename is true,
define the method validate with 2 arguments: self and value.
vary_on is an empty tuple.
self.vals is an empty list.
evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.
subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
call the method bit.group with an argument integer 0, yield the result.
call the method val.encode with argument string 'ascii'.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
call the method o.isoformat, return the result.
if not,
substitute complain for __setslice__.
for every cache in return value of the function caches.all.
substitute data.size for file_name.
LOCK_EX is a hexadecimal 2.
post is a string '<could not parse>'.
decorator stringfilter,
msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
define the _set_post method with self class instance and post as the arguments.
default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'   call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
call the method message.message, substitute the result for msg.
for every choice in value,
call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding,
cal the method self.startElement with 2 arguments: name and attrs.
try,
decorator function register.filter with an argument is_safe set to boolean True.
join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
derive the class EmailBackend from the BaseEmailBackend base class.
zbuf is an instance of BytesIO class.
call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
create_models is an empty list.
if git_changeset is true,
take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.
call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
if viewname is not an instance of the six.string_types object,
for every fname in filelist,
define the function _is_shorthand_ip with an argument ip_str.
yield one element of line iterable.
only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.
return result.
create directories from the elements in filename.
call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,
import module base64.
derive the class ValidationError from the Exception base class.
where '%s' is replaced with first upto elements of token string, token string elements from upto to start index,   and token string elements from start index to the end.   if var_obj is None,
decorator stringfilter,
for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
define the function media_property with an argument cls.
return lang_code.
call the function self.to_python with an argument data, substitute the result for data.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
substitute the result for connection.   get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.
replace every occurrence of '\r' in s with '\\r'.
substitute params for self.params.
raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
try,
define the function first with an argument value.
if cache is None,
return _standard_context_processors.
derive the class StringOrigin form the base class Origin.
try,
substitute error_class for self.error_class.
value under the self.var_name key of the context dictionary is an empty list.
substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
for second and third element of args, respectively.   if length of args equals integer 2,
if invalid_apps in not empty,
derive the class Iterator from the base class object.
call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
call the function _trans.to_locale with an argument language, return the result.
separated with result of the function conditional_escape with an argument sep, for every args in args_generator,   use the result as an argument for the call to the function mark_safe, return the result.   define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
if six.PY3 is boolean True,
from optparse import OptionParser into default name space.
call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.
raise a ValidationError exception with arguments self.message and code set to self.code.
if Exception, renamed to e, exception is caught,
ch2 is None.
base is an instance of Media class.
as_form is boolean False.
call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
import module base64.
otherwise if value under the "author_name" key of the item dictionary is true,
where '%s' is replaced with result of the method self.current_token.display.   return retval.
if ImportError exception is caught,
if the key doesnt exists substitute boolean False for self.ignore.   define the method _make_parser with an argument self.
substitute origin for self.origin.
substitute the result for file_name.   call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,
use the result as an argument for the call to the function iri_to_uri, return the result.   call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,
call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,
if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
return string "<%s: %s>", formated with self.__class__.__name__ and self.
label_for is an empty string.
try,
define the function ifequal with 2 arguments: parser and token.
call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.
substitute socket.AF_INET6 for self.address_family.
if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
define the method __nonzero__ with argument self.
call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
if errors is true,
from __future__ import unicode_literals into default name space.
return wrapper.
if ValidationError renamed to e, exception is caught,
delete the value under the key key of self._cache dictionary.
call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
derive the class LoadNode from Node base class.
request_queue_size is integer 10.
define the method latest_post_date with an argument self.
call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
from django.db import models and router into default name space.
call the method apps.get_model with an argument model_identifier.
call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
if opts.model is None.
otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.   substitute empty_permitted for self.empty_permitted.
from inspect import getargspec and getcallargs into default name space.
if cc is true,
append value to the self._closable_objects list.
call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None,   feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.   to_unicode is an lambda function with an argument s, result is the result of the function force_text,
define the method reset with an argument self.
if KeyError exception is caught,
if settings.USE_L10N is true,
if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
if initial is not equal to data, return boolean True, if it is return boolean False.
call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.
mime_type is a string 'application/rss+xml; charset=utf-8'.
raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with,
substitute form for self.form.
call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.
define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.
raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
with '%s' substituted for migration_name and app_label, respectively, as arguments.   if KeyError exception is caught,
with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.   call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.
append param to i-th element of result_args.
if app_config.models_module is None,
if value is not contained in result,
'PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203,   'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208,   'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303,   'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308,   'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404,   'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408,   'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413,   'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416,   'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424,   'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431,   'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503,   'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507,   'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.   derive the class BadHeaderError from the ValueError base class.
use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.   if ValidationError exception is caught,
convert value into an floating point number, substitute it for value.
substitute the result for RFC850_DATE.   call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,
import module time.
join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,
substitute BOOL for UnlockFileEx.restype.
if AttributeError exception is caught,
if action equals to string "apply_start",
_meth_self is a string "__self__".
slice root starting from the prefix_length index to the end, substitute it for path_rest.
if decompress is true,
from django.template.loader import BaseLoader into default name space.
if rhs is an instance of SafeData.
get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple,
call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
return klass.
use the result as an argument for the call to the mark_safe function, return the result.   call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
call the method bad_app_labels with an argument app_label,
_empty_value is an empty string.
return out.
raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
if email_messages is false,
VARIABLE_TAG_END is a string '}}'.
format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.
return a string "UTC".
get the value under the settings.__module__ key of the sys.modules dictionary,
call the function escape with an argument value, return the result.
integer_types is a tuple with 2 elements int and long.
from django.core.management import call_command into default name space.
call the method self.__class__ with an argument self, return the result.
import bpython.
use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result,   join template_name and previous final result into a string, separated with '-', return it.   if not,
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.
call the method path.expanduser with an argument template, substitute it for expanded_template.
if tag is not contained in TemplateTagNode.mapping,
if logging_settings is true,
if value is boolean True,
substitute _make_key for make_key.
define the method execute with an argument self,
import module datetime.
self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
import module warnings.
try,
call the method os.setsid.
call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
substitute language for self.language.
define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.
get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,
define the method render with 2 arguments: self and context.
from django.core.management.base import BaseCommand into default name space.
if rhs is an instance of SafeText,
reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.   if interactive is true,
call the __call__ method from the base class of the class URLValidator, with an argument value.
try,
call the function datetime.date.today, substitute the year field of the result for this_year.
for every hook in sys.path_hooks,
define the method delete_first_token with an argument self.
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
if self.max_length is not None,
define the method __init__ with an argument self.
call the method self.set with arguments key, value, timeout set to timeout, version set to version.
from django.conf import settings into default name space.
if os has an attribute 'utime',
return replacement.
if OSError, renamed to err, is caught,
define the function _get_val.
call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
extend all_models list with the result.   call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.
raw string '(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE,   substitute the result for html_gunk_re.   call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',
try,
call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.
return j.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.
if eather one of settings.USE_I18N or settings.USE_L10N is True,
call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
append the result to the result of the method, self.as_widget, return the resulting string.   call the method self.as_widget, return the result.
call the method self._assert_mutable.
remove file tmp_path.
if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,
call the method self.initial_form_count, return the result initial_forms.
substitute _itervalues for values.
try,
otherwise if value is boolean False, string 'False' or string '0'
"to %s because it doesn't define __str__().", replace %s with string value of klass.__name__.   substitute __str__ filed of klass for __unicode__ field of klass.
if not,
if second element of k is None,
call the function force_text with an argument path, substitute the result for path.
call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD,
all_unique_checks is an empty set.
substitute klass.__dict__ for next.
get field.name attribute of the obj, substitute it for related.
define the method o with an argument self.
if answer is false,
if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
idstring is an empty string.
return integer 0.
for every frag in name.
if DatabaseError, renamed to e, exception is caught,
substitute it for value of dictionary response under the key 'Vary'.   define function has_vary_header, with response and header_query as arguments.
from django.core.files import temp as tempfile into default name space.
from decimal import Decimal into default name space.
call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
define the function render_value_in_context with 2 arguments: value and context.
get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.
return value.
define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
call the method self.configurator.convert with an argument value, substitute the result for result.
_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
return integer 0.
try,
substitute index for self.index.
otherwise if level converted into a string equals level,
if command.verbosity is greater than integer 1,
from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
derive the class AutoEscapeControlNode from Node base class.
return an empty list.
if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase,
where '%(field)s' is replaced with first element of unique_check, return the result.   if not,
substitute fifth element of row for value under the 'max_digits' key of the field_params.
return EndToken.
raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
derive the class HttpResponseServerError from the HttpResponse base class.
call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
questioner is an instance of a InteractiveMigrationQuestioner class.
if value under the 'language' key of the self.feed dictionary is not None,
assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
builtins is an empty list.
define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
if ValueError exception is caught,
and RemovedInDjango19Warning.   from django.conf import settings into default namespace.
and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
return nothing.
if NotImplementedError exception is caught,
call the self.get method with key and version set to version as arguments, substitute the result for value.
otherwise if length of app_labels is greater than integer 1,
define the method _init_translation_catalog with an argument self.
return boolean False.
define the function to_language with an argument locale.
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key,
define the method stringfilter with an argument func.
otherwise if field is contained in the result of the call to the method self._errors.keys,
if self.match is not None,
define the function make_middleware_decorator with an argument middleware_class.
closed is a property object with _get_closed as a getter method.
if now equals to boolean True and now is not an instance of datetime.datetime,
from django.utils import six into default name space.
return boolean False.
if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
substitute registry.run_checks for run_checks.
convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.   return state.
if field is contained in self.errors,
return nothing.
define the method render with 2 arguments self and context.
pending_references is a empty dictionary.
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.
call the method block_context.pop with an argument self.name, assign the result to push and block.
import bz2.
pk_value is None.
string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files",   where '%s" is replaced with new_path.   open old_path file in 'rb' mode, with file descriptor renamed to template_file,
define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
from threading import RLock.
substitute declared_fields for new_class.base_fields.
if name is None,
return dec.
call the self.get_response with request as the argument, substitute the result for response.
skip this loop iteration.
try,
convert if into a string append to it a string '_month', return the result.
from django.utils.html import format_html, format_html_join and escape into default name space.
if self.directory_permissions_mode is not None,
property decorator,
if not,
define the method prepare_value with arguments: self and value.
define the method tag_exists with self class instance and tag as arguments.
define the method resolve with 2 arguments: self and s.
known_models is an empty list.
if self.load_initial_data is not empty,
if not,
if self.loaded_object_count is greater than zero,
import module sys.
_fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.
import module re.
and dictionary with an entry: 'html' for 'type'.   if value under the 'enclosure' key of the item dictionary is not None,
if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
if not,
if num is greater than self._max_entries,
if flags is not None,
call the method self._text_words with 2 arguments length and truncate, return the result.
if ValueError or TypeError exceptions are caught,
define the method __iter__ with an argument self.
call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
substitute save_m2m for form.save_m2m.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
try,
define the function get_language_bidi.
if not,
where '%r' is replaced with options.   if option equals a string 'with',
raise an ValueError exception with an argument string "Negative base36 conversion input.".
get the integer representation of the i-th element of buf, return it.
define the method __init__ with 3 arguments: self, token_type and contents.
return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,
context_extras is an empty dictionary.
define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
ext_list is an empty list,
substitute has_header for __contains__.
define the method __init__ with 11 arguments: self, subject set to an empty string, body set to an empty string,
define the function load with 2 arguments: parser and token.
use the result as a key to get the value from the connections dictionary, substitute the result for connection.   call the function check_for_migrations with 2 arguments: app_config and connection.
open the file fn in read mode, with file descriptor as f,
define the method render with 2 arguments: self and context.
if character '@' is contained in addr,
for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,
return the list, containing 4 elements: an empty string, string "    class Meta:", string "        managed = False",
self._validate_unique is boolean False.
define the function int_to_base36 with an argument i.
call the function ensure_echo_on.
define the function split_url with an argument url.
call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.
otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
if obj_pk is not None,
delete first 3 elements of bits.
join management_dir and string 'commands' into a file path name, substitute it for command_dir.
for every ext in pathext,
self.META is an empty dictionary.
return nothing.
for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,
import module warnings.
get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,
if not self._mutable,
PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,
substitute new_class.declared_fields for fields.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
substitute result for self dictionary under key key.
define the method __str__ with an argument self.
return boolean False.
return an empty dictionary.
yield string "#" as the result.
if name is contained in lib.filters.
substitute string 'ascii' for encoding.
call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
return an instance of DebugNode class.
otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,
return response.
field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.   derive the class Deserializer from the base.Deserializer base class.
if self.old_timezone is None,
BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
define the function _parse_date_fmt.
for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,
return self._upload_handlers.
where '%s' is replaced with value under the 'addrport' key of the options dictionary.   call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
return nothing.
import module binascii.
define the method __init__ with arguments self, stream and boundary.
otherwise substitute args for key.   with lock,
while ch is not equal to terminal_char,
decorator stringfilter,
define the method render with 2 arguments: self and context.
call the method logging.Filter with an argument name, substitute the result for result.
define the method __init__ with 4 arguments: self, target, expression and var_name.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
define initialization method __init__, with self class instance as the argument.
define the method parse_args with 3 arguments: self, args set to None and namespace set to None.
import module codecs.
substitute len for _len.
if current_len is smaller than or equal to length,
call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
if string 'noreset' is not contained in opts,
define the method sign with arguments self and value.
with the argument view, store the result in the view.   return view
define the method find_potfiles with an arguments self and root.
if cmd ends with ext,
find the ending position of the regular expression match of the object match, substitute the result for k.
call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
if not,
self.tags is an empty dictionary.
format string '&%s;' with name, append it to self.fed.
get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
matches is boolean True,
for every line in return value of the method self.handle_inspection called with an argument options,
call the middleware_method with request and e as the arguments, substitute the result for response.
call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
substitute module.WSGIServer for WSGIServer.
if not,
round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.
if max_value is not None,
p and errors set to string 'replace', for p in self.params.   derive the class InvalidTemplateLibrary form the base class Exception.
call the email_message.recipients method, if it evaluates to false,
call the method self.__copy__, return the result.
use it as an argument for the call to the glob.iglob, for every candidate in result,   call the method os.path.basename with an argument candidate, is result is contained in targets,
call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,
validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,
call the self._createdir method.
call the method field_params.update with an argument new_params.1
return self.
errors is an empty list.
import module django.core.checks.compatibility.django_1_7_0.
join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func,
if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.   call the method self.start_serialization
output is an empty list.
self.active_writers is an integer 0.
call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
call the method self.xml.startElement with argument string 'object' and an empty dictionary.
call the method self._ordering.sort with an argument key as compare_ordering_key.
define the method __enter__ with an argument self.
if '_' is contained in locale,
substitute http_cookies.SimpleCookie for SimpleCookie.
num is an integer 0.
define the method root_attributes with an argument self.
call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args,
return None.
append self to context.dicts.
define the initialization method __init__ with self, table and params as arguments.
call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ',
and use it as the name of the attribute to get from the self object,   call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator,   use the result as an argument for the call to the function mark_safe, return the result.   define the method render_js with an argument self.
help is a string 'Runs a development server with data from the given fixture(s).'.
return dictionary created out of tuple elements k and printable representation of v,
handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
define the method __delitem__ with 3 arguments: self and key.
from unittest2 import everything.
and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
if locale_dir is false,
append ch to result.
from django.utils.safestring import mark_safe and SafeData into default name space.
define the method create_var with 2 arguments: self and value.
for every punctuation in TRAILING_PUNCTUATION,
define the method write with 3 arguments: self, outfile and encoding.
return expanded_template.
return path_info.decode method return value called with UTF_8 as the argument.
re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,
substitute max_width for self.max_width.
dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self and unpacked dictionary options.
define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
post is a string '<could not parse>'.
raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.
if self.language is not None,
if etags is false,
define the method _iteritems with an argument self.
define the method render with an argument self.
for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and ,
define the method resolve_expression with 3 arguments: self, obj and context.
from django.conf import settings into default name space.
define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,
for every post_callback in self._post_render_callbacks,
define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,
return a string "%s.%s" formated with first dot package elements and name.
default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.   call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake',
return self._size.
if not,
if name is not contained in data,
return self.
s_len is integer 0.
contextlib.contextmanager decorator,
call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
_supported is None.
call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
if _cookie_allows_colon_in_names is False,
var_obj is None.
obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.
do nothing.
return WSGIHandler object.
define the function media with an argument request.
if not,
do nothing.
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.
substitute field_name for old_field_name.
if size is not empty,
call the function is_protected_type with an argument value, if it evaluates to true,
if field_type equals a string 'AutoField(',
if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.
call the method self.split_leading_dir with an argument name, substitute the first element of result for name.
derive the class Command from the base class BaseCommand.
substitute msg for self.msg.
call the OVERLAPPED function, substitute the result for overlapped.
call the method __init__ with an argument name form the base class of the class MovedAttribute.
if ValueError or TypeError exceptions occurred,
try
for every middleware_method in self._request_middleware,
skip this loop iteration.
substitute name for self.name.
if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
if self._content_length equals integer 0,
call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.
try,
call the method obj.delete.
buffer_types is a tuple with 2 elements bytearray and memoryview.
call the method b64_decode with an argument base64, substitute the result for data.
if out_log is true,
call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
substitute ev.filename for filename.
delete the form.cleaned_data dictionary entry under the field key.
call the method to_delete.add with an argument model.
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
return translation.
self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
from django.db.migrations.executor import MigrationExecutor into default name space.
call the self.path function with argument path, substitute it for path.
define the function get_standard_processors.
upto is integer 0.
default is a string 'DEFAULT'.
if template_name_list is false,
instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.
define the method validate with arguments self and value.
append '(' to field_type.
if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
if attr is an instance of MovedModule.
substitute first element of item for k.
call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.
define method parse_starttag with self class instance and i as the arguments.
join return value of the function six.text_type called with an argument self.management_form and forms into a string,
substitute the result for i-th element of lines.   if not,
if self.activated is boolean False,
line is an empty string.
split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
call the function find_template_loader with an argument loader_name, substitute the result for loader.
define the method with reload with an argument self.
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key,
get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
increment self.active_readers by 1.
open file named path in 'rb' mode, with file descriptor as f,
if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
and self.choice_label, return the result.   define the method is_checked with an argument self.
return doy.
return boolean False.
html_class_attr is an empty string.
if not, self.merge is boolean False.   get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,
define the method __init__ with 4 arguments: self, url, length and mime_type.
call the function check_for_migrations with an arguments app_config, connection.
substitute dirpath for self.dirpath.
append val to self.vals.
define the function set_urlconf with an argument urlconf_name.
if base has an 'declared_fields' attribute,
if IndexError exception is caught,
from collections import OrderedDict into default name space.
otherwise if vale is not an instance of ConvertingList and value is an instance of list type,
if not,
call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.
define the method __get__ with 3 arguments: self, instance and owner.
del self._post
define the method __repr__ with an argument self.
define the method handle_m2m_field with argument self, obj and field.
call the method self.run_validators with an argument out.
append f.name to exclude.
if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
where '%s' is replaced with migration_name and app_label.   migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called,
if r ends with string '+00:00',
if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,
call the method self.copy, return the result.
if ValidationError, substituted for e, exception is caught,
if proto is greater than or equal to integer 2,
define the function get_wsgi_application.
if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
if media is true,
if not,
if VariableDoesNotExist exception is not caught,
use global variable _supported.
leave_locale_alone is boolean True.
if value under the 'enclosure' key of the item dictionary is not None,
raise an TemplateDoesNotExist exception with an argument template_name.
from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
define the method __setitem__ with arguments self, name and val.
import module types.
substitute name for new_mod.
ERROR is integer 40.
while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,
substitute callback for self.callback.
remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
counters is a list containing length of handlers number of zeros.
append filename to _error_files.
lookups is an instance of the MultiValueDict class.
return an instance of SafeText, created with an argument t.
do nothing.
call the key.lower method for every key in self.extra_headers, join the results into a header_names.
define the method num_items with an argument self.
from __future__ import unicode_literals into default name space.
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with result of the call to the function,
if content is an instance of a EmailMessage class,
handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,
if target is None,
of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.
for every c in self.children.   define the method __repr__ with an argument self.
call the function thread.start_new_thread with main_func, args and kwargs as arguments.
if not,
define lambda function that returns self.file.encoding field, use it as an argument for property function, put the result in encoding.
call the LockFileEx function with 6 arguments: hfile, flags, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
if filepath starts with root,
join return value of the function six.text_type called with an argument self.management_form and forms into a string,
call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,
save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.   if instance is None,
try,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
return boolean False.
call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.
from django.core.management.base import AppCommand into default name space.
call the method match.end, substitute the result for upto.
from django.core.serializers.base import DeserializationError into default name space.
if sign is true,
substitute instance for self.instance.
if iterations is lesser than integer 0, raise an error.
convert result of the method self.__iter__ into a list, return its length.
remove the first occurrence of the filename value in the _error_files list.
call the method self.clean with value as argument, substitute the result for cleaned.
return result.
from django.forms.extras.widgets import SelectDateWidget into default name space.
call the method self.emit_post_migrate with arguments verbosity, interactive and database.
get property attribute _get_width, and substitute it for width.
delete entry under item key of self.dict dictionary.
from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
asvar is None.
value under the 'required' key of the kwargs dictionary is boolean False.
define the function parse_http_date with an argument date.
skip this iteration of he smallest enclosing loop.
substitute encoding for self.encoding.
if year is lesser than integer 100,
call the method self.__deepcopy__ with an empty dictionary as an argument.
call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
increment year by integer 1900.
define the method save with arguments self, name and content.
if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.   if Exception exception is caught,
for every filename in filenames,
call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'",
join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
derive the class BadSignature from the Exception base class.
from django.core.management.base import BaseCommand and CommandError into default name space.
call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
return self.file.
from pkg_resources import resource_string into default name space.
and generic_lang_code.   call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.
for f in sorted list of the files in the self.path directory,
get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
return an empty string.
for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
call the method value.rjust with an argument, arg converted into a integer, return the result.
while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
for every obj in queryset,
return line.
from django.core.exceptions import SuspiciousFileOperation into default name space.
_meth_func is a string "__func__".
for every module_to_search in args,
ret_ip is an empty list.
added to a tuple with an element year, substitute the result for s1.   call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
return val.
from django.utils import six into default name space.
return fixture_files.
call the method activate with an argument self.timezone.
if settings.USE_L10N is true,
return a class instance FilterNode, called with an arguments filter_expr and nodelist.
if OSError or IOError exceptions were raised,
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
return next element of the iterable it.
for every path in format_module_path,
return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
define the method __init__ with 3 arguments: self, filter_expr and nodelist).
derive the class Command from the BaseCommand base class.
append func to processors.
call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
if token is None,
"Use django.utils.timezone instead.", RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.
define the method _has_expired with self and key as arguments.
call the self._lock.writer method, with the result perform the following,
convert return value of the function time.time to an integer, increment timeout by it.
if _supported is None,
raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
if return value of the code_changed function is true,
raise an exception.
call the method formats.number_format with 2 arguments: number and absolute value of p,
substitute sixth element of row for value under the 'decimal_places' key of the field_params.
if self._wrapped is empty,
get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,
try,
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.
call the method template.render with an argument context, return the result.
call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.
if first element of bits is not equal to string 'and',
try,
from django.conf import settings into default name space.
try,
return tuple containing 3 elements: RAW, an empty dictionary and stream.
help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
define the method _should_delete_form with an argument self.
if self.connection is false,
call the method now.decode with an argument string 'utf-8', substitute the result for now.
from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
if newretval is not None,
get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.
only if v.Serializer.internal_use_only is false, return the resulting list.   define the function get_deserializer with an argument format.
call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
if kwds is true,
if ValueError exception is caught,
sort all_files and return it.
from django.core.validators import validate_ipv4_address.
raise a NotImplementedError with an argument string
call the method text.__html__, return the result.
allow_multiple_selected is boolean False.
for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ',   substitute it for field_desc.   append string ')' to field_desc.
if length of self._cache is greater or equal to self._max_entries,
return result.
define the method __repr__ with an argument self.
substitute conditional_escape for escaper.
call the method self.translate_token with an argument token, append the result to mapped_tokens.
call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
derive the class Select from the Widget base class.
from django.utils.itercompat import is_iterable into default name space.
'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.
write data to fp.
try,
from django.conf import settings into default name space.
substitute name for handler.name.
join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',
import module warnings.
substitute years for self.years.
from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
substitute complain for reverse.
and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',
call the method httpd.serve_forever.
call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.
if not,
set the file position pointer at the beginning.
if field_type equals a string 'DecimalField',
instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:
if bytes is smaller than KB,
if not,
call the function os.unlink with an argument work_file.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
if safe is true and arg is not equal to string ';',
do nothing.
if self.verbosity is greater or equal to integer 2,
from django.utils.functional import cached_property into default name space.
help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
substitute hashlib.sha256 for digest.
if commit is false,
if not,
define the method has_key with self class instance, key and version defaulting to None as arguments.
from io import BytesIO into default name space.
substitute self.is_localized for widget.is_localized.
call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
call the self.request_class method with environ as an argument, substitute the result for request.
if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,
call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,
call the function tempfile.mkdtemp, substitute the result for tmpdir.
convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
replace this value with v.   call the function dictvalue with el as argument for every el in values of dictionary cc,
call the M.set method with the key, real_value, coded_value as the arguments.
default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).
replace every occurrence of '"' in s with '&quot;'.
define the method __repr__ with an argument self.
call the method field_stream.read, substitute the result for data.
increment key by kwd_mark.
get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',
filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.
evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding,
help is a string "Updates database schema. Manages both apps with migrations and those without.".
if 'warning' is contained in kwargs,
return kwargs.
if self does not have 'bad_cookies' attribute,
define the method __init__ with 5 arguments: self, location set to None, base_url set to None, file_permissions_mode set to None,
if t.token_type equals TOKEN_BLOCK,
integer 0 and integer 0.   try,
if re.error, renamed to e, is caught,
for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,
define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
if ImportError, renamed to exc, exception is caught,
define the method strftime with 2 arguments: self and fmt.
strip f of whitespaces and append it to plist.
evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
if StandardError, renamed to e, exception is caught,
define the method render with 2 arguments self and context.
if name is callable object,
call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
call the method p.find with bytes string '=' as an argument, substitute the result for i.
substitute c_void_p for PVOID.
substitute kwargs for media_attrs.
return an empty dictionary.
if use_workaround is boolean False,
try,
for every path in self.locale_paths,
raise a ValidationError exception with arguments self.message and code set to self.code.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
call the function _slugify with an argument value, return the result.
call the method self.as_ul, return the result.
quant is an empty list.
default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
substitute value under the database key of the connections dictionary for connection.
ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase,
call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
if pot_path file path exists,
get opt attribute of the opts object, substitute it for value.
raise an exception.
if not,
from django.template.defaultfilters import date into default name space.
define the function addslashes with an argument value.
call the method self.items, for every field and errors in the result.
substitute result.queryset for result.queryset.
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
from django.conf.locale import LANG_INFO.
define the method setdefault with 3 arguments: self, key and default set to None.
break the loop execution.
define the method __iter__ with an argument self.
call the method data.getlist with an argument name, return the result.
call the function force_text with an argument base, substitute the result for base.
if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text,
call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,
substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.
for every key and value in list created out of the elements of the result of the call to the method attrs.items,
from yaml import SafeLoader, SafeDumper into default name space.
sum index and length of self._boundary, substitute the result for next.
decorator function register.filter with an argument is_safe set to boolean True.
define the function fix with an argument match.
define the method nud with 2 arguments: self and parser.
append iso_input to val.
tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS',   tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.   define the function reset_format_cache.
kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,
if VariableDoesNotExist exception is caught,
import module errno.
from datetime import datetime into default name space.
if new_errors is not an iterable object raise an error with error message "The function %r did not return a list. All functions registered with the checks registry must return a list.", with '%s' replaced by value of check.
substitute stream for self._stream.
define the function reraise with 3 arguments: tp, value and tb set to None.
define the method handle_merge with arguments self, loader and conflicts.
if ValueError or TypeError exceptions are caught,
cookies is a string '<could not parse>'.
if not self.extra_context is an empty dictionary.   remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context,
return self.field.widget.is_hidden,
return directories and files.
ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.
return decorator.
define the method validate with arguments self and value.
do nothing.
for every message in email_messages:
for every key and value in items of dictionary self,
and unpacked dictionary kwargs.   for every v in self.value call the function force_text with an argument v, add the result to a set,
if AttributeError exception is caught,
try,
call the method request_finished.connect with argument update_watch.
substitute self._meta for opts.
if length of bits is lesser than integer 2,
define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,
with self.mutex perform,
return boolean True.
position the file pointer at the start of the self.file file.
define the function get_urlconf with an argument default set to None.
intrans is boolean False.
format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
raise CommandError exception with string "This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.", as argument.
call the method self.prepend_token with an argument token,
widget is an instance of HiddenInput class
derive class Command from the TemplateCommand base class.
define the method has_other_pages with an argument self.
_encoding is None.
return all the integers from the integer 1 to the self.num_pages.
silent_variable_failure is an boolean True.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the function sql_indexes with 3 arguments: app_config, style and connection.
define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
if message_context is true,
do nothing.
call the method self._setup.
from django.core.exceptions import DisallowedRedirect into default name space.
append x converted to an integer to bits.
call the method logging.Handler.__init__ with an argument self.
call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
if self has an 'error_dict' attribute,
from django.utils import lru_cache into default name space.
substitute self._upload_handlers for handlers.
for every k and v in return value of the ret.items function,
define the mehod __lt__ with self and other.
if not,
call the function _trans.get_language, return the result.
otherwise if call to the method finder.find_module with an argument name evaluates to true,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
define the method message with argument self.
define the method popitem with an argument self.
for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren',   and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.   append string '_fork' to flup_module.
for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
decorator function wraps with an argument fset.
replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.
try,
call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append',
if autoescape is true and safe_input is false,
substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.
if not, shutdown_message is an empty string.   if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
self.filters is an empty dictionary.
call the method apps.get_app_configs, substitute the result for app_configs.
if self._dir file path does not exists,
p is image parser object, set by calling the PillowImageFile.Parser method.
evaluate the function import_string with middleware_path as argument, substitute the result for my_class.
get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.
if locales is true,
if call to the method finder.find_module with an argument name evaluates to true,
if CommandError exception is caught,
define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,
raise an ValueError with an argument string "attempted relative import beyond top-level package".
do nothing.
call the function mark_safe with an argument, elements of bits joined into a string, return the result.
from django.utils import six into default name space.
define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
from django.db.migrations.writer import MigrationWriter into default name space.
app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None,
strip g of '"' from both ends,
convert data to string, substitute it for data.
substitute buf_size for self.buf_size.
define the method setdefault with 3 arguments: self, key and default.
for model in self.models append model._meta.db_table to a list, substitute the resulting list for table_names.
from threading import Lock into default name space.
if self.cmd._called_from_command_line is true,
for every sql in index_sql,
if result is not None,
get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
define the function rmtree_errorhandler with 3 arguments func, path and exc_info.
if nodelist is an instance of NodeList and node is not an instance of TextNode class.
call the method self.next_token, substitute the result for self.current_token.
derive the class StreamingHttpResponse from the HttpResponseBase base class.
if verbosity is greater or equal to integer 2,
call the self.close method.
called with an argument w, and sub_widgets as an empty string, append the result to output.   call the function format_html with 3 arguments: self.outer_html,
get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.
msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.
as the arguments, substitute the result for response.   try,
return data.
skip this loop iteration.
raise CommandError exception, with sring "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." as argument, substitute '%s' with self.program.
append form to self.saved_forms.
derive the class EntitiesForbidden from the DefusedXmlException base class.
from django.utils.six.moves import http_cookies into default name space.
import module sys.
substitute self._stream for stream.
call the function _ with an argument string 'a.m.', return the result.
call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
define the method pk_is_not_editable with an argument pk.
compile the regex from the raw string "((^|[^%])(%%)*%[sy])", substitute the result for _illegal_formatting.
except if AttributeError is caught,
call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
try,
define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,
if self.required is true and value is false,
define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
substitute self.deleted_forms for forms_to_delete.
import module json.
call the method __copy__ with an argument unpacked list self.dicts, return the result.
if ValueError exception is caught,
substitute next for advance_iterator.
if commit is true,
intrans is boolean True.
sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
if best_doublecolon_len is greater than integer 1,
define lambda function that returns self.file.read field, use it as an argument for property function, put the result in read.
remove original_path directory.
substitute abspath for abspathu.
call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.
otherwise if self._meta.fields is true and field is not contained in self._meta.fields,
do nothing.
from django.utils.http import urlquote into default name space.
call the method self.fields.values, for every field in result,
delete the value under the 'Content-Transfer-Encoding' key of self dictionary.
if self._is_rendered is false,
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
if arg starts with options,
call the method handler.endElement with an argument string 'item'.
convert self to a list and return it.
join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,
convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.
yield nothing.
return value.
return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,
if size of c_ulong does not equals to size of c_void_p,
get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.
locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.
raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with"
if not,
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,
if column_name is contained in indexes,
define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.
get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.
call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.
from django.utils.module_loading import import_string into default name space.
if f.primary_key is true,
substitute value under name key of handlers dictionary for handler_config.
replace every occurrence of '\t' in s with '\\t'.
return self._fname.
get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.
substitute message.error_dict for message.
define the method handle with 3 arguments: self and unpacked dictionary options.
left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
from django.core.cache.backends.db import BaseDatabaseCache into default name space.
from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.
define the function Deserializer with arguments object_list and unpacked dictionary options.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
_format_modules_cache is an empty dictionary.
if o is an instance of datetime.datetime object.
if ImportError exception is caught.
split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
nofollow_attr is an empty string.
return an empty string.
if not,
substitute second element of bits without the first and last element for format_string.
update defaults dictionary with kwargs.
substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,
if args is None,
derive the class CacheClass from the DatabaseCache base class.
if loader is an instance of six.string_types,
call the function _add_doc with 2 arguments: b and string """Byte literal""".
if s is an instance of an object Promise.
define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
substitute serialize for __bytes__.
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
if field is an instance of InlineForeignKeyField class,
get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
substitute value under the KEY key of the root dictionary for oldkey.
from __future__ import unicode_literals into default name space.
skip this loop iteration.
import module sys.
call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments:
if message has an 'error_dict' attribute,
initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.   if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
append string '</select>' to output.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
call the method connection.cursor, with the result renamed to cursor, perform the following,
if as_form is true,
convert base to lowercase, if it ends with string '.tar',
if template has an attribute 'render',
if value under the 'author_link' key of the self.feed dictionary is not None,
define the method render with 2 arguments: self and context.
try,
substitute base for m.
self.models is an empty set.
try,
call the function now.replace with microseconds set to integer 0, substitute the result for now.
if inplural is true,
split extra_classes into words, by whitespaces, substitute the result for extra_classes.
define the method handle_template with 3 arguments: self, template and subdir.
from django.conf import settings into default namespace.
set opname attribute of cls object to opfunc.
and input_format, substitute the result for v.   substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.   define the function all_valid with an argument formsets.
call the function blankout with 2 arguments: p and 'F', write the result to out.
define the method e with an argument self.
if self.urlconf_name is an instance of a list type and its length is not zero.
from django.core.management.color import color_style and no_style into default name space.
call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
if 'HTTP_HOST' is contained in self.META,
increment self.buffer by chunk.
call the method copy.copy with an argument self, substitute the result for result.
call the method archive.extract with arguments: filename and tempdir.
define the function decorating_function with an argument user_function.
get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
trans_real._translations is an empty dictionary.
skip this loop iteration,
call the function _trans.activate with an argument language, return the result.
import module warnings.
return filenames.
substitute EscapeBytes for EscapeString.
WARNING is integer 30.
call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
convert cull_frequency into an integer and substitute it for self._cull_frequency.
call the function socket.getfqdn, substitute the result for self._fqdn.
if not,
call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
define the method __init__ with 2 arguments: self and content.
call the method self.check,
substitute context.autoescape for old_setting.
define the function escapejs_filter with an argument value.
derive the class HttpResponseBadRequest from the HttpResponse base class.
if not,
property decorator,
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
call the function get_language, substitute the result for language_code.
substitute the result for final_attrs.   call the method self.is_checked, if it evaluates to true,
return self.limit_choices_to.
substitute var for self.var.
call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.
if pattern is an instance of RegexURLResolver class,
import module django.
call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
call the method self.tag_function with an argument name, return the result.
call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.
if it is not equal to stat.S_IREAD,   raise an exception.
value is boolean False.
import module os.
call the method self.make_bytes with an argument content, append it to self._container.
if app_output is true,
if self._read_started is true and self doesnt have an '_body' attribute.
call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.
define the method splitext with arguments self and the_path.
second 2 elements of seventh element of hextets converted into hexadecimal number,   first 2 elements of eight element of hextets converted into hexadecimal number,   second 2 elements of eight element of hextets converted into hexadecimal number.   join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
called with the argument microseconds set to integer 0, on the result of the method value.time.   return list containing 2 elements: None and None.
substitute link_prev for value under the PREV key of the link_next dictionary.
if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class,
if now is false,
default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys',
and 'Comment' for TOKEN_COMMENT.   FILTER_SEPARATOR is a string '|'.
from django.utils import six into default name space.
if Exception, renamed to e, exception is caught,
if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
smart_text function, return the result.   if not,
return s.
call the function token.split_contents, substitute the result without the first element for bits.
define the method T with an argument self.
call the method self._deleted_form_indexes.append with an argument i.
try,
define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,
if self._wrapped is empty,
call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
define the function flatatt with an argument attrs.
define the method to_python with arguments self and value.
sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.   if path is not None,
define the function unordered_list with 2 arguments value and autoescape set to None.
from django.core.management import call_command into default name space.
raise an ValueError exception with an argument string "Unsupported version: %s" formated with value under 'version' key of config dictionary.
substitute name for filter_func._filter_name.
define the function strip_tags with an argument value.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
if ValueError exception is caught,
from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.
yield string "# Feel free to rename the models, but don't rename db_table values or field names." as the result.
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
if not,
if field.rel.to._default_manager has an attribute 'get_by_natural_key',
call the function is_aware with an argument o, if it evaluates to true,
define the method prepare_value with arguments self and value.
call the method self.handle_m2m_field with arguments obj and filed.
execute code statement """exec _code_ in _globs_, _locs_""".
import module tarfile.
define the method render with 2 arguments: self and context.
return boolean True.
import module cgi.
call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.
call the mail.send method with fail_silently=fail_silently as argument.
and RemovedInDjango19Warning.   get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.
if f is an instance of ManyToManyField,
otherwise returns s.   call the method connection.cursor, with the result as cursor,
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
from django.core.files import locks and File into default name space.
call the function walk_to_end with 2 arguments: ch and pattern_iter.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
call the method base.__dict__.items, for every attr and value in the result,
derive the class SignatureExpired from the BadSignature base class.
kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',
define the function compare_ordering_key with an argument k.
substitute self for result.parent.
try,
if root is true,
an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.   template is a string '%(input)s'.
if self.can_order is true,
value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,
existing_headers is a set of lowercase headers for every header in vary_headers.
define the method render with 2 arguments: self and context.
string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.   derive the class Resolver404 with Http404 as base class.
substitute kwargs for self.kwargs.
if IOError, renamed to e, exception is caught,
yield v.
if fifth and sixth elements of row are None,
renamed_methods is an tuple.
kwargs is a dictionary with boolean True for 'pk_field'.
append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
call the method RE_DATE.match with an argument value, substitute the result for match.
if match is true,
try,
return lookup_view
derive the class Command from the BaseCommand class.
call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.
import module itertools.
if safe is true,
strip path of all leading '/' and '\\' characters, substitute the result for path.
substitute obj for the value of the memo dictionary at the identity of the self object key.
return self.__name.
_func_globals is a string "func_globals".
if use_func is true,
if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.   if Exception exception is caught,
if tablename is contained in return value of the method connection.introspection.table_names,
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
call the method m.groupdict, substitute the result for d.
call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
if loader is an instance of tuple or list,
dependencies set to new_operations and replaces set to replaces.   call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label,
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
derive the class SimpleNode form the base class TagHelperNode.
if initial_forms is grater than self.max_num is grater or equal to integer 0,
reuturn cache.
split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
leave_locale_alone is boolean False.
return default_key_func.
for every arg in the result,   if arg is an instance of Promise class,
define the method __add__ with 2 arguments self and rhs.
if not,
substitute _itervalues for itervalues.
substitute '%s' with title in the string " [ ] %s", write it to the standard output.
if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
escaper is an identity lambda function.
if not,
if fourth element of attr_list and termios.ECHO are both true,
substitute result for self.find_template_cache dictionary value under the key key.
if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
property decorator,
define the method create_variable_node with 2 arguments: self and contents.
if package is false,
substitute os.unlink for unlink.
if TypeError or AttributeError exceptions are caught,
otherwise, value under the 'max_digits' key of the field_params is integer 10.   if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params,
decorator stringfilter,
substitute filter_expression for self.filter_expression.
return value of the function re.escape called with an argument BLOCK_TAG_START,   return value of the function re.escape called with an argument BLOCK_TAG_END,   return value of the function re.escape called with an argument VARIABLE_TAG_START,   return value of the function re.escape called with an argument VARIABLE_TAG_END,   return value of the function re.escape called with an argument COMMENT_TAG_START,   and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.   libraries is an empty dictionary.
if ValidationError, renamed to e, is caught,
call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
return self._num_pages.
if msg is true,
raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
define the method format_subject with 2 arguments: self and subject.
take all but the length of path_info last elements of script_url, substitute it for script_name.
from importlib import import_module into default name space.
define the method t with an argument self.
call the method self.autocomplete.
do nothing.
if not,
return boolean False.
substitute third element of url_fields for second element of url_fields.
if lengths of initial and data are equal,
replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
from django.core.management.base import AppCommand into default name space.
import module os.
do nothing.
if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.
open pythonrc, with the file handle renamed to handle perform the following,
convert result to lowercase and return it.
from django.core.management.base import BaseCommand and CommandError into default name space.
call the sys.stderr.write function with an argument msg.
collect is an empty list.
call the method template.render with an argument context, substitute it for content.
call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.
define the method load with self class instance and rawdata as arguments.
if self equals to other return boolean False, otherwise return boolean True.
self._current is None.
break from the loop execution.
input_type is a string 'checkbox'.
if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.
yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
define the method temporary_file_path with argument self.
for every root in settings.ALLOWED_INCLUDE_ROOTS,
if kwds is true,
df is an instance of DateFormat class, created with an argument value.
call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.
return cached.
do nothing.
models is a string 'models'
return an empty string,
join statements into a string, separated by newlines, return it.
for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k,   substitute the resulting dictionary for kw.   call the method datetime.date with an argument unpacked dictionary kw, return the result.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
for every o in opts,
if text has an '__html__' attribute,
return boolean False.
derive the class BadSerializer from the object base class.
define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
if AttributeError exception is caught,
if formatter is true,
call the DefaultCacheProxy function, substitute it for cache.
derive the class TokenBase from the object base class.
get type of self, call it and substitute the result for result.
call the method parser.delete_first_token.
substitute URLInput for widget.
_format_cache is an empty dictionary.
from importlib.util import find_spec as importlib_find.
if e.errno is not equal to errno.EEXIST,
call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,
if not,
if ignore is true and field_name is not contained in model_fields,
substitute the result for value under the field key of the self._errors dictionary.   if not,
define the method __deepcopy__ with arguments self and memo.
old_style_list is boolean True.
decorator stringfilter,
zip val1 and va2 into list of tuples, for every x and y in the result,
define the function urlsafe_base64_encode with an argument s.
substitute force_text for force_str.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
substitute value under the database key of the connections dictionary for connection.
call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
cls.__dispatch is an empty dictionary.
if not,
apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
exc_info is an tuple with 3 elements: None, result of method record.getMessage and None.
substitute item_date for latest_date.
call the method self.common_logger_config with 3 arguments: root, config and incremental.
from importlib import import_module into default name space.
otherwise if name equals a string 'id'.
join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,
if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.
if key is contained in dict_,
substitute content for self.content.
replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.
call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,
call the method self.configure_root with an argument root.
if self.can_delete is true,
define the method compress with arguments self and data_list.
convert provided into a list and substitute it for provided.
append f.name to exclude.
define the method forms with an argument self.
add integer 1 to it, substitute the result for space.   if space equals integer 0,
derive the UploadedFile class from the File base class.
call the function _import_module with an argument self.mod, substitute the result for module.
use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5,   put the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call,
move integer 1 left for 50 bits, substitute the result for PB.
if limit is None or length of x is lesser than or equal to limit,
define the method a with an argument self.
attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.
call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
skip this loop iteration,
call the function import_string with argument backend.
call the function force_text with an argument text, substitute the result for text.
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
define the function split_domain_port with an argument host.
define the function set_script_prefix with an argument prefix.
self.filters is an empty dictionary.
define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
if not,
derive the class EmailBackend from the BaseEmailBackend base class.
define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,
if the key doesnt exists substitute None for self.selected_fields.   remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,
define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,
unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,
if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
if leading is true,
substitute self.max_value for the value under the 'max' key of the attrs dictionary.
call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
if endbmatch is true,
define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
get the position of the self.file file pointer, substitute it for pos.
remove first element of text.
if not,
if elt is an instance of Group class,
if not,
call the params.get method wit string 'VERSION' and integer 1 as arguments, substitute the result for self.version.
if extra_attrs is true,
message_context is None.
for every refto and refs in return value of references.items method.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
param is None.
if self.leave_locale_alone is false,
for f in file_list,
last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
if not,
substitute the result for args and kwargs.   return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
buf is an instance of StreamingBuffer class.
call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.
derive the class RadioChoiceInput from the ChoiceInput base class.
from django.utils import six into default name space.
return FILE_INPUT_CONTRADICTION.
and help set to string 'Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color',
substitute locale_dir for self.locale_dir.
convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
and string '~/.pythonrc.py' as tuples second element.   if pythonrc is true,
from django.utils import six into default name space.
fixture_files is an empty list.
with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.   raise an TypeError exception with an argument msg.
__Y2 is a raw string '(?P<year>\d{2})'.
define the function force_escape with an argument value.
call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,
open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
call the method _time.localtime with an argument stamp, substitute the result for tt.
derive the class Command from the BaseCommand class.
return nothing.
return retval.
ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
if self.timezone is true,
return boolean False.
raise an TemplateDoesNotExist exception with an argument string "No template names provided".
m is an instance of Media class.
raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.",
substitute upload_handlers for self._upload_handlers.
derive the class RegexURLResolver with LocaleRegexProvider as base class.
msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced,
property decorator,
define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
call the function _ with an argument string 'midnight', return the result.
and param_dict, respectively.   evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.
define the method __setstate__ with 2 arguments: self and obj_dict.
define the method __init__ with 2 arguments: self and nodelist.
initial is an empty list.
if not,
append list containing string '--no-location' to self.msgattrib_options.
from django.utils import six into default name space.
call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
if ImportError exception is caught,
vary_headers is an empty list.
use the result as an key to get the value of the form.data dictionary, assign it value None.   use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.
append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
call the value.natural_key method, substitute the result for natural.
define the function find_filter with 2 arguments: self and filter_name.
substitute setting and nodelist for self.setting and self.nodelist, respectively.
call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
if trim is true,
from django.apps import apps into default name space.
if self.file_path file path exists and it is not a directory,
app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,   and db set to db.   define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
define the method tell with an argument self.
convert app_template_dirs to a tuple, return it.
call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.
call the function exec_ with an argument string """def reraise(tp, value, tb=None):    raise tp, value, tb""".
define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,
self._callback is None.
allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
call the method self.resolve with an argument value, return the result.
import module json.
substitute factory for value under '()' key of config dictionary.
if not,
raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
if format_module_path is None.
define the method utcoffset with 2 arguments self and dt.
called with an argument error, for every error in bf.errors, substitute the result for bf_errors.   if bf.is_hidden is true,
from django.utils import six into default name space.
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
get the value under the ext key of the extension_map dictionary, substitute it for cls.
if key starts with self.prefix.
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
define method set_cdata_mode, with self class instance and tag as the arguments.
self._container is an list.
if errors is True,
call the function import_module with 2 arguments: string .management and app_config.name.
from __future__ import unicode_literals into default name space.
output is an empty list.
return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
call the function import_string with an argument logging_config, substitute the result for logging_config_func.
define the method __getattr__ with arguments self and name.
call the method final_output.extend with an argument output.
help is a string 'Discover and run tests in the specified modules or the current directory.'.
call the method cache.clear.
raise a ValidationError exception with arguments self.message and code set to self.code.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
skip this loop execution,
define the method tzname with 2 arguments: self and dt.
raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,
replace '%s' in string '</%s>' with tag, append the result to out.
return boolean True.
if length of bits is not zero,
decrement by length of password, create bytes string with previous result number of characters '\x00',
otherwise if value is an instance of datetime.date,
return _wrapper.
append entry to files list.
evaluate pickle.loads with argument pickled, return the result.
define the method clear with argument self.
define the method render with 4 arguments: self, name, value and attrs set to None.
do nothing.
if f.db_index is true,
do nothing.
from django.utils.translation import ugettext_lazy as _ into default name space.
substitute _itervalues for values.
return a list containing first element of source and a list containing params.
if not,
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
call the function os.path.dirname with argument full_path, substitute the result for directory.
dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".   call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true',
define the protected method _cull with self class instance, db, cursor and now as arguments.
evaluate the function smart_text with an argument value, return the result.
if s is an instance of an object bytes.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
if response is True,
define the method _iter with an argument self.
if not,
define the method upload_handlers with an argument self.
if not,
if id_ is true,
from django.core.exceptions import ValidationError into default name space.
name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset,   and content_type_extra set to self.content_type_extra, return it.   define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.
get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
substitute object for Iterator.
if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression.   define the function is_writable with path as argument,
raise CommandError with an argument string "Unable to serialize database: %s", where '%s' is replaced with e.
derive the class CallbackFilter from logging.Filter base class.
with call to the function transaction.atomic with using set to connection.alias as argument,
substitute next for self.next.
define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
substitute url for display_url.
decorator stringfilter,
call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
substitute value under name key of logging._handlers dictionary for handler.
define the method __init__ with 2 arguments: self and name.
define the get_str_from_wsgi function with environ, key and default as arguments.
define the function yesno with 2 arguments value and arg set to None.
define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the function slugify with an argument value.
define the method clean with an argument self.
define the method __init__ with 3 arguments: self, offset set to None, name set to None.
substitute length of text for end.
break from the smallest enclosing loop.
from itertools import dropwhile into default name space.
return a list with an element tuple with 2 elements: an empty string and an empty list.
if 'class' is contained in attrs,
define the method filter with 2 arguments: self and record.
if settings.configured is false,
call the method MIMEMessage.__setitem__ with arguments self, name and val.
for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
if self.verbosity is greater than integer 0,
if app_label is not contained in executor.loader.migrated_apps,
define the method __eq__ with arguments self and other.
self._ordering is an empty list.
read chunk_size bytes from the old_file file, substitute the result for current_chunk.
interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.   if self.verbosity is greater or equal to integer 1,
call the function parser.compile_filter with an argument arg for every arg in args from first element to the end,
if saved_locale is not None,
otherwise if common_prefix is None,
for every i and line in enumerated iterable table_output,
if self.errors is true and self.form has an attribute 'error_css_class',
decorator method register.tag with an argument 'block',
try,
define the function unescape_entities with an argument text.
renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.
decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
define the method add_arguments with arguments self and parser.
must_be_first is boolean True.
if file path sql_file exists,
if only_new is true,
define the method set_many with 4 arguments: self, data, timeout set to DEFAULT_TIMEOUT and version set to None.
if urlconf_name is true,
if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.
g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.
define the method error with 3 arguments: self, token and msg.
do nothing.
get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
return value
from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.
call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the
template is an instance of Template class, created with an argument content.
if typed is true,
call the method Model._meta.get_field with an argument field_name, substitute it for field.
references_to_delete is an empty dictionary.
if six.PY3 is true,
import module errno.
if refto is contained in seen_models,
call the method self.incr_version with key, negative delta and version as arguments.
if loader is not None,
define the functionbase36_to_int with an argument s.
call the method token.split_contents, substitute results without the first element for bits.
self._producer is an empty list.
if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.   define the method clear with an argument self.
define the method _set_regex with arguments self and regex.
otherwise is settings.USE_TI is true,
raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s",
if self.allow_empty_file and file_size are both false,
for integer representation of z converted into a string.   define the function escapejs with an argument value.
convert value into a string, take character at the negative arg index, convert it into an integer, return it.
import module re.
call the function time.sleep with argument integer 1.
for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP",
increment i by integer 1,.
call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.
self._max_entries is integer 300.
call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w',
if not,
dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.   call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells,
if data is true,
if exception OSError, renamed to e, is caught,
substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.
replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,
define the method _set_queryset with 2 arguments: self and queryset.
substitute ngettext for ungettext.
if empty_label is an instance of list or tuple type,
return an empty string,
return nothing.
if not,
substitute empty for self._wrapped.
property decorator,
property decorator,
raise a ValidationError exception with arguments self.message and code set to self.code.
if fp is None,
call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,
try,
from django.core.management.base import BaseCommand into default name space.
from django.utils import six into default name space.
call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
define the method parse_endtag with self class instance and i as the arguments.
if whitelist is not None
do nothing.
if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
from django.utils.encoding import force_st into default name space.
call the method self.close.
if representative is None,
call the function local, substitute the result for self._caches.
derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
call the method text.splitlines with an argument boolean True, for every line in the result,
if field.show_hidden_initial is false,
get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty,
if basetype equals a string 'text',
if errors is true,
existing_headers is a set containing lowercase strings header for every header in vary_headers.
return nothing.
append string "Field renamed because it was a Python reserved word." to field_notes.
return boolean False.
define the method loaders with an argument self.
substitute exception for self.exception.
define the method __init__ with 3 arguments: self, attrs set to None and format is None.
otherwise if self.fixture_object_count equals self.loaded_object_count,
value is None.
call the function supports_color, if evaluates to False,
exit the program with the code integer 1.
_localtime is an instance of LocalTimezone class.
if not,
define the method __copy__ with an argument self.
call the function six.text_type with s as an argument, substitute the result for s.
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
return the value under the language_code key of the self._namespace_dict dictionary.
for every taglib in bits without the first element,
define the method _get_request with self class instance as argument.
return self.object_list element at index.
get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
call the method value.encode with an argument charset.
call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
define the function gettext_noop with an argument message.
substitute complain for insert.
from django.utils.functional import total_ordering into default name space.
define the method __reduce_ex__ with 2 arguments self and proto.
call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.
return boolean False.
otherwise if cahr equals a string '\\',
try,
raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
substitute app_name for self.app_name.
convert config_string to lowercase and split it by ';' character, substitute the result for parts.
for every p in plist,
define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if length of password is greater than inner.block_size,
output is an empty string.
try,
define the method urlconf_module with an argument self.
substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
call the function get_language, substitute the result for language_code.
define the function new_date with an argument d.
if value is true and character ':' is contained in value,
raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'",
raise an exception,
return None.
call the function handle_default_options with an argument options.
define the method __init__ with 2 arguments: self and name.
from django.utils import six into default name space.
import module codecs.
locales is a difference between the locales and exclude sets.
evaluate the function backend_cls with location and params as arguments, return the result.
where '%s' is replaced with command and result of the function get_text_list called with an argument list,   with p converted into a string and surrounded with single quotes for every p in parse_until.   call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command,
if self.verbosity is greater or equal to integer 1.
define the method _cache with self class instance as an argument.
cmp_fmt is None.
if not,
call the method connection.check_constraints with an arguments table_names set to table_names.
if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
self.namespace and self.regex.pattern, respectively. return it.   define the method _populate with an argument self.
from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.
convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
substitute complain for remove.
otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,
try,
initial_set is set created out of return values of the function force_text called with an argument value,
raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s",
return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
from django.conf import settings into default name space.
convert git_changeset to string, append it to the string '.dev', replace it for sub.
return integer 0.
indent contain tabs number of tab character.
define the function module_has_submodule with 2 arguments: package and module_name.
substitute max_value and min_value for self.max_value and self.min_value.
define the method render with 2 arguments: self and context.
put the results into a list, substitute self.locale_paths for it.   substitute first element of self.locale_paths for self.default_locale_path.
if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
and trimmed, write the result to out.   for every part in singular,
if self.instance.pk is None,
call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',
if exception PermissionDenied is caught,
substitute block for value under the 'block' key of context dictionary.
return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
if not,
if KeyError exception is caught,
return a string '%02d' formated with self.data.month.
define the method clean with 2 arguments: self and value.
define the method _set_size with arguments self and size.
for every app_label and app_migrations in result of the method changes.items,
call the method self._start_relational_field with the argument field.
if comment_notes is true,
with the result renamed to fp, perform the following:   call the method fp.write with an arguments src_data.
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,
return settings.LANGUAGE_CODE.
num_pages is a property object with _get_num_pages as a getter method.
value under the 'unique' key of the extra_params dictionary is boolean True,
append string "Field renamed because it contained more than one '_' in a row." to field_notes.
define the method prepare_value with 2 arguments: self and value.
if not,
call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,
from django.utils import six into default name space.
for every slots_var in slots,
substitute table for self._table.
increment s_len by integer 1,
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
substitute value under the key key of self dictionary for val.
replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method,
return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
if not,
define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
substitute user_function for wrapper.__wrapped__.
call the method next with an argument bits, substitute the result for bit.
return yes.
if mw_instance has an attribute named 'process_request'.
if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.
has_bz2 is boolean False.
from django.core.exceptions import ValidationError into default name space.
if value is false,
substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
if autoescape is true,
call the method self.fields.items, for every name and field in result,
self._reverse_dict is an empty dictionary.
if self.limit_choices_to object is callable,
define the method __hash__ with an argument self.
if values under "author_name" and "author_email" keys of the item dictionary are both true,
define the function firstof with 2 arguments: parser and token.
convert arg to an integer, substitute it for p.
if response is True,
if site is contained in sites2,
call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.
call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,
substitute logging.getLogger for getLogger.
replace every occurrence of arg is value for an empty string, substitute the result for value.
call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs,
trimmed is boolean False.
if format is not contained in _serializers,
define the method __getitem__ with 2 arguments: self and idx.
call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.
substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.
define the method to_python with arguments self and value.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
if options.pythonpath is true,
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,
call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
call the method block_context.push with 2 arguments: self.name and push.
from django.utils import six into default name space.
return boolean False.
if values is None,
name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.   from django.conf import settings into a default name space,
read data from buf, yield the result.
return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.
from django.utils.text import get_text_list and capfirst into default name space.
call the function copy with an argument self, substitute the result for new_context.
if value under the 'liveserver' key of the options dictionary is not None,
encoding is None.
if ending is None substitute self.ending for ending.
substitute the result for the value under the 'month' key of the html dictionary.   for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list,
status_code is an integer 302.
join elements of pieces into a string, return it.
for every model in model_list,
if not,
weight is an integer 0.
__version__ is a string "1.6.1".
raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.
from django.conf import settings into default name space.
define the method errors with an argument self.
move integer 1 left for 30 bits, substitute the result for GB.
instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__,
define the method popitem with an argument self.
_itervalues is a string "values".
substitute cache.get for cache_get.
call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner.
call the method self.merge with an argument translation.
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
call the function _trans.get_language_bidi, return the result.
define the method to_python with arguments self and value.
from django.conf import settings into default name space.
if settings.ADMINS is false,
call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,
call the function _load_serializers.
substitute unicode for text_type.
with return value of the function transaction.atomic with using set to db as arguments, perform the following,
7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.   MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,
otherwise id change equals to I18N_MODIFIED,
app_configs is not None.
return iterable self.keyOrder.
call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.
define the function timesince_filter with 2 arguments value and arg set to None.
call the function digest with an argument password, call the method digest on the result, substitute the result or password.
if not,
if only_initial is false,
raise an exception.
substitute new_mod for self.mod.
result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument language for 'language',   result of the function to_unicode called with an author_email description for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an argument author_link for 'author_link',   result of the function to_unicode called with an argument subtitle for 'subtitle',   if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function iri_to_uri called with an argument feed_url for 'feed_url',   result of the function to_unicode called with an argument feed_copyright for 'feed_copyright',   if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.   update self.feed dictionary with kwargs.
return self._regex.
try,
import module logging.
if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
return a tuple with 2 elements: integers 1 and 0.
substitute target and expression for self.target and self.expression, respectively.
define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
substitute as_string for as_bytes.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
content_type, length of content, None and None.   decorator classmethod.
define method __exit__ with self, exc, value and tb as the arguments.
update self.tags dictionary with lib.tags.
define the method add_prefix with 2 arguments: self and field_name.
evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL,
return an empty list.
if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
for every f in file_field_list,
_fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.
call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.
skip this loop iteration.
call the method self.source_error with 2 arguments: token.source and msg, return the result.
if event.path ends with string '.mo',
call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
if app_name is an instance of BaseCommands.
otherwise if ch equals a string '(',
call the sign method from the base class of the TimestampSigner class with an argument value, return the result
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
from django.utils.encoding import force_text into default name space.
otherwise if second element of args equals a string '404',
if meta is None,
if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
if ':' is not contained in ip_str.
call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs,
if autoescape is true,
if not,
substitute result for cache dictionary value under the key key.
if character '=' is contained in x,
import stat.
substitute qs for self._queryset.
with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true,   if not, an empty string for 'code'.   return errors.
return rv.
derive the class MultiPartParserError from the Exception base class.
from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
call the function force_bytes with an argument salt, substitute the result for salt.
raise an ValueError exception with an argument string "Base36 input too large".
if sys.platform starts with a string 'java',
call the function to_current_timezone with an argument, substitute the result for value.
substitute pickled for value under the key key of self._cache dictionary.
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
if token_string starts with VARIABLE_TAG_START,
from django.utils.functional import cached_property into default name space.
__all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.
if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,
substitute the result for data.   if AttributeError exception is caught,
call the method value.astimezone with an argument timezone, substitute the result for value.
self.timezone is None.
message, code as a string 'ambiguous_timezone' and params as params,   and third element of the return value of the function sys.exc_info.   return value.
old_handler is None.
input_type is a string 'file'.
return result.
return value under the 'forloop' key of the context dictionary.
for every d in reversed list self.dicts,
if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
from django.forms.formsets import BaseFormSet and formset_factory into default name space.
if KeyError exception is caught,
return value.
return self.size.
if attr is contained in flags,
substitute stream_or_string for stream.
call the method lexer.lex with an arguments js, for every name and tok in the result,
subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,
convert self.file to a string and append '.c' string to it, substitute the result for thefile.
define the function _replace_entity with an argument match.
if max_length is not None,
try,
dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.   call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false',
if fixture_name is not equal to string 'initial_data' and fixture_files is false,
call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
define the method write with 3 arguments self, outfile and encoding.
call the method self.handle_startendtag with tag and attrs as the arguments.
call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
substitute val_expr for self.val_expr.
otherwise if name is not None and filter_func is not None,
for every tag in tags, are false,   for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false,
define the method remove with 2 arguments: self and item.
key is a list with elements of list key from length of self.prefixes index to the end,
from django.db import models into default name space.
self._js is an empty list.
define the method y with an argument self.
if field.rel.to._meta.pk.rel is true,
lexer is an instance of JsLexer class.
if value is None,
raise an CommandError exception with an argument string "You can only use --pks option with one model".
from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,
from django.conf import settings into default name space.
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.
return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang",
if s is instance of a class Promise,
from django.utils.encoding import force_text into default name space.
substitute DNS_NAME for idhost.
and unpacked dictionary kwargs.   define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
from django.utils.module_loading import import_string into default name space.
raise an StopIteration exception.
do nothing.
append value to self._closable_objects list.
join result of the parts function into a bytes string, substitute it for out.
call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
if os.path.exists function with argument name, evaluates to boolean True,
try,
if not,
if PY3 is true,
if encoding equals to string 'utf-8'.
requires_system_checks is boolean False.
if TypeError exception is caught,
return nothing.
if not,
return a string 'Raw content'.
define the method __getitem__ with 2 arguments: self and key.
define the method __repr__ with an argument self.
do nothing.
remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,
call the method self._update_errors with an argument e.
if language_code is not contained in self._regex_dict,
call the method add_arguments from the base class of the class Command, with an argument parser.
try,
substitute data for data_value if data is not None, otherwise data_value is an empty list.
substitute self.waiting_readers for t.
define the method add_item_elements with 3 arguments: self, handler and item.
subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,
call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.
return an integer 0.
call the method context.push with an argument var set to output, with the result perform,
self.default_locale_path is None.
from __future__ import unicode_literals into default name space.
return week_number.
define the method page with self class instance and number as arguments.
return lookup_view.
use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the function get_storage_class with argument import_path=None defaulting to None.
if not,
i is integer 366.
if six.PY3 is true,
return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
return self.find_template_cache dictionary value under the key key.
while path is true,
define the function _string_concat with an argument unpacked list strings.
define the method get_many with 3 arguments: self, keys, and version set to None.
call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
if s is an instance of bytes or Promise and s._delegate_bytes is true,
substitute RadioChoiceInput for choice_input_class.
define the method compile_function_error with 3 arguments: self, token and e.
request_repr is a string "unavailable".
multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
call the method LocaleRegexProvider.__init__ with arguments self and regex.
define the method write with 2 arguments: self and value.
if the key doesnt exists substitute boolean False for self.use_natural_keys.   if self.use_natural_keys is true,
otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.   if rel_to is contained in known_models,
if not,
define validate_name with 3 arguments: self, name and app_or_project.
call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.   append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,
visible_issue_count is an integer 0.
and boolean False, append the result to result.   return result.
if num_entries is lesser than self._max_entries,
define the _setup method with argument self.
call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.
define the method process_default with self class instance and event as arguments.
return boolean True, otherwise return boolean False.   property decorator.
from django.utils import six and lru_cache into default name space.
for every x is the range of integers from level to the integer 2, in the reversed order,
then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.   derive the class DateInput from the DateTimeBaseInput base class.
and help is a string 'Migrations will be squashed until and including this migration.'.   call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',
for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,
import module warnings.
define the method validate with arguments self and value.
substitute args for self.args.
try,
define the function safe with an argument value.
call the function add_to_builtins with an argument string 'django.template.defaulttags'.
convert the result to a lowercase string, substitute it for step.   if not,
with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,
call the method self.get_date_error_message with an argument date_check, append the result to errors.
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other, return boolean True, otherwise return False.
if instance is None,
format_key is a string 'DATE_INPUT_FORMATS'.
call the method value.ljust with an argument, arg converted into a integer, return the result.
define the method discard with 2 arguments: self and item.
raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression",
if value is None,
call the function errors.error_dict.items, for every field and messages in the result,
for app_config in return value of the method apps.get_app_configs,
if not,
if field is an instance of FileField,
_win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
return boolean True.
define the method __len__ with an argument self.
substitute name and value for self.name and self.value.
multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,
if help_texts is true and f.name is contained in help_texts,
docs_version is a string 'dev'.
if not,
python_2_unicode_compatible decorator,
define the function server_bind with an argument self.
do nothing.
if an exception occurred,
return length of value,
year_val and month_val and day_val are set to None.
substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
if self.required is true,
call the os.path.normpath with argument path, return the result.
call the method block_context.add_blocks with an argument self.block.
call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions',
deactivate and deactivate_all are lambda functions returning None.
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments.
'Enter a number.' for 'invalid'.   define the method to_python with arguments self and value.
from django.core.servers.fastcgi import runfastcgi into default namespace.
self._template_response_middleware is an empty list.
return an empty string.
if not,
increment factor by one.
raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
substitute first element of s for quote.
_version is a string "0.91".
import readline.
from django.utils.functional import LazyObject into default name space.
BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,
call the method parser.next_token, substitute the result for endblock.
if script_url is true,
define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.
close the file self.
self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,
from __future__ import unicode_literals into default name space.
if field_type is not equal to string 'TextField(' or string 'CharField(',
if VariableDoesNotExist exception is caught,
if self.is_bound is false,
if the value under the 'test_flush' key of the options dictionary exists,
try,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
call the function import_module with an argument path, substitute it for package.
call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
from django.template import Template and Context into default name space.
self._raw_ipv6 is boolean False.
return boolean False.
yield string "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" as the result.
use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.   evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
for every date_check in all_date_checks,
for every module in templatetags_modules,
substitute Tok.num for self.id.
call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
if is_compressed is true,
otherwise if self.object is an instance of the models.base.ModelBase class,
if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
define the method cache_key with 3 arguments: self, template_name and template_dirs.
split msgs by newline characters, for every line in result,
with the result renamed to fp, perform the following:   write msgs to fp.
call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.   define the method __str__ with an argument self.
substitute utc for tzinfo.
substitute length of content for self.size.
call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
define the method __ne__ with an argument self.
define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
substitute the result for key.   pdict is an empty dictionary.
substitute first size elements of self.buffer for result.
app_list is an instance of a class OrderedDict.
call the function os.fdopen with arguments fd and mode, substitute it for _file.
if statue is not equal to STATUS_OK.
define the function avoid_wrapping with an argument value.
define the method clean with arguments self and value.
call the self.get method with key and version set to version as arguments, return it if it is not None.
try,
substitute first element of base64d for base64d.
call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
define the method loaddata with 2 arguments self and fixture_labels.
if _cached_modules equals to module_values,
return None.
print message to the standard output.
return s.
for every bit in bits.   register.tag decorator function with an argument 'for',
if attrs is not None,
where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
call the function re.compile with an argument raw string "^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)",
substitute message for self.message.
format value into printable data representation with formating rules arg, return the result.
return value.
return result.
substitute first decimal_pos elements of dec_part for dec_part.
if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ",   use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL,   use the result as an argument for the call to the method self.stdout.write.   if not,
return an empty string.
define the function unlock with argument f.
if self._done is true,
call the method _ExpatParser.reset with an argumen sefl.
and substitute the result for self.prefix.   substitute auto_id for self.auto_id.
root is an empty list.
where '%s' is replaced with parsed.scheme.   call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,
bytes_read is integer 0.
define the method clean with arguments self and value.
if settings.DEBUG is true,
return field.to_python.
define the method _get_closed with argument self.
substitute the result for the value under the Model._meta.pk.attname key of data dictionary.   m2m_data is an empty dictionary.
subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,
define the method _cache with argument self.
if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
define the method open with arguments self and mode set to None.
return first element of t converted to lowercase and boolean True, as a tuple.
raise an ValueError with an argument string "'package' not set to a string".
if not,
call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.
replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.",
call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
if filters is true,
define the method ugettext with an argument message.
split tag_re by self.template_string separator, for every bit in result,
define the method __iter__ with an argument self.
derive the class DateTimeInput from the DateTimeBaseInput base class.
call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
call the method self.__cast, return the hash value of the result.
call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.   call the method self.add_fields with arguments form and None.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
call the function re.compile with 2 arguments: raw string "([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)",
call the method field.clean with an argument value, substitute the result for value.
define the method start_index with an argument self.
define the method resolve_context with 2 arguments: self and context.
increment i by integer 1.
call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,
call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
from django.utils.translation import get_language to the default name space.
do nothing.
if ValidationError exception is caught,
call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
call the method self.validate_key with argument key.
messages is an instance of the ValidationError class created with an argument messages.
__caches is an empty dictionary.
skip this loop iteration.
call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,
return self._body.
define the method __setitem__ with arguments self, name and val.
define the function clear_url_caches.
substitute frame.f_globals for _globs_.
import module warnings.
call the method self._stream.unget with an argument unused_char.
and format, return the result.   derive the class RegexField from the base class CharField class.
if name equals string "_wrapped",
otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '"' character,
if AttributeError exception is caught,
dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.   call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true',
if error is an instance of ValidationError,
if filters is true,
if django_po file path exists,
otherwise if self.use_ipv6 is true and _fqdn is false,
self._post_render_callbacks is an empty list.
if not,
if call to the self.is_valid method evaluates to false or self.can_order is false,
compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
substitute third and first element of bits for key and value, respectively.
for every hextet in new_ip,
define the function url with 2 arguments: parser and token.
yield string 'day' as an return value of the generator.
define the method _get_page_range with an argument self.
if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
if match is true,
return res.
add elements from new_modules set to _cached_modules set.
from django.forms.fields import Field and ChoiceField into default name space.
unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.   return _curried.
if self.is_reversed is true,
append a tuple with 2 arguments: filter_func and args to filters.
t is an instance of Template class, created with 2 arguments output and name set to filepath.
get the value under the mem_args key of the cache dictionary, return it.
convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
substitute elements of self.template_string list from upto index to the end for last_lit.
call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
as long as current_chunk is not an empty string,
exit the program with failures converted to boolean as a message.
if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
if app_config.models_module is None.
define the method __len__ with an argument self.
substitute tup for elements of self.
raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s",
append self._regex_validator to self.validators.
if AttributeError exception is caught,
if file path top_dir doesnt exists,
help is a string "Starts a lightweight Web server for development.".
subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.
from django.db.models import AutoField, OneToOneField and ForeignKey.
return plural_suffix.
call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
remove the old_file_name file.
substitute '%s' in a string "Merging %s" with app_label,
define the method configure_formatter with 2 arguments: self and config.
derive the class ExtendsNode from the Node base class.
call the function is_library_missing with an argument path, return the result.
raise an exception.
define _get_files method with self class instance as the argument.
write a string "Resetting sequences\n" to self.stdout stream.
derive the class MaxLengthValidator form the BaseValidator base class.
define the next_space_index with 2 arguments: subject and i.
define the method __repr__ with an argument self.
from django.utils.deconstruct import deconstructible into default name space.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
substitute self.__class__ for obj.__class__.
__D is a raw string '(?P<day>\d{2})'.
do nothing.
otherwise if t.token_type equals TOKEN_VAR,
call the function reset_translations.
if not,
import pytz.
xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
otherwise cmp_fmts is a list containing cmp_fmt.   call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None,
format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
return errors.
if s is an instance of the subclass Exception,
self._read_started is True.
define the method choice with 2 arguments: self and obj.
if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,
call the self.seek method with argument integer 0.
call the method threading.RLock, substitute the result for self.mutex.
from django.utils.six.moves.urllib.parse import urljoin into default name space.
from django.utils import six into default name space.
call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.",   where '%r' is replaced with loader.   return None.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
if value is false and self.required is true,
if bcc is not an six.string_types instance raise an error with message string '"bcc" argument must be a list or tuple'.
try,
call the method self._archive.namelist, substitute the result for namelist.
substitute it for data.   if data is contained in seen_data,
break from the loop execution.
from django.utils.module_loading import import_string into default name space.
and encoding, substitute the result for result.   if result is not None,
import module functools.
if error.params is true,
define the method __init__ with arguments self, stream and boundary.
call the self.stderr.write method with string "    Installing index for %s.%s model\n" as argument,
substitute it for self.view_name.   define the method __getitem__ with arguments self and index.
call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.
call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,
raise an CommandError exception with an argument string "Error: %s", with '%s' replaced by message.
latest_date is None.
call the function datetime.utcnow, substitute the result for now.
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.
if exception LookupError is caught,
break from the loop execution.
call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
element of data at the index last equals to carriage return bytes character.
decrement self.waiting_writers by integer 1,
return path,
close is boolean True.
use it as an argument for the call to the function force_text, return the result.   define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
self.error_class is a string 'errorlist'.
define the method __newobj__ with 2 arguments cls and unpacked list args.
and third element of result of the function sys.exc_info.   call the function import_module with an argument module_path, substitute the result for module.
for every item in sequence,
self.test_runner is None.
raise an TemplateDoesNotExist exception with an argument name.
call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
derive the class RendererMixin from the object base class.
use the result as an argument for the call to the json.dumps function, return the result.   define the method as_text with an argument self.
for every var in self._varlist.   if not,
define the method __init__ with 2 arguments: self and obj.
call the function time.sleep with an argument integer 1.
from __future__ import unicode_literals into default name space.
define the method __init__ with an argument self.
return FormSet.
define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
if not,
and for every _, nodelist in self.conditions_nodelists.   define the method render with 2 arguments: self and context.
otherwise html_message is None.   call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message,
if safe_input is true,
call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.
return plural.
define the method __enter__ with an argument self.
call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name',
call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.
call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return version
INFO is integer 20.
from django.forms.formsets import everything into default name space.
call the __init__ method with self and params arguments from the base class BaseCache.
call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
skip this loop iteration.
if not,
define the function _explode_shorthand_ip_string with an argument ip_str.
return result and result_args.
or first element of var equals '_',   raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'",
call the function escape with an argument text, return the result.
call the method self._cache.incr with key and delta as arguments, substitute the result for val.
if self._cull_frequency equals to integer 0.
and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.   call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true',
raise an DisallowedHost exception with an argument msg.
define the function strip_spaces_between_tags with an argument value.
define the method __deepcopy__ with arguments self and memo.
return the value under the self.data.month key of the MONTHS dictionary.
args is an empty tuple.
from django import http into default name space.
call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.
get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
define the function get_public_serializer_formats.
bits is an empty list.
substitute None for pickled.
define the method __repr__ with an argument self.
call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
if PY3 field of module six is boolean True,
if IndexError exception is caught,
property decorator, to be called by property built-in function.
derive the class MediaDefiningClass from the type base class.
try,
if not,
return the value under the self.data.month key of the MONTHS_ALT dictionary.
define the method cfg_convert with 2 arguments: self and value.
substitute self for value.configurator.
format_locations is an empty list.
call the method self.replace_header with argument string 'Content-Type', 'text/%s; charset="%s"', where '%s' symbols are replaced by:
call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.
call the method value.decode with an argument charset, substitute the result for value.
define the method __iter__ with an argument self.
return an string "<IfNode>".
extend the self.error_list list with message.error_list.
call the method self.validate_key with argument key.
substitute the result for parsed.   if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
if callback is an callable object,
append item to self.items.
evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,
call os.makedirs function with self._dir and hexadecimal 0o700 as arguments.
import memcache.
decorator function register.filter with an argument is_safe set to boolean False.
substitute _iterlists for lists.
define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,
if KeyError exception is caught,
from yaml import CSafeLoader as SafeLoader into default name space.
substitute '%s' from string "<%s: %s (%s)>" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.
if KeyError exception is caught,
open filename file in write mode, with the file descriptor renamed to outfile, perform,
from .base import CommandError into default name space.
from django.utils.six.moves import cPickle as pickle into default name space.
call the method s.decode with an argument string 'utf-8', substitute the result for s.
replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',
"Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware,   django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed   from the defaults. If your project needs these middleware then you should configure this setting.", obj set to None, and   id set to a string '1_7.W001', put the result into a list and return it.   if not,
return boolean True.
return palette.
"is deprecated, use ArgumentParser instead" and RemovedInDjango20Warning.   parser is an instance of the object OptionParser, created with arguments: prog set to prog_name,
if not,
define the method __init__ with 3 arguments: self, template_string and origin.
substitute field for self.field.
if ValueError exception is caught,
call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str,
from django.utils.encoding import force_text into default name space.
derive the class InterBoundaryIter from the six.Iterator base class.
call the method readline.parse_and_bind with an argument string "tab:complete".
for every chunk in content.chunks function return value,
decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,
split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
delete dictionary item 'public' from cc.
define the function to_locale with 2 arguments language and to_lower set to boolean False.
substitute max_expr for self.max_expr.
append value under the 0 key of the opt_dict dictionary to code_list.
call the function number_format with an argument value, return the result.
call the function get_resolver with an argument urlconf, substitute the result for resolver.
if length of bits is not equal to integer 3,
try,
filters is an empty list.
join rendered_widgets into a string, return it.
call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
for every index in range of integers from 0 to length of hextets, not included,
get maximal element from roots and substitute it for root.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
skip this loop iteration.
import module random.
if dklen is false,
if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.
if _default is None,
to_locale called with an argument lang_code, if the result is not None,   return boolean True.
call the function form.save_m2m.
define the method __mod__ with 2 arguments: self and rhs.
join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
do nothing,
append string "PRIMARY KEY" to field_output.
import module ssl.
call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join,
try,
return self.
yield line.
if serializers is None and _serializers is false,
import module datetime.
return f.
if self.is_bound is true,
from lib2to3 import fixer_base into default name space.
if TypeError exception is caught,
call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
raise an exception.
call the function block_re.match with an argument t.contents, substitute the result for bmatch.
remove tmpdir directory.
if i equals to integer 0 and
if e is not an instance of CommandError class,
substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
return current.
result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string "regex",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.
define the method __nonzero__ with argument self.
mem_args is a list containing of first num_args elements of args list.
if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params,
call the method content.encode with an argument string 'utf-8', substitute it for content.
covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
try,
call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
substitute memoryview for memoryview.
call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
substitute record.exc_info for exc_info.
call the method stream.unget with elements of list chunk from the index next to the end.
define the method H with an argument self.
call the function formset.is_valid, if it evaluates to false,
string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.   using_sysrandom is boolean False.
substitute cwords element at the cword decremented by 1 index for curr.
calculate length of provided and increment it by one, substitute the result for plen.
if self.paginator.count equals a integer 0,
if value is contained in self.empty_values,
call the method self.validate with an argument value.
if extra_attrs is true,
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
substitute asvar for self.asvar.
num_entries is length of filelist.
take subject elements from p-th to i-th index, substitute it for s.
comment is an empty list.
input_type is a string 'radio'.
return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
get the value under the root key of the convert dictionary, for every opname and opfunc in the result,
call the clean method wiht value argument from the base class of the SlugField class, return the result.
raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.
call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,
full_statement is a list containing: string "CREATE TABLE %s (", where %s is replaced by result of the function qn called with an argument tablename.
define the method write with 2 arguments: self and val.
if iri is not initialized,
import_library and libraries.   __all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
return self.DSTDIFF.
evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
return boolean True.
try,
needs_multipart_form is boolean True.
if not,
if self.object is not an instance of list type,
define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
remove the first element of value under the name key of self.blocks dictionary, return it.
multiply offset by integer -1.
call the method app_config.get_model with an argument model_label, substitute the result for model.
substitute self.none_value for self.month_none_value.
third element of url_fields is an empty string.
return boolean True.
blocks is a dictionary with elements: n for n.name, for every n in return value of the method,
get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_,
do nothing.
call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
slice chunk list to get the last rollback elements, if the new list is not empty,
call the method autoreload.main with 3 arguments: self.inner_run, None and options.
self.cc is an empty list.
define the method send_messages with arguments self and email_messages.
if value equals k or text_value equals return value of the function force_text called with argument k,
substitute key for result.key.
define the method __init__ with 2 arguments: self and data set to None.
return an empty string.
define the function dec with an argument func,
call the function timesince with an argument value, return the result.
call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,
define the method __copy__ with an argument self.
return path.
if not,
strip message_context of '"' characters from both ends, substitute the result for message_context.
raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
split arg by ':', for every x in result,
substitute obj for self.data.
return the media field of the first element of self.forms.
if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True, False otherwise.
internal_use_only is a boolean False.
decorator cached_property.
call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function,
define the method A with an argument self.
if self.attachments is true,
INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.
UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.
if length of args is greater than 4.
return new_context.
use the result as an argument for the call to the b64_encode function, return the result.   define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
for every migration in merge_migrations.   try,
if KeyError, IndexError and AttributeError exception is caught,
call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.
decimal_places set to None, unpacked list args and unpacked dictionary kwargs.   substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
substitute func for self.func.
raise an exception value.
if exclude is true and f.name is contained in exclude,
if 'id' is contained in self.attrs,
chunks is a tuple containing 6 initial tuples:
derive the class FileSystemStorage from the Storage base class.
substitute logging.NOTSET for logger.level.
for every app_config in return value of the method apps.get_app_configs,
from datetime import datetime into default name space.
return value.
if priority is true,
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
raise an SuspiciousFileOperation exception with string "Attempted access to '%s' denied." as argument, replace '%s' with name.
call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
substitute hashlib.sha256 for digest.
raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
if self._cull_frequency equals to integer 0.
substitute key for op.id.
if self.connection is false,
if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true,
call the method form._get_validation_exclusions, substitute the result for exclude.
from django.utils import six into default name space.
and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method   router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.   define the method model_installed with model as an argument.
define the method _cache with argument self.
import module django.
label is an empty string.
append ext to guessed_filename.
append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
from django.http.cookie import SimpleCookie into default name space.
call the self.xml.endDocument method.
if e doesnt have an 'django_template_source' attribute,
import module datetime.
substitute HiddenInput for hidden_widget.
if source is None,
call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
for every app_name and namespace_list in pattern.app_dict.items method return value,
from django.db import connections and DEFAULT_DB_ALIAS into default namespace.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
derive class BaseHandler, derive from the base class object, making this a new style class.
derive the class Storage from the object base class.
call the function initial_value, substitute the result for initial_value.
define the function add_metaclass with an argument metaclass.
substitute library for self._lib.
return _wrapped_view.
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
into a file path, substitute it for new_path.   if new_path file path exists,
call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,
if not,
start is an integer 0.
if ch is not equal to string '\\'.
if field.rel.to._default_manager has an attribute 'get_by_natural_key',
raise an ValueError exception with an argument string 'Unable to set target handler %r: %s',
substitute val for the value under the cache_key key of the _format_cache dictionary.
call the method self.__prepare_class__.
raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.
define the method __init__ with an argument self.
instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not,
from logging.config import dictConfig.
substitute value under the RESULT key of the root dictionary for oldvalue.
nodes is an empty list.
response.content is bytes empty string.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the method cursor.execute with an argument line.
import module time.
return msg.
if timezone has an attribute 'localize',
call the method __init__ from the base class of the EntitiesForbidden class.
return size of the image that was fed to the parser p.
raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
if invalid_var_format_string is true,
if ch equals string '+',
from django.core import signing into default name space.
define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.
call the method error with an argument message, from the base class of the class CommandParser.
substitute field_name for self.field_name.
with self.mutex perform,
substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist,
yield key and value under the key key of self dictionary.
substitute use_tz for self.use_tz.
substitute old_mod for self.mod.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.
if other equals list containing elements of self, return boolean True, otherwise return boolean False.
call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,
default as boolean False and help as a string "Don't break long message lines into several lines.".   call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',
if field.rel is None,
substitute v for value under the k converted to lower case key of options dictionary.
otherwise if value is an instance of datetime.time,
call the method self._get_size_from_underlying_file, substitute the result for self._size.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
__all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
if i is greater than, or equal to subject,
define the method __getinitargs__ with an argument self.
otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,
call the os.path.splitex with argument name, assign the result to name and ext, respectively.
return output.
define the method get_nodes_by_type with 2 arguments: self and nodetype.
from django.utils.six.moves import _dummy_thread as thread into default name space.
substitute length for self._length.
__slots__ is a string 'hashvalue'.
while i is lesser than length of subject and i-th element of subject is an empty space or tab character,
return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
define the method autocomplete with an argument self.
call the method self.file.close.
if character is not equal to a string '.',
if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
define the function dictsort with 2 arguments value and arg.
if not,
return nothing.
substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
if self.field.required is true and self.form has an attribute 'required_css_class' ,
call the function normalize with an argument p_pattern, substitute the result for bits.
for every attr in self.child_nodelists,
call the method token.split_contents, substitute the result for bits.
substitute the result for formatters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
define the method update with 2 arguments: self and other_dict.
call the method template.render with an argument context, substitute the result for content.
call the file.__exit__ method on self with exc, value and tb as the arguments.
call the method build_request_repr with an argument self, return the result.
from django.template.base import TemplateDoesNotExist into default name space.
substitute next_item for sublist_item.
if not,
define the method inner with argument check.
define the function __init__ with 3 arguments: self, token and parser.
if self.to_field is true,
define the function lower with an argument value.
call the function os.getpid, substitute it for pid.
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
close the file stream.
derive the class Group from list base class.
from django.utils.translation import ugettext and ungettext_lazy into default name space.
substitute the result for self.instance.   try,
from django.utils.encoding import force_text and filepath_to_uri into default name space.
if os.path.sep is contained in fixture_name,
substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.
renderer is None.
add to a list result of the method uploadhandler.load_handler called with arguments handler and self,   substitute resulting list for self._upload_handlers.   property decorator,
substitute value under the 'verbosity' key of the options dictionary for verbosity.
substitute 'n' for answer.
__all__ is an list containing a string 'File'.
neg is integer 1.
if quote_double_quotes is true,
if self.data.minute equals integer 0 and self.data.hour equals integer 12,
and field _state.adding of value under the name key of self.cleaned_data dictionary is true,   append name to construct_instance_exclude list.
return default.
call the method self.data.isoformat, return the result.
raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
args is a empty tuple.
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
if self.fixture_count equals integer 0 and self.hide_empty is true,
remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,
if timeout is None,
join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,
define the method __repr__ with an argument self.
if self.connection is None,
return boolean False.
for every pattern in reversed list self.url_patterns,
define the method clean with arguments self and value.
if response is None,
append mw_instance.process_request at the end of request_middleware.
call the function processor with an argument request, update updates dictionary with the result.
call the method self.as_data, for every error in the result.
if not,
for every subject, message, sender and recipient in datatuple, store the results in the messages list.   return evaluated result of the method connection.send_messages with messages as argument.
if ValueError exception is caught.
call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
if not,
self._errors is an instance of ErrorDict.
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.
raise an base.DeserializationError exception with an argument string "Invalid model identifier: '%s'", where '%s' is replaced with model_identifier.
value under the index key of the hextets dictionary is a string '0'.
if ImportError exception is caught,
define the method __setattr__ with 3 arguments: self, name and value.
if pos is greater than or equal to last,
if regex_match is false,
try,
the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check,   '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function,   six.text_type called with second element of date_check as an argument, return the result.   define the method get_form_error with an argument self.
"format (using each model's default manager unless --all is specified).".   define the method add_arguments with arguments self and parser.
register.tag decorator,
derive the class NullBooleanField from the base class BooleanField class.
if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.
result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.
zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,
append model to model_list.
if self.data.minute equals integer 0,
substitute compressed for data.
substitute class_name for self.class_name.
call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True,
define the method add_root_elements with 2 arguments: self and handler.
increment loaded_objects_in_fixture by one.
otherwise if self.reason_phrase is None,
endless loop,
define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
if length of self.backout is greater than zero,
define the function get_resolver with an argument urlconf.
define the method __iter__ with an argument self.
raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
if val is None,
if schemes is not None,
self.empty_label is None.
and _, respectively.   if file_ is true,
instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
unpacked list args2 and unpacked dictionary kwargs2, return the result.   call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
delete entry under the attr key of the attrs dictionary.
append a tuple containing 2 elements: model and deps to model_dependencies.
increment key by item.
call the function load_command_class with arguments: app_name and name, substitute the result for command.
return None.
define the method __init__ with arguments self, name, sysid and pubid.
define the method handle_charref with 2 arguments self and name.
if not,
call the method media_property with an argument new_class, substitute the result for new_class.media.
substitute value for value under the field.name key of the self._current dictionary.
append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
define the method bound_data with arguments self, data and initial.
define the method _itervalues with an argument self.
yield meta_line as the result.
define the method handle with arguments self and unpacked dictionary options.
define the method item_attributes with 2 arguments self and item.
substitute __import__ for importer.
call the function ugettext with an argument message.
otherwise if value is an instance of datetime.date,
with value result of the conditional_escape function called with an argument v for key k.   call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe,
otherwise substitute self.form.label_suffix for label_suffix.   if label_suffix and contents are both true and last element of contents is not contained in the result of the function _,
split instructions by ',' character, substitute the result for styles.
if not,
if data is true,
call the method self.make_writeable with an argument new_path.
try,
evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.
call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
define the method __init__ with 4 arguments: self, name, regex and next set to None.
if TypeError or ValueError exceptions are caught,
define the function m2m_convert with an argument n,
return boolean True.
substitute the result for time_str.   if six.PY2 is true,
internal_use_only is boolean False.
new_second_item is an empty list.
potfiles is an empty list.
if timeout is not None,
if LookupError exception is caught,
DELETION_FIELD_NAME is a string 'DELETE'.
validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re,
get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.
dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".   call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',
if addr is a instance of six.string_types,
call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
set attr.name attribute of the Module_six_moves_urllib_request object to attr.
raise a CommandError exception with an argument:
if third element from the end of the args equals string 'as',
otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',
define the method _find_boundary with an arguments self, data and eof set to boolean False.
if ValueError exception is caught,
otherwise if value under the key 'all' of the options dictionary is true,
compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.
define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
call the stream_or_string.read function, substitute the result for stream_or_string.
request_middleware is an empty list.
if value under the 'list_tags' key of options dictionay is true,
dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.   call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one,
if model is contained in created_models,
for every i in range of integers from 0 to length of result, not included,
call the function sys.exc_info with an argument exc_info.
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'",
substitute self.none_value for self.year_none_value.
if ImportError exception is caught,
return settings.TEMPLATE_STRING_IF_INVALID.
call the method attachment.set_payload with an argument content.
use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.   if not,
call the method parser.add_argument with an argument string '--settings'.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
check if lowercase header_query exists is existing_headers, return the boolean result.
try,
return string '0'.
get the unicode representation of the absolute path of base, substitute it for base_path.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
if middleware has an attribute 'process_response',
if first element of g equals a string '"',
call the method out.getvalue, return the result.
self.current is an empty dictionary.
append string "    %s", where '%s' is replaced by name to the usage.
call the connection.cursor method, substitute it for cursor.
define the function ifnotequal with 2 arguments: parser and token.
call the function os.remove with argument fname.
queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
substitute model._meta for opts.
substitute template_dirs for self.template_dirs.
from django.utils.xmlutils import SimplerXMLGenerator into default name space.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
return last rollback elements of chunk.
call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
decorator register with argument Tags.compatibility.
return an empty string.
imported_objects is an empty dictionary.
if prefix is None,
call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
return boolean upload.
define the method _get_name with argument self.
if Exception, renamed to e, exception is caught,
from django.utils.translation import get_language into default name space.
SINGLE_BRACE_END is a string '}'.
substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,
from __future__ import unicode_literals into default name space.
from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
append contents to singular.
call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type,
substitute offset for self.__offset.
if length of t is greater than integer 1,
if regex is an instance of six.string_types class,
if IOErro, renamed to e, exception is caught,
__all__ is a list containing a string 'file_move_safe'.
call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
join all the results into a string separated by newlines, append the result to output.   join elements of output into a string, separated by newline characters, return the result.
derive the class DjangoRuntimeWarning from the RuntimeWarning base class.
call the self._lock.writer method, with the result perform the following,
if 'needs_autoescape' attribute of func object exists and is true,
call the method self.parent_widget.render with unpacked list args as an argument, return the result.
func is an instance of TemplateLoader class, created with unpacked list args.
call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
define the method handle_entityref with 2 arguments self and name.
substitute item for value under the first element of self.loopvars key of the context dictionary.
call the method match.groupdict, substitute the result for kw.
'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.
if func doesnt have a attribute '__name__',
property decorator,
all the method self.create_table with arguments: db and cache._table.
get the value under the date_key key of the item dictionary, substitute it for item_date.
decorator stringfilter,
created with an argument constant_arg, append it to args.   otherwise if var_arg is true,
return boolean False.
define private method __eq__ with self class instance and other as arguments.
define the function time with 2 arguments value and arg set to None.
define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.
call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist,
if self is an instance of nodetype,
call the method translation.get_language, substitute th result for saved_locale.
if value is an instance of bytes class,
substitute self.subject for subject.
if colors is true and last element of colors is contained in color_names,
return an empty string,
from django.conf import settings into default name space.
if sep is not None,
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.
help is a string "Prints the DROP TABLE SQL statements for the given app name(s).".
silent is boolean False.
call the method apps.get_app_config with an argument app_label.
call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
call the method value.decode with an argument charset.
call the function get_template with 2 arguments template_name and dirs, return the result.
from django.db.migrations.executor import MigrationExecutor into default name space.
convert params into a list, substitute it for unhandled_params.
raise an TemplateDoesNotExist exception with an argument error_msg.
for every k and v in result of the call to the method type_.__dict__.items,
pk_value is None.
substitute the result for value.   substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.
if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
call the method self.nodelist.render with an argument new_context, return the result.
call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
substitute self for block.
define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig,
categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
split ip_str into parts by ':', for every hextet in the result,
return None.
call the method self.limit_choices_to, return the result,
from wsgiref import simple_server into default name space.
output is an empty list.
if OverflowError or ValueError exceptions are caught,
leave_locale_alone is boolean True
for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.
call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.
if KeyError exception is caught,
call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
response.streaming_content is an empty list.
substitute exc for self.settings_exception,
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
return boolean True.
if other is an instance of BaseContext class,
covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,
return None.
if parse_until is None,
otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
decorator deconstructible,
call the function force_text with an argument message, return the result.
child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.
define the function load_command_class with arguments: app_name and name.
opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.
call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
try,
return nothing.
if invalid_var_format_string is None,
status_code is an integer 500.
define the function get_quantifier with 2 arguments ch and input_iter.
call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,
call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
substitute the result for block_content.   if self.verbatim is true and block_content equals self.verbatim,
if pickle.PickleError exception is caught,
return self.data.month.
substitute cls.__text_cast for cls.__text_cast.
raise an AttributeError exception with string "Unable to determine the file's size." as argument.
increment int_part_gd by thousand_sep.
for every func and args in self.filters,
derive the class VariableNode form the base class Node.
substitute self.var for obj.
if length of app_labels equals integer 0,
get "_decorated_function" attribute from func object, if it exists substitute __name__ field of the result for name,
import module warnings.
if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
if self equals to other return boolean False, otherwise return True.
raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
register.tag decorator,
result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner,   called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.   if self.empty is true,
get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,
match rest string with self.DOT_PATTERN regex, substitute the result for m.
for every o in opts.   for every val in value,
return other_dict.
media is a property object of the current class, with _get_media as getter function.
call the fastcgi_help function, return the result.
return value of the npath function with string '.mo' appended to the base_path as argument,   and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.   call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.
from django.test.signals import setting_changed into default name space.
if ValueError or TypeError are caught,
call to the field.to_python method, substitute the result for value.   substitute value for value under the field.name key of the data dictionary.
substitute self.template_with_initial for template.
from django.utils import six into default name space.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
from django.db.migrations.state import ProjectState into default name space.
if keys is true,
derive the class Tags with base class object.
to the negative length of the dir_suffix as the end index and append it to a list,   if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.   all_files is an empty list.
call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.
from django.forms.fields import Field and FileField into default name space.
call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,   if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
call the function color_style, substitute the result for self.style.
call the method questioner.ask_merge with an argument app_label, if it evaluates to true,
decorator python_2_unicode_compatible.
import module os.
call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
if dictionary is false,
set move.name attribute of the _MovedItems to move.
call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
call the method test_runner.run_tests with an argument test_labels, substitute it for failures.
call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.
if not,
delete first element of bits.
tuple with 2 elements: start and end and boolean False, append the result to result.   substitute end for upto.
if ValueError or TypeError exceptions are caught,
for every f in fields,
import module warnings.
call the method writer.as_string, write the result to fh file.
if content has an 'chunks' attribute,
RemovedInDjango19Warning and stacklevel set to integer 2.   define the function _resolve_name with 3 arguments: name, package and level.
call the function force_text with arguments self and _regex, substitute the result for regex.
call the method self._lock, with the result,
call the function http_date with no arguments, and substitute its return value
return None.
define the method create_parser with 3 arguments: self, prog_name and subcommand.
import module base64.
I18N_MODIFIED is integer 2
if not,
substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.
define the method add_fields with 2 arguments: self, form and index.
return an empty string.
convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
_CacheInfo is an instance of namedtuple class created with 2 arguments: string "CacheInfo" and a list with 4 elements: string 'hits',
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
"path of at least one fixture in the command line."   define the method add_arguments with 2 arguments: self and parser.
call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.
substitute '%s' in string ' # %s' with line, write it to out file.
insert token at the beginning of self.tokens.
if mimetype is None, raise an error.
call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
raise an exception.
derive class CacheKeyWarning from the DjangoRuntimeWarning base class.
otherwise if action equals to string 'unapply_start'.
with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,
raise an exception.
from __future__ import unicode_literals into default name space.
self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title',
derive class MovedModule from the _LazyDescr base class.
if exception OSError, renamed to e, occurred,
if self.connector equals conn_type,
num_sent is an integer 0.
from django.utils.functional import lazy into default name space.
substitute content_type_extra for self.content_type_extra.
if f equals to string '__pycache__',
call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.
if text ends with truncate,
sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,
from django.core.management.base import BaseCommand and CommandError into default name space.
substitute negate for self.negate.
call the sio.read method, substitute the result for self.buffer.
substitute cleaned_data for self.cleaned_data.
if app_config.models_module is None,
substitute self.regexes for regexes.
if ImportError exception is caught.
get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
define the function regroup with 2 arguments: parser and token.
if path is None,
call the method apps.get_app_configs, for every app_config in the result,
decorator cached_property,
derive the class EmailBackend from the BaseEmailBackend base class.
self.error_class called with an argument error_class set to string 'nonfield'.   define the method _raw_value with 2 arguments: self and fieldname.
decorator decorator.
define the function address_string with an argument self.
do nothing.
call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,
get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ",
open_tags is an empty list.
exception in Django 2.0." formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.   try,
call the method self._cache.disconnect_all.
if not,
call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
if TypeError or ValueError exceptions are caught,
derive the class Input from the Widget base class.
substitute windll.kernel32.LockFileEx for LockFileEx.
except if KeyError exception is caught,
if handlers is true,
define the messages with an argument self.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__,
code is a string 'limit_value'
if value is contained in self.empty_values,
dirs is a list containing basedir.
call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
derive the class SafeText from six.text_type and SafeData base classes.
convert elements of error into a list, substitute the first element for message.
skip this loop iteration.
import module sys.
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
increment length of template_dir by one and substitute it for prefix_length.
remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
return an empty string.
and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if parse_until is true,
if AttributeError exception is caught,
import module datetime.
otherwise if ch is contained in string "*?+{",
if value is false,
pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.   for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
for every filename is filelist,
raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
split value into two parts by decimal_separator, assign the result to value and decimals.
call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
from __future__ import unicode_literals into default name space.
divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.
raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
define the method compress with arguments self and data_list.
while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,
temp_lib is an instance of Library class.
derive the class CacheHandler from the object base class.
max_num is integer 1.
define the method __nonzero__ with an argument self.
self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.   define the method signature with arguments self and value.
default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".   call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',
sum value and arg, return the result.
call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
do nothing.
for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
return an empty string.
substitute self.subject for value under the 'Subject' key of msg dictionary.
yield a tuple with 2 elements: tok.name and toktext.
substitute cache_choices for self.cache_choices.
__all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',
raise an exception.
if can_fail is true,
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
is_localized is boolean False.
try,
if widgets is true and f.name is contained in widgets,
call the function is_aware with an argument date, if it evaluates to true,
if length bits is smaller than intger 4,
if not field_value is None.   if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
return None.
results is a tuple with 2 elements, 2 empty lists.
derive the class MemoryFileUploadHandler from the FileUploadHandler base class.
and instance of Name class created with an argument string 'python_2_unicode_compatible'.   decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass,
for every shell in available_shells,
define the method __dir__ with an argument self.
define the function now with 2 arguments: parser and token.
from django.utils.six.moves import socketserver into default name space.
get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
for every app_label in app_labels,
for every tablename in tablenames,
substitute the result for args and kwargs, respectively.   call the function node_class with 3 arguments: takes_context, args and kwargs.
skip this loop iteration.
try,
define the method get_many with self class instance, keys and version defaulting to None as arguments.
if field_value is cotained in self.empty_values,
call the method self.xml.addQuickElement with an argument string 'None'.
substitute '%s' in 'Not Found: %s' with request.path, extra is an dictionary with two pairs of elements 'status_code' with value 404,
if filter_name is contained in self.filters,
call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
reverse elements order of values.
raise an CommandError with an argument string "AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.", where '%s' is replaced by app_config.label.
define the method render with 2 arguments: self and context.
if template_source_loaders is None,
if parser doesnt have an '_namedCycleNodes' attribute,
from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect,
nesting is integer 0.
try,
substitute the result for offset.   if not,
define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',
convert col_name to lowercase, substitute the result for new_name.
call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.
get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
RemovedInDjango19Warning and stacklevel as integer 2.   try,
define the function static with an argument request.
call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
DEBUG is integer 10.
get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.
return error_dict.
from django.utils.text import normalize_newlines into default name space.
if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True,
substitute input_data for self._input_data.
substitute render_value for self.render_value.
value is an string '1'.
define the function do_filter with 2 arguments: parser and token.
if settings.USE_TZ is true,
substitute CheckboxChoiceInput for choice_input_class.
from __future__ import unicode_literals into default name space.
if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
do nothing.
raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
if self._is_rendered is false,
set filter_func._decorated_function objects attr attribute to value.
and html set to boolean True, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
from io import StringIO into default name space.
if exception GeneratorExit is caught,
unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
args is an empty list.
substitute self.form.auto_id for auto_id.
define the method tzname with 2 arguments self and dt.
e.args is a tuple containing string "Problem installing fixture '%s': %s", where '%s' is replaced with fixture_file, e.
for every var in self.vars,
if v is an instance of list or tuple type,
otherwise if closing_tag is true,
substitute return value of call to the function _set_response_etag with response as an argument, for response.
if not,
substitute ending for self.ending.
call the settings.INSTALLED_APPS.
call the function force_text with an argument val, if the result is not contained in pks,
call the function get_script_prefix, substitute the result for prefix.
call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.
call the method app_list.items, use the result as an argument for the call to the function sort_dependencies, for every model in result,
use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.
call the method msg.attach with an argument body_msg.
call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
define the function reloader_thread.
skip this loop iteration,
where '%s' is replaced with elemnts of token from upto index till the end, and token.   substitute filters for self.filters.
from django.utils import six into default name space.
if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.   otherwise if bytes is smaller than PB,
if not,
convert s to integer of base 36, substitute it for value.
if not,
define the method get_json_data with 2 arguments self and escape_html set to boolean False.
for every key and value in data,
define the method has_next with an argument self.
open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
define the function file_complete with arguments self and file_size.
if not,
substitute stream for self._stream.
return wrapper.
call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.
split token.contents into separate words, substitute the first element of the result for command.
call the method timezone.tzname with an argument None, return the result.
call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.
else if timeout converted into an integer equals to integer 0,
decrement number by one, multiply it with self.per_page, substitute the result for bottom.
from django.utils import six into default name space.
return nothing,
call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.
kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident,
if self.allow_multiple_selected is false,
get 'editable' attribute from object f, if it doesnt exists or its true,
derive the class MinValueValidator form the BaseValidator base class.
from django.utils.text import Truncator, wrap and phone2numeric into default name space.
call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.
delete Trans.
call the method __init__ form the base class of the Command class.
define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
define the method _get_num_pages with an argument self.
if self.verbosity is greater or equal to integer 2,
call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
return s.
call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.
if TypeError or ValueError exceptions are caught,
if not,
replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
with the result renamed to fp, perform the following:   write msgs to fp.
define the method decr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
define the method configure with an argument self.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if value is false,
substitute self._parser for parser.
substitute index for doublecolon_start.
if lib is true,
and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
for every cmatch in cmatches,
separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
split lang_code by character '-', substitute the first element of the result for generic_lang_code.
otherwise if msg is true,
return obj.
if IndexError, TypeError or ValueError exception is caught,
read 4 bytes from file f and store it in sample.
stats is a list with 2 elements: 2 integers 0.
call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.
if filename ends with string ".pyc" or it ends with ".pyo",
for every arg in args,
call the os.path.samefile with arguments src and dst, return the result.
if m is true,
return nothing.
if init_path is not a file,
if LookupError or TypeError exceptions are caught,
found is boolean True.
call the options.get method with string 'CULL_FREQUENCY' and integer 3 as arguments, use the string 'cull_frequency' and previous result as the arguments for the call to the params.get method, substitute the result for cull_frequency.
otherwise if self.nodelist_false is true,
from django.utils.encoding import force_str into default name space.
if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
call the method self._headers.values, return the result,
call the method handler.startDocument.
if not,
call the method token.split_contents, convert the result into a list and substitute it for bits.
raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.',
call the method Model._meta.get_all_field_names, substitute the result for model_fields.
convert byte to its integer representation, return all of the results for every byte in buf.
call the method parser.next_token, substitute the result for token.
define the method __len__ with an argument self.
if '.' is not contained in str_number,
do nothing.
if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
define the method render with 4 arguments: self, name, value and attrs set to None.
return first element of value.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'",
try,
if current is an instance of BaseContext and bit attribute of type of current is true,
append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
get attribute 'error_dict' from the self object.
with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   finally perform,
from __future__ import unicode_literals into default name space.
m2m_data is an empty dictionary.
define the method add_arguments with arguments self and parser.
fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,
convert initial into boolean and substitute it for initial.
a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively,   return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.   join field_output elements into a string, separated by whitespaces, append it to table_output.
define the method tag with 3 arguments: self, name set to None and compile_function set to None.
from django.core.management.base import BaseCommand and CommandError into default name space.
otherwise return boolean False.   if not,
return value.
set attr.name attribute of Module_six_moves_urllib_response object to attr.
return self.empty_value.
raise an NotImplementedError with an argument string "Subclasses of AppCommand must provide a handle_app_config() method.".
self._regex_dict is an empty dictionary.
if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES,
call the method self._get_model_from_node with arguments node and string 'model'.
if value has an attribute '_meta',
raise an ValueError with string "This file is not accessible via a URL." as argument.
get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
and third element of result of the function sys.exc_info.   define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
num_args is an integer 0.
query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
if Exception, renamed to e, exception is caught,
link is a list with 4 elements: last, root, key and result.
sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS',
call the method t.led with 2 arguments left and self.
split arg by ',', substitute the result for bits.
if self.data and self.files are both False,
or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.   define the method _open with arguments self, name and mode defaulting to string 'rb'.
return length of self.items.
cache_suffix is a string '.djcache'.
return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.
field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type,
substitute value under the key key of self._cache dictionary for pickled.
define the function u with an argument s.
call the method self.configurator.convert with an argument value, substitute the result for result.
do nothing.
if self.render_value is false,
try,
from django.utils import autoreload into default name space.
if string 'version' is not contained in config,
LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.
from django.core.cache import caches into default name space.
call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.
if Exception, renamed to e, exception is caught,
call the function datetime.utcfromtimestamp with argument timeout, substitute it for exp.
call the method self.empty_form.is_multipart, return the result
define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
ModelFormMetaclass and BaseModelForm.   do nothing.
raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.",
call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,
from itertools import chain into default name space.
formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
return an empty list.
define the function all_locale_paths.
if ImportError exception occurred,
call the method self.unget with list containing first remaining elements of chunk as an argument.
substitute old for self.mod.
if data is an instance of MultiValueDict or MergeDict class,
return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
define the method visible_fields with an argument self.
otherwise if ch equals a string '$',
if dirname starts with character '.' or dirname equals a string '__pycache__',
with field_value as an argument, return the result.   define the method _handle_m2m_field_node with arguments self, node and field.
call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,
if not,
if value under the 'outlog' key of options dictionary is true,
call the method self.tag, substitute the result for self.tagname.
evaluate the function force_str with key as the argument, substitute it for key.
raise an StopIteration exception.
self.add_prefix called with an argument name, substitute the result for value.   try,
call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
substitute text for self.text.
finally perform,
derive the class BaseForm from the base class object.
define the method path with an argument self.
raise an TemplateDoesNotExist exception.
remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
substitute version_info from module sys for surrent_version.
for every subnode in node,
append list containing string '--no-wrap' to self.msgattrib_options.
yield choice.
attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.
try,
return result.
return media.
return an instance of EscapeBytes, created with an argument s.
call the method host_validation_re.match with an argument host.
call the method self.validate_number with an argument number, substitute it for number.
define the method to_python with arguments self and value.
import module copy.
yield widget.
from django.utils.dateformat import format and time_format into default name space.
from django.utils import baseconv into default name space.
if not,
define the method __delattr__ with 2 arguments self and name.
try,
otherwise if i is smaller than list_length decremented by one,
define the function indexbytes with 2 arguments buf and i.
where '%s' is replaced with self.__class__.__name__.   define the method flush with an argument self.
import module os.
call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
derive the TemporaryUploadedFile class from the UploadedFile base class.
call the method arg.resolve with an argument context, append the result to arg_vals.
substitute self._setupfunc for repr_attr.
and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,
from django.db import connections and transaction into default name space.
from django.core.management.commands.check import Command as CheckCommand into default name space.
increment weight by integer 2.
if ValidationError exception is caught,
substitute first element of loader for loader and loader without the first element for args.
define the function get_templatetags_modules.
define the method is_multipart with an argument self.
call the method match.group with an argument integer 0, return the result.
call the method self.add_root_elements with an argument handler.
if used_name is not equal to guessed_filename,
do nothing
with unpacked list field_value as an argument, substitute the result for obj.   get the field.rel.field_name from the obj, substitute it for obj_pk.
substitute list with an element block_name for parser.__loaded_blocks.
if config_string is false,
return result.
from django.utils.encoding import python_2_unicode_compatible into default name space.
substitute old_method_name for self.old_method_name.
for every exclude in excludes,
do nothig.
substitute _iterkeys for keys.
tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.
define the function mark_safe with an argument s.
input_type is a string 'number'.
call the function import_string with an argument loader, substitute the result for TemplateLoader.
try,
write raw_data to self.file file.
derive the class ImproperlyConfigured from the Exception base class.
call the method parser.compile_filter with an argument string "var|%s", where '%s' is replaced with rest, substitute the result for filter_expr.
for every app in app_labels.   call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.
where '%s' is replaced with first element of bits.   substitute second element for bits for block_name.
substitute first element of fks_to_parent for fk.
from __future__ import unicode_literals into default name space.
slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.   migration.merged_operations is an empty list.
buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
write a white space to the self.stream file stream.
assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.
where '%s' is replaced with app_label.   try,
define the method write with 4 arguments: self, msg, style_func with None and ending set None.
if ImportError exception is caught,
substitute value for self.value.
and self._current for 'fields'.   if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.
if size is None,
call the function _generator, join the result into a string, return the result.
return boolean True.
pos and last are integer 0.
substitute absolute value of the exponent for decimals.
if messages is not an instance of the ValidationError class,
use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.   call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.
decrement self.position by length of bytes.
where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n",
from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
default_validators is an list containing validators.validate_slug.
define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
if self.deactivate is true,
if not,
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
define the method label_from_instance with 2 arguments: self and obj.
define the method __init__ with 3 arguments: self, func and name set to None.
if status is not None.
if Exception, renamed to e, exception is caught,
if locales in not empty,
def method add_arguments with self class instance and parser as the arguments.
return attachment.
from PIL import Image into default namespace.
substitute regex for self._regex.
if not,
substitute fg for value under the 'fg' key of definition dictionary.
if '.' is contained in last elements of hextets,
if not,
get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.
if self._is_rendered is false.
try,
kw is a list with 3 elements: d.year, d.month and d.day.
raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once",
define class dummy.
call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
for every path in collect,
join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',
from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space.
call the function re.compile with an argument raw string "(?:(\w+)=)?(.+)", substitute the result for kwarg_re.
if not,
call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.
if escaped is true,
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
base36 is an empty list.
call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
derive the class BaseCache from the object base class.
if StopIteration exception,
if response has an attribute 'render' and response.render is a callable object,
if options.traceback is true or e is not CommandError instance,
substitute input_formats for self.input_formats.
params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg,
msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,
substitute the result for value under the 'To' key of msg dictionary.   if self.cc is true,
define the method dict with an argument self.
convert self.changed_data into boolean, return it.
_standard_context_processors is None.
call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
from __future__ import unicode_literals into default name space.
substitute second element of plan_node for title.
for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True,
return default.
if LookupError exception is caught,
define the method i with an argument self.
return a tuple with 3 elements: TYPE, outdict and stream.
call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element
call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
RAW is a string "raw".
call the method self.fields.items, for every name and field in the result,
define the function fdel with 2 arguments: instance and name set to fdel.__name__.
replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the
try,
from django.core.serializers.base import SerializerDoesNotExist into default name space.
call the function _load_serializers.
delete dictionary item 'private' from cc.
for every form in self.extra_forms,
return self.cleaned_data.
for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,
join chunks into bytes string, substitute it for chunk.
if app_dir is a directory,
put bcc into a list, assign it to self.bcc.
if Exception exception is caught,
import module os.
for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,
if e.args list first element starts with string "Error -5",
define the method appendlist with 3 arguments: self, key and value.
call the method self.validate_key with argument key.
where '%s' is replaced with self.__class__.__name__.   property decorator,
MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
if cached is not None,
if not,
help is an string "Creates the tables needed to use the SQL cache backend.".
call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments,
call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
derive the class RegroupNode from Node base class.
if only_new is True,
return an empty list.
args is an empty string.
return self._cached_loaders.
return boolean False.
if OSError exception is caught,
otherwise if self._delegate_text is true,
from email.mime.text import MIMEText into default name space.
raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
if self.regex is not an instance of a six.string_types type,
define the function urlunquote with an argument quoted_url.
call self.errors.
if StandardError, renamed to e, exception is caught,
for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.   define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,
if AttributeError exception is caught.
if length of t equals to integer 2,
if not,
try,
try,
define the function deactivate.
self.translate is boolean False.
data, encoding and errors as a string 'replace'.   otherwise if item_type equals FILE,
if f equals to string '__pycache__',
if self.dry_run is false,
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1,
define the method add_item_elements with 3 arguments: self, handler and item.
import module collections.
substitute body for self.body.
if self.verbosity is greater or equal than integer 1,
if literal_match is true,
call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.
call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.",
for v in return value of the function match.groups, convert v into an integer and append i to a list,
call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
define the method __getitem__ with arguments self and name.
substitute value under the 'interactive' key of the options dictionary for interactive.
delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
from django.apps import apps into default name space.
call the function __proxy__ with 2 arguments: args and kw, return the result.
if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.
call the function table_name_filter with an argument table_name, if it evaluates to true,
raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.",
if length of bits is smaller than integer 1,
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
define the method __str__ with an argument self.
use global variable invalid_var_format_string.
if not,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
call the function zlib.decompress with an argument data, substitute the result for data.
substitute auto_id for self.auto_id.
define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
if second element of the i-th row of relations equals table_name, rel_to is string 'self',
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.
if e doesnt have an 'django_template_source' attribute,
define the method delete_many with 3 arguments: self, keys, and version set to None.
call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.
from django.utils.safestring import mark_safe into default name space.
yield and empty string as the result.
convert root.manager.loggerDict into a list, substitute it for existing.
derive the class Info from base class CheckMessage.
e.args is a tuple, containing 1 element: string "Problem installing fixtures: %s", where '%s' is replaced with e.
call the function new_method_proxy with an argument hash, substitute the result for __hash__.
remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,
if not,
define the method read with arguments self and size set to None.
call the method self.is_url with an argument template, if it evaluates to true,
call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
define the function truncatechars with 2 arguments value and arg.
for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.
if args is true,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method gettext_module.NullTranslations, substitute the result for _active.value.
try,
yield string 'year' as an return value of the generator.
if output is true,
if language_code is not containsed in self._app_dict
derive class MovedAttribute from the _LazyDescr base class.
set file pointer at the beginning of the self.file file.
substitute '%s' in string 'id_%s' with name, return it.
substitute self._leftover for output.
return instance of _HashedSeq class, created with an argument key.
call the function make_middleware_decorator with an argument middleware_class, return the result.
call the method self.validate_name with 2 arguments name and app_or_project.
cls is None.
for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,
if not,
format string ' _(%s) ', with fmatch, write it to out.
get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
if not,
if mimetype is None,
self.instance and unpacked dictionary kwargs.   if form._meta.fields is true,
define the function select_template with 2 arguments: template_name_list and dirs set to None.
split ip_str by ':', if last element of the result is not equal to hextet.
if self._read_started is true,
if six.PY2 is true,
return None.
join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
get the value under the field key of the html dictionary, append it to output.
third element of the result of the function sys.exc_info.   self._stream is an instance of BytesIO class created with an argument self._body.
call the middleware_method with the request as an argument, substitute the result for response.
call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
define the method end_object with arguments self and obj.
from django.utils import six into default name space.
derive the class Promise from the object base class.
compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
if self.verbosity is greater of equal to integer 1,
define function _to_tuple with s as an argument.
join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
substitute sixth element of bits for var_name.
otherwise if cmatches is true,
if AttributeError exception is caught,
if not, substitute func.__name__ for name.   call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
current_app as context.current_app, substitute the result for url.   if NoReverseMatch exception is caught,
if not,
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
define the method __bool__ with an argument self.
source and previous result.   if TemplateDoesNotExist exception is caught,
define the function get_git_changeset.
otherwise if child.nodeType equals to child.ELEMENT_NODE,
for every node in return value of the graph.leaf_nodes method called with the app_name argument,
call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,
from django.core.mail.message import sanitize_address into default name space.
define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
if f.unique is true, substitute "UNIQUE " for unique, otherwise unique is an empty string.
derive the class MergeDict from the object base class.
return an empty string.
from django.core.management.base import AppCommand into default name space.
convert six.PY3 to an integer, substitute it for buffering.
raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
read the whole file f, substitute the result for content.
define the method next_token with an argument self.
if e.errno is not equal to errno.EEXIST,
if not,
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
from django.utils.timezone import template_localtime into default name space.
description is a string "The '%s' function" replaced by value of receiver.__name__.
split first element of hextet into parts by ':', append them to new_ip.
from django.core.management.base import BaseCommand into default name space.
property decorator,
value under the item key of self.dict dictionary is None.
if ret equals to integer 0, return boolean True, otherwise return boolean False.
from django.utils.html import strip_spaces_between_tags.
call the method django.setup.
append a tuple containing 2 elemetns: model and deps, to skipped.
escaped is boolean False.
created with 2 arguments: required as boolean False and widget set to HiddenInput.   value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
define the method with reload with an argument self.
define the function rjust with 2 arguments value and arg.
substitute source for self.source.
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".'.
derive the class TokenParser form the base class object.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
if _locs_ is None,
call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
if not,
return first element of key.
unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
if package doesnt have an 'rindex' attribute,
self.stdout.ending is None.
return dec.
evaluate self._has_expired with argument key, if the result is True,
call the function six.iteritems with an argument kwargs, for every k and v in the result,
return func.
substitute self.obj for model.
try,
call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
if tzinfo equals a string 'Z',
remove first element from model_dependencies, assign it to model and deps, respectively.
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
substitute registry.tag_exists for tag_exists.
call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
self._fname is None.
try,
call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
return list_ and boolean False.
re raise an exception.
return patterns.
raise an exception.
if value is false or character '@' is not contained in value,
if not,
try,
if smtplib.SMTPException exception is caught,
neg is integer 0.
define the function parts.
from django.conf import settings into default name space.
call the method self._cache_flush_all.
call the method clear from the base class of the class QueryDict, return the result.
append truncate to text, return the result.
break the loop execution.
if NotImplementedError exception is caught,
call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
if ImportError exception is caught,
append new_filenames to _cached_filenames.
import module re.
raise an ValueError exception.
decorator stringfilter,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method input with an argument msg and store the result in confirm.
otherwise if safe_input is true,
self.message_context is None.
if value is None,
if value under the 'umask' key of options dictionary is true,
return self.
return no.
do nothing.
divide since by seconds, store the floored result in count.
call the urlsplit with an argument url, convert the result into a list and return it.
increment i by integer 1,
call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.
define the method __str__ with an argument self.
raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code,
call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
define the method streaming_content with 2 arguments: self and value.
call the function validate_ipv4_address with an argument hextet.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
return None.
substitute length for truncate_len.
get value under the 'database' key of the options dictionary, substitute it for db.
separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_p with an argument self.
substitute opname for opfunc.__name__.
multiply self.number and self.paginator.per_page, return the result.
substitute cached_loaders for self._cached_loaders.
as long as self.exists function with argument name evaluates to boolean True,
import module glob.
if self.hint exists, replace '%s' in a string "\n\tHINT: %s" with value of self.hint, substitute it for hint, otherwise hint is an empty string.
substitute str_number and an empty string for int_part and dec_part.
define the method _add_installed_apps_translations with an argument self.
if errors_on_separate_row and bf_errors are both true,
request user input from the standard input, assign it o confirm, with the query string: "You have requested a flush of the database."
define the method eval with 2 arguments: self and context.
for every name in sorted value under the app key of the commands_dict dictionary,
define the method nud with 2 arguments: self and parser.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
for every name in bits from the start index 1 to the end index negative 2,
yield self.
call the method self.template.resolve with an argument context, substitute the result for template.
call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:
return self.parent_instance.
append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,
skip this loop iteration,
call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
try,
from subprocess import PIPE and Popen into default name space.
endless loop,
from django.utils.translation import trans_real as trans.
define the method convert with 2 arguments: self and value.
try,
write string "Flush cancelled.\n" to self.stdout stream.
call the function write with an argument end.
compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
if not,
return self.html_name.
call the function importlib.import_module with an argument serializer_module, substitute it for module.
errors is an empty list
call the method df.format with an argument format_string, return the result.
define the method run with 3 arguments: self and unpacked dictionary options.
if root is true,
call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
append filename to filenames.
substitute module for the value under the format key of the _serializers dictionary.
define the function wrapper with an argument unpacked list args.
call self.clear method.
otherwise if template_tuple is None,
otherwise add boolean False, for every candidate in the result perform following,   if candidate is false,
append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
define the method u with an argument self.
define the method h with an argument self.
if help_texts is not None,
if elt is an instance of six.string_types class,
'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.'   define the add_arguments with arguments self and parser.
call the method selected_choices.remove with an argument option_value.
import module tempfile.
if not,
increment mes_count by one.
add self.default_validators and validators, substitute the result for self.validators.
data is None.
define the method check_programs with an argument unpacked list programs.
if mem_args is contained in cache,
raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
from django.conf import settings into default namespace.
params is an empty list,
evaluate the function bytes with the argument s, and return the result.
from django.core.exceptions import ValidationError into default name space.
derive the class HttpResponseNotFound from the HttpResponse base class.
try,
leave_locale_alone is boolean True.
return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.
if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,
derive the class DictWrapper from the dict base class.
for arg in argv list without the first two elements,
__author__ is a string "Benjamin Peterson <benjamin@python.org>".
return result.
decrement mtime by stat.st_ctime.
increment self.active_writers by integer 1,
derive the class DebugNodeList from the NodeList base class.
substitute key for result.key.
define the method __getattr__ with self and name as arguments.
field_notes is an empty list.
raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
if not,
if ns_pattern is true,
join elements of name into a string, substitute it for param.
defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode,   substitute the result for compile_func.   substitute func.__doc__ for compile_func.__doc__.
if length of bits is lesser than integer 2,
do nothing,
if not,
raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ",
if not self.to_field is None.   if self.parent_instance is not None,
substitute EmailInput for widget.
derive the class DebugNode from Node base class.
from xml.sax import handler into default name space.
try,
get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries:
substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.
append ':' and ipv4_address to result.
call the method self._set with key, pickled and timeout as arguments.
if SystemExit exception is caught,
if not,
otherwise if disable_existing is true,
subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
try,
yield one element of data iterable.
if formfield_callback is None,
substitute f.name for field.
if InvalidTemplateLibrary, renamed to e, exception is caught,
call the function get_resolver.cache_clear.
value is an instance of ConvertingTuple class, created with an argument value.
define the function delete_many with self, keys and version set to None as arguments.
if settings.SETTINGS_MODULE is true,
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.
define the method configure_root with 3 arguments: self, config and incremental set to boolean False.
raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
try,
return value under the 'wsgi.url_scheme' key of self.environ dictionary.
define the function csrf_token with 2 arguments: parser and token.
replace every occurrence of "'" in s with "\\'".
if Exception exception is caught,
call the function is_aware with an argument value, if it evaluates to true,
code is a string 'max_value'
substitute package.__path__ for package_path.
call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
call the method validate with an argument value from the base class of the DecimalField class.
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
substitute the result for filter_re.   derive the class FilterExpression form the base class object.
format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function,   force_text with an argument e, for every e in self, return the result.   define the method as_text with an argument self.
day_field is a string '%s_day'.
skip this loop iteration,
self._files is an instance of class MultiValueDict.   define the method close with an argument self.
for every __ in iterator,
where '%s' is replaced with self.__class__.__name__.   if self doesnt have an '_ordering' attribute,
otherwise if ns is not contained in app_list,
get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,
define the method D with an argument self.
evaluate the function import_string with key_func as argument, return the result.
call the method parser.add_argument with an argument string '--pythonpath'.
call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.",
new_class.declared_fields.keys.   if missing_fields is true,
call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
if count of occurrence of ':' in ip_str is greater than integer 7,
convert language to lowercase and return it.
finally, perform,
remove dirname from the dirnames.
days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
if call to the function os.path.exists with argument directory evaluates to boolean False,
derive the class HttpRequest from the object base class.
define the method serialize_headers with an argument self.
get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
call the function mark_safe with an argument word, substitute the result for i-th element of words.
if not,
call the method match.groupdict, substitute the result for kw.
if migrations_directory is not a directory,
import module warnings.
define the method __iter__ with an argument self.
return duplicate
write the result to the self.stdout stream.   write output to self.stdout stream.
define the method find_fixtures with arguments: self and fixture_label.
return None.
define the method callback with an argument self.
call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
call the method data.find with an argument self._boundary, substitute the result for index.
from os import path into default name space.
where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.   fixture_files_in_dir is an empty list.
increment self.active_writers by 1.
return select_html.
if output is true,
bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it,
derive the class FileInput from the Input base class.
call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
streaming_content.setter decorator,
substitute first element of nonlocal_root for root.
get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.
msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
import module time.
extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.
return tuple, consisting of first element of t converted to lowercase and True.
strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.
call the function new_method_proxy with an argument str, substitute the result for __str__.
do nothing.
substitute i-th element of value for field_value.
define the method __init__ with arguments self, content and name defaulting to None.
call the function calculate_app_template_dirs, substitute the result for app_template_dirs.
digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
sites is an empty list.
get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,
do nothing.
create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.
append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,
define the method __new__ with 4 arguments: cls, name, this_bases and d.
substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.
from django.core.management.base import AppCommand into default name space.
call the method token.split_contents, substitute the result for bits.
or with string 'models.' if it is not and field_type.   if extra_params is true,
e is an instance of TemplateSyntaxError class, created with an argument msg.
if origin is true,
return data.
if self doesnt have an '_body' attribute,
define the method __setitem__ with arguments self, name and val.
substitute msg for body_msg.
define the method eval with 2 arguments self and context.
call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
if kwargs is None,
call the self.validate_key method with argument key.
get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.
update self dictionary with updates.
try,
define the function cut with 2 arguments value and arg.
define the function now.
from __future__ import unicode_literals into default name space.
end_text_pos is equal to integer 0.
call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',
logger.disabled is boolean True.
define the function template_localtime with 2 arguments: value and use_tz set to None.
close file descriptor s.
substitute value under the 'use_threading' key of the options dictionary for threading.
skip this loop iteration,
define the method add_handlers with 3 arguments: self, logger and handlers.
import module glob.
if self._options exists,
if app_config.models_module is None,
from __future__ import unicode_literals into default name space.
errors is an empty list.
return x.
USE_INOTIFY is boolean True.
and unpacked dictionary kwargs.   substitute streaming_content for self.streaming_content.
if response is None,
sum sign and hhmm, substitute the result for name.
lineno_comment_map is an dictionary.
if content is not None raise an error.
call the method notifier.stop.
do nothing.
derive the class LoaderOrigin from the Origin base class.
define the method encoding with arguments self and value.
try,
if not,
define the function default_if_none with 2 arguments value and arg.
self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.
if boundary is an instance of six.text_type class,
convert data into boolean and substitute it for data.
property decorator,
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,
define the method resolve with an argument self.
call the method connection.client.runshell.
define the function debug with an argument request.
if not,
status_code is an integer 400.
if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.
call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
return Operator.
if settings.USE_THOUSAND_SEPARATOR is true,
call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
media is an instance of Media class.
define the function walk_to_end with 2 arguments ch and input_iter.
substitute the result for value.   if not,
call the function import_module with an argument templatetag_module.
call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.
break the loop execution.
call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
otherwise if first element of message_context equals to character "'",
call the method self.itervalues, return the list of results.
g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.
dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN',   and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.   call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false',
call the function escape with an argument value, return the result.
if InvalidOperation exception is caught,
define the method set with 5 arguments, self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.
substitute self.STDOFFSET for self.DSTOFFSET.
increment i-th element of counters by chunk_length.
raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to
from django.utils.formats import get_format into default name space.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
property decorator,
define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
return self.
otherwise if self.verbosity is greater than integer 0,
if i is greater than sys.maxint,
if not,
define the method write_migration_files with arguments self and changes.
call the function m.group, if the result evaluates to true,
return value under the key key of dictionary in last element of self.dicts.
is smaller than self.min_num,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
call the timezone.now function, substitute the result for now.
flush the output buffer of the self.stdout object.
from django.dispatch import receiver into default name space.
if KeyError exception is caught,
call the parent class of Command class add_arguments method and parser as the arguments.
call the function warnings.warn with 3 arguments:
perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
substitute date_check elements to uclass, lookup, field and unique_for, respectively.
if self._encoding is None,
call the function warnings.warn with 2 arguments: string "Need {0} values to unpack in for loop; got {1}. This will raise an
define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,
otherwise substitute settings.USE_L10N for use_grouping.   if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
if cleaned_line ends with ';' character,
if exception ValueError or TypeError is raised,
in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v,
get the value under the self.using key of the connections dictionary, substitute it for connection.
call the function os.path.basename with an arguments path, substitute the result for filename.
if lang_code is true,
and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.   validate_email is an instance of EmailValidator class.
call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.
return s.
call the cursor.close method.
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.
define the function templatetag with 2 arguments: parser and token.
p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,
derive the class TemplateIfParser from IfParser base class.
value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.   define the method load_label with self and fixture_label as arguments.
if Exception, renamed to e, exception is caught,
substitute prefix for self.prefix.
CONTEXT_SEPARATOR is a string "\x04".
call the method self.widget.decompress with an argument initial, substitute the result for initial.
return default.
call the function activate with an argument self.language.
define the method __init__ with 2 arguments: self and offset.
if p.image is not empty,
call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,
define the method end_serialization with an argument self.
define the method __nonzero__ with an argument self.
call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.
call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
get name attribute of the self._out object, return it.
define the method L with an argument self.
call the nethod self._isdst with an argument dt, if it evaluates to true,
if self.pk_field,
call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name,
join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
call the method stream.read with an argument max_header_size, substitute the result for chunk.
raise an TypeError with an argument string "relative imports require the 'package' argument".
call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
call the method query_string.decode, substitute the result for query_string.
define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,
define the method __repr__ with an argument self.
call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
if not,
call the function os.chmod with arguments full_path and self.file_permissions_mode.
define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
append att_name to used_column_names list.
call the method translation._info.copy, substitute the result for self._info.
define the method _itervalues with an argument self.
define the function decorator_from_middleware with an argument middleware_class.
if cls is false,
format string ' gettext(%r) ' with g, write it to out.
throw an exception with string "unexpected call to parse_endtag" as the message.   search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
raise an exception.
try,
if self.to_field_name is true,
if val equals an empty list.
if not, substitute self.auto_id for id_.   if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.
call the function middleware_method with the request and response as the arguments, assign the result to response.
self.content_type_extra is None.
self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments,   filelist is a list containing all the previous results.   return filelist.
append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None,
call the function limit_choices_to, substitute the result for limit_choices_to.
try,
get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,
sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',
if can_fail is true,
define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__,
name is a string "_%d" formated with num_args.
call the method parser.skip_past with an argument string 'endcomment'.
call the method self.end_object with an argument obj.
filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,
append form to self.saved_forms.
append key to self.keyOrder.
from django.core.management.base import BaseCommand into default name space.
for every i and line in enumerated iterable lines,
define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
if offset is not None,
if not,
if unicode_value is an instance of six.text_type,
substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.   for every field in unique_check,
define function dictvale, with an argument t.
get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename,
substitute name for self.__name.
__all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',
define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
if KeyError exception is caught,
call the function check_for_language with an argument lang, if it evaluates to false,
call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.
define the method f with an argument self.
call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
substitute subject for self.subject.
from django.db import models into default name space.
from __future__ import unicode_literals into default name space.
from the base class of the class TypedChoiceField.   define the method _coerce with arguments self and value.
if node is not an instance of TextNode,
call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
if args is true,
append string "Field renamed because it started with '_'." to field_notes.
use global variable _translations.
define the function partition with 2 arguments: predicate and values.
evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
call the method operations.extend with an argument smigration.operations.
call the file.__enter__ method on self.
import imp.
if num_loopvars is not equal to len_item,
call the method self.can_write.release.
derive the class BaseArchive from the object base class.
raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
define the function make_naive with 2 arguments: value and timezone.
otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,
from django.utils.six.moves import cPickle as pickle into default name space.
_func_closure is a string "__closure__".
call the method m.groups, substitute the first element of the result for idx.
call the method parser.expression with an argument bp, substitute the result for self.first.
if IndexError exception is caught,
define the method __eq__ with self and other as arguments.
call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
property decorator.
for every path in paths,
as the arguments, substitute the result for response.   if Exception, renamed to e, exception is caught,
function-based loader.", where '%s' is replaced with loader.   substitute TemplateLoader for func.
if not,
substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it,
raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
otherwise if size is less than length of self.buffer,
return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.
substitute before_import_registry for register_to._registry.
if _cached_filenames is empty and settings.USE_I18N is True,
call the methof model_dependencies.reverse.
for every k and v in items of dictionary kwargs, respectively,
try,
if length of x is equal to integer 0,
self.request is None.
define method readline with self class instance and size set to None.
substitute it for value under the 'initial' key of kwargs dictionary.   if IndexError exception is caught,
define the function _samefile with arguments src and dst.
call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,
allow_multiple_selected is boolean True.
get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?",
derive the class Formatter from object base class.
define the method __eq__ with an argument self.
decorator function register.filter with an argument is_safe set to boolean True.
FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR,   TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.   from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,
substitute _iteritems for iteritems.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.
raise an TypeError with an string 'formfield_callback must be a function or callable'.
return value.
if ch is not equal to a sring '?' or escaped is true,
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list',
from django.test.utils import get_runner into default namespace.
return value.
delete name attribute from self._wrapped object.
if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,
try,
define the function lock with arguments f and flags.
if resolver.urlconf_module is None:
substitute file.name for filename.
from django.utils import six into default name space.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
call the method context.push, with the result perform,
do nothing.
queryset set to qs and unpacked dictionary kwargs.   define the method initial_form_count with an argument self.
substitute package.__name__ for package_name.
namespaces is an empty dictionary.
remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.
define the function check_1_7_compatibility with argument kwargs dictionary.
if data in self.empty_values is true,
split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
open file old_file_name in read bytes mode, with file descriptor as f,
call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.
if self does not has an '_post' attribute.
assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
define the function check_1_6_compatibility with argument kwargs dictionary.
call the method timezone.normalize with an argument value, substitute the result for value.
return an empty string.
define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
define the method data with an argument self.
call the function get_user_model, substitute the result for UserModel.
table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method,
if Exception, renamed to e, exception is caught,
return an instance of a NodeList class, created with arguments node, for every node in nodelist,
define the method tag with an argument self.
for every potfile in potfiles,
import module decimal.
call the function isabs with an argument path, if it evaluates to false,
data is an empty dictionary.
call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
from django.conf import settings into default name space.
for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.   try,
call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
status_code is an integer 410.
for every f in post_sql_fields,
define method load_middleware with class instance self as the argument.
_meta is class Options class instance initialized with table argument.
substitute self for result.parent.
define the method __str__ with an argument self.
get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message,
_translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
if url ends with '/' character,
if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
increment num_sent by one.
get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.
in the string "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>", replace '%s' with the name of the type of this class instance,
substitute the '%s' with table and list containing key, respectively.   return default.
return string "[Didn't have permission to include file]".
where '%s' is replaced with name.   if defaults is not None,
if old_method is false and new_method is true,
call the BaseCache.__init__ method with self class instance and params as the arguments.
call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text,
return output.
for every digit in number coverted to a string,
if value under 'plain' key of the options dictionary is true,
resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,
define the method decompress with 2 arguments: self and value.
call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.
call the method resolved_path.append with an argument ns.
trym
if key is contained in d,
description is a string "An instance of the '%s' class" with '%s' replaced by value of receiver.__class__.__name__.
substitute settings.STATIC_URL for prefix.
return initial_forms.
raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'",
if value is None,
if not,
msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
return boolean True.
return plist.
if not,
substitute lookup_view for lookup_view_s.
call the method self.get_available_name with argument name, substitute the result for name.
import module threading.
cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
call the function add_arguments with parser as an argument, from the base class of the Command class.
from __future__ import absolute_import into default name space.
if KeyError exception is caught,
if len_values is smaller than integer 1,
default_validators is a list with an element validators.validate_email.
for every i and char in enumerated text,
if key is not contained in default_settings,
if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
if truncate_len equals integer 0.
if not,
if not,
from django.conf import settings into default namespace.
import module sys.
return sites.
if request has an attribute 'session',
if pattern has an attribute '_callback_str',
from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
substitute self.max_num for total_forms.
if language_code is not contained in self._namespace_dict,
bring integer 36 to the power of factor, if i is smaller than the result,
if sent is true,
if self.field.choice_cache is None,
obj is an instance of Node class, created with 3 arguments: children, connector and negated.
if not,
derive the class UTC from the tzinfo base class.
return boolean False.
return an instance of EscapeText, created with an argument s.
if attr is contained in obj_dict,
sum year and off, substitute the result for year.
import module copy.
self._files is an instance of class MultiValueDict.   if not,
define the method add_post_render_callback with 2 arguments: self and callback.
call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
if e.errno equals to errno.EEXIST,
increment stats dictionary value under the MISSES key by integer 1.
return boolean False.
substitute serialize for __str__.
return list with an element first_item, and boolean True.
define the method render with an argument self.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]',
define the method g with an argument self.
"This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state."   "Are you sure you want to do this?"Type 'yes' to continue, or 'no' to cancel: ", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.   if not,
call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
call the method self.setlistdefault with an argument key, extend the result with value_list.
substitute '%r' with name and compile_function.   define the method tag_function with 2 argument: self and func.
if self._changed_data is None,
raise an NotImplementedError exception with argument string "This backend doesn't support absolute paths.".
self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,
try,
if field is not contained in self.fields,
return an empty string,
call the function force_text with an argument truncate, substitute the result for truncate.
if content_length is lesser than integer 0,
derive the class TemplateCommand from the BaseCommand base class.
call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.
append taglib_module to tried_modules.
call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,
call the method self._archive.close.
call the method g.flatten with arguments self and unixfrom set to unixfrom.
if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
decorator stringfilter,
_translations is an empty dictionary.
date_data is a tuple with 3 elements: date.year, date.month and date.day.
return s.
return an instance of SafeBytes, created with an argument data.
call the function _trans.templatize with 2 arguments: src and origin, return the result.
self.command_stack is an empty list.
define the function title with an argument value.
if not,
__M is a raw string '(?P<mon>\w{3})'.
from django.conf import settings into default name space.
call the method activate with an argument self.old_language.
from django.core.management.sql import sql_flush into default name space.
for every f in filters,
define the method clean with an argument self.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
self.m2m_data is None.
shell is an instance of IPShell class, created with an argument argv as an empty list.
if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
derive the class Media from the object base class.
call the method handler.startDocument.
define the method render with 4 arguments: self, name, value and attrs set to None.
if PY3 field of six is boolean True,
import time module.
substitute first args for other_dict.
daemonize is boolean False.
sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects,
dest as a string 'use_default_ignore_patterns', default set to boolean True,   and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".   call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap',
call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.
with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.   if KeyError exception is raised,
if obj is an instance of datetime.datetime,
concatenate name and string '_id', return it.
define the method as_table with an argument self.
new_ip is an empty list,
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
if self.min_value is not None,
derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
substitute FILE for TYPE.
derive the class BaseConfigurator from object base class.
if extend is true,
if response is None,
return s.
if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping,
delete the value under the key key of the self._expire_info dictionary.
substitute second element of args for name.
for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,
value is an empty list.
convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
if SkipFile exception is caught,
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
if every input_val in special_floats,
define the method __setattr__ with self, name and value as arguments.
raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
substitute (i+1)-th element of list_ for next_item.
update object_data dictionary with initial.
use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.   if target_app_labels_only is true,
call the method handler.endElement with an argument string 'author'.
define function patch_vary_headers, with response and newheaders as arguments.
define the method process with 3 arguments: self, command and domain.
from django.utils.encoding import force_text into default name space.
from django.db.migrations.executor import MigrationExecutor into default name space.
call the color_style function, substitute the result for style.
if filename is empty,
do nothing.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
priority is floating point number 1.0.
if value under the 'description' key of the item dictionary is not None,
register.tag decorator,
otherwise if self.verbosity is greater than integer 0,
define the method _assert_mutable with an argument self.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
app_configs is None.
define the method __str__ with an argument self.
substitute pubid for self.pubid.
try,
call the method tzinfo.__init__ with an argument self.
define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,
define the method pop with 2 arguments: self and idx set to negative integer 1.
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
return host.
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
call the method time.mktime with an argument tt, substitute the result for stamp.
for every d in self.dicts,
call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
call the method related.natural_key, substitute the result for related.
if second_item is an empty list,
get the value under the self.using key of the connections dictionary, call the method close on it.
try,
call the function get_standard_processors, append processors to the result, for every processor is the result,
append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.
otherwise if self._delegate_text is true,
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.
for value under the key key of the cache dictionary.   increment stats dictionary value under the MISSES key by integer 1.
substitute i for value under the 'counter0' key of the loop_dict dictionary.
derive class CheckMessage from object base class.
define the method __add__ with 2 arguments self and rhs.
get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
return val.
join elements of output in a string, separated by newlines, return it.
return nothing.
substitute sys.platform for plat.
if not,
call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.
test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
derive the class Template form the base class object.
convert value to uppercase, return the result.
call the method self.next_token, substitute the result for token.
for every refto and refs in return value of the method references.items,
define the method add_arguments with 2 arguments self and parser.
if mw_instance has an attribute named 'process_view'.
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
substitute self for result.parent.
value under the all_label key of the directory_created dictionary is boolean True.
import module os.
substitute filter_func for value under the name key of self.filters dictionary.
get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
set field cdata_tag for this class instance to None.
define the function total_ordering with an argument cls.
if not,
self.waiting_readers is an integer 0.
try,
define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
if else,
substitute last element of colors for value under the 'bg' key of definition dictionary.
get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
result_args is a list containing an empty list.
substitute doublecolon_len for best_doublecolon_len.
for every app_name in app_names.
derive the class RawPostDataException from the base class Exception.
define the function available_attrs with an argument fn.
label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.   call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,
if stream_or_string is an instance of six.string_types type.
append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.
append tuple with 2 elements: command and token.source, append the result to self.command_stack.
if KeyError exception is caught.
from django.utils.six.moves.urllib.parse import urljoin into default name space.
if field.widget.needs_multipart_form is true,
if self object has an attribute '_client',
substitute field.queryset for self.queryset.
if code is None,
define the method render with 4 arguments: self, name, value and attrs set to None.
for every handler in self._upload_handlers,
call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
endless loop,
register.tag decorator,
self.second is None.
insert none_value at the beginning of the choices list.
from pprint import pformat into default name space.
call the method self.add_error with 2 arguments name and e.
call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
raise a ValidationError exception with arguments self.message and code set to self.code.
define the class Serializer from the PythonSerializer base class.
return data.
call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,
from django.utils.datastructures import MultiValueDict into default name space.
raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)",
call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.
from django.utils.six.moves import map into default name space.
and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.
get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
LOCK_SH is a integer 0.
derive the class SortedDict from the dict base class.
derive the class MultiValueDict from the dict base class.
define the method __iter__ with an argument self.
define the method __get__ with 3 arguments: self, instance and name type to None.
callback is an lambda function with an argument response and with return value result of the method middleware.process_response,
lbp is an integer 0.
try,
if arg is None,
write the string "  Creating tables...\n" to the standard output.
raise a SerializerDoesNotExist exception with an argument format.
code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.   define the method _has_changed with arguments self, initial and data.
if field_desc doesnt end with '(',
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,
from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
define the method __init__ with arguments self and connection_reset defaulting to boolean False.
from django.core.files.utils import FileProxyMixin into default name space.
substitute self for retval.
if string '__str__' is not contained in __dict__ field of klass,
if not,
define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.
call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
if AttributeError exception is caught,
return boolean True.
register is an instance of Library class.
call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:
month_field is a string '%s_month'.
from django.utils.module_loading import import_string into default name space.
return value.
substitute node.source for e.django_template_source.
call the method queryset.none, substitute it for qs.
derive CacheEntry class from the object base class.
if timezone has an attribute 'normalize',
sites is an empty list.
where '%s' is replace by regex and return value of the function six.text_type with an argument e.   substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
define the method apply_response_fixes with self class instance, request and response as the arguments.
do nothing.
call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.
substitute return value of function no_style for style.
call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.
__all__ is an list containing string 'SelectDateWidget'.
from django.core.management.base import BaseCommand into default name space.
call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy,
for every key and value in items of other_dict dictionary,
raise an exception.
append list containing pattern to tried.
raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
define the method list with an argument self.
call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,
define the method __getitem__ with 2 arguments: self and key.
define the function wordcount with an argument value.
define the function get_cache with backend and dictionary pair of elements kwargs as arguments.
COMMENT_TAG_END is a string '#}'.
decorator register with Tags.models as an argument.
call the function normalize_newlines with an argument value, substitute the result for value.
strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num,   where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.   call the method self.clean.
define the method _parse_header with an argument line.
if exp is not None and exp is lesser than return value of the function time.time,
define the function _checkLevel with an argument level.
append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
break the loop execution.
append a string 'This field type is a guess.' to field_notes.
call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
delete attr.
define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.
get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
return message.
join elements of words into a string, return it.
do nothing.
call the function no_style, substitute the result for self.style.
from django.utils.datastructures import MultiValueDict into default name space.
if self_closing is true or tagname is contained in html4_singlets,
append the result at the end of string '.', append it all at the end of string cache_key.   if settings.USE_TZ is True,
call the method self.error with 2 arguments: token and string "Empty variable tag", return the result.
if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,
use global variable _supported.
call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name,
try,
define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,
if min_num is None,
for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.
if match is true,
if '_meta' is not an attribute of obj,
define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.
if urlconf is None,
derive the class BlockNode from the Node base class.
zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
if Exception exception is caught,
validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END,   COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.   from django.template.smartif import IfParser and Literal into default name space.
raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name,
RUN_RELOADER is boolean True.
call the function force_bytes with argument content, substitute it for content.
substitute self.state for state.
self._handler_class is None.
if rel_model has an 'natural_key' attribute and rel_model is not equal to model,
define the function verbatim with 2 arguments: parser and token.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__,
if entry is a directory,
check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
if plan_node is contained in loader.applied_migrations,
BM_compatible is boolean True.
append string '0000' to new_ip.
append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
if self.use_argparse is false,
if self.file has an attribute 'tell' and an attribute 'seek',
define the method __init__ with arguments self and request defaulting to None.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
define the method _delete with arguments self and key.
default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by "###".'   define the method handle with arguments self and unpacked dictionary options.
from IPython import start_ipython into default namespace.
get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
substitute target_var for self.target_var.
if not,
return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,
define the method path with arguments self and name.
return an instance of IfNode class, created with an argument conditions_nodelists.
split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
if ValueError exception is caught,
return nothing.
choice_input_class is None.
if not,
and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs.   if self.field.required is true and self.form has an attribute 'required_css_class',
call the function smart_text with an argument value, return the result.
substitute deactivate for self.deactivate.
expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.   define the method make_bytes with 2 arguments: self and value.
call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
output is an empty list.
subtract year from integer 2000, substitute the result for delta.
reason_phrase is None.
convert newline character to unicode and substitute the result for newline.
call the method self._get_scheme, return the result.
from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,
define the method S with an argument self.
derive the class Archive from the object base class.
call the function timezone.get_current_timezone, substitute the result for current_timezone.
for every finder in sys.meta_path,
if not,
if dklen is false,
import module errno.
return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string,   substitute the result for content_type.   if content_type doesnt start with string 'multipart/',
otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle,
and integer 60, substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
decorator total_ordering,
substitute EscapeText for EscapeString.
call the method field.rel.get_related_field, substitute the result for field.
self._current is None.
if years is true,
call the function apps.get_app_configs, for every app_config in result,
define the function removetags with 2 arguments value and arg.
total_ordering decorator,
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
message is an instance of the ValidationError class created with an argument message.
return boolean True.
timeout is a integer -1.
define the method __eq__ with arguments self and other.
call the connection.introspection.table_names with cursor as argument, store the result in tables.
if self.first is false,
call the method self.make_key with key and version set to version as arguments, substitute it for key.
write it to self.stdout.   for every migration in migrations_to_squash,
do nothing.
call the method self._create_attachments with argument msg, return the result.
substitute stream_or_string for self.stream.
filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith,
if not,
derive the class EscapeBytes from bytes and EscapeData base classes.
if smtplib.SMTPException exception is caught,
import module codecs.
if OSError exception is caught,
if not,
substitute use_l10n for self.use_l10n.
call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
if key is contained in d,
primary_keys is an empty list.
derive class InvalidCacheBackendError from the ImproperlyConfigured base class.
return self._post and self._files.
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.   call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true',
for every loc in locales,
where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.
if doublecolon_len is greater than best_doublecolon_len,
substitute self.default_timeout for timeout.
divide j by integer 7, substitute the floored result for week_number.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
NON_FIELD_ERRORS is an string '__all__'.
errors is a string "strict".
convert self.children into an boolean, return it.
call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.
call the method apps.get_app_configs, for app_config in the result,
return the result.   define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
return an empty list.
EventHandler.modified_code is FILE_MODIFIED.
derive the class FileUploadHandler from the object base class.
from django.core.management.base import BaseCommand into default name space.
return result.
call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
increment level by one.
from __future__ import unicode_literals into default name space.
for every func in self.response_fixes,
if i-th element of subject is '"' character or "'" character,
otherwise if self.name exists and self.name file path exists,
call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,
call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:
call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs,
remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.
call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.
substitute self.rawdata for rawdata.
break from the smallest enclosing loop.
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.
call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.   define the function get_system_encoding without the input arguments.
if os.name equals string 'nt',
raise CommandError exception with string "The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.", with '%s' replaced with po_path, as argument.
if value is true,
if model has an 'natural_key' attribute,
define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
from django.core.files import uploadhandler into default name space.
return response.
define the function deactivate.
call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs,
fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments:
raise an self.exception exception.
if not,
self._post is an instance of QueryDict class created with an empty string as argument.
if length of empty_label is not equal to integer 3.
substitute variables for self.vars.
strip url of surrounding '/' characters, substitute it for tmp.
from django.core.management.sql import sql_indexes into default name space.
format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   if not,
call the method handler.endElement with an argument string 'channel'.
get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,
try,
call the function post_callback with an argument retval, substitute the result for newretval.
define the method non_form_errors with an argument self.
call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.
if self.verbosity is greater or equal than integer 1,
call the function self.filter_expr.resolve with an argument context, return the result.
from django.forms.forms import everything into default name space.
if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
if self has an attribute '_body',
from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.
create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
define the method is_valid with an argument self.
if months is true,
parse_until is an empty list,
try,
year_field is a string '%s_year'.
substitute localize for self.localize.
from django.core.management import call_command into default name space.
substitute i-th element of value for widget_value.
dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',
define the method __contains__ with 2 arguments: self and other.
call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';',
with open file path in append mode,
delete attr.
derive the class BoundaryIter from the six.Iterator base class.
define the method render with 4 arguments: self, name, value and attrs set to None.
from __future__ import unicode_literals into default name space.
join elements of hextets into a string, separated with ':', substitute it for result.
call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
call the function runfastcgi with an argument args.
get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
is_templatized is boolean True.
if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
for every loader in self.loaders,
substitute boolean False for ignore.   for every d in object_list,
values is an dictionary created with result of the method val.resolve called with an argument context, for key,
yield node as an return value of a generator.
if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,
if value is contained in self.empty_values,
call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.
if autoescape is true,
and warning as a string "You cannot alter upload handlers after the upload has been processed.".   parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
return boolean False.
from django.conf import settings into default name space.
streaming is boolean False.
derive the class Critical from base class CheckMessage.
if TypeError or ValueError exceptions are caught,
if sys.platform starts with string 'java',
if num is greater than self._max_entries,
fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
if not,
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
'\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,
call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,
if not,
if transfer_encoding is not None,
from io import BytesIO into default name space.
move integer 1 left for 20 bits, substitute the result for MB.
substitute the resulting list for list_.   call the method setlist from the base class of the QueryDict class, with arguments key and list_.
call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.
if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
otherwise if dirname equals string 'locale',
do nothing.
define the function do_with with 2 arguments: parser and token.
for every k and v in result of method the self.lists.   define the method __deepcopy__ with 2 arguments: self and memo set to None.
__all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',
define the method utcoffset with 2 arguments: self and dt.
MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
derive the class TemplateEncodingError form the base class Exception.
call the method block.nodelist.render with an argument context, substitute the result for result.
return an empty string.
call the method archive.extract with an argument to_path.
if only_initial is false,
define __enter__ method with self as the argument.
from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
from django.conf import settings into default name space.
if not,
delete the _serializers dictionary entry at the format key.
call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
if not,
call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.
call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
from django.conf import settings into default namespace,
return nothing.
call the method os.chdir with an argument our_home_dir.
property decorator,
if the Exception exception is caught,
call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
return nothing.
if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
call the method value_from_datadict from the base class of the class ClearableFileInput,
return boolean True.
call the function converter with an argument suffix, substitute the result for value.
increment the offset by the length of self.__starttag_text.
raise an ContextPopException.
define the method as_tuple with 2 arguments: self and value.
call the method LocaleRegexProvider.__init__ with arguments self and regex.
call the method context.update with an argument unpacked_vars.
try,
define the method  remove_potfiles with an argument self.
buffer_ is None.
call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.   call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,
want_unicode is boolean False.
call the function force_text with an argument s, strip the result of whitespaces from both ends,
if value is contained in self.empty_values,
define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
if handler has an attribute 'file',
from django.http import QueryDict into default namespace.
if smtplib.SMTPException exception is caught,
if not self.initial_extra is None.   defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
if IndexError exception is caught,
substitute self for data.
output is an empty list.
import module time.
import module random.
first element of url_fields is string 'http'.
call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.
end_index is None.
if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
where '%s' is replaced with token.contents.   call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,
call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
do nothing,
define the function _get_timezone_name with an argument timezone.
append name to the value of under the app key of the commands_dict.
if file_name is false,
attrs as a dictionary with an entry: checkbox_id for 'id',   substitute the result for value under the 'clear' key of the substitutions dictionary.   format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of,
if format_module_path is an instance of six.string_types,
call the method self.configurator.convert with an argument value, substitute the result for result.
boolean True for 'ask_merge'.   for every app_label and migration_names in result of the method conflicts.items,
instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.
define the function _helper with 2 arguments list and tabs set to integer 1.
and _, respectively.   if file_ is true,
raise an CommandError exception with an argument string "You can only use --pks option with one model".
substitute settings.TIME_FORMAT for arg.
substitute kwargs for self.kwargs.
substitute context for block.context.
return value.
substitute self.html_name for name.
substitute root for oldroot.
inner is an instance of NonCapture, created with elements of result from start index to the end.
if KeyError exception is caught,
substitute connection.introspection.table_name_converter for converter.
define the method handle_field with argument self, obj and field.
call the function new_method_proxy with an argument len, substitute the result for __len__.
append digit to int_part_gd.
remove first element from remaining_bits, substitute the result for option.
call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,
decorator function register.filter with an argument is_safe set to boolean True.
from django.utils.xmlutils import SimplerXMLGenerator into default name space.
options is a list containing a tuple with 2 entries: string '--help' and None.
define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
if accept_lang equals '*',
call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
if not,
call the method __delitem__ from the base class of the class SortedDict, with an argument key.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if self.verbosity is greater or equal to integer 2,
call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
substitute regex for self.regex.
timeout is integer 300.
where '%s' is replaced with last element of args.   as_form is boolean True
substitute result for value under the mem_args key of the cache dictionary.
call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,
increment i by integer 1,
define the method __repr__ with an argument self.
raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used "
for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
define the function abspathu with an argument path.
get self.to_field attribute of self.parent_instance, substitute it for orig.
if not,
call the itertools.count function with argument integer 1, substitute the result for count.
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.
define the method __html__ with an argument self.
if self.body is true,
position file self.file pointer at the pos position.
from functools import update_wrapper.
derive the class LazyStream from the six.Iterator base class.
join statements into a string, separated by white spaces, append it to statements.
_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,
define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.
call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name,
self._closable_objects is an empty list.
define the method start_object with arguments self and obj.
if field.serialize is true,
try,
return val.
if self.domain is not equal to string 'django' or string 'djangojs',
if it doesnt exists return otherwise.   define the method __getitem__ with 2 arguments: self and key.
self.activated is boolean False.
substitute result for value under key key of self dictionary.
define the function new_method_proxy with an argument func.
raise an StopIteration exception.
'status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.   if settings.DEBUG is True,
call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
import module os.
if self.stream is not None,
if not,
if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.   app_template_dirs is an empty list.
return boolean False.
define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
try,
from importlib import import_module into default name space.
best_doublecolon_start is an integer -1.
write content to new_file file.
call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,
if ValueError or self.queryset.model.DoesNotExist exception is caught,
try,
if old_attr is None,
content is an empty string.
try,
call the method __init__ from the base class of the BaseTemporalField class, with arguments: unpacked list args and unpacked dictionary kwargs.
raise an exception of the class ValueError with string "Key '%s' not found" as argument, '%s' is substituted for key.
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.
return decorating_function.
get the value under the 'no_wrap' key of the options dictionary, if it is true,
if Exception exception is caught,
if every filter_name in strings 'escape' or 'safe',
if option_value is contained in selected_choices,
call the method os.umask with an argument umask.
if CONTEXT_SEPARATOR is contained in result,
if fget is not None,
if self doesnt have an attribute '_fqdn',
call the method wm.add_watch with path and mask as arguments.
define the method url with arguments self and name.
define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.
define the function _parse_header_params with an argument s.
ORDERING_FIELD_NAME is a string 'ORDER'.
if not,
call the self._open method with name and mode arguments, return the result.
import module sys.
derive the class RssFeed from the SyndicationFeed base class.
raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.
call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
derive the class StopFutureHandlers from the UploadFileException base class.
substitute nodelist for self.nodelist.
define the method end_object with arguments self and obj.
if TypeError or ValueError exceptions are caught,
define the method tzname with 2 arguments: self and dt.
token is an instance of Token class, created with 2 arguments: TOKEN_VAR,
remove kwargs dictionary element under the 'method' key, substitute it for method.
convert var into an floating point number, substitute it for self.literal.
call the method zbuf.getvalue, return the result.
otherwise if o is an instance of datetime.date object,
call the method dictConfigClass with an argument config, call the method configure on the result.
return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
try,
call the function trim_whitespace with an argument message, substitute the result for message.
substitute connections element at the index of the value db for connections.
call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,
if ImportError, rename it to e, exception is caught,
substitute the result for the value under the 'year' key of the html dictionary.   call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
if message is not None
call the os.stat function with argument src, substitute the result for st.
if s is not an instance of the object Exception,
register is an instance of Library class.
substitute Lexer and Parser for lexer_class and parser_class.
return the result.   if type of s equals bytes,
instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.
define the method value_from_datadict with 4 arguments: self, data, files and name.
and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/   STATUS_OK is integer 0.
substitute variable_name for self.variable_name.
define the function restart_with_reloader.
if var is not an instance of six.string_types,
get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,
if use_grouping is true,
return integer 1 and ch2.
call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs,
raise an AttributeError with an argument attr.
if message is an instance of ValidationError class,
call the function widget, substitute the result for widget.
return an empty string.
define compile_messages method with self class instance and locations as a arguments.
if sublist_item is true,
kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary,
called with arguments: filename and pattern.   call the function ignore with an argument pattern, for every pattern in ignore_patterns,
call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
if not,
substitute first element of to_digits for res.
call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
define the method exit_command with an argument self.
from django.utils import six into default name space.
if self.localize is true,
if threading is true,
call the function BytesIO with self.buffer as argument, store the result is sio.
self.file_name is None.
call the function find_command with an argument program, if it evaluates to None,
join elements of base36 into a string, return it.
if app_name is not contained in loader.migrated_apps,
substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.
call the method HTMLParser.__init__ with an argument self.
default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
split tmp at '/' character, substitute the last element of the result for filename.
define the method serialize_headers with an argument self.
define the method _ipython_pre_100 with an argument self.
help is a tuple containing string "Creates a Django project directory structure for the given "
if prefix is None,
define the function time_format with 2 arguments: value and format_string.
call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:",
self.registered_checks is an empty list.
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
from itertools import chain into default name space.
define the method get_unique_error_message with 2 arguments: self and unique_check.
call the method field.clean with an argument field_value, append the result to clean_data.
format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',
call the add_arguments method from the base class of the class Command with parser as an argument.
__all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.
if value under the 'indend' key of the options dictionary exists and is not None,
convert fist p elements of language to lowercase, append '_' to it,
timeout is a integer -1.
raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.',
define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.
call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
if cc is not an six.string_types instance raise an error with message string '"cc" argument must be a list or tuple'.
self.config is an instance of ConvertingDict, called with an argument config.
substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
substitute fields for new_class.base_fields.
define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
if LookupError or TypeError exceptions are caught,
substitute self.handle_app for handle_app.
and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
define the method _get_count with an argument self.
write it to self.stdout.   substitute Command for BaseRunserverCommand.
call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.
call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,
if data is true, substitute it for data, otherwise data is an empty list.
return value.
from django.forms.utils import ErrorList into default name space.
for every item in elt,
if not,
or path is not contained in the value under the medium key of self._css dictionary.   call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
new_value is a sum of value and delta.
assign obj to the obj field of self instance of this class.
return obj.
define the method _post_clean with an argument self.
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
try,
if not,
define the function make_key with self class instance, key and version set to None as arguments.
from django.utils import six into default name space.
try,
raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
mixed_subtype is a string 'mixed'.
if value is contained in self.empty_values,
call the function warnings.warn with 3 arguments: string "django.utils.importlib will be removed in Django 1.9.",
if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
if value is None,
substitute node for bit.
if i is smaller than integer 0,
string 'Enter a list of values.' for 'list', return value of the function _ called with an argument,   string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.   define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,
requires_system_checks is boolean False.
call the method obj.save with an argument using set to self.using.
raise and exception InvalidCacheBackendError with string "Could not find config for '%s' in settings.CACHES" as argument, replace '%s' with alias.
if six.PY3 is true,
return default.
if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,
substitute value for value under the self.variable_name key of the context dictionary.
if expires is lesser than now,
if TypeError exception is caught,
if AttributeError exception is caught,
return FormSet.
define the method translate_token with 2 arguments: self and token.
call the method self.create_table with arguments: db and tablename.
define show_migration_list with self class instance, connection and app_names set to None, as arguments.
define the method __iter__ with argument self.
define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
return parent.
return an empty string.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
if evaluation of the function find_command with self.program as argument equals to None,
call the function token.split_contents, substitute the result without the first element for bits.
call the method self.args_check with 3 arguments: filter_name, filter_func and args.
if not,
return saved_instances.
define the method __getstate__ with an argument self.
call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
call the function safe_join with 2 arguments template_dir and template_name, yield the result.
raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.",
get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.
call the function logging_config_func with an argument logging_settings.
self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
decrement factor by one.
call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
if number equals a integer 1 and self.allow_empty_first_page is true,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if nodelist_empty is None,
bcc, connection, attachments, headers and cc.   if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.
get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
define the function sanitize_separators with an argument value.
call the function safe_join with 2 arguments template_dir and template_name, yield the result.
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
if name is None,
get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
do nothing.
call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
for every c in return value of the method response.cookies.values,
append value under the key v of foreground dictionary to code_list.
do nothing.
substitute nodelist for self.nodelist.
if row is None,
call the color_style method, substitute the result for self.style.
_supported is None.
return None.
derive the class URLInput from the TextInput base class.
derive the class Literal from the TokenBase base class.
call the function get_commands, call the method keys on the result, substitute sorted result for usage.
derive the class LocalTimezone from the ReferenceLocalTimezone base class.
if secret is None,
define the method delete with self class instance, key and version defaulting to None as arguments.
return out.
add state element to self.__dict__ dictionary.
import module re.
raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
return context.
extend comment_notes list with field_notes.
if self.invoked_for_django is false,
if id_for_label is true,
return parser
substitute '%s' in the string '\n%s:\n%s\n', with group_name and formatted, substitute the result for msg.
append string "Field renamed because of name conflict." to field_notes.
call the function warnings.warn with 3 arguments:
substitute the result for sequence_sql.   if sequence_sql is true,
call the method self.var.resolve with an argument context, substitute it for obj.
call the method cls.__new__ with 2 arguments: cls and unpacked list args.
convert path to a string, substitute the result for path.
decorator classmethod,
substitute result for value under the RESULT key of the oldroot dictionary.
if self.required is boolean true,
only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.   chain all errors elements into a list, return it.
meta is a string '<could not parse>'.
raise an TypeError exception with an argument string "end must be None or a string".
append opts.virtual_fields to opts.many_to_many, for every f in the result,
substitute instance._meta for opts.
define the method setlist with 3 arguments: self, key and list_.
if KeyError exception is caught,
raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s",
import module copy.
from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
substitute context for self.context_data.
substitute value under level key of logging._levelNames dictionary for rv.
substitute string "Enter at least one %s.", with '%s' replaced by label, for missing_args_message.
define the method items with an argument self.
for every k and v in self.choices,
convert locale to lowercase and return it.
get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
substitute arg converted into an integer for length.
define the method __init__ with 2 arguments: self and name.
do nothing.
for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',
return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
biggest_number is maximum numbers element.
usage set to return value of the method self.usage called with an argument subcommand, version set to return value of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
derive the class OVERLAPPED from the Structure base class.
call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
if test_runner_class has an 'option_list' attribute,
if content_disposition is true,
default set to boolean False and help as a string "Create an empty migration.".   call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',
get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary,
TOKEN_VAR is integer 1
substitute DEFAULT_DB_ALIAS for db.   remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists,
call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
call the function mark_safe with an argument new_obj, substitute the result for obj.
define the function gettext with an argument message.
if AttributeError exception is caught,
try,
compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
get format_type attribute of the settings object, return it.
raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with,
define the method _isdst with 2 arguments self and dt.
call the method os.unlink with an argument pot_path.
substitute _iteritems for iteritems.
call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,
for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,
do nothing.
define the function ungettext with 3 arguments: singular, plural and number.
label is an empty string.
if not,
append tempdir to self.self.paths_to_remove.
write errors to self.stdout.
self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding,
call the method self._send with argument message, substitute the result for sent.
create lambda identity function which returns x for input parameter x, return the function.
return nothing.
from django.db.models.fields.related import RelatedObject into default namespace.
called with an argument k.   call the function c with an argument unpacked dictionary kwargs, substitute the result for result.
if not,
if UnicodeDecodeError exception is caught,
if field.rel.through._meta.auto_created is true,
substitute self.version for version.
if delta is smaller than integer 0,
return flat.
if count of occurrence of '.' in ip_str is equal to integer 3,
append value under the key v of background dictionary to code_list.
use the global variables _mtimes and _win in this function.
from django.utils import archive into default name space.
call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
define the function localize_input with 2 arguments value and default set to None.
'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.   define the method to_python with arguments self and value.
if second element of t is boolean True,
if not,
substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
call the method sys.stderr.close.
for every value in result of the method self.prepare_value called with an argument initial.   data_set is set created out of return values of the function force_text called with an argument value,
call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
call the function func with an argument unpacked list args, substitute the result for result.
from django.forms.utils import flatatt and to_current_timezone into default name space.
if command.use_argparse is true,
if not,
if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
if change equals to FILE_MODIFIED,
call the method self.create_nodelist, substitute the result for nodelist.
if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
import module locale.
if six.PY3 is true,
call the method self.open, substitute the result for stream_created.
content_length is integer 0.
do nothing.
substitute number for self.number.
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
if close is True,
ch2 is None.
if string '%(truncated_text)s' is contained in truncate,
if not,
call the method self._archive.list.
if '.' is contained in exclude,
content_length is None.
substitute the result for value under 'address' key of config dictionary.   substitute klass for factory.
substitute obj for value under the self.var_name key of the context dictionary.
if not,
define the method add_root_elements with 2 arguments: self and handler.
from django.utils.encoding import python_2_unicode_compatible into default name space.
from __future__ import unicode_literals into default name space.
define the method __init__ with 4 arguments: self, data, func and prefix.
if VariableDoesNotExist exception is caught,
call the method self.stdout.write with an argument string "Loading '%s' fixtures...", where '%s' is replaced with fixture_name.
define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
from django.utils.six.moves import copyreg into default name space.
substitute the length of defaults for dlen.
define the method __copy__ with an argument self.
derive the class DummyCache from the base class BaseCache.
call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.
if expanded_template is a directory,
substitute it for value under the 'pk' key of data dictionary.   return data.
return boolean True.
return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,
models is an empty set.
substitute sys.maxsize for MAXSIZE.
compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.   call the method block_context.add_blocks with an argument blocks.
from importlib import import_module into default name space.
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
if attachment is an instance of MIMEBase,
substitute config dictionary value under '()' key for factory.
created with an argument widget set to HiddenInput.   value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
from django.conf import settings into default name space.
if message is not None,
call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
substitute i-th element of self.forms for form.
call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
write string "Performing system checks...\n\n" to self.stdout stream.
decorator python_2_unicode_compatible,
define the function check_for_language with an argument lang_code.
define the method get_unique_error_message with 2 arguments: self and unique_check.
and self.absolute_max, return the result.   if not,
model._meta.app_label and model._meta.object_name joined into a string, with separator '.',   result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key:   return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.   substitute skipped for model_dependencies.
if self.verbosity is greater or equal to integer 2,
from .. import Warning, register and Tags into default name space.
substitute self.default_timeout for timeout.
call the method popitem from the base class of the class QueryDict, return the result.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
from django.core.exceptions import ImproperlyConfigured into default name space.
if not, sself.empty_value is an empty string.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
if name is None and compile_function is None,
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
if not,
try,
do nothing.
call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,
split content by newline character, for every line in result,
call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with
try,
call the method m.end with an argument integer 0, substitute the result for pos.
with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
try,
_iterlists is a string "iterlists".
remove the 'stream' key from the options dictionary and substitute it for self.stream,
define the method handle_fk_field with arguments self, obj and field.
define the function deactivate.
if key_func is not of None type,
derive the class SlugField from the base class CharField class.
raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.",
if not,
define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.
raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.
get the value under the name key of the data dictionary, if it exists return it, if not return None.
"%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.   define the function parse_http_date_safe an argument date.
define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.
nm and addr are addr.
from django.template.loader import BaseLoader into default name space.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
where string '%s' is replaced by mod_name and func_name, respectively.   return view_func.
FILE_INPUT_CONTRADICTION is an instance of object class.
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.
define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
import module socket.
define the method add_arguments with 2 arguments self and parser.
call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond,
substitute CheckboxFieldRenderer for renderer.
if not self.isolated_context is boolean False.   call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,
otherwise if char is contained in string 'dj',
call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
if digest is false,
flags is a integer 0.
if self.base_url is None,
sql_files is an empty list.
if path is an instance of six.string_types,
empty is an instance of object class.
substitute the first 255 elements of ext for ext.
get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.
" normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.".   derive the class ChunkIter from the six.Iterator base class.
if level is true,
and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread",
return self._client.
define the method __eq__ with arguments self and other.
call the method self.indent with argument integer 2.
if value is an instance of datetime.date class,
if IOError, renamed to e, exception is caught,
otherwise if vale is an instance of value,
import module errno.
call the get_path_info function with environ as argument, substitute the result for path_info.
if original_lookup and lookup_view are not callable objects,
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.
break from the loop execution.
clean is a lambda function with arguments self and x, return value is x.
raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied",
app_configs is a list containing app_config.
if seventh element of row is true,
define the method close with argument self.
if data is not None,
try,
if exception SuspiciousOperation as e is caught,
raise an exception.
if USE_INOTIFY is true,
if related_att is not None,
define function add_never_cache_headers, with response as an argument.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
HttpResponse.content.setter property,
define the function normalize with an argument pattern.
define the method nud with 2 arguments self and parser.
if last element of pieces is true,
object_data is an empty dictionary.
substitute var1 and var2 for self.var1 and self.var2, respectively.
title is an empty string.
concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
of the obj object.   if commit is true,
call the method __init__ with an argument initlist from the base class of the class ErrorList.
increment weight by integer 2.
get the absolute file path of the expanded_template, substitute it for absolute_path.
call the __init__ method of the base class of the QueryDict class.
get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,
delete frame.
define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.
if form has an attribute 'Meta',
if _localtime is None,
do nothing
define the function conditional_content_removal with request and response as the arguments.
return value under key key of dict_ dictionary.
define the method values with an argument self.
convert val to an list, substitute it for val.
substitute parsed for self.parsed.
if value under the 'daemonize' of options dictionary is None,
substitute field_type for field_type and new_params, respectively.
call the function get_urlconf with an argument urlconf.
call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
if value is an instance of six.string_types class,
raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
from django.apps import apps into default name space.
call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}="{1}"'
if self.selected_fields is None or field.attname is contained in self.selected_fields,
if token.contents equals string 'empty',
break from the loop execution.
import module time.
call the method self.add_error with 2 arguments: None and errors.
if decimal_pos is not None
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text',
otherwise if ch equals a string '.',
if key_prefix is None,
call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,
return boolean False.
from django.utils import six into default name space.
substitute self.model._default_manager for queryset.
substitute name for self.name.
define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,
call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
define the method register with self ans unpacked list tags as arguments.
if UnicodeEncodeError exception is caught,
call the method o.isoformat substitute the result for r.
called with an argument commit, return the result.   save.alters_data is boolean True.
from django.utils.timezone import is_aware and utc into default name space.
define the method rss_attributes with an argument self.
substitute i-th element of self.forms for form.
derive the class PageNotAnInteger from the InvalidPage base class.
join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
obj is None,
return all the results in a list.   decorator function register.filter with an argument is_safe set to boolean True.
_func_code is a string "func_code".
substitute first element of level for common_ancestor.
define the method __str__ with an argument self.
call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
input_type is None.
if not,
name is an empty list.
requires_system_checks is boolean False.
help is an string 'Installs the named fixture(s) in the database.'.
call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.   for every templatetag_module in templatetags_modules_candidates,
if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
define the method listdir with arguments self and path.
define the function advance_iterator with an argument it.
from xml.sax.saxutils import XMLGenerator into default name space.
force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache.%s.%s'.
raise an exception,
return statements.
in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,
substitute self.input_type for self.input_type.   call the method __init__ from the base class of the class TextInput, called with an argument attrs.
if self.verbosity is greater or equal to integer 1.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
if exclude is true and f.name is contained in exclude,
and unpacked dictionary kwargs.   call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,
locales is a list with an element locale.
define the method encode with self class instance and i as arguments.
from django.apps import apps into default name space.
call the method self._cull with db, cursor and now as arguments.
define the function ungettext with 3 arguments: singular, plural and number.
call the method self.end_serialization.
RemovedInDjango19Warning and stacklevel set to integer 2.   if data is None or data is an instance of dict type,
if self.merge and conflicts are both true,
use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list,   substitute the resulting list for dirs.   return dirs.
return boolean False.
join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.
return boolean False.
append string '_directory' to app_or_project, substitute it for base_directory.
objects_in_fixture is integer 0.
if ValueError exception is caught.
if first element of the url_fields is false,
call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.
call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.
append self to nodes.
where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.   call the function sys.exit with an argument integer 1.
from __future__ import unicode_literals into default name space.
call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
import module os.
if exists, if not use None as the second argument, return the result.   call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
if self.field.label is None,
where '%s' is replaced with opts.object_name and fail_message, respectively.   define the function save_m2m.
split label by '.', assign the result to app_label and model_label, respectively.
define the function csrf with an argument request.
try,
substitute force_text for force_unicode.
for every f in files,
call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.
call the method close on self.
return self._errors.
decorator function wraps with an argument fget.
if the value of the kwargs dictionary under the key k is not equal to v,
call the function pickle.load with argument f, substitute the result for exp.
for every app_config in return value of the call to the function apps.get_app_configs,
replace %s in string '    %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one,
target_app_labels_only is boolean True.
if values is None,
if AttributeError exception is caught,
try,
from django.utils.encoding import force_str into default name space.
call the function get_urlconf with an argument urlconf.
try,
define the method handle_data with 2 arguments self and d.
put loaders elements in a tuple, substitute it for template_source_loaders.
return boolean True if tag is contained in self.tags_available method return value, return False otherwise.
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.
if not,
substitute callback for self._callback.
define the function comment with 2 arguments: parser and token.
substitute last for value under the PREV key of the link dictionary.
call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.
if six.PY2 is true,
convert pattern to lowercase, substitute it for pattern.
call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database',
define the method __deepcopy__ with 3 arguments: self and memo.
define the method to_python with arguments self and value.
define the method validate_key with self class instance and key as arguments.
define the method N with an argument self.
if expires is false,
define the function get_library with an argument library_name.
db_module is a string 'django.db'.
append name to self._changed_data list.
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
escaped is boolean True.
derive the class WSGIRequest from base class http.HttpRequest.
try,
substitute the settings.MEDIA_ROOT for location.
if not self.pk_field is boolean False.   remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,
skip this loop iteration.
append '.' to frag, append the result to used.
append tuple containing element attr to boolean_attrs.
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.
for every c in reversed order of self.__class__.__mro__,
__all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',
try,
from __future__ import unicode_literals into default name space.
call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',
for every name in self.fields,
and unpacked dictionary kwargs.   substitute max_length and min_length for self.max_length for self.min_length.
write ',' to the self.stream file stream.
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
define the function get_script_prefix.
chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,
register is an instance of Library class.
supports_microseconds is boolean False.
multiply offset.days with 86400, add offset.seconds to the result, return the result.
for every name in formatters,
substitute parent_widget for self.parent_widget.
try,
substitute msg for body_msg.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.   self.invoked_for_django is boolean False.
call the function pformat with an argument sys.modules, append the result for output.
try,
call the method fp.getvalue, return the result.
define the method content with an argument self.
call the Error function with 4 arguments, string "%s was connected to the '%s' signal with a lazy reference to the '%s' sender,
substitute self.deleted_forms for forms_to_delete.
and digestmod set to hashlib.sha1, return the result.   define the function constant_time_compare with 2 arguments: length set to integer 12,
import msvcrt.
assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.
and pattern.default_args.   if pattern.name is not None,
call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
call the method token.split_contents, substitute the result.
define the funtion _generate_cache_header_key with key_prefix and request as arguments.
for every p in path,
property decorator,
define the method W with an argument self.
fetch one record from the database cursor points at, substitute the first element of return value for num.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,
convert priority into a floating point integer, substitute it for priority.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
if display_num_errors is true,
define the function format with 2 arguments self and formatstr.
call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
extend the value under the field key of the self._errors dictionary with error_list.
convert whitespace character to unicode and substitute the result for space.
yield string '    %s', where '%s' is replaced with field_desc.
from datetime import timedelta and tzinfo into default name space.
call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
for every form in self.initial_forms,
if incremental is true,
return self.empty_value.
convert field into a string and concatenate it to a string '* ', append the result to output.
call the method self.close.
return iri.
result is an integer 0.
if not,
from django.db import models and DEFAULT_DB_ALIAS into default name space.
if LookupError exception is caught,
if path is not initialized,
from django.core.management.base import CommandError into default name space.
define the method dst with 2 arguments self and dt.
intrans is boolean False.
return an empty string.
if plan is not true,
substitute boundary for self._boundary.
define the method __repr__with an argument self.
if self.verbosity is greater than integer 0,
for every app_name is app_names,
if initial is None,
decorator stringfilter,
define the method add_arguments with 2 arguments self and parser.
return self._is_rendered.
replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
an instance of VerbatimNode class, return it.   register.tag decorator,
call the function sys.exit with an integer 1 as an argument.
if not,
if exception of class Exception, as e, is caught,
from django.utils import six into default name space.
if limit_choices_to is not None,
define the method __getinitargs__ with an argument self.
import module collections.
call the django.setup method.
and elements of parse_until joined into a string, separated by string ', '.   raise an self.source_error exception with 2 arguments: source and msg.
raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
if tok starts with "'",
call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function,
if app_config.models_module is None or app_config is contained in excluded_apps
call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.
call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
define the function unlock with argument f.
return list with 2 elements: first_item and second_item, and old_style_list.
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.",
update default_attrs dictionary with attrs entry.
error_messages is an empty dictionary.   substitute error_message for value under the 'invalid' key of the error_messages dictionary.
define the function handle_default_options with an argument options.
raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with,
extend new_second_item with item.
call the method self.path with argument name, substitute the result for full_path.
increment i-th element of result by piece.
convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.
from django.utils import six into default name space.
try,
update fields dictionary with new_class.declared_fields.
convert timeout into an integer.
call the function get_internal_wsgi_application, return the result.
append string 'django.conf.locale.%s' to format_locations.
for every k and v in return value of the method self.kwargs.items.   return resolved_args and resolved_kwargs.
break the loop execution.
try,
python_2_unicode_compatible decorator,
call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
if TypeError exception is caught,
if self.waiting_writers is not equal to integer 0,
if message is an instance of ValidationError class and message.code is contained in error_messages,
try,
cached_property decorator,
from django.utils.ipv6 import clean_ipv6_address into default name space.
call the method sub_match_dict.update with an argument sub_match.kwargs.
append migration.name to string ' - ', write it to self.stdout stream.
call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
invert self.negated.
define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
join usage and self.help into a string, separated by 2 new line characters, return it.
raise an ValueError exception with an argument string "Base36 input too large".
call the method app.rpartition with an argument '.', substitute last element of the result for app.
if value is an instance of bool.
call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with,
use_null_fallback is boolean False.
from django.core.exceptions import ValidationError into default name space.
substitute Paginator for QuerySetPaginator.
import module re.
define the method __str__ with an argument self.
call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,
call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
substitute value under the PREV key of the root dictionary for last.
for every character in name,
call the method error.items, for every field and error_list in the result,
for every i and arg in enumerated iterable args,
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
define the method _get_scheme with self class instance as argument.
call the method token.split_contents, substitute the result for bits.
define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
for every message in messages,
if not,
if path_to_remove is file,
substitute basestring for string_types.
return path.
from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.
substitute obj._meta.concrete_model for concrete_model.
if self.LibraryValueNotFoundException exception is caught,
call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
break the loop execution.
from django.core.management.base import BaseCommand and CommandError into default name space.
self.objects is an empty list.
derive the class InputStreamExhausted from the Exception base class.
join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.
if not,
raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s",
call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,
define the function decorator_from_middleware_with_args with an argument middleware_class.
define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
try,
do nothing.
call the method parser.next_token, substitute the result for token.
pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
if OSError renamed to e, exception is caught,
use its __name__ field as a key to get the value from self.tags, assign func to it.   return func.
define the function dec with an argument func,
if OverflowError exception is caught,
if not an empty string, and truncate, return the result.   return text.
from module __future__ import unicode_literals to default name space.
if self does not have an attribute named '_dimensions_cache'.
get "_decorated_function" attribute from func, return func if the attribute doesnt exists,
delete first element of bits.
import module sys.
self.items is an empty list.
return id_.
substitute type for class_types.
output_transaction is boolean False.
from django.utils.encoding import force_text into default name space.
define the method next_page_number with an argument self.
return host.
substitute http_cookies.Morsel for Morsel.
call the method text.find with 2 arguments: substr and i, substitute the result for j.
self.object._meta.object_name and self.object.pk, respectively.   define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.
WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',
convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
decorator stringfilter,
substitute member.name for name.
if expires is an instance of datetime.datetime class,
if not,
for every key_value in natural,
append rel_to to string 'ForeignKey(, append character "'" to it, substitute the result for field_type.
call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i,
return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
for every f in opts.local_fields,
call the method handler.addQuickElement with 3 arguments: string 'dc:creator',
define the function get_language_bidi.
substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.
value under the field.attname key of the data dictionary is None.
if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,
do nothing.
skipped is an empty list.
from django.core.management.base import BaseCommand and CommandError into default name space.
if string ':::' is contained in ip_str,
assign StringIO.StringIO to StringIO and BytesIO.
substitute the result for new_class.   if bases equals a tuple with an element: class BaseModelForm.
if form is contained in forms_to_delete,
if not,
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
self.content_type is None.
call the function force_text with an argument value, substitute the result for value.
if self.username and self.password are true,
for every loader_name in settings.TEMPLATE_LOADERS,
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,
substitute self for self.config.configurator.
substitute the result for sequence.   call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
append potfile to potfiles.
define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
define the method _set_choices with arguments self and value.
define the __init__ method with arguments: self, text, subtype and charset.
'Enter a whole number.' for 'invalid'.   define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
if NameError exception is caught,
4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
do nothing.
define the function get_default_timezone.
if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
if timezone has an attribute 'normalize',
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
assign the result to opts and new_class._meta.   for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',
if not,
if weight is greater or equal to integer 6,
for every label in labels,
derive the class VerbatimNode from Node base class.
for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
substitute mapped_tokens for self.tokens.
where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
import module copy.
return value of the method field.rel.to._meta.pk.to_python called with an argument v.   call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
for every node in nodelist,
define the method __deepcopy__ with 2 arguments: self and memo.
for every child in node.childNodes,
for key and value in return value of the six.iterlists function called with an argument self,
call the function iter with an argument patterns.
call the Warning function with 4 arguments: string "MIDDLEWARE_CLASSES is not set.", hint tuple containing one string,
sublist is an empty string.
define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
if i is greater than or equal to the result of the method self.initial_form_count,
join all of the results into a string separated by newline character, return the result.   define the method __str__ with an argument self.
return boolean False.
substitute third element of renamed_method for deprecation_warning.
call the function force_str with an argument sep, substitute the result for self.sep.
if cc contains item 'max-age' and kwargs contains item 'max_age',
define the function close_caches with dictionary pair of elements kwargs as argument.
if index is not an instance of six.integer_types or tuple type,
if self.initial is true and 'initial' key is not contained in kwargs,
skip this loop iteration,
define the function ngettext with 3 arguments: singular, plural and number.
mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
substitute self._request_middleware for request_middleware.
call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
all_date_checks is an empty set.
call the method self.handle_file_complete with arguments old_field_name, counters.
substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help',
define the method media with an argument self.
func.is_usable in false,
substitute module for the value under the format key of the serializers dictionary.
define the method find_template with 3 arguments: self, name, dirs set to None.
call the function dec with an argument func, return the result.
if self.var is an instance of Variable class,
call the method self.model._default_manager.get_queryset with an argument qs.
return settings.LANGUAGE_CODE.
call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.
if msgs is true,
for every name in MEDIA_TYPES,
iterations and dklen, return the result.   if not,
convert items of attrs dictionary to list of tuples, for every attr and value in it,
define the method _add_local_translations with an argument self.
call the method parser.next_token, substitute the result for token.
strip message_context of "'" characters from both ends, substitute the result for message_context.
define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
try,
for every dict_ in self.dicts,
if target_dir path doesnt exists,
call the method self.add_filters with 2 arguments: result and filters.
for every part in plural,
__all__ is a string containing strings: 'UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler',
It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving   as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.",   obj set to None and id set to a string '1_6.W001', put the result into a list and return it.   if not,
from __future__ import unicode_literals into default name space.
constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)",
if mw_instance has an attribute named 'process_template_response'.
substitute elements of middle from length of opening index to the end, for middle.
if widget is an instance of type class,
if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message,
from datetime import date as real_date and datetime as real_datetime into default name space.
self.fixture_object_count is integer 0.
instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,
from importlib import import_module into default name space.
write string "  No optimizations possible." to self.stdout stream.
substitute id for self.id.
return errors.
substitute the result for self._object_dict.   return the value under the pk key of self._object_dict dictionary.
append the tempdir to self.paths_to_remove.
skip this loop iteration,
try,
return self.data.year.
split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
return self.s.
if Exception, renamed to e, exception is caught,
raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
try,
if path starts with string 'http://' or string 'https://' or with string '/',
call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name,
if _supported is None,
return boolean False.
if y, m and d are all equal to string '0',
try,
try,
otherwise if name is not None and compile_function is None,
define the method id_for_label with 2 arguments: self and id.
set field interesting for this class instance to interesting_cdata from module _html_parser.
substitute flags for self.flags.
if level is not None,
define the function templatize with 2 arguments: src and origin set to None.
from collections import OrderedDict into default name space.
if KeyError exception is caught,
import module zlib.
return nothing.
substitute element at the bit index of current for current.
current_fields is an empty list.
if self.verbosity is greater than integer 0,
form._meta.fields is a list created out of form._meta.fields elements.
default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.'.   define the handle method with self class instance and dictionary **options as arguments.
from django.utils.synch import RWLock into default name space.
import module sys.
return nothing.
define the function next_char with an argument input_iter.
call the method __init__ with an argument name form the base class of the class _LazyModule.
if not,
if os.name equals to 'nt',
if filename ends with string '.mo',
import flup
from django.conf import settings into default name space.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
derive the class Operator from the base class TokenBase.
extra_params is an instance of the class OrderedDict.
call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
replace '%(size)d with bytes, substitute the result for value.   otherwise if bytes is smaller than MB,
for every entry in os.listdir function return value called with the argument path,
append a tuple with 2 entries lang and priority to result.
if self.flags is true and self.regex is not an instance of a six.string_types type,
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,
import module types.
define the method resolve_error_handler with arguments self and view_type.
value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image',   and third element of the return value of the function sys.exc_info.   if f has an attribute 'seek' and if f.seek is an callable object,
and unpacked dictionary connection_params.   if self.use_ssl and self.use_tls are false,
from django.core.urlresolvers import set_script_prefix into default name space.
output and hidden_fields are both empty lists.
from django.core.management.sql import sql_custom into default name space.
define the function cleanup_url with an argument url.
call the method self._should_delete_form with an argument, if it evaluates to true,
if not,
return the length of self.object_list.
for every sql in custom_sql,
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
from django.core import serializers into default name space.
substitute left for self.first.
define the function floatformat with 2 arguments text and arg set to integer -1.
call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands,
convert first element of values into a integer, return the result and ch.
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.
self.template_cache is an empty dictionary.
decorator function register.filter with an argument is_safe set to boolean True.
derive the LabelCommand class from the BaseCommand base class.
return instance.
call the method self._close_files.
call the method field.clean with an argument value, substitute the result for value.
return an empty string,
substitute tok for value under the groupid key of the self.toks dictionary.
define the method eval with 2 arguments: self and context.
content is a File object instance created with content argument.
in the string "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)", replace all the occurrences of:
define the method start_serialization with an argument self.
do nothing.
"enclosure" for 'rel', field url of value under the "enclosure" key of item dictionary for 'href',   field length of value under the "enclosure" key of item dictionary for 'length',   and field mime_type of value under the "enclosure" key of item dictionary for 'type'.   for every cat in value under 'categories' key of item dictionary,
get the name key of the data dictionary, substitute it for value.
if age is greater than max_age,
from django.conf import settings into default name space.
instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__,
if not,
_encoding is None.
make a directory top_dir.
update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
num is an integer 0.
if ValueError exception is caught,
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
do nothing.
if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
import module django.
and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
derive class Command from the BaseCommand base class.
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
if base.DeserializationError exception is caught,
try,
call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.
define the method from_dict with argument cls and file_dict.
app is a string 'django'
if space equals integer 0,
mapped_tokens is an empty list.
substitute value under the cache_alias key of the caches dictionary for cache.
define the method __new__ with 4 arguments: cls, name, bases and attrs.
if AttributeError exception is caught,
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.
derive the class Enclosure from the object base class.
default_validators is a list with an element, return value of the validators.URLValidator method.
substitute self.current_token for t.
replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively,
define the method run_from_argv with arguments self and argv.
define the function npath with an argument path.
derive the class DebugLexer from the Lexer base class.
use global variable templatetags_modules.
if since is lesser or equal to integer 0,
factor is integer 0.
if tt.tm_isdst is greater than integer 0, return the result.
call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,
substitute offset.seconds for offset.
if value is boolean True, string 'True' or string '1',
define the method create_token with 3 arguments: self, token_string and in_tag.
content.setter decorator,
for every app in sorted return value of the commands_dict.keys function,
substitute SelectMultiple for widget.
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
and '3' for '3', substitute it for value.   if KeyError exception is caught,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
substitute fcntl.LOCK_SH for LOCK_SH.
call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
return value.
return msg.
value is an empty string.
return integer -1.
register.tag decorator,
format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.   define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
if _serializers is false,
substitute mtime for the value under the filename key of _mtimes dictionary.
define the function strip_entities with an argument value.
call the method value.serializable_value with an argument self.to_field_name, return the result.
if value is an instance of datetime.datetime,
define the method __str__ with an argument self.
substitute limit_choices_to for self.limit_choices_to.
if node is an instance of Node,
dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.   call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',
call the self.stdout.write method with string "    Installing custom SQL for %s.%s model\n" as argument,
substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,
call the function phone2numeric with an argument value, return the result.
if not,
define the function unescape_string_literal with an argument s.
if version is None,
define the function code_changed.
if BLOCK_CONTEXT_KEY is not contained in context.render_context,
try,
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,
return text.
if value is not contained in result,
call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list,
call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS,
substitute varlist for self.varlist.
call the force_text with an argument message, yield the result.
call the method m.group with an argument integer 0, substitute the result for s.
define the private method __contains__ with self class instance and key as arguments.
define the method _get_regex an argument self.
use global variable _standard_context_processors.
call the function local, substitute the result for _prefixes.
if not,
'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.   if not,
call the function all_locale_paths, for every path is the result,
define the method __iter__ with an argument self.
if ImportError exception is caught,
define the method validate with arguments self and value.
"Use django.forms.utils instead.", RemovedInDjango19Warning and stacklevel set to an integer 2.   from django.forms.utils import everything into default name space.
define the method set_many with arguments, self, data, timeout defaulting to DEFAULT_TIMEOUT and version set to None.
and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
import module warnings.
substitute c for factory.
define the method __str__ with argument self.
call the method kwarg_re.match with an argument bit, substitute it for match.
call the method sys.stdin.close.
evaluate the method self._has_expired with argument key, if it as False,
substitute subject for self.subject.
from functools import reduce into default name space.
if TemplateDoesNotExist exception is caught,
substitute parent_instance for self.parent_instance.
return new_value.
if as_ is not equal to string 'as',
call the method self.as_tuple with an argument value under 'address' key of config dictionary,
return boolean True.
replace '%s' in the string  "%s.process_template_response didn't return an HttpResponse object. It returned None instead.",
and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
and return value of the function flatatt called with an argument final_attrs, substitute the result for output.   call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
substitute fist and second element of exc_info for exctype and value, respectively.
from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,
define the method tzname with 2 arguments self and dt.
define function no_style, without input arguments.
append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',
call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,
increment Tok.num with an integer 1.
called with arguments v and self.encoding, extend the output with the result.   join elements of the output into a string, separated with '&', return the result.
return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.
if the key doesnt exists call the six.String function and substitute the result for self.stream.   remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,
if stream is true,
call the method dig2.digest, substitute the result for u.
convert value into a iterator, substitute the result for self._iterator.
from django.core.management.base import BaseCommand into default name space.
raise an CommandError with an argument string "More than one migration matches '%s' in app '%s'. Please be more specific.",
define the method has_key with 3 arguments: self, key, and version set to None.
get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.
import module warnings.
if not,
if NameError exception is caught,
if encoding does not exists substitute it for settings.DEFAULT_CHARSET.
define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
call the method threading.RLock, substitute the result for self._lock.
derive the class SelectDateWidget for the Widget base class.
call the method self.configure_filter with an argument value under name key of formatters dictionary,
substitute digits for self.digits.
return a string '%02d' formated with the result of the function self.G.
filemsg is an empty string.
endless loop,
try,
define the method to_python with arguments self and value.
substitute url_name for self.url_name.
replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively,
define the function get_unbound_function with an argument unbound.
return self.file.closed.
derive the class Command from the AppCommand base class.
define the function _generator.
try,
call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
define the method delete with self class instance, key and version set to None as arguments.
from django.utils.encoding import force_text into default name space.
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
define the method _has_changed with 3 arguments: self, initial and data.
if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
call the method blankout with 2 arguments: part and 'P', write the result to out.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
substitute status for self.status_code.
call the method e.encode with an argument string "latin-1".
if initial is not None,
if not,
get_language is a lambda function returning settings.LANGUAGE_CODE.
define the method to_python with 2 arguments: self and value.
otherwise if ch equals a string '[',
if app_list_value is not None,
call the method self.error with an argument self.cmd.missing_args_message.
break from the loop execution,
value under the app_config key of the app_list is None.
return a string '%06d' formated with self.data.microsecond.
remove the first element from str_number.
convert ret to a boolean, return it.
join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
return j.
if val is None,
call the method self._mark_post_parse_error.
if use_natural_keys is true,
substitute i for self.pointer.
decrement nesting by one.
sort elements of kwds, substitute the result for sorted_items.
define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
append i_args to args, append new_args with the result.
convert candidate to a string.
define the function ifchanged with 2 arguments: parser and token.
try,
for every node in self.nodelist_loop,
try,
if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.   substitute content_type for value under the 'Content-Type' key of the self dictionary.
call the function remove_tags with 2 arguments value and tags, return the result.
import module opera.
call the method self.getlist with an argument key, return the result.
if not,
if cache_timeout is lesser than integer 0,
define the method has_error with 3 arguments: self, field and code set to None.
if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
unpacked list exc_info.   if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message,
return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0,
format with it a string '# %s', write it to out.   comment_lineno_cache is None,
if primary_keys is true,
try,
for every pk in value,
if j equals to integer -1,
if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
return boolean True.
define the method widget_attrs with arguments self and widget.
substitute ClearableFileInput for widget.
get the name key of the data dictionary, if the key exists return it, if not return None.
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
if data is false,
make basedir directory,
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
substitute obj for self.object.
derive the class URLValidator form the RegexValidator base class.
define the __init__method with arguments self and exception.
raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s",
try,
with an argument i, for 'prefix' and self.error_class for 'error_class'.   if self.is_bound is true,
define the method __init__ with 5 arguments: self, name, value, attrs and choices.
return None.
call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
try,
append template_dir to app_template_dirs.
return an empty dictionary.
define the method __init__ with 2 arguments: self and timezone.
return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors,
use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.   if string 'charset' is contained in content_params,
call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
call the method self.configure_custom with an argument config, substitute the result for result.
define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
define the method tokenize with an argument self.
template_with_clear is a string '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'.
import module warnings.
call the method self.add_arguments with an argument parser.
otherwise if '=' is contained in part,
define the method _existing_object with 2 arguments: self and pk.
raise an EmptyPage exception with string 'That page contains no results' as an argument.
append block_content to a string 'end', substitute the result for self.verbatim.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
from io import BytesIO into default name space.
define the method to_python with arguments self and data.
derive the class DTDForbidden from the DefusedXmlException base class.
if context_instance is false,
define the method is_rendered with an argument self.
for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',
convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.
if call to the _has_expired method with argument key evaluates to boolean False,
call the method self.configurator.convert with an arugment value, substitute the result for result.
raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.
call the initialization method with argument params for the base class of the BaseMemcachedCache class.
return value.
if latest_date is None or item_date is greater than latest_date,
substitute settings.TEMPLATE_DIRS for template_dirs.
called with an argument BlockNode.   define the method __repr__ with an argument self.
raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument,
explicitly is prohibited."   call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude,
define the method IE_sanitize with arguments self and filename.
call the method self.regex.search with an argument path, substitute the result for match.
sup_cls is base class of the class cls.
try,
call the function self.regex.search with an argument path, substitute the result for match.
append to a list elements of the iterator self, return the resulting list.
import module sys.
if safe is not None,
import module sys.
call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.
substitute context for self.context.
if nor,
for every handler in handlers,
define the method cleaned_data with an argument self.
substitute self.data for value under the 'data' key of the defaults dictionary.
try,
call the function t.render with an argument context_instance, return the result.
register.tag decorator,
call the method self.open()
skip this loop iteration.
define the emethod parse with 2 arguments: self and parse_until set to None.
call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments:
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.
call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |"""
substitute the result for value under the f.name key of data dictionary.   if not,
if tok.next is true,
substitute DebugLexer and DebugParser for lexer_class and parser_class.
define the function do_for with 2 arguments: parser and token.
derive the class URLField from the base class CharField class.
substitute x for k and boolean True for v.
if AttributeError exception is caught,
with 2 arguments: self.prog_name and first element of options.args.   otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'
call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
substitute the result for i-th element of words.   if not,
call the method self.reader_enters.
call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.
call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.   for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,
call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.
help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" '   'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.   call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',
define the method add_aguments with arguments self and parser.
if form.errors is true,
return ZERO.
import module binascii.
call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method reset with an argument self.
define the method enter_command with 3 arguments: self, command and token.
raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '
if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
if first element of data_list is contained in self.empty_values,
define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.
call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.
call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,
raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
try,
define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method read with self class instance and size set to None as arguments.
if six.PY2 is true,
from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
raise an exception,
return boolean False.
message is a string 'use only numbers, letters and underscores'.
return string 'rd'.
define the function center with 2 arguments value and arg.
call the method add_arguments from the base class of the class Command, with an argument parser.
if not, substitute self.field.initial for data.   if data is an callable object,
if s is an instance of SafeData or EscapeData,
self._populated is boolean False.
if self.use_ssl and self.use_tls are boolean True,
if settings.SECURE_PROXY_SSL_HEADER is true,
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,
for every model in app_models,
and help set to string 'One or more application label.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
try,
self.render_context is a instance of RenderContext class.
derive the class AppRegistryNotReady from the Exception base class.
integer 212, integer 243, integer 273, integer 304 and integer 334.   define the method b with an argument self.
call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   if self.verbosity is greater or equal to integer 1,
call the method middleware.process_request with an argument request, substitute the result for result.
raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
and expires is not an instance of datetime.   convert expires to a string, use it as argument for the call to the function typecast_timestamp, substitute the result for expires.
substitute complain for extend.
substitute __setitem__ filed of the base class of the class SortedDict for super_set.
if the key doesnt exists use sys.stderr as an argument.   if not,
try,
call the function formats.localize_input with 2 arguments: value and self.format if true, if not,
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
from wsgiref.util import FileWrapper
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
define the method __call__ with 2 arguments: self and f.
if indent is true,
substitute callable for callable.
try,
property decorator,
if length of bits is not integer 2 or 3,
return the second element of the return value of the call to the self._det_image_dimensions method.
call the method dig1.update with an argument u.
return response.
define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
get the index of first occurrence of name in existing, substitute it for i.
REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,
if request has an attribute named 'urlconf',
if data is None,
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
get the value under the 'cookies' key of the state dictionary,
remove first element from self.command_stack.
if exit_code is not equal to integer 3.
'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.   if value under the 'feed_url' key of the self.feed dictionary is not None,
substitute value for the value under the key key of self._cache dictionary.
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
if value is contained in self.empty_values,
TOKEN_BLOCK is integer 2
raise an StopIteration.
call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
and unpacked dictionary kwargs.   delete the value under the 'content-type' key of the self dictionary.
plural is an empty list.
define the method __init__ with 3 arguments: self, value and text.
delete value under the 'args' key of the cmd_options dictionary.
call the method self.valid_value with an argument val, if it evaluates to false,
call the method pretty_name with an argument name, substitute the result for self.label.
errors is an empty list.
parts is an empty list.
return self.forms element at the index index.
from django.core.exceptions import ImproperlyConfigured into default name space.
call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.
join dirpath and filename into a path separated by '/', append it to new_filenames.
if settings.DEBUG is true, return boolean False, otherwise return boolean True.
match regex date_re with value, substitute the result for match.
call the method new_context._reset_dicts values.
do nothing.
return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,
if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
if other is an instance of Promise class,
substitute complain for __setitem__.
string '<script type="text/javascript" src="{0}"></script>' and absolute file path of the path, for every path is self._js.   define the method render_css with an argument self.
try,
call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,
if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer,
define the method sync_apps with self class instance, connection and app_labels as arguments.
otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',
define the method flush with an argument self.
for every val in value call the function smart_text with an argument val, return the results in a lit.
re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
call the function validate_ipv6_address with an argument value.
if OSError, renamed to e, exception is caught,
if self.help is true,
property decorator,
call the method logging._acquireLock.
import module calendar.
return size.
substitute out for self._out.
if socket.error, renamed to e, exception is caught,
substitute lib for value under the library_name key of libraries dictionary.
if IndexError exception is caught,
call the method bpython.embed.
raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',
default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.   define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
if 'media' is not contained in attrs,
call the function pgettext_lazy with an argument self.message_context and value, return the result.
dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."   define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
decrement t by integer 1,
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
define the function timeuntil with 2 arguments, d and now defaulting to none.
try,
get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists,
default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,
substitute sys.stdin for fd.
BLOCK_TAG_END is a string '%}'.
call the executor.migration_plan method with targets as the argument, substitute the result for plan.
if form._meta.fields is an instance of tuple type,
call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
from io import BytesIO into default name space.
raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument",
if NotImplementedError exception is caught,
if buf is false,
multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
if self doesnt have '_queryset' attribute,
remove 3 elements from r starting at the index 23.
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.
define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the self.start_object with an argument obj.
from django.core.management.base import BaseCommand and CommandError into default name space.
define the method add_arguments with self and parser as arguments.
for every c in candidate without the last element and in reversed order, convert c into an integer,
from django.core.management.base import CommandError and BaseCommand into default name space.
'determine whether string is singular or plural.', where '%s' is replaced with number.   if not,
derive the class HttpResponseNotModified from the HttpResponse base class.
call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
replace all the '%s' occurrences with migration_name and app_label, respectively.   target is a list containing tuple with two elements app_label and migration.name.
call the method self._callback_strs.add with an argument lookup_str.
call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
try,
for every filenam in locale_filenames,
substitute rhs for number_value.
if confirm is not equal to string 'yes' or string 'no',
format key is an empty string.
substitute name for self.name.
return list_ and boolean False.
default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.   call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append',
append character '/' to the base_url.
return _default.
if not,
call the function force_bytes with an argument password, substitute the result for password.
return an empty list.
call the function force_bytes with an argument secret, substitute the result for secret.
define the method __init__ with 2 arguments: self and field.
if want_unicode is true,
format string '&#%s;' with name, append it to self.fed.
substitute dt for self.__dt.
from __future__ import unicode_literals into default name space.
define the method __next__ with an argument self.
append entry to the directories list.
if name is contained in lib.tags,
define the function divisibleby with 2 arguments value and arg.
call the formataddr function with argument tuple containing 2 elements nm and addr.
flush zfile stream buffer.
iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.   if reverse is true,
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
pid is integer 1.
define the method defalt with arguments self and o.
raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
widget set to None, label set to None, initial set to None, help_text set to an empty strign,   unpacked list args and unpacked dictionary kwargs.   call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,
from django.core.wsgi import get_wsgi_application into default name space.
if format is not contained in _serializers,
return final_output.
append an empty string to dirs list.
if LookupError exception is caught,
for model in model_list,
define the method _format_value with 2 arguments: self and value.
derive the class CacheClass from the base class FileBasedCache.
status code set to integer 400, return the result.   call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.
from __future__ import unicode_literals into default name space.
get frag attribute from found object, substitute it for found.
substitute urlconf_name for self.urlconf_name.
create a directory self.default_locale_path.
evaluate method self.has_key with key and version as arguments, if the result is true,
evaluates to true,   call the function select_template with an argument file_name, substitute the result for t.
if self.data.minute equals integer 0 and self.data.hour equals integer 0,
substitute the location for self.base_location.
if inplural is true,
if self.use_argparse is true,
define the function pgettext with 2 arguments: context and message.
ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number,
if six.PY2 is true,
define the method __init__ with an argument self.
if os.name equals string 'posix',
if not,
try,
from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.
called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.   define the method __copy__ with an argument self.
define COOKIES method with self as the argument.
call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args,
call method self.stdout.write with statement as an argument.
append the result to password.   call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
'<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>',   row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>',   and errors_on_separate_row set to boolean False.   define the method as_p with an argument self.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
call the force_str function with an argument value, substitute the result for value.
return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
self.id_for_label is true,
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
create directories from the elements in filename.
with self.mutex perform,
substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.
and absolute value of p, substitute the result for exp.   try,
and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
register.tag decorator,
register.tag decorator,
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),
import module re.
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
try,
substitute the result for guts.   concatenate string '"', guts and string '"', substitute the result for tok.
define the method __len__ with argument self.
value is an empty string.
return msgid.
if arg is None
for every i and widget in enumerated iterable self.widgets,
substitute charset for self.charset.
substitute value under the number key of the rhs dictionary for number_value.
while first element of s is equal to bytes string ';',
append list containing string '--no-location' to self.msgmerge_options.
derive the class lazy_property from the property base class.
define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.
substitute '%s' with title in the string " [X] %s", write it to the standard output.
define the function with_metaclass with 2 arguments meta and unpacked list bases.
if exclude is true and f.name is contained in exclude,
call the function do_translate with 2 arguments: message and string 'gettext', return the result.
import module re.
substitute declared_fields for new_class.declared_fields.
import module yaml.
from django.core.management.base import BaseCommand and CommandError into default name space.
self._current is None.
convert value into an string, convert the result into an integer and substitute it for value.
return callback split into two lists at the dot index, without the element at the dot index.
define the method close with argument self.
do nothing.
call the method self.tag with 2 arguments: function_name and compile_func.
define the method _create_attachments with arguments self and msg.
if new_name ends with a string '_',
if six.PY2 is boolean True,
call the function ip.
call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
if data is not an instance of basestring,
raise an exception.
from django.db import connection into default name space.
substitute content_type for self.content_type.
call the function walk_to_end with 2 arguments: ch and pattern_iter.
do not perform the following only if bits.scheme and bits.netloc are both true,
and result of the function force_bytes called with an argument val2, return the result.   if not,
call the method self.get_queryset, return the length of the result.
if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
requires_system_checks is boolean False.
if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,
arg_vals is an empty list,
if end is not None,
call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.
if ValueError, OverflowError or InvalidOperation exceptions are caught,
get property attribute _get_height, and substitute it for width.
call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,
define the method token_kwargs: bits, parser and support_legacy set to boolean False.
join elements of the output into a string, separated by newlies, return the string.
if data is not None or FILE_INPUT_CONTRADICTION,
join the list of statements into a string separated by new lines, return it.
append newline character to msg.
errors is an empty list.
if data_list is true,
derive the class Debug from base class CheckMessage.
return value.
increment weight by integer 2.
derive the class TemplateLiteral from Literal base class.
if UnicodeEncodeError exception is caught,
sum version and delta together, return the result.
if _standard_context_processors is None,
try,
from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.
if not,
try,
increment length of boundary by integer 6, substitute the result for self._rollback.
replace all '%s' from string "%s: %s%s%s" with values of obj, id, self.msg and hint, respectively, return the result.
increment self.active_writers by integer 1,
from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
return duplicate.
substitute table for self.db_table.
import module sys.
derive the class IfNode from Node base class.
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
define the method _cull with argument self.
yield string "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" as the result.
if self.current_token is not EndToken,
for every key in self.keyOrder,
new_value is an empty list.
decorator stringfilter,
delete entry under the name key of the moves.__dict__ dictionary.
call the method token.split_contents, substitute results without the first element for bits.
and unpacked dictionary kwargs.   join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
if ValidationError, renamed to e, is caught,
define the method __ne__ with self and other as arguments.
if self.interactive is true,
substitute used_name for guessed_filename.
if other_dict doesnt have an '__getitem__' attribute,
increment num_args by one.
call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
define the function method_decorator with an argument decorator.
substitute first element of self.argv for subcommand.
from django.utils import six into default name space.
if not,
define the method delete with self, key and version set to None as arguments.
bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
call the function force_str with argument self.obj, substitute the result for obj.
yield string "# This is an auto-generated Django model module." as the result.
join tokens elements into a string, substitute it for message.
__all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
if labels is true and f.name is contained in labels,
call the method __init__ from the base class of the class Truncator,
extend collect list with _builtin_context_processors.
return t.
return s.
append value to parts.
return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
define the method ipython with an argument self.
from django.utils import six into default name space.
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
return an instance of SafeBytes, created with an argument t.
return None.
if not,
RemovedInDjango19Warning and integer 2.   substitute dicts for self.dicts.
if self.file has an attribute 'size',
define the method list with an argument self.
call the method self.main_help_text append new line to it, write it to sys.stdout.
return self.file.name.
if first element of base64d equals to a '.' character,
call the function get_git_changeset, store the result in git_changeset.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
if not,
concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
call the method self.can_read.release.
from collections import OrderedDict into default name space.
if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
if not,
do nothing.
substitute self.field.widget for widget.
if exception ValueError or TypeError is caught,
if not,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
_moved_attributes is an empty list.
define the method strptime with arguments self, value and format.
call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback,
return nodes.
if not,
derive the class BooleanField from the base class Field class.
output_transaction is boolean True.
define the function is_iterable with an argument x.
and database set to value under the 'database' key of the options dictionary.   break the loop execution.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
substitute length of s for end.
if not,
append value to self.dicts list.
read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
assign the result to the sql and references, respectively.   add model to seen_models set.
if not,
from django.utils.functional import lazy into default name space.
if not,
if NameError exception is caught,
return self._urlconf_module.
derive the EventHandler class from the base class pyinotify.ProcessEvent.
define the method_mark_post_parse_error with an argument self.
call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.
if not,
call the method field._get_val_from_obj with obj argument, substitute the result for value.
try,
otherwise if timezone is an instance of six.string_types and pytz is not None,
substitute func for self.func.
form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
substitute return value of function no_style for style.
insert mw_instance.process_response at the beginning of self._response_middleware.
value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
call the method httpd.set_app with an argument wsgi_handler.
call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.
groupid is a string "t%d" formated with tok.id.
step is an string 'any'.
call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
if TemplateDoesNotExist exception is caught,
substitute widgets for value under the 'widgets' key of attrs dictionary.
and third element of the result of the function sys.exc_info.   for every i and handler in enumerated iterable handlers,
substitute EscapeText for EscapeUnicode.
do nothing.
return a tuple with an element self.__dt.
for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
if TemplateDoesNotExist exception is caught,
call the method self.can_read.release.
tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string,   'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address,   and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.   define the function ip_address_validators with arguments protocol and unpack_ipv4.
do nothing.
result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.
define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,
if KeyError exception is caught,
derive the class EmailField from the base class CharField class.
call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options,
substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
if email_messages is false,
if rest is not False, None is considered False,
return val and encoded as a tuple.
return data.
invalid_var_format_string is None.
define the method copy with an argument self.
define the method __init__ with 2 arguments self and file.
substitute the result for new_permission.   call the function os.chmod wiht arguments filename and new_permissions.
import pylibmc.
help is a string "Prints the CREATE TABLE SQL statements for the given app name(s).".
raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
msg is a string "Execution of %s failed", with '%s' replaced by self.program.
from django.db.migrations.loader import MigrationLoader into default name space.
return self._request.
call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.
call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.
and third element of the return value of the function sys.exc_info.   if inhibit_post_migrate is false,
call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models,
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s",
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
if field.rel.to._default_manager has an 'get_by_natural_key' attribute,
if not,
if _file is None,
app_dirs is an empty list.
call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,
return an empty string,
define the method get_many with 3 arguments, self class instance, keys and version set to None.
define the method handle with 2 arguments: self and unpacked dictionary options.
define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
if converter is true,
otherwise if second element of args equals a string '304',
substitute view_name for self.view_name.
convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',
from django.utils.functional import allow_lazy into default name space.
for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',
define the function is_valid_ipv6_address with an argument ip_str.
if incremental is true,
if s is an instance of six.text_type or Promise,
return an instance of a dummy class.
from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True,   otherwise return boolean False.   derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
define the method __repr__ with an argument self.
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
call the method self._populate.
return value under the name key of the data dictionary, if it doesnt exists, return None.
if content has an attribute 'temporary_file_path',
derive the class CsrfTokenNode from Node base class.
substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.
_fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR,
third element of the return value of the function sys.exc_info.   define the class DjangoJSONEncoder from the json.JSONEncoder base class.
subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
import module decimal.
if value is contained in self.empty_values,
return fext.
convery value into a tuple, substitute it for value.
call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append',
translation._info is an empty dictionary.
otherwise if k equals a string 'bg',
and code set to string 'required.   otherwise if self.required is false and value is false,
encoding.setter decorator,
substitute value for self.value.
return value, if it is None return arg.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
derive the class date from the real_date base class.
encoding.setter decorator,
remove the first element from self.command_stack, assign the result to command and source, respectively.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
call the method from_current_timezone with an argument result, return the result.
if KeyError and TypeError exceptions are caught,
self.years is list containing 10 successive integers from this_year.
define the method close with an argument self.
define the method __contains__ with 2 arguments: self and item.
if lang_code is not contained in _supported and replacement is contained in _supported,
return self.streaming_content
try,
raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,
schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.
call the function _load_serializers.
sum lead and opening, substitute the result for lead.
return boolean False.
call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.   define function filepath_to_uri with path as the argument.
call the method transaction.atomic with an argument using set to self.using, with the result,
return response.
define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
call the self._lock.reader method, with the result perform the following,
open the file named filepath in read mode, with file descriptor renamed to fp perform,
define the method _get_scheme with an argument self.
call the method match.groups, assign the result to name and value, respectively.
define the method render with 2 arguments: self and context.
create list out of email_messages, return the length of the list.
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in app_migrations,
define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
call the method parser.add_argument with 3 arguments: string 'args', metavar set to string 'app_label' and nargs set to '*'.
self.saved_forms is an empty list.
if not,
try,
call the method self.template_cache.clear.
split s into parts by '.', substitute the result for name.
use_func is boolean False.
raise an TemplateSyntaxError exception with an argument error_msg.
if ending is true and msg doesnt end with ending,
substitute SafeText for SafeUnicode.
convert idx to an integer, substitute it or n.
call the method handler.upload_complete, substitute the result for retval.
convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
if kwargs is true,
define the method initial_form_count with an argument self.
if Exception exception is caught,
join the current working directory and name into a file path, substitute it for top_dir.
from __future__ import unicode_literals into default name space.
call the function from_current_timezone with an argument, return the result.
and third element of the function sys.exc_info result.   return attr.
string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning,   and stacklevel set to integer 2.   call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
if lookup_view is a callable object,
if the 'fake' key doesnt exists set fake to boolean False, as arguments.   call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
if buffer_ is true,
raise an BadHeaderError exception  with argument string "Header values can't contain newlines (got %r for header %r)",
substitute root for value under the NEXT key of the link dictionary.
if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
otherwise if var is None,
increment year by integer 2000.
call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,
output is a list containing an entry: result of the function format_html called with 2 arguments:
from django.utils import six into default name space.
define handle_field method with self, obj and field arguments.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
substitute _upload_handlers for self.__upload_handlers.
try,
skip this loop iteration.
program_options is list containing string '--check-format'.
replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
substitute it for basedir.   if basedir is not a directory,
call the method base64.b64decode with an argument chunk, substitute the result for chunk.
call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
substitute arg converted into an integer for length.
call the self.clear method.
call the method writer.as_string, substitute the result for migration_string.
define the function ungettext with 3 arguments: singular, plural and number.
define the method add_arguments with arguments self and parser.
return first element of t converted to lowercase and second element of t, as a tuple.
define the method __next__ with an argument self.
from shutil import copystat into default name space.
call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
if not,
define the method parse with an argument self.
define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.
if template_dirs is false,
if value is not contained in result,
derive the class Command from the BaseCommand base class.
for every plan_node in return value of the graph.forwards_plan method called with node as argument.
self._done is boolean False.
from django.utils.translation import ugettext_lazy into default name space.
replace '%s' with self.file_path and err, respectively.   if self.file_path file is not writable,
if Resolver404, renamed to e, exception is caught,
if OverflowError or ValueError exceptions are caught,
substitute fields for self.fields.
if sub_match is true,
join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.
if cmatch is true,
if DatabaseError or IntegrityError, renamed to e, exceptions are caught,
for every d in last element of self.dicts,
if setting has an "SERIALIZATION_MODULES" attribute,
return func.
created with an argument widget set to HiddenInput.   value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
try,
substitute first header_end elements of chunk list for header.
try,
if custom_sql is empty,
call the method self._get_to_python with an argument pk_field, substitute the result for to_python.
want_unicode is boolean True.
if self.verbosity is greater than integer 1,
substitute inverse_match for self.inverse_match.
if StopIteration exception,
add app_config to excluded_apps set.
call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
if not,
substitute first element of row for column_name.
call the function warnings.warn with 2 arguments: string '"requires_model_validation" is deprecated '
evaluate self.stream.getvalue method, return the result.
define the function escape_filter with an argument value.
call the get_major_version wit version as argument, store the result in major.
join return value of the function six.text_type called with an argument self.management_form and forms into a string,
if not,
do nothing.
call the method self.read, substitute the result or self._body.
define the method _send with arguments self and email_message.
derive the class SuspiciousOperation from the Exception base class.
if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,
for every member in members,
combined is an instance of Media class.
return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
substitute the result for token.   assign self.origin, source to token.source.
try,
return value.
stats is an list with 2 elements: 2 integers 0.
excluded_apps is an empty set.
return self.objects.
define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.
unpacked list args, unpacked dictionary kwargs.   substitute unpack_ipv4 for self.unpack_ipv4.
define the method regex with an argument self.
call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
define the method render with 4 arguments: self, name, value and attrs set to None.
if value under the name key of self.cleaned_data dictionary is not None,
asvar is None.
append bytes to chunks.
if first element of str_number equals a string '-'.
self.regexes is an empty dictionary.
derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
try,
replace '%s' with type of the obj object.   call the method self.indent with argument integer 1.
import module re.
substitute pubid for self.pubid.
substitute result for value under the self.asvar key of context dictionary.
call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.
increment self.position by length of output.
get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.
if filename is not contained in _mtimes,
where '%s' is replaced with final_path and base_path.   return final_path.
derive the class Tok from the object base class.
return boolean False.
concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method,
if query is an instance of MultiValueDict class,
substitute TemporaryFile for NamedTemporaryFile.
call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
call the function validate_ipv46_address with an argument ip_address.
yield d.
for every name in MEDIA_TYPES,
where '%s' is replaced with self.id.   define the method display with an argument self.
derive the class CheckboxChoiceInput from the ChoiceInput base class.
remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,
if fname file path exists,
from io import BytesIO into default name space.
try,
boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False,   return it if the key exists, if not return None.   derive the class SelectMultiple from the Select base class.
if to is not an six.string_types instance raise an error with message string '"to" argument must be a list or tuple'.
call the method self.validate_unique.
if version is None,
with the result renamed to fp, perform the following:   read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
if o.microsecond is true,
and return value of the field.get_internal_type method for 'type'.   if field.name attribute of obj is not None,
if ValidationError, renamed to e, exception is caught,
define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
break from the smallest enclosing loop execution.
from django.utils.translation import ugettext_lazy as _ into default name space.
do nothing.
substitute length for self._remaining.
from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput',   'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget',   'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.   MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
if offset is an instance of timedelta class,
from django.utils import timezone into default name space.
if ImportError exception is caught,
if formfield is true,
if middleware has an attribute 'process_exception',
delete the entry of self.cleaned_data dictionary under the key field.
call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
define the method to_python with arguments self and value.
call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n".
return boolean True.
substitute self.html_initial_name for name.
call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,
call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.
if k is contained in seen,
if string 'forloop' is contained in context,
option_value is an empty string.
derive the class MultiValueDictKeyError from the KeyError base class.
call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date,
url is None.
define the method __iter__ with an argument self.
and format, call the method time on the result, return the result.   derive the class DateTimeField from the base class BaseTemporalField class.
call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
assign bits elements to yes, no and maybe, respectively.
get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
if out has an 'isatty' argument and return value of the function out.isatty is true,
for every handler in settings.FILE_UPLOAD_HANDLERS,
call the function _add_doc with 2 arguments: reraise and string """Reraise an exception.""".
origin is an instance of StringOrigin class created with an argument template_string.
for every item in values,
define the method get with 3 arguments: self, key and default set to None.
import module os.
return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
import module datetime.
if kwargs is true,
derive the class RequireDebugFalse from logging.Filter base class.
define the method send_messages with arguments self and email_message.
define the method _setup with an argument self.
return boolean False,
call the method self._save with arguments name and content, substitute it for name.
if cleaned_data is not None,
convert self.file to string and append string '.py' to it, substitute the result for thefile.
property decorator,
call the method blankout with 2 arguments: part and 'S', write the result to out.
define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
if _ipv6 is true,
append app_dir to dirs list.
call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
from django.template.loader import get_template, select_template.
if not,
if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,
return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary,
raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
derive the class DefaultStorage from the LazyObject base class.
do nothing.
if ext doesnt start with '.' character,
call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',
get return value of the field.get_attname function attribute of the obj object, substitute it for value.
define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.
call the method apps.get_model with an argument model_identifier, return the result.
otherwise if value is boolean False,
join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.
define the method render with 2 arguments: self and context.
call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v,
called with 2 arguments: value rounded to 1 decimal point and integer 1.   move integer 1 left for 10 bits, substitute the result for KB.
raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
from django.utils import six into default name space.
substitute t.lineno for comment_lineno_cache.
replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
if base has an attribute 'declared_fields',
define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
return None.
substitute save_as_new for self.save_as_new.
substitute '%s' with first element of bits and block_name, respectively.   append block_name to parser.__loaded_blocks.
if self.LibraryValueNotFoundException exception is caught,
replace the result for tz_name.   call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument,
from __future__ import unicode_literals into default name space.
define the method __str__ with an argument self.
import fcntl.
if not,
append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs,
try,
append flup_module to string "Can't import flup.", print it to the standard output.
call the function escape with an argument output.
raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
raise a ValueError exception with an argument string "JSON can't represent timezone-aware times.".
if e.errno equals to errno.ENOENT,
define the method closed with self as the argument.
if third element of bits equals a string 'parsed',
second contains: string 'InternalHigh and ULONG_PTR, third: '_offset_union' and _OFFSET_UNION, forth 'hEvent' and HANDLE.   call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.
decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
return self._encoding.
call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,
joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
self._validate_unique is boolean True.
define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
if KeyError exception is caught,
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.   substitute HTMLParseError from the module _html_parser for HTMLParseError.
otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.   if six.PY3 is true or os.name equals a string 'nt',
call the method self._archive.extract with an argument to_path.
if call to the function response.has_header with string 'Vary' as an argument returns True,
raise an exception.
deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function,
if self.app_label is true and app_config.label is not equal to self.app_label,
if not,
raise an AttributeError exception.
if value is contained in self.empty_values and self.required is true,
substitute format for self.format if format is true, if not self.format is None.
derive the class ObjectDoesNotExist from the Exception base class.
from __future__ import unicode_literals into default name space.
raise an ImproperlyConfigured with an argument string "Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."
from .. import Warning, register and Tags into default name space.
get the value under the name key of the self dictionary, yield it as the return value of the generator.
where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name,   '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.   raise an exceptions
append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape
define the method __init__ with 3 arguments: self, template_string and origin.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.
decorator stringfilter,
if node.must_be_first is true and nodelist is true,
if commit is true,
return the value under the language_code key of the self._reverse_dict dictionary.
raise an exception,
substitute _iterkeys for iterkeys.
where '%r' is replaced with first element of bits.   append first element of bits to 'end'. substitute the result for end_tag.
define the method __delitem__ with 2 arguments: self and header.
_js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',
call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.   for every form in valid_forms,
substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
call the method self.decompress with an argument value, substitute the result for value.
call the self.load_middleware method.
if not,
if timeout equals to DEFAULT_TIMEOUT,
use the result as an argument for the call to the os.path.join function,   use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,   remove dirname from the dirnames.
return an empty string,
obj is an instance of Model class, created with an unpacked dictionary data as argument.
from django.views import debug into default name space.
self.keyOrder is an empty list.
property decorator,
decorator cached_property.
find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text,
call the function to_locale with an argument language, substitute it for self.__locale.
from django.utils import six into default name space.
call the method self.z, substitute the result for day_of_year.
substitute it for callback, if the attribute doesnt exists, callback is None.   if not callback,
from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.
get absolute directory path of dir, substitute it for self._dir.
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
if m is true,
define __del__ method with self as the argument.
raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
if field.rel is true, and field.rel is an instance of models.ManyToManyRel,
if os.path has an attribute 'samefile',
return form.
otherwise if count is greater than integer 1,
status set to None and current_app set to None.   substitute request for self._request.
derive the class FieldError from the Exception base class.
for every name and value in items of props dictionary,
try,
if table_name_filter is not None and table_name_filter is callable object,
call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of,
use the result as an argument for the call to the function self._out.write.   derive the BaseCommand class from the object base class.
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
remove last 2 elements from bits.
and var_arg, respectively.   if constant_arg is true,
convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.
define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
substitute has_key for __contains__.
call the method regex.search with 2 arguments: text and pos.
return number.
append key to self.keyOrder.
substitute viewname for view.
otherwise if msg and visible_issue_count are true,
loader is instance of MigrationLoader initialized with connection as an argument.
define the method __bytes_cast with an argument self.
derive the class AdminEmailHandler from logging.Handler base class.
call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args,
call the function datetime.now, substitute the result to now.
call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,
call the function conditional_escape with an argument checkbox_name,
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.
if not,
add self.form.error_css_class to extra_classes set.
return value under the key key of dictionary in last element of self.dicts,
from django.core.mail.backends.base import BaseEmailBackend into default name space.
if self.verbosity is greater or equal to integer 1,
return self._container converted into a iterable.
_PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,
if settings.DEBUG is true,
call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments:
get format_type attribute of the settings object, return it.
from django.core.serializers.json import DjangoJSONEncode into default name space.
call the function os.path.basename with argument name, substitute the result for name.
call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,
return None.
substitute queryset for self._queryset.
get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
from django.forms.widgets import everything into default name space.
return None.
return value.
remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
call the method self.validate_key with key as argument.
if length of app_labels is greater than integer 1 and primary_keys is true,
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
from django.conf import settings into default name space.
if not,
if not,
try,
call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
replace every occurrence of '\\' in url with '/'.
return result.
return base and ext.
define the method open with argument self.
if self.verbosity is greater than integer 0,
'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string,   'Enter a complete value.' for 'incomplete'.   define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
self._css is an empty dictionary.
import module decimal.
value is boolean True.
call the method __init__ from the base class of the DTDForbidden class.
from django.db.models.fields import Field as ModelField.
return boolean True.
from django.utils.six.moves.urllib.parse import urlparse into default name space.
found is boolean True.
delete logging._handlerList list.
if priority is false,
define the method __repr__ with an argument self.
from django.utils.six.moves import _thread as thread into default name space.
if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,
use_func is boolean True.
define the method rendered_content with an argument self.
if new_attr is None,
define the method __init__ with an argument self.
break the loop execution,
if hidden_fields is true,
under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,   call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,
define the method id_for_label with 2 arguments: self and id_.
if all_issues is true,
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
alter_sql is an empty list.
call the mail.send method with fail_silently set to fail_silently as argument.
if potfile file path doesnt exist,
substitute the value under the fieldname key of the self.fields dictionary for field.
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line,
if StopUpload, renamed to e, exception is caught,
define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.
substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
for every node in self.nodelist_loop,
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
crate a file named init_path.
return name converted to a string and val.
take last four elements of base and append ext to it, substitute result for ext.
derive the class URLNode from Node base class.
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
define the method as_text with an argument self.
for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
call the function locks.unlock with fd as argument.
call the method errors.extend with argument new_errors.
try,
call the method connection.cursor, substitute the result for cursor.
join localpart and domain in a string separated by '@' character, substitute it for addr.
from django.conf import settings into default name space.
for every field in return value of the function _parse_date_fmt,
if first element of message_context equals to character '"',
get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,
derive the class FileBasedCache from BaseCache base class.
define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
and time.tzinfo, return the result.   define the method date with an argument self.
if self.form.is_bound is false,
call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.
try,
append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
define the method _has_changed with 3 arguments: self, initial and data.
char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',
import module warnings.
with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.   if not,
from django.utils.six.moves import xrange into default name space.
define the method attach_file with arguments self, path and mimetype set to None.
define the method __setitem__ with 3 arguments: self, key and value.
return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
if decimals is greater than digits,
sum m and class Media created with definition, return the result.
call the method self._render with an argument context, return the result,
call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
append list containing string '--no-wrap' to self.msguniq_options.
define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
if arg is None
if indent is false,
import module sta.
from copy import copy into default name space.
if not,
import module sys.
FILE is a file".
call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
return the length of self.forms.
if form._meta.widgets is true,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
import module datetime.
do nothing.
derive the class WithNode from Node base class.
raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
append options to output.
msg is an empty string.
and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.
define the method to_python with arguments self and value.
substitute bytes for binary_type.
call the method sys.stdout.close.
write a new line to the self.stream file stream.
call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,
call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
from django.utils.itercompat import is_iterable into default name space.
if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
sort elements of handlers, for every name in result,
from django.db.migrations.writer import MigrationWriter into default name space.
substitute value for the vale under the name key of the pdict dictionary.
substitute value for the value under the name key of the self.cleaned_data dictionary.
substitute s for self.s.
if has_old_option is true,
from django.db.migrations.loader import MigrationLoader into default name space.
substitute self for result.parent.
substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if DatabaseError exception is caught,
as long k is smaller than endpos,
d is an empty string.
get self.instance
if lengths of initial and data are not the same,
return filename and display_url.
match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
iterator is iterator created out of stream_or_iterable.
replace every occurrence of '\\' in s with '\\\\'.
for every i and line in enumerated iterable lines,
for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit,
import module os.
with '%s' substituted for app_label, as arguments.   if migration_name equals to string 'zero',
define the method combine with 3 arguments: cls, date and time.
call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,
call the method self.xml.endElement with an argument string 'object'.
if settings.configured,
warning is a string 'ImmutableList object is immutable.'.
upload_handlers.setter decorator.
define the method get_default_prefix with an argument cls.
substitute the last element of args for name.
decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and "@',
from django.db.migrations.loader import AmbiguityError into default name space.
if result is not None,
try,
format_module_path is a list containing an element format_module_path.
decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt,
register.tag decorator,
if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
define the function format with 2 arguments: value and format_string.
if ValueError exception is caught,
output_transaction is boolean True.
if opts.model is true,
return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"',
call the method notifier.process_events.
close the file fd.
call the method parser.compile_filter with an argument value, append the result to args.
define the method recipients with argument self.
substitute model._meta for opts.
if http_cookies.CookieError exception is raised,
close fd file.
import pyinotify module.
python_2_unicode_compatible decorator,
call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,
call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
if not,
call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
if words is not empty and length is smaller than or equal to integer 0,
if errors is true,
if key is not contained in self,
if self.stream is None:
call the method context.push with unpacked dictionary values as an argument, with the result perform,
import termios module.
singular is an empty list.
if UnicodeEncodeError exception is caught,
join output into a string, separated by newline characters, return it.
try,
from django.utils import timezone and six into default name space.
if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
initial is boolean False.
if Resolver404 exception is caught,
if self.require_all_fields is true,
if other is an instance of Promise class,
from django import VERSION as version into default name space.
writer is an instance of MigrationWriter class, created with an argument migration.
append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
append node to nodelist.
decrement truncate_len by integer 1.
define the method end_object with argument self and obj.
otherwise if char is contained in string 'bEFMmNn',
call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
from django.utils import six into default name space.
call the function get_format_modules with an argument lang, for every module in the result,
raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.",
call the method cursor.execute with string "DELETE FROM %s" as argument, substitute the '%s' with table.
value is an instance of a class Decimal created with value as an argument.
_file is None.
call the function ungettext with 3 arguments: singular, plural and number, return the result.
define the method __deepcopy__ with 2 arguments: self and memodict.
return an empty string.
append ending to msg.
if not,
call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
derive the class FilterNode from Node base class.
value under the 'null' key of the extra_params dictionary is boolean True.
if not,
call the function to_python with an argument pk, substitute the result for pk.
call method request.META.get with arguments header and None.
define the method __getattr__ with 2 arguments: self and attr set to None.
if not,
_meth_self is a string "im_self".
do nothing.
define the protected method _base_set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
if ValueError, TypeError or ValidationError exception is caught,
define the method media with an argument self.
define method has_key with self class instance, key and version set to None as arguments.
substitute notation_name for self.notation_name.
define the method errors with an argument self.
append a tuple containing 3 elements: filename, content, mimetype to self.attachments list.
and re.IGNORECASE, substitute the result for simple_url_re.   call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add() method' as argument.
double the chunk size.
replace every occurrence of '\n' in p for '<br />',
if self.verbosity is greater or equal to integer 3,
raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
if fd is greater or equal to integer 0.
def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
if self has an '_get' attribute,
return result.
x is integer 0.
parser.compile_filter, substitute the result for expression.   return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
if end_index is None and s_len is greater than truncate_len,
call the method s.getvalue, return the result.
if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,
define the _fd function with argument f.
remove the first element from colors, substitute it for fg.
define the method get with 3 arguments: self, header and alternate set to None.
substitute ValueError for error_class.
call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
derive class X from the object base class.
define the method _resolve with an argument self.
substitute value under the attr key of flags dictionary for value.
convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
call the function os.kill with os.getpid() and negative exit_code as arguments.
_assertRegex is a strnig "assertRegexpMatches".
define the method items with an argument self.
return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.   decorator deconstructible,
if Exception exception is caught.
from _systemrestart import SystemRestart into default name space.
decorator stringfilter,
if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
split string pks by ',', substitute the result for primary_keys.
seen_data is an empty set.
return name.
define the method _get_size_from_underlying_file with argument self.
substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
return an empty string.
substitute self.urlconf_name for self.urlconf_module.
property decorator,
from django.template.base import TemplateDoesNotExist into default name space.
derive the class DisallowedRedirect from the SuspiciousOperation base class.
substitute length of item for len_item.
from django.utils.encoding import force_bytes into default name space.
substitute _iterlists for iterlists.
call the method match.groupdict, substitute the result for kwargs.
with self.initLock,
return value.
define the function stringformat with 2 arguments value and arg.
define the method validate_host with 2 arguments: host and allowed_hosts.
raise an TypeError with an argument s.
try,
self._caches.caches is an empty dictionary.
append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,
define the method __getstate__ with an argument self.
try,
import module tempfile.
shown is an empty set.
for every ldir in dirs,
break the loop execution.
call the method self.render, return the result.
if refto is contained in known_models,
if length of args is greater than integer 1,
fail_message is a string changed'.
otherwise if self.required is true,
return an empty string and an empty string.
if view_function is not a callable function,
call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
derive the class Command from the BaseCommand base class.
root dictionary values under the KEY and RESULT keys are both None.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
return value.
register.tag decorator,
from django.utils.six.moves import reduce into default name space.
delete element under 'warning' key of kwargs dictionary.
get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
call the function _import_module with an argument self.mod, return the result.
raise an exception.
try,
if mtime is different than the value of dictionary _mtimes under the key filename,
substitute key for result.key.
substitute name for self.name.
substitute params for self.params.
if source is an instance of inst class,
replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.
call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,
if self._upload_handlers is false,
call the method self.get_parent with an argument context, substitute the result for compiled_parent.
define the method handle_label with 3 arguments: self, label and unpacked dictionary options.
if args is true,
skip this loop iteration.
otherwise if sep is not an instance of string type,
define the method reset with an argument self.
for every item in self.items,
if not,
if not,
call the method app.initialize with an argument argv as an empty list.
yield k.
if not,
terminal_char is an string '>'.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
import module sys.
if val is not None,
call the os.makedirs with argument self.file_path.
if template is an instance of list or tuple types,
if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',
if not,
if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
_get_files is getter function for FILES attribute of this class.
from django.db.migrations.optimizer import MigrationOptimizer into default name space.
substitute the result for year.   call the method dt.timetuple, substitute the result for timetuple.
and i is greater than or equal to self.min_num,   value under the 'empty_permitted' key of the defaults dictionary is boolean True.
app_config, connection.alias and include_auto_created set to boolean True.   call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.
raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
_cookie_allows_colon_in_names is a boolean True.
import module warnings.
for every name and value in return value of the method self.extra_headers.items,
call the method self._populate.
get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,
return an empty list.
extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.
define the method nud with 2 arguments: self and parser.
define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
join the results into a string, return it.   if hmac has an attribute "compare_digest",
if KeyError or AttributeError, renamed to exc, exceptions are caught,
decorator python_2_unicode_compatible,
define the function make_origin with 4 arguments: display_name, loader, name and dirs.
if self.connection_reset is true,
for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
append f.name to exclude.
append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
substitute name for new_attr.
define the function dec with an argument func.
call the serializer function, call the loads method on the return value with an argument data, return the result.
result of the function flatatt called with an argument final_attrs, return the result.   derive the class TextInput from the Input base class.
substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.
return value.
settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.   call the Model._meta.get_field method with an argument field_name, substitute the result for field.
get the value under the key 'locale' of the options dictionary, substitute it for locale.
call the function get_default_timezone, substitute the result for self.timezone.
extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',
return a string '%02d' formated with self.data.month.
derive the class ChoiceField from the base class Field class.
create a list with count decremented by 1 number of last element of result elements, extend list result with it.
derive class FileProxyMixin from the base class object, making it a new-style class.
get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
if value is an instance of str type,
self.method is None.
for every subwidget in the result,   yield subwidget, as the result of the generator.
from django.conf import settings into default name space.
from django.utils import datetime_safe into default name space.
raise an MultiValueDictKeyError exception with printable representation of key.
if http_cookies.CookieError exception is caught,
if self has an attribute '_size'.
if not,
derive the class BaseValidator form the object base class.
if length of bits is not equal to integer 6,
and fileobj set to zbuf.   call the method zfile.write with an argument s.
call the method _trans.gettext_noop with an argument message.
derive the class metaclass form the meta base class.
call the function force_str with an argument self._tzname, return the result.
return string '1'.
if self.activated is boolean True,
nargs set to '*' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.'.   call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json',
call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
derive the class EmailMultiAlternatives from the EmailMessage base class.
and replace %r with self.obj, return the result.   define function python_2_unicode_compatible, with klass as an argument.
write a newline into a self.stream file stream.
for every i and tuple containing dirpath and f, in enumerated list of locations,
define the function include_is_allowed with an argument filepath.
derive class Command from base class BaseCommand.
for every attr in _urllib_parse_moved_attributes,
if not,
substitute self.version for version.
if not,
import module sys.
substitute self.remaining for size.
with lock,
return default.
return an instance of DebugVariableNode, created with an argument contents.
return None.
if self.connection is true,
substitute it for localedir.   use_null_fallback is boolean True.
call the method self.common_logger_config with 3 arguments: logger, config and incremental.
append length of result to non_capturing_groups.
return nothing.
define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
missing_args_message is an string "Enter at least one application label.".
from django.conf import settings into default name space.
make a directory migrations_directory.
LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.
self._changed_data is None.
raise an exception.
raise an ValueError exception with an argument string "Base36 conversion input too large.".
try,
if cc contains item 'public' and kwargs contains item 'private',
input_type is a string 'text'.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
call the function force_bytes with an argument password, substitute the result for password.
class_types is a tuple with 2 elements: type and types.ClassType.
pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,   return the result.   if LookupError or BinasciiError, renamed to e, exceptions are caught.
if not,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if string '()' is contained in config,
call the method serializers.get_serializer with an argument format.
skip this loop iteration.
raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment",
found is boolean False.
derive the class TranslatorCommentWarning from the SyntaxWarning base class.
'in favor of "requires_system_checks".' and RemovedInDjango19Warning.   if has_old_option and has_new_option are both true,
call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
substitute choice for choice_value and choice_label, respectively.
substitute choices for self.choices.
substitute '%s' is "%s.process_response didn't return an HttpResponse object. It returned None instead.",
define the method writer_enters with an argument self.
convert timeout into an integer, return it.
call the method __new__ with an argument cls from the base class of the klass function.
call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
substitute length of prefixed for pflen.
if deps is true,
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:
raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.
if param is contained in unhandled_params,
if ValueError exception is caught,
define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
define the function validate_ipv46_address with an argument value.
call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.
set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.
substitute the result for proxy.   if not,
define the method initial_form_count with an argument self.
call the method _trans.pgettext with 2 arguments context and message.
if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
define the method print_help with 3 arguments: self, prog_name and subcommand.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
for every app_name and mode_list in return value of manifest.items method,
from threading import local into default name space.
call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$",
with call to the io.open function with fname and string 'rb' as arguments, renamed to f,
derive the class Variable form the base class object.
convert number into an integer and substitute it for number
define the method _get_choices with an argument self.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
if transfer_encoding equals a string 'base64',
derive the NoArgsCommand class from the BaseCommand base class.
questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:
current_len is equal to integer 0.
from functools import wraps into default name space.
if character ':' is not contained in template,
define the method __repr__ with an argument self.
call the method self.stdout.write with string "  No migrations to apply." as an argument.
call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to,
delete entry under the oldkey key of the cache dictionary.
raise an exception.
define the method __call__ with arguments self and value.
finally perform,
self.error_list is an empty list.
yield emitting as result of the generator.
call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.
if httponly is true,
if val is an instance of tuple,
get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
convert max_value into an floating point number, substitute it for max_value.
return an empty list.
call the function find_template_loader with an argument loader, append the result to cached_loaders.
self._num_pages and self._count are None.
call the method self.set_charset with utf8_charset as an argument.
_func_closure is a string "func_closure".
define the function gen_filenames with an argument only_new defaulting to boolean False.
if filename is true and filename path doesnt exist,
requires_system_checks is boolean False.
raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute,
derive the class Error from base class CheckMessage.
called with an argument path,   substitute path for locale_dir.
define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
define the method clean with arguments self and value.
from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.
remove the first element from context.render_context.
get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2',
substitute node.source for e.django_template_source.
call the method self.dicts.pop, return the result.
substitute key for result.key.
elt is an list with an element elt.
call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.
get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.
import module re.
return an empty string,
original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.   call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
import module json.
assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
if attrs is None,
property decorator,
raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
call the function quote with 2 arguments: result of the function force_str called with an argument url,
_func_defaults is a string "__defaults__".
try,
if length of s is greater than integer 13,
return result.
if bit starts with '_("' ot bit starts with "_('",
from django.core.files.base import File into default name space.
if obj is an instance of Field, append to a list a tuple with 2 elements: field_name,   and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.   sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
raise an ValueError with an argument string "Invalid timezone: %r", substitute '%r' with timezone.
from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
if self.allow_files is true,
HITS and MISSES are integer 0 and 1, respectively.
from django.conf import settings into default name space.
if self._wrapped is empty,
if _BASE64_DECODE_ERROR exception is caught,
define the function get_language.
raise a TypeError exception,
try,
from django.core.exceptions import SuspiciousMultipartF into default name space.
call the function import_module with an argument mod_name.
raise an TemplateDoesNotExist exception with an argument template_name.
substitute self.__class__.__doc__ for self.__doc__.
substitute the result for qs.   pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,
find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list.
if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
otherwise if value is an instance of datetime.datetime,
call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None,
if TypeError, renamed to te, exception is caught,
if settings.USE_TZ is true,
import module warnings.
if condition is not None,
open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.
raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'",
call the method gettext_module.GNUTranslations.__init__ with an argument self.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
if OSError exception is caught,
call the method self.write_items with an argument handler.
call the method cursor.execute with string "SELECT cache_key, expires FROM %s WHERE cache_key = %%s" as argument,
if attrs is false, make attrs an empty dictionary.
where '%s' is replaced with fixture_name, and RuntimeWarning.   decorator method lru_cache.lru_cache with an argument maxsize set to None.
call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
decorator function register.filter with an argument is_safe set to boolean True.
call the function cache.close.
define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
if second element of source is None,
if args and kwargs are both true,
if length of args is not equal to integer 2,
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
call the method code.interact with an argument local set to imported_objects.
substitute server for self._servers.
call the method result.setFormatter with an argument formatter.
for every template_dir in template_dirs,
substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
sum punctuation and trail, substitute the result for trail.
substitute i-th element of subject for c.
encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:
define the method add_arguments with self class instance and parser as the arguments.
classmethod decorator,
msgmerge_options is an list with elements: strings '-q' and '--previous'.
call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
increment msg_count by one.
raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s",
code set to a string 'invalid_choice'.   return value.
return an empty dictionary.
get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.
call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
if not,
call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.
put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder,
append other_dict to self.dicts.
define the method __init__ with 2 arguments: self and loaders.
define the method M with an argument self.
call the msg.attach with an argument body_msg.
call the function new_method_proxy with an argument dir, substitute the result for __dir__.
substitute boundary for self._boundary.
call the MigrationExecutor with the connection as the argument, substitute it for executor.
call the method self.instance.validate_unique with an argument exclude set to exclude.
define the function _bin_to_long with an argument x.
define the function i18n with an argument request.
define the method __next__ with an argument self.
substitute messages for self.error_messages.
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args,
define the method __call__ with arguments self and value.
import threading module.
if match is true,
try,
call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
evaluate the boolean expression: locale is None and exclude is false and process_all is false,
if self.field.empty_label is not None,
substitute the result for commands_dict.   for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,
substitute self.context.render_context for render_context.
lines is an empty list.
if self.timezone is false,
define the method _has_changed with arguments self, initial and data.
for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,
call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
context_extras is an empty dictionary.
define the function locale with an argument locale.
define the method __repr__ with an argument self.
write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label,
define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
if ImportError exception is caught,
call the method self._iteritems, for every k and v in the result,
call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
return self._queryset.
return an empty string.
try,
define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.
define the method has_key with 2 arguments: self and key.
with the result renamed to fp, perform the following:   read file fp and substitute the result for msgs.
from django.http import HttpResponse into default name space.
evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os,
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
break from the smallest enclosing loop execution.
result is an empty list, upto is integer 0.
define the funtion get_internal_wsgi_application.
if self.file_path is not an instance of six.string_types,
increment i by integer 1, substitute the result for i.
output_transaction is boolean True.
call the self.stderr.write method with string "    Failed to install index for %s.%s model: %s\n" as argument,
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
from django.utils.encoding import smart_text into default name space.
call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.
_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:
substitute value for self.cookies dictionary value under the key key.
if value equals k2 or text_value equals return value of the function force_text called with argument k2,
decorator function register.filter with an argument is_safe set to boolean False.
return ip_str.
substitute the resulting list for none_model_fields.   missing_fields is difference between set containing none_model_fields and set containing result of the method,
decrement end by one.
from django.utils import six into default name space.
result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,   MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
substitute app_template_dirs for template_dirs.
otherwise if self.verbosity equals integer 3,
return an empty string.
call the method obj.save.
if not,
define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.
substitute old_attr for self.attr.
tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,
with lock,
params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
derive the class SimpleTemplateResponse from the HttpResponse base class.
raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both "requires_model_validation" '
if content_type is false,
if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
derive the class NumberInput from the TextInput base class.
if value is an instance of datetime.datetime class,
property decorator,
for every part in parts,
verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,
try,
call the function _ with an argument string 'PM', return the result.
if ValidationError, renamed to e, exception is caught,
substitute value for value under the key key of dictionary at last element of self.dicts.
call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the
if 'date' is not in header_names,
return boolean False.
decorator stringfilter,
return boolean False.
value under the 'author_name' key of the item dictionary and dictionary with an entry: "http://purl.org/dc/elements/1.1/" for "xmlns:dc".   if value under the 'pubdate' key of the item dictionary is not None,
if not,
call the method self._cache.get_multi with argument new_keys, substitute the result for ret.
with an argument self.data.year decremented by 1, evaluates to true,   week_number is integer 53.
if UnicodeDecodeError exception is caught,
if Exception exception is caught,
define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
if any element of self.dicts is true, return boolean True, otherwise return boolean False.
in not,
join bytes and self._leftover into a bytes string, substitute it for self._leftover.
for every program in programs,
return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
docsring
otherwise if ch equals a string '|',
define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
LIGHT_PALETTE is a string 'light'.
if element of targets in first row and second column is None,
return data.
return an string '0'.
increment Field.creation_counter by one.
if value under the 'author_email' key of the item dictionary is not None,
call the method Encoders.encode_base64 with an argument attachment.
if not,
return modules.s
call the function six.reraise with unpacked list exc_info as an argument.
is_usable is boolean False.
derive the class _OFFSET_UNION from the Union base class.
join elements of quant into a string, split it by string ',', substitute the result for values.
derive the class Parser form the base class object.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.
substitute settings.DEFAULT_CHARSET for self._encoding.
define the method validate_number with self class instance and number as arguments.
derive the class ClearableFileInput from the FileInput base class.
app_name and model._meta.object_name, respectively.   evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments,
raise an LookupError with an argument lang_code.
must be 'as'", where '%s' is replaced with function_name.   substitute last element of bits for target_var.
return base.
return the result.   define the method id_for_label with 2 arguments: self and id_.
open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
inverse_match is boolean False.
call the method unhandled_params.remove with an argument param.
if OSError, renamed to e, is caught,
define the function m2m_convert with an argument value.
substitute smart_text for smart_str.
substitute self._pk_field.name for name.
if var starts with '_(' and var ends with ')',
derive the class MaxValueValidator form the BaseValidator base class.
return an empty dictionary.
append '/' to prefix.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.
join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
do nothing.
call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
match string s with regex IDENTIFIER, substitute the result for m.
call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
return new_class.
call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,
for every app_label in bad_app_labels,
if self._populated is false,
and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
return self.
respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.   if not,
if in_tag and is not contained in self.verbatim,
return i.
if ImportError exception is caught,
"misses", "maxsize" and "currsize".   derive class _HashedSeq from list base class.
call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.
output is an empty list.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
define the method __iter__ with an argument self.
data is an empty dictionary.
delete self entry under the key key.
derive the class EmptyPage from the InvalidPage base class.
call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
doublecolon_len is an integer 0.
if lookup is false,
for every date_key in date_keys,
return nothing.
try,
substitute bp for lbp.
if NotImplementedError exception is caught,
call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,
return tuple, consisting of first element of t converted to lowercase and second element of t.
_cached_modules is an empty set.
define the method language with an argument self.
call the method self.can_read.acquire.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.
use_l10n set to None and use_tz set to None.   call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
call the method other.__cast, substitute the result for other.
if not,
call the method self.validate with an argument out.
define the function do_if with 2 arguments: parser and token.
otherwise if, type of s doesnt equal to six.text_type,
return response.
try,
return self._size.
if string 'forloop' is contained in context,
if an exception of the type UnicodeDecodeError, renamed to e, is caught,
call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
if self._validate_unique is true,
for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes,
if ImportError exception is caught,
if not,
and content_length.   self._read_started is boolean False.
default_list is an empty list.
define the function boolean_check with an argument v.
match value string with regex self.CONVERT_PATTERN, substitute the result for m.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the method __delitem__ with 2 arguments: self and key.
if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
use the result as the argument for the call to the messages.update function.   update messages dictionary with error_messages, if it exists, if not don't update it.
skip this loop iteration.
define ensure_echo_on function.
if plan_node is not contained in shown and first element of plan_node equals to app_name,
if KeyError exception is caught,
if renderer is true,
call the method self.xml.endElement with an argument string 'field'.
define the function contains with 2 arguments source and inst.
left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
do nothing.
formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels,   help_texts as help_texts and error_messages as error_messages, substitute the result for form.   call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num,
call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.
substitute parent_name for self.parent_name.
if context is an instance of Context class.
call the function get_library with an argument taglib, substitute the result for lib.
define the method bpython with an argument self.
call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
use length of result as an argument for the call to the function six.text_type, substitute the result for width.   if autoescape is false, if value is an instance of SafeData,
call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for,
call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
import module unicodedata.
call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
and store it in the value of the dictionary response under the key 'ETag'.   return response
evaluates to true,   split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
if ZeroDivisionError exception is caught,
if not,
get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.
define the method emit_post_migrate with arguments verbosity, interactive and database.
from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.
_error_files is an empty list.
call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.
import module struc.
if not,
if verbosity is greater or equal to integer 2,
define the function constant_time_compare with 2 arguments: val1 and val2.
if value under the 'microsecond' key of the kw dictionary is true,
from __future__ import unicode_literals into default name space.
append ext to the end of it, substitute the resulting list for name.   substitute name for self._name.
derive class LimitedStream from the object base class, making it a new-style class.
write errors to self.stdout.
if comment_lineno_cache equals cur_lineno.
append list containing string '--no-wrap' to self.xgettext_options.
skip this loop iteration,s
if issues is true,
define the method render with 4 arguments: self, name, value and attrs set to None.
raise an exception.
if filename is not contained in _error_files,
if response is None,
if not,
define the initialization method __init__ with self class instance and environ as arguments.
get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
if tag is contained in self.CDATA_CONTENT_ELEMENTS,
call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.
derive the class BlockContext from the Exception base class.
if AttributeError exception is caught,
call the method keyword.iskeyword with an argument new_name, if it evaluates to true,
return s.
open filename file in write mode, with the file descriptor renamed to outfile, perform,
return d.
format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
return result.
define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
update widget.attrs dictionary with extra_attrs.
return resulting list.   define the method keys with an argument self.
called with an argument kw, only if v is not None, substitute the result for kw.   substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
return boolean True.
update self.__dict__ dictionary with obj_dict.
substitute func for _dec._decorated_function.   call the function wraps with an argument func, call the result with an argument _dec, return the result.
define the method open with arguments self and mode set to None.
raise an exception.
if pickled is not None.
do nothing.
if match is true,
call the function CheckRegistry, substitute the result for registry.
try,
if not,
declared_fields is an instance of OrderedDict class.
settings.SITE_ID.
define the method resolve with 2 arguments: self and context.
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
call the smart_text function with an argument token, return the result.
return settings.LANGUAGE_CODE.
map elements from args through the function conditional_escape, substitute the result for args_safe.
append attr.name to attrs for every attr in self._moved_attributes.
append a tuple with 2 elements: f.name and formfield to field_list.
call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,
define the method empty_form with an argument self.
call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.
for every lookup and arg in args,
substitute first element of renamed_method for old_method_name.
substitute value for rest.
evaluate the method connections[db].ops.cache_key_culling_sql, evaluate the result by table modulus, call the method cursor.execute,
_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:
try,
if middleware has an attribute 'process_response',
if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.
if not,
define the method _start_relational_field with arguments self and field.
if value under the 'errlog' key of options dictionary is true,
define the function _load_serializers.
call the method apps.get_model with exclude as an argument, substitute it for model.
define the method __exit__ with arguments: self, exc_type, exc_value and traceback.
set attrvalue to None.
join elements of lines into a string, separated by newline characters, substitute it for msgs.
derive the class ConvertingTuple from tuple base class.
call the self.stderr.write, with string "The po files under %s are in a seemingly not writable location. mo files will not be updated/created." as argument, with '%s' replaced by dirpath.
key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments:   value, encoding and errors set to string 'replace'.   call the method mutable substitute for self._mutable.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
define the method args_check with 3 arguments: name, func and provided.
if first element of cwords equals a string 'runfcgi',
define the function remove_move with an argument name.
try,
msg is a string "Execution of %s failed: %s", with '%s' replaced by self.program and errors.
call the method middleware.process_response with 2 arguments: request and response, return the result.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,
call the function six.text_type with length of lines as an argument,
do nothing.
call the method self.stdout.write with an argument string "Installing %s fixture '%s' from %s.",
append site to sites.
substitute self.literal for value.
import module sys.
property decorator.
define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
substitute file for filename.
if is_relation,
call the method now.replace with argument tzinfo set to None, substitute it for now.
media is an instance of Media class.
substitute old_setting for context.autoescape.
split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
do nothing
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
convert num to an integer, substitute the result for length.
define the method __init__ with 2 arguments self and file.
substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
use global variable _default.
if not,
where '%s' is replaced with name.   args is an empty list.
if TypeError or ValueError exceptions are caught,
return self.position.
choice and idx, return the result.   define the method __str__ with an argument self.
get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,
if f is an instance of models.FileField,
from django.utils.timezone import utc and get_fixed_timezone into default name space.
yield string 'month' as an return value of the generator.
substitute value under the unique_for key of form.cleaned_data dictionary for date.
if format_module_path is true,
infos, 'INFOS'   for every issues and group_name in sorted_issues,
subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
import module time.
try,
try,
write a '[' to the self.stream file stream.
call the method s.find with an argument bytes string ';', substitute the result for end.
define the method all with argument self.
if d is an instance of real_datetime class,
join self.namespaces into a string separated with character ':', substitute it for self.namespace.
derive class TemporaryFile from the base class FileProxyMixin.
self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables,
return WRAPPER_ASSIGNMENTS.
define the method get_response, with self class instance and request as the arguments.
define the method __init__ with 2 arguments: self and s.
call the method path.decode with an argument fs_encoding, return the result.
substitute file_name for self.file_name.
call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
return printable representation of self.dicts.
if self.addr is false,
define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.
substitute the '%s' with table and list containing key, respectively.   fetch one entry from the database that cursor points at, substitute it for the result.
call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
if token equals a string "not" and i incremented by 1 is lesser than l,
return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
can_import_settings is boolean False.
define the method handle_fk_field with argument self, obj and field.
convert tagname to lowercase, substitute it for tagname.
define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
substitute media.__dict__ for media_attrs.
define the private method __str__, with self instance of this class as the only argument.
formated with values under the 'author_email' and 'author_name' keys of item dictionary.   otherwise if value under the "author_email" key of the item dictionary is true,
call the method match.group with an argument integer 1, substitute the result for text.
for every node in self,
try,
try,
called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?',   append the result th the self.path converted into a string and return it,   if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.   def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
from django.utils.timezone import is_aware into default name space.
do nothing.
derive the class DateField from the base class BaseTemporalField class.
call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,
and 3 additional pairs of dictionaries for string.   define the function configure_logging with 2 arguments: logging_config and logging_settings.
if sender is true and sender attribute 'handles_files' is also True,
pop the element form the path as substitute the result for ns.
define the function copystat with arguments src and dst.
get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
define the method write_po_file with arguments self, potfile and locale.
define the method clear with argument self.
signal is a string 'signals'
call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument,
define the function default with 2 arguments value and arg.
call the function self.format_subject with an argument subject, substitute the result for subject.
define the method get_fqdn with argument self.
dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.   call the method parser.add_argument with 6 arguments: string '-a', string '--all', action set to 'store_true',
string 'ascii' and errors set to a string 'replace', return the result.   define the method render with 2 arguments: self and context.
if data is true, substitute it for self.data, if not self.data is an empty dictionary.
"project name in the current directory or optionally in the given directory.".   missing_args_message is a string "You must provide a project name.".
break the loop execution.
default_validators is an empty list.
if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
finally perform,
substitute options for self.options.
otherwise if ch equals a string ':',
define the method content with 2 arguments: self and value.
from django.utils._os import rmtree_errorhandle into default name space.
if ValueError exception is caught,
return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
substitute self._options for client.behaviors.
filename and e.   split the_path at the '/' character, substitute last element of the result for used_name.
if date is not None,
return boolean True, otherwise return boolean False.   define private method __ne__ with self class instance and other as arguments.
exclude is an empty list.
derive the class LocaleRegexProvider with object as base class.
if ValueError exception is caught,
convert the result into a string and substitute it for value.   if not,
substitute python_reloader for reloader.
add model to a set, substitute the result for known_models.   pending_references is an empty dictionary.
if opts is true,
input_type is a string 'password'.
and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level,
call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
if LookupError exception is caught,
return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
derive the class SerializationError from the Exception base class.
BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
if model is contained in excluded_models,
get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
field_value is None.
substitute the result for RFC1123_DATE.   call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,
if urlconf_name is not an instance of six.string_types class,
call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent,
if ValidationError exception is caught,
from django.utils._os import safe_join and abspathu into default name space.
if not,
if value under the 'unique_id' key of the item dictionary is not None,
define the function npgettext with 4 arguments: context, singular, plural and number.
if not,
for every code in tuple with 2 elements: lang_code and generic_lang_code,
import module datetime.
return the value under the is_dst key of the _time.tzname dictionary.
raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
return the absolute path of file path filepath, substitute it for filepath.
substitute length of list_ for list_length.
derive the class ForNode from Node base class.
call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',
return nothing.
if arg is not string 'on' or 'off',
substitute absolute seconds for seconds.
from django.db import models into default name space.
call the method handler.addQuickElement with an argument string "author", "%s (%s)",
call the function allow_lazy with an argument chars, substitute the result for chars.
if lib is false,
if ValueError exception is caught,
call the method self.connection.close.
default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.   define the method handle with self instance of a class, list args, dictionary options as arguments.
try,
call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.",
return boolean False.
substitute it for time_re.   compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'
get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
format_key is a string 'DATETIME_INPUT_FORMATS'.
and code set to string 'invalid'.   decorator deconstructible,
for every check in checks,
call the function func with an argument path.
get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
skip this loop iteration.
call the server_bind method from the base class of the WSGIServer class.
return singular.
call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
from django.utils.http import cookie_date into default name space.
if shown is an empty set,
if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
dictionary containing element v for k.   for every k and list_ in return value of the method self.lists,
define the method css_classes with 2 arguments: self and extra_classes set to None.
return msgs.
endless loop,
if m is not False, None is considered False,
define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
do nothing.
if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.
call the executor.loader.detect_conflicts, substitute the result fr conflicts.
and unpacked dictionary kwargs.   if safe is true and data is not an instance of dict type.
for every f and e in list of tuples of self dictionary key, pair entries.   define the method as_json with 2 argumens self and escape_html set to boolean False.
from django.core import checks into default name space.
call the method filename.encode with an argument string 'utf-8', substitute the result for filename.
position the file pointer at the beginning of self file.
__version__ is a string "0.1".
'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'.   derive the class UploadFileException from the Exception base class.
from __future__ import unicode_literals into default name space.
define the function server_bind with an argument self.
define the function decorator with an argument klass.
import module re.
call the method apps.get_app_config with an argument exclude, substitute the result for app_config.
if except UnicodeDecodeError exception is caught,
define the method resolve_context with 2 arguments: self and context.
call the function _trans.deactivate, return the result.
define the function reset_translation.
if pattern.namespace is true,
call the function handle_extensions exts, substitute self.extensions.
from django.utils import six into default name space.
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
call the method other_dict.lists, for every key and value_list in result,
derive the class MultipleChoiceField from the base class ChoiceField class.
raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,
close the process with an argument 0.
do nothing.
if OSError exception is caught,
define the method get_full_path with an argument self.
fp is a instance of a class six.StringIO.
if count of occurrence of '.' in ip_str is not equal to integer 3,
return path.
from django.utils.encoding import smart_text and is_protected_type into default name space.
get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary,
raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
substitute Select for widget.
define the method extract with 2 arguments self and to_path.
if domain is not None,
string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.   format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
skip this loop iteration,
call the function locks.lock with arguments fd and locks.LOCK_EX.
try,
substitute DateTimeInput for widget.
property getter decorator,
assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.
raise an StopIteration exception.
concatenate string 'templates/' and template_name, substitute the result for pkg_name.
if not,
call the method self.close.
substitute first element of parts for view.
call the function get_template with an argument parent, return the result.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
message_context is None.
output is an empty list.
if value is contained in self.empty_values,
call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
define the method create_var with 2 arguments: self and value.
strip whitespaces from both ends of unicode_value, substitute the result for value.
delete value under the key key of dictionary at last element of self.dicts.
define the function is_ignored with arguments path and ignore_patterns.
and an empty dictionary, substitute the result for httpd_cls.   if not,
otherwise it is boolean False.   if kwarg_format is false,
skip this loop iteration,
substitute new_value for value.
singular is an empty list.
return potfiles.
substitute _itervalues for itervalues.
sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.
call the method copy.copy, substitute the result for obj.
call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
DARK_PALETTE is a string 'dark'.
import module itertools.
if not, substitute used_name for guessed_filename.   if not,
if fields is true and f.name is not contained in fields,
from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.
call the method f.seek with an argument integer 0.
dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.
call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.
and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.   define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.
subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,
self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,
call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
break from the loop execution,
get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
call the method self.nodelist_empty.render with an argument context, return the result.
return self._dimensions_cache.
derive the class Command from the AppCommand base class.
define the function linenumbers with 2 arguments value and autoescape set to None.
get the value under the 'ignore' key of the options dictionary, substitute it for self.ignore.
write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
substitute template_string for self.template_string.
result of the call to the method v.resolve with an argument context,   for result of the function smart_text called with 2 arguments k and string 'ascii'.   call the method self.view_name.resolve with an argument context, substitute the result for view_name.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
if value is true,
strip value of the first and last element.
if register_to is true,
define the method __getitem__ with 2 arguments: self and key.
call the function warnings.warn with 3 arguments: string "django.utils.tzinfo will be removed in Django 1.9. "
substitute self._regex for regex.
if fset is not None,
substitute label_suffix for self.label_suffix.
if there is no match,
define the method encoding with arguments self and val.
do nothing.
if app equals a string 'django.core',
value under the MISSES key of the stats dictionary, maxsize and length of cache.   define the function cache_clear.
return self.value.
if app_labels is true,
call the method self._cache.clear.
substitute name for self.name.
if new_name is not equal to col_name,
append ch to result.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
if year is lesser than integer 70,
return the result of the function format_html called with 2 arguments: string '<input{0} />',
return is empty dictionary.
define the function F with an argument i.
from django.utils.encoding import force_str into default name space.
substitute this list for additional_headers.   join all of the elements of vary_headers and additional_headers in a string delimited by a comma,
for every field in model._meta.many_to_many,
strip message_context of '"' characters from both ends, substitute the result for message_context.
return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string,
raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.
hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
define the method clear_checkbox_id with 2 arguments: self and name.
append value under k key of self dictionary to a list, for every k in self.keyOrder, return the result.
property decorator,
for every line in sequence_sql,
if ttl is not None,
from __future__ import unicode_literals into default name space.
called with an argument lang_code is true,   return lang_code.
substitute the result for filters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
call the function warnings.warn with 3 argument: string "AppCommand.handle_app() is superseded by AppCommand.handle_app_config().",
from xml.dom import pulldom into default name space.
form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
define the function sql_all with 3 arguments: app_config, style and connection.
substitute settings.MEDIA_URL for base_url.
derive the class Command from the BaseCommand base class.
return boolean True.
if instance is None,
from django.utils.safestring import mark_safe into default name space.
datetime.date and datetime.time.   define the function is_protected_type with obj as the only argument.
yaml import CSafeDumper as SafeDumper into default name space.
if delta is smaller than integer 0.
call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
define the method as_string with arguments self and unixfrom set to boolean False.
"django.core.serializers.python" for "python", "django.core.serializers.json" for "json",   and "django.core.serializers.pyyaml" for "yaml".   _serializers is an empty dictionary.
find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
increment stats dictionary value under the MISSES key by integer 1.
self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None,
if ignore_failures is true,
call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,
try,
if not,
define the method unget with arguments self and bytes.
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other, return boolean True, otherwise return False.
return an instance of TemplateSyntaxError class with an argument msg.
if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
if value is not None,
converted to an integer.   call the method self._init_translation_catalog.
derive the class ZipArchive from the BaseArchive base class.
from django.conf import settings into default name space.
call the function is_naive with an argument obj.
derive the class IPAddressField from the base class CharField class.
do nothing.
call the function check_programs with an argument string 'xgettext'.
call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
if not,
dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.   define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.
if instance.pk is None,
do nothing.
call the method token_string.count with an argument '\n', append the result to self.lineno.
decorator stringfilter,
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH,
call the method data.items, for every k and v in the result,
from django.utils.ipv6 import is_valid_ipv6_address into default name space.
split ip_str by '::', substitute it for hextet.
raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
define the method is_hidden with an argument self.
help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
remove last element for quant.
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
if not,
substitute length of tokens for l.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the method __delitem__ with 2 arguments: self and key.
return self._wrapped.__dict__.
get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
define the method inner with 2 arguments: self and unpacked list args.
if link is not None,
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
define the method utcoffset with 2 arguments self and dt.
call the method __init__ from the base class of the Field class.
define the method add_arguments with 2 arguments self and parser.
call the method query.items, substitute the result for query.
substitute the result for content.   token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
do nothing.
value is an empty string.
substitute io.StringIO for StringIO.
substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
call the method stream.unget with last rollback elements of chunk as an argument.
msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command,
call the function sys.exit with an argument integer 1.
if not,
move integer 1 left for 40 bits, substitute the result for TB.
and include_auto_created set to boolean True,   call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
for every attachment in self.attachments,
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
call the method token.split_contents, substitute the result without the first element for bits.
call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
if self.asvar is None,
from django.conf import settings into default name space.
call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
if self.timezone is false,
call the function force_bytes with an argument salt, substitute the result for salt.
from django.core.files.move import file_move_safe into default name space.
import module threading.
call the method self._archive.read with an argument name, substitute the result for data.
if first element of params equals a string 'context',
msguniq_options is an list with elements: string '--to-code=utf-8'.
from __future__ import unicode_literals into default name space.
if chunk is empty,
if ch equals a string '<',
return attrs.
for every handler in handlers,
call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,
define the method _has_changed with 3 arguments: self, initial and data.
call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.
if file self is not closed,
define the method Z with an argument self.
domain_whitelist is a list containing string 'localhost'.
string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments:   string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument:   string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.   define the function localize with 2 arguments value and use_l10n set to None.
format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.
call the method token.split_contents, substitute the result for bits.
for every key in keys,
self.object_name is a string 'CacheEntry'.
raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
substitute the result for args.   call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
derive class SimpleCookie from the base class http_cookies.SimpleCookie.
call the method match.group with an argument integer 0, return the result.
for every model in not_installed_models,
call the method match.groups with 2 arguments: key and value.
if return value of the self.is_secure method is true and server_port is not equal to string '443',
from django.utils.safestring import mark_safe into default name space.
call the get_complete_version with an argument version, store the result in version.
try,
if value is not equal to an empty string,
raise an CommandError with an argument string "Cache table '%s' could not be created.\nThe error was: %s.", replace '%s' with:
call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
if not, substitute self.auto_id for id_.   if id_ is true,
substitute params without the first element for params.
import module glob.
call the method local, substitute the result for _active.
if cls has an attribute k,
call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.   if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
added to a tuple with an element sum of year an integer 28, substitute the result for s2.   call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,
call the method node.render with an argument context, append the result to the nodelist.
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.
if index_sql is not empty,
import module warnings.
if StandardError, renamed to e, exception is caught,
decorator function register.filter with an argument is_safe set to boolean True.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
raise an exception.
substitute fields for self.fields.
if Exception exception is caught,
substitute connection.features.test_db_allows_multiple_connections for use_threading.
if tags is not None.
import pickle.
break from this loop execution.
use_l10n set to None and use_tz set to None.   substitute autoescape for self.autoescape.
for every s_opt in parser.option_list.   for every x in slice of cwords from the second element to the element at the cword decremented by 1 index,
if self.domain equals to string 'djangojs',
append self.pointer to self.backout.
substitute serializers for _serializers.
call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
substitute second element of bits for tag.
TemplateSyntaxError and VariableDoesNotExist.   from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,
define the method _get_queryset with an argument self.
none_value is a tuple containing 2 elements: integer 0 and string '---'.
define the method __init__ with 2 arguments self and var.
import module warnings.
substitute origin for self.origin.
if message is an instance of dict type,
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   define the method valid_value with arguments self and value.
define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
from django.conf import settings into default name space.
call the self._cache.get method with argument key, substitute the result for val.
decorator function register.filter with an argument is_safe set to boolean True.
parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string "%(prog)s subcommand [options] [args]" and add_help set to boolean False.
get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.
for every cat in value under the 'categories' key of the self.feed dictionary.
yield string "# into your database." as the result.
self.fixture_count is integer 0.
call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
define the function get_fixed_timezone with an argument offset.
substitute the result for value under the 'microsecond' key of the kw dictionary.   update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
return string 'nd'.
skip this loop execution.
if field_name is false,
decorator stringfilter,
try,
convert elements of self into a list, return the its printable representation.
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
define the method _read_limited with self class instance and size set to None as arguments.
ch is None.
yield field and ValidationError object converted to an list, created with an argument errors.
comment is an empty list.
define the function iriencode with an argument value.
if not,
if ValueError exception is caught,
for every name in filters,
if errors is None,
substitute formfield.limit_choices_to for limit_choices_to.
get the value under the key 'exclude' of the options dictionary, substitute it for exclude.
if self.is_localized is true,
append model to app_list_value.
call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.
from django.core.exceptions import ImproperlyConfigured into default name space.
call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
from __future__ import unicode_literals into default name space.
append field.widget.media to media, substitute the result for media.
append list with element inner to list containing first start elements of result, substitute it for result.
decorator function register.filter with an argument is_safe set to boolean True.
get the value under the 'no_location' key of the options dictionary, if it is true,
decorator function register.filter with an argument is_safe set to boolean True.
from pprint import pformat into default name space.
counters is a list containing length of handlers number of zeros.
call the function datetime with an argument unpacked list kw, return the result.
call the function iri_to_uri with an argument location, return the result.
convert new_name to a string and append it to string 'number_', substitute the result for new_name.
substitute post for self._post.
call the method get_language, substitute the result for language_code.
call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
from __future__ import unicode_literals into default name space.
if OverflowError or ValueError, renamed to exc, exceptions are caught,
if template starts with a string 'file://',
from django.utils._os import safe_join into default name space.
from django.utils.safestring import mark_safe into default name space.
return the value under the language_code key of the self._app_dict dictionary.
name is a property object with _get_name as a getter method and _set_name as a setter method.
substitute self.config for config.
derive the class MemcachedCache from the BaseMemcachedCache base class.
_empty_value is an empty list.
fill_to is an integer 8.
from django.utils import translation into default name space.
call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True,
derive the class BaseFormSet from the object base class.
from django.http import Http404 into default name space.
where '%d' is replaced with i and '%s' is replaced with subject.   increment i by integer 1,
define the method _reset_dicts with 2 arguments: self and value set to None.
from django.core import checks into default name space.
from django.core.management.color import color_style into default name space.
replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,
cat for 'term'.   if value under the 'feed_copyright' key of the self.feed dictionary is not None,
define the method top with an argument self.
substitute complain for append.
if s is the instance of the object six.text_type,
if not,
raise an ValueError with an argument string 'ModelForm has no model class specified.'.
if digest is None,
from django.conf import settings into default name space.
get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
from django.utils.timezone import template_localtime into default name space.
decorator function register.filter with an argument is_safe set to boolean False.
import module re.
return ret.
for every func and unused in filter_expr.filters,
if not,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary,   is grater than self.absolute_max,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
and a list containing a string '-h',   call the method self.main_help_text, append new line to it, write it to sys.stdout.
if not,
use the result as an argument for the call to the self.stdout.write method.   if run_syncdb and executor.loader.unmigrated_apps exist,
raise an value.with_traceback exception with an argument tb.
formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
return nodes.
if end is an instance of unicode,
import module warnings.
join elements of comment_notes into a string, separated by whitespaces, append it to the string ' #', append the result to field_desc.
if request.method equals to string 'HEAD',
substitute base for self.base.
define the method __init__ with arguments self and regex.
call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.
if StandardError, renamed to e, exception is caught,
substitute first element of options for opt_label.
and args, respectively.   call the method handle_default_options with an argument options.
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
return arg.
message is an string 'Unknown field(s) (%s) specified for %s'.
define the function execute_from_command_line with an argument argv set to None.
call the method logging.getLogger with an argument name, substitute the result for logger.
in_tag is boolean False.
if not,
remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
from django.conf import settings into default name space.
find position of '-' in the index of the language, substitute the result for p.
from django.core import mail into default name space.
if value under the 'subtitle' key of the self.feed dictionary is not None,
substitute model._meta for opts.
and include_auto_created set to boolean True,   call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
define the function widthratio with 2 arguments: parser and token.
if six.PY2 is true and value is greater than sys.maxint,
import module re.
return val.
call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
and result of the function escape called with an argument line, substitute the result for i-th element of lines.   call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.
from django.conf import settings into default name space.
if dirname is true and dirname directory doesnt exists,
self.locale_paths is an empty list.
if protocol is not equal to string 'both' and unpack_ipv4 is true,
if self.takes_context is true,
self.bad_cookies is an empty set.
substitute the value under the command key of self.tags dictionary for compile_func.
join trans_bit into a string separated with whitespaces, substitute the result for bit.
return self.
return _translations dictionary value, under the language key.
define the method clean with 2 arguments self and value.
locale_dir is None.
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
define the method usage with arguments self and subcommand.
if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,
string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'min_length'
from functools import wraps into default name space.
if other_dict is an instance of MultiValueDict.
append options to output.
substitute the result for ASCTIME_DATE.   define the function urlquote with 2 arguments: url and safe set to '/'.
split is an empty list.
if default is None,
perform the following:   call the method fp.read, substitute the result for src_data.
do nothing.
import module logging.
otherwise if field is contained in self.fields,
from django.conf import settings into default name space.
return template.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.
from django.db import connections, transaction, router and DatabaseError into default name space.
if Exception exception is caught,
supported is boolean False.
replace every occurrence of '</' in s with '<\\/'.
trans_real._default is None.
call the method deactivate.
attrs is a list with 2 elements: strings "__doc__" and "__name__".
if check_path is true,
return self.paginator.count.
and self.format_string, return the result.   derive the class SpacelessNode from Node base class.
if m is true,
to_delete is an empty set.
call the function warnings.warn with 2 arguments: string "OptionParser usage for Django management commands "
substitute DEFAULT_PORT for self.port.
call the method parser.compile_filter with an argument bit, append the result to args.
url is a string 'mailto:%s@%s' formated with local and domain.
call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
if var is false or whitespaces are contained in var,
import module json.
update self.filters dictionary with lib.filters.
substitute nonlocal_root for tuple root.
call the method self.validate_key with key as argument.
if unpack is true,
from django.conf import settings into default name space.
raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments",
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
if match is true,
and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.
substitute first 12 elements of r for r.
do nothing.
call the method self.attrs.copy, substitute the result for obj.attrs.
otherwise if cls._delegate_bytes is true,
self.new_objects is an empty list.
raise an CommandError exception with an argument message.
if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.
derive the class OrderedSet from the object base class.
otherwise if query has an attribute 'items',
remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.
if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
indexes is an empty dictionary.
skip this loop iteration.
from django.core.serializers import base into default name space.
derive the class Origin form the base class object.
format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,
derive the class Serializer from the base.Serializer base class.
do nothing.
call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
for every node in self.nodelist_empty,
call the function _ with an argument string 'AM', return the result.
call the method self.get with key and version set to version as arguments, substitute the result for value.
define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None,
call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string,
try,
call the function mark_safe with an argument value, return the result.
call the method self._prepare_data with an argument data, substitute the result for data.
boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.
call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
if not,
value under f.name key of the dta dictionary is an empty list.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
call the function mark_safe with an argument result, return it.
return value.
call the method self.fk.rel.to, substitute the result for self.instance.
define the method to_python with arguments self and value.
week_number is None.
if not,
if initial is None,
substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
from django.utils.encoding import force_bytes into default name space.
derive the class ConvertingList from list base class.
raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
return dec.
define the function gettext_noop with an argument message.
created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.   call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
derive the class Command from the AppCommand base class.
call the self._lib.Client with argument self._servers, substitute the result for self._client.
define the function activate with an argument timezone.
call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit,
substitute smart_text for smart_unicode.
if template is None,
otherwise if first element of second row of args equals a string '1',
from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.
define the method writeString with 2 arguments self and encoding.
decorator function register.filter with an argument is_safe set to boolean False.
clean is a lambda function with self and x as arguments, return value is length of x.
dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'
define the function random with an argument value.
set response to None.
call the method match.span, substitute the result for start an end, respectively.
extend basedirs list with settings.LOCALE_PATHS.
take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.
if bits is true and kwarg_format is false,
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
classmethod decorator,
call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
cache_key is a tuple with 2 argumetns: format_type and lang.
define the function get_key_func with argument key_func.
derive the class HttpResponseForbidden from the HttpResponse base class.
take subject elements from p-th to i-th index, substitute it for s.
remove kwargs dictionary element under the 'method' key, substitute it for method.
derive the class EscapeText from six.text_type and EscapeData base classes.
format truncate with a dictionary with an element: text for 'truncated_text', return the result.
if subcommand equals to a string 'help'.
call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary,
call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.
define the get_many method with self class instance, keys and version set to None as arguments.
substitute substitute TextInput for widget.
if Exception exception is caught.
call the method self.to_python with an argument value, substitute it for value.
re_formatchars.split, for every i and piece in enumerated result,   if i is even number,
call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string,
define the method handle_noargs with 2 arguments: self and unpacked dictionary options.
call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.
call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
daemonize is boolean True.
error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
if remaining is None,
call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
otherwise if length of fks_to_parent is zero,
try,
for every dict_ in self.dicts,
from django.utils.translation import trans_real into default namespace.
define the function compress_string with an argument s.
import_module called with an argument parentmod and submod, evaluates to false.   raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. Parent module %s does not exist.",
raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
raise an raise self.warning with an argument self.warning.
self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
from django.utils.encoding import force_text and iri_to_uri into default name space.
get the index of the first occurrence of tagname, substitute it for i.
try,
call the function force_bytes with an argument key_salt, substitute the result for key_salt.
if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
replace every occurrence of '\n' in s with '\\n'.
from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
return self.connection.
instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
import module sys.
from django.utils.encoding import force_bytes into default name space.
try,
if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
import module stat.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
substitute the result for offset_mins, otherwise offset_mins is integer 0.   convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,
if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
write 79 '-' characters into self.stream file stream.
if not,
if self.fail_silently is boolean False,
val is None.
derive the class SubWidget from the object base class.
and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions.   extra_files is an empty list.
for every filename in gen_filenames(),
define iterator method __iter__ with self as the argument.
return boolean False.
call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,
call the method os._exit with an argument integer 1.
raise TemplateSyntaxError(
except ImportError.
call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.
'may be ambiguous or it may not exist.', substitute the result for message.   params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
define the method bound_data with arguments self, data and initial.
try,
from django.utils.encoding import python_2_unicode_compatible into default name space.
substitute serialize_headers for __str__.
call the method datetime_safe.new_date with an argument value, substitute the result for value.
if only_django,
substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.   call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary,
skip this loop iteration.
define the function do_ifequal with 2 arguments: parser, token and negate.
for every first_select in return value of the function _parse_date_fmt.
call the method extracted.close.
if level is not None,
return an empty string.
raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s",
define the method skip_past with 2 arguments: self and endtag.
if ValidationError renamed to e, exception is caught,
define the method __contains__ with self and key as arguments.
substitute initial_id for self.auto_id.
substitute .error_class for self.error_class.
compile regex from a string '\\(.)', substitute it for re_escaped.
if p is greater or equal to integer 0,
incomment is boolean False.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,
try,
append ')' to third element of bit, substitute it for sentinal.
derive the class PyLibMCCache from BaseMemcachedCache base class.
from django.conf import settings into default name space.
from UserList import UserList into default namespace.
derive the class Paginator from the object base class.
return an empty string.
if end is not a '>' or '/>' character,
ser_fmt is None.
substitute str for binary_type.
increment pos by one, substitute the result for last.
from django.core.management.color import no_style into default name space.
define the method self and blocks.
self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key,
open writer.path file in write mode, with file descriptor as fh, perform the following,
do nothing.
outdict is an empty dictionary.
call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.
call the function current, substitute the result for current.
if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.   if changes is false and self.verbosity is greater than, or equal to iteger 1,
if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
while t is greater than integer 0,
created with 2 arguments: required as boolean False and widget set to HiddenInput.   call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,
error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.
if parse_until is true,
if error_message is not None,
if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
return boolean False.
can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max,   substitute the result for form.   substitute model for FormSet.model.
import module hashlib.
call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.
if ValueError exception is caught,
return integer 0.
define the method _load_post_and_files with an argument self.
bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.
append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.
define the method __enter__ with argument self.
if six.PY3 is true,
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
from django.utils.formats import localize into default name space.
default_validators is an list containing validators.validate_ipv4_address.
if pathext is None,
derive the class Command from the BaseCommand class.
return boolean False.
return boolean False.
raise an exception.
define the function dictConfig with an argument config.
set the file pointer at the beginning of the self.file file.
set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.
call the method token.split_contents, substitute the result for bits.
substitute connection_reset for self.connection_reset.
ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',
derive the class _OFFSET from the Structure base class.
if base_url is None,
if self.verbosity is greater than integer 1,
call the method self.tag with 2 arguments name and func, return the result.
replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
from django.db import models into default namespace.
if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
if value under the 'microsecond' key of the kw dictionary is true,
pos is equal to integer 0.
skip this loop iteration,
convert name to lower case if it equals to string 'from' or 'to,
call the function mark_safe with an argument message, return the result.
if self.selected_fields is None or field.attname is contained in self.selected_fields
unpacked dictionary daemon_kwargs.   if value under the 'pidfile' of options dictionary exists,
self.lookups is None.
call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,
call the method settings.configure.
if not,
if sys.platform starts with string 'java',
while x is greater than zero,
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.
otherwise if formfield_callback is not callable object,
where '%s' is replaced with var.   call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.
child_loggers is an empty list.
host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern,   substitute boolean true for match, otherwise substitute boolean False for match.   if match is true,
if arg is smaller than integer 1,
import re module.
define the method write with 2 arguments: self and content.
call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
call the function bytes with an argument value, return the result.
call the function quote with return value of the evaluated function force_bytes(iri),
define the method _create_message with arguments self and msg.
if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
if ',' is not contained in arg,
if not.
if ImportError exception is caught,
if not,
if i is greater than, or equal to the result of the call to the method self.initial_form_count,
if source is an instance of Group class,
define the method _create_alternatives with arguments self and msg.
if PY3 is true,
substitute template for self.template.
call the method time.mktime with an argument tt, substitute the result for stamp.
call the method token.split_contents, substitute the result for bits.
if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
return initial.
endless loop,
remove entry at the key key of the attrs dictionary.
call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback,
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
call the method value.replace with an argument tzinfo as timezone, return the result.
import module smtplib.
decrement self.remaining by length of result.
if ImportError exception is caught,
extend final_output with alter_sql.
var_obj is None.
for ext in pathext,
if not formfield_callback is None.   call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs,
append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
return integer 0 and ch2.
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
mail.outbox is an empty list.
_templatetags_modules is an empty list.
define the function make_list with an argument value.
call the method self.fields.items, for every name and field in result,
if UnicodeDecodeError exception is caught,
DEFAULT_TIMEOUT is a instance of the class object.
try,
derive the class ImageField from the base class FileField class.
from django.apps import apps into default name space.
call the function op, return the result.
define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
call the method self.port.isdigit, if it evaluates to false,
convert tag to lowercase if it is not equal to self.cdata_tag,
if PY3 is true,
if not,
if not,
from django.utils.module_loading import module_has_submodule into default name space.
invert the ordering of elements of int_part_gd, substitute it for int_part.
derive the class ModelChoiceIterator from object base class.
return an empty string.
if size is None or size is greater than self.remaining,
tr,
get the value under f key of dictionary under 'filters' key of self.config dictionary,
and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.   raise an ValueError with an argument string "fk_name '%s' is not a ForeignKey to '%s.%'.", where '%s' is replaced with,
from django.db.utils import DatabaseError into default name space.
get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
from django.apps import apps into default name space.
substitute callback.func for callback.
define the function create_bound_function with 2 arguments: func and obj.
substitute args for key.
derive the OutputWrapper class from the object base class.
derive the class CheckboxInput from the Widget base class.
for every name in loggers,
for every bit in bits,
if to is true,
call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.
try,
call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
BASE16_ALPHABET is a string '0123456789ABCDEF'.
if ValueError exception is caught,
from django.utils import six into default name space.
assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.
define the method reload with an argument self.
substitute nodelist for self.nodelist.
call the method self.remove_potfiles.
extend self.children list with data.children.
_iterkeys is a string "keys".
substitute the result for base and tail_ext.   get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,
do nothing.
raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
increment self.fixture_count by one.
if block is None,
raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)",
from email.header import Header into default name space.
id is None.
call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,
calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
strip g of "'" from both ends,
if OSError, renamed to e, exception is caught,
if block_name is contained in parser.__loaded_blocks,
split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
if iterable is true, otherwise use an empty list as an argument.   define the method add with 2 arguments: self and item.
evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,
define the function conditional_escape with an argument text.
raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.",
raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s",
define the method end_serialization with an argument self.
internal_use_only is boolean True.
call the method opts.model, substitute the result for self.instance.
if data is an instance of bytes.
from django.utils.datastructures import MultiValueDict into default name space.
return template_name.
define the method __iter__ with an argument self.
call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,
return last element of value.
find the ending position of the regular expression match of the object match, substitute the result for j.
return ip_str.
s is an instance of MLStripper class.
remove item from self dictionary.
call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
convert number to string, if first element equals to sign,
decorator stringfilter,
substitute fail_silently for self.fail_silently.
define the function do_extends with 2 arguments parser and token.
for every widget in self.widgets:,
call the function reloader_thread.
call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
call the method bf.css_classes, substitute the result for css_classes.
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
from django.utils import six into default name space.
define the function b64_encode with an argument s.
call the method s.encode with an argument string 'utf-8', substitute the result for s.
define the function get_current_timezone_name.
if NotImplementedError exception,
if six.PY3 is true,
from django.utils.text import unescape_entities into default name space.
call the function  six.iteritems with an argument blocks, for every name and block in result,
derive the class Command from the BaseCommand class.
call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD,
sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.   append pattern to tried list.
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.
if value under the 'verbosity' key of the options dictionary is greater than zero,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
define the function normalize_newlines with an argument text.
substitute model._meta for opts.
decorator stringfilter,
if prefix is false, and self doesnt have '_callback_str' attribute,
call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace',
define the function debug with 2 arguments: parser and token.
define the method __str__ with argument self.
dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django',
is replaced with '\\"'.   define the function same_origin with 2 arguments url1 and url2.
define the method __enter__ with an argument self.
call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
skip this loop iteration.
define the method changed_data with an argument self.
return a dictionary with an entry: self.ns for "xmlns".
compare_to is None.
get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
define the method total_form_count with an argument self.
call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.
import module os.
try,
and ignorenonexistent set to self.ignore, substitute the result for objects.   for every obj in objects,
domains is a tuple with element string 'django'.
call the function _create_cache with argument alias.
define the function write with an argument data.
dest is 'use_base_manager', default is boolean False and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys',
call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.
if not,
define the method strptime with arguments self, value and format.
substitute self.required for widget.is_required.
call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
define the function next_space_index with 2 arguments: self and subject.
call the method form.add_prefix with an argument self._pk_field.name,
try,
call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.
define the method url with arguments self and name.
call the self.get method with k and version set to version as arguments, substitute the result for val.
call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
FILTER_ARGUMENT_SEPARATOR is a string ':'.
open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.
remove dirname key from dirs.
self._cull_frequency is integer 3.
if self.is_bound is false,
if part is contained in PALETTES,
from django.core.management.sql import sql_delete into default name space.
output_transaction is boolean True.
replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',
substitute current_app for self.current_app.
call the method parser.add_argument with 2 arguments: string 'app_label',
call the function dec with an argument func, return the result.
if label_suffix is None,
from __future__ import unicode_literals into default name space.
call the method parser.delete_first_token.
for every __ in range of integers from 0 up to sep subtracted from fill_to,
for every app_config in return value of the method apps.get_app_configs,
return an instance of VariableNode class with an argument filter_expression.
call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',
merge_migrations is an empty list.
call the self.run method with unpacked dictionary options as an argument.
define the method write with 3 arguments: self, outfile and encoding.
import threading.
call the function exhaust with an argument self._input_data.
define the method has_key with 2 arguments: self and key.
derive the class Lexer form the base class object.
define the method _is_expired with self and f as arguments.
call the method clean with an argument value from the base class of the EmailField class.
call the method command.stdout.write with an argument errors.
regex is an property object of this class, with _get_regex getter and _set_regex setter function.
replace every occurrence of raw string '\\' in the result with string '\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.
outut is an empty list.
from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
if self.output_transaction is true,
if self has an attribute '_choices',
divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
if new_value equals value,
strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.
define the function get_template with 2: template_name and dirs set to None.
return the printable representation of the self object converted to a dictionary.
if IOError, renamed to e, exception is caught,
use the result as an argument for the call to the mark_safe function, return the result.   call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
substitute tempfile.gettempdir for gettempdir.
call the parseaddr function with return value of the force_text with argument addr, as argument, substitute the result for addr.
TRANSLATOR_COMMENT_MARK is a string 'Translators'.
return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.
define the method deleted_forms with an argument self.
for every error in self.error_list,
define the method get_limit_choices_to with arguments self.
call the function check_for_migrations with arguments app_config and connection.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
if self.verbosity is greater than integer 0,
from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
substitute months for self.months.
for every key in self.keyOrder,
call the method _trans.ungettext with 3 arguments singular, plural and number.
help is a string "Deprecated - use 'migrate' instead.".
from django.core.management.base import CommandError into default name space.
define the method open with arguments self, name and mode defaulting to string 'rb'.
append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
derive the class NodeList form the base class list.
run_syncdb is boolean True.
slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
if not,
define private method __call__ with self class instance, environ and start_response as the arguments.
substitute new for self.mod.
if cursor is true,
for every form in self.saved_forms,
return the first element of self.client_address.
define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False,
break from the endless loop.
self.charset is None.
raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.
from django.utils._os import upath into default name space.
if not, content_type is an empty string and content_type_extra is an empty dictionary.   strip the content_type of the whitespaces, substitute it for content_type.
if self.localize is true,
for every tag in open_tags,
if AmbiguityError exception is caught,
for every model in model_list,
convert name to lower case, if it is contained in ADDRESS_HEADERS,s
try,
if value is None,
_get_request is getter function for REQUEST attribute of this class.
and result of the function flatatt, called with an argument final_attrs.   define the method value_from_datadict with 4 arguments: self, data, files and name.
fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.   otherwise if length of fks_to_parent is zero,
call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
for meta_line in return value of the method self.get_meta called with an argument table_name.
call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,
call the method MIMEText.__setitem__ with arguments self, name and val.
widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,
raise an IOError exception with argument string "%s exists and is not a directory.", where '%s' is replaced by directory.
import module os.
call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,
from django.utils import six into default name space.
call the method regex.match with an argument date, substitute the result for m.
if length of hextet is greater than integer 1,
define the method __init__ with self, server and params as arguments.
self.find_template_cache is an empty dictionary.
from django.utils._os import upath into default name space.
from django.utils.encoding import force_st into default name space.
result of the call to the function _ with an argument string 'Tue' for 1,   result of the call to the function _ with an argument string 'Wed' for 2,   result of the call to the function _ with an argument string 'Thu' for 3,   result of the call to the function _ with an argument string 'Fri' for 4,   result of the call to the function _ with an argument string 'Sat' for 5,   and result of the call to the function _ with an argument string 'Sun' for 6.   WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',   5 for 'saturday' and 6 for 'sunday'.
_response_middleware is an empty list.
return default.
substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with key,
if signal has an attribute 'SIGTTOU',
call the __init__ method with an argument name from the base class of the MovedModule class.
value is an empty list.
assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.
substitute NullBooleanSelect for widget.
self._request_middleware is None.
decorator stringfilter,
derive the class FileField from the base class Field class.
try,
call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state,
if initial equals a string 'False',
call the method other.__cast, substitute the result for other.
call the method loader.get_template with an argument template, return the result.
otherwise if token.token_type equals integer 2,
if six.PY3 is boolean True,
define the function phone2numeric_filter with an argument value.
from __future__ import unicode_literals into default name space.
return key and pdict.
convert per_page into an integer and substitute it for self.per_page.
substitute _iterkeys for iterkeys.
if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
call the function render_value_in_context with 2 arguments output and context, return the result.
where '%s' are replaced with name and param.   if not,
call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
define the method decr with arguments self, key, delta defaulting to integer 1 and version defaulting to None.
import module shutil.
if not,
call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.
call the method self.nodelist.render with an argument context, substitute the result for output.
label is a string 'label'
call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
call the function timedelta with an argument integer 0, return the result.
multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds,
self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.   get the value under the cmp_fmt key of the self.compression_formats dictionary, assign it to open_method and mode.
if not,
from email.utils import formatdate into default name space.
substitute type.__init__ for __init__.
nodelist_empty is None.
try,
return a string '%02d' formated with self.data.second.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
if TypeError exception is caught,
from binascii import Error as BinasciiError into default name space.
msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
call the method self.nodelist_false.render with an arguments context, return the result.
return ipv4_unpacked.
call the method self._update_errors with an argument e.
try,
define the method close with argument self.
derive the class FixedOffset from the tzinfo base class.
append string 'Form' to model.__name__, substitute the result for class_name.
return the result.   sign is an empty string.
if filename ends with extensions or filename is contained in extra_files,
if TemplateSyntaxError, renamed to e, exception is caught,
call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe,
call the function strip_tags with an argument value, return the result.
if not,
define the method __reversed__ with an argument self.
return None.
define the method get_field_type with 4 arguments: self, connection, table_name and row.
from django.core.management.sql import sql_destroy_indexes into default name space.
if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
self.managed is boolean True.
try,
substitute the resulting set for selected_choices.   output is an empty list.
"(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/",   "?|[/?]\S+)$" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
load_template_source.is_usable is boolean True.
"(%s) and 'can_import_settings' (%s) command options.", replace '%s' with self.leave_locale_alone and self.can_import_settings.   from django.utils import translation into default namespace.
define the function safeseq with an argument value.
parent is a tuple with 1 element, object.
call the get_script_name function with environ as argument, substitute the result for script_name.
call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.
for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple,
remove first 2 and last 2 elements from var.
if not,
return first element of t.
if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
get the value under the 'database' key of the options dictionary, substitute the result for database.
derive the class Loader from the BaseLoader base class.
call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
inner_text is an empty list.
if not,
call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name',
all_unique_checks is union of all_unique_checks set and unique_checks set.
define the method start_serialization with an argument self.
substitute loader.graph for graph.
from django.utils import formats into default name space.
try,
call the method clear from the base class of the class SortedDict.
headerlist is an empty list.
dictionary keys converted into sets,   skip this loop iteration,
try,
if not,
concatenate path and string '.%s', append the result to format_module_path.
call the function locks.unlock with argument fd.
decrement self.active_writers by integer 1,
if value is not contained in result,
call the method self.queryset.none, return the result.
if process_all is true,
from django.db import models into default name space.
remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
from __future__ import unicode_literals into default name space.
call the cursor.execute method with sql as argument.
skip this loop iteration.
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
from django.utils.functional import cached_property into default name space.
message is an string "%s\n\nRequest repr(): %s"  formated with the result of the metod self.format with an argument record,
call the method cursor.execute with string "INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)",
ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',
derive the class TypedChoiceField from the base class ChoiceField class.
import module sys.
call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,
self.verbatim is boolean False.
define the function parse_accept_lang_header with an argument lang_string.
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument,
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
call the function module_to_dict with an argument global_settings, substitute it for default_settings.
params is a list with second element of source as a element.
from importlib import find_loader as importlib_find.
for every resultclass in resultclasses,
call the method self.setlist with 2 arguments: k and v.
if not,
define the method F with an argument self.
substitute the result for trail.   call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed,
define the method render with 2 arguments: self and context.
substitute token.source for e.django_template_source.
define the function parse_cookie with cookie as the argument.
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
remove first element of result from self.keyOrder dictionary.
call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
int_part_gd is an empty string.
if result is true,
substitute the result for result.   try,
if formatter is true,
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
decorator stringfilter,
define the function wordwrap with 2 arguments value and arg.
if not,
guid_attrs is an empty dictionary.
substitute i for end_index.
if not,
return value under the key key of d dictionary.
if cookie is an empty string,
try,
substitute nodelist_empty for self.nodelist_empty.
sort loader.migrated_apps, substitute it for app_names.
raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.
substitute i for p.
call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
define the method size with arguments self and name.
raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.",
define the method __getitem__ with arguments self and name.
do nothing.
substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.
from __future__ import unicode_literals into default name space.
args is an empty list.
return nothing.
append first element of e.args to not_found list.
where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
call the function strftime with 2 arguments: self and fmt, return the result.
append data to self.children.
from .html_parser import HTMLParser and HTMLParseError into default name space.
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
append contents to plural.
substitute self.closed for close.
if not,
call the method self.nodelist.render with an argument context, substitute the result output.
if 'Location' is contained in response and function request.get_host evaluates to True,
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
safe_data is an empty dictionary.
return data.
call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument, assign the result to color_settings.
get 'render' attribute of template object, if it is callable,
try,
substitute value for value under the options key of options dictionary.
while ch is not equal to a string '}',
and result of the method self.__getstate__.   define the method __deepcopy__ with 2 arguments self and memo.
define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
python_2_unicode_compatible decorator,
call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
python_2_unicode_compatible decorator,
if exception is caught,
yield key and value under key key of self dictionary.
try,
if attrs is true,
put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
call the method parser.next_token, substitute the result for token.
decrement factor by one.
if there is no match,
value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
define the method __setitem__ with 3 arguments: self, kay and value.
call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
if err_log is true,
return nothing.
if not,
call the function strftime with 2 arguments: self and fmt, return the result.
substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.
call the function force_text with an argument text, split by it word_split_re, substitute it for words.
from django.utils.http import urlquote into default name space.
from __future__ import absolute_import into default name space.
substitute model._meta for opts.
if not,
define the method merge with 2 arguments self and other.
"""(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$""", re.X   DEFAULT_PORT is a string "8000".
append the result to the '\n' string, write it to self.stdout.   finally perform,
write errors to self.stdout.
raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
d is an instance of Decimal class created with an argument input_val.
if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
if error is not an instance of ValidationError,
if self.__dispatch is None.
if ret is true.
from django.apps import apps into default name space.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
substitute self.setting for context.autoescape.
if 'locale' is a directory,
call the method self.validate with an argument display_num_errors set to boolean True.
increment i by one.
define the function get_major_version with an argument version defaulting to None.
replace every occurrence of old for new in msgs, substitute the result for msgs.
try,
from django.utils.timezone import get_current_timezone_name to the default name space.
if scheme is not contained in self.schemes,
if not,
define the method add_arguments with arguments self and parser.
define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.
self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
substitute MultipleHiddenInput for hidden_widget.
increment visible_issue_count for length of issues.
match is None.
substitute windll.kernel32.UnlockFileEx for UnlockFileEx.
if mw_instance has an attribute named 'process_response'.
call the function os.path.dirname with an argument django.__file__, join the result into a path,
derive the class GenericIPAddressField from the base class CharField class.
if shutdown_message is true,
if not,
substitute i for p.
get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
call the function cache_get with an argument key, substitute the result for link.
call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
if not,
define the method _create_message with arguments self and msg.
call the method connection.close,
call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
append idstring to the '.' character, substitute it for idstring.
derive the class LocalTimezone from the tzinfo base class.
call the method self.full_clean.
if value is an instance of six.text_type class,
define the method handle_inspection with 2 argument: self and options.
breaks from the smallest enclosing loop.
databases is a list containing 2 elements: self.using and None.
result is an empty list.
define the method __bool__ with an argument self.
skip this loop iteration.
derive the class TimestampSigner from the Signer base class.
define the function get_commands.
divide value by max_value, multiply the result with max_width, substitute it for ratio.
if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
substitute form.cleaned_data for cleaned_data.
as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
substitute the result for self.literal.   if ValueError exception is caught,
call the function random_module.choice with an argument value, return the result.
from django.utils.text import get_text_list into default name space.
raise an TemplateSyntaxError exception with an argument string "Named cycle '%s' does not exist", where '%s' is replaced with name.
try,
for every path_to_remove in self.paths_to_remove,
and errors set to the result of self.default_error_messages.copy.
put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.
_trans is an instance of Trans class.
if TemplateLoader has an attribute 'load_template_source',
call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
append string 'Field renamed to remove unsuitable characters.' to field_notes.
call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,
label set to return value of the function _ called with an string 'Delete' and required as boolean False.   define the method add_prefix with an argument self.
if UnicodeEncodeError exception is caught,
call the method app_config.get_models, substitute the result fr model_list.
return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.
define the method __getitem__ with arguments self and index.
slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
substitute first element of app_list for ns.
requires_system_checks is boolean False.
if truncate is None,
return an empty list.
define the method get_parent with 2 arguments self and context.
if name is None,
special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
join elements of parts into a string, separated with '.', substitute it for name.
set self.cdata_tag to None.
if arg is an instance of unicode,
_func_globals is a string "__globals__".
if not append w to the list, substitute the resulting list for self.widgets.   call the method __init__ from the base class of the class MultiWidget, with an argument attrs.
substitute code_changed for fn.
from django.utils.six import StringIO into default name space.
for key and value in result of the function six.iterlists called with an argument,
decrement self.waiting_writers by integer 1,
substitute settings.MEDIA_URL for prefix.
for every attr in _urllib_request_moved_attributes,
if not,
define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
if settings.USE_L10N is true and value is an instance of six.string_types,
if header list is not None,
if qs.ordered is false,
if not,
call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
self.verbatim is boolean False.
return self._changed_data.
substitute _iteritems for iteritems.
if self.can_import_settings is true,
define the function urlunquote with an argument quoted_url.
substitute RadioFieldRenderer for renderer.
raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
get value under the self.blocks dictionary under the name key, return the last element.
import module datetime.
call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
substitute the length of the resulting list for number_equal.   if number_equal is greater than integer 40,
decorator function register.filter with an argument is_safe set to boolean True.
call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value,
if f.rel and f.rel.to are not contained in to_delete,
for every i and handler in enumerated iterator self._upload_handlers,
raise self.warning.
BLOCK_TAG_START is a string '{%'.
if not,
activate is a lambda function which returns None for any argument x.
substitute name for self.name.
return value under the key key of d dictionary.
for every obj in result of the method self.queryset.all.   for every choice in self.field.choice_cache,
call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.
call the method self.validate_key with argument key.
try,
skip this loop iteration.
evaluate the method type(self).__bool__ with argument self, return the result.
define the method end_serialization with an argument self.
self.paths_to_remove is an empty list.
yield value under key key of self dictionary.
otherwise if any other exception is caught,
updates is an empty dictionary.
convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.   if not,
define the method _isdst with 2 arguments: self and dt.
remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,
if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.
substitute None for self.style_func.
define the method __init__ with 2 arguments self and dt.
call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4
token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.
if archive.ArchiveException or IOError, renamed to e, exception are caught,
derive class SingleZipReader for zipfile.ZipFile base class.
and e.level is lesser than checks.CRITICAL.   append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.
call the method self.iterlists, return list of results.
decorator function register.filter with an argument is_safe set to boolean False.
call the method s.get_data, return the result.
while bit doesnt end with sential,
resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
substitute settings.ROOT_URLCONF for urlconf.
data is an empty dictionary,
encoding set to None and unpacked dictionary _params.   substitute encoding for self.encoding.
return _decorator.
subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,
call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
append str_hidden to output.
try,
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
if not,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
do nothing.
get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
field_dict is an instance of OrderedDict class, created with an argument field_list.
from django.utils.functional import allow_lazy into default name space.
define the method close with an argument self.
if name equals a string 'content-disposition',
raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
try,
substitute self.DEFAULT_CHUNK_SIZE for chunk_size.
or if it doesnt exists if exclude is None.   raise an ImproperlyConfigured with an argument string "Calling modelformset_factory without defining 'fields' or 'exclude',
call the method self.open.
from django.core.management.base import BaseCommand and CommandError into default name space.
return value.
where '%s' is replaced with top_dir.   call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,
get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
if UnicodeEncodeError exception is caught,
add ns_pattern and extra, substitute the result for ns_pattern.
dest as a string 'locale', action as a string 'append' and help as a string,   'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list,
assign self.model._meta.pk to self._pk_field and pk.
if callback doesnt have '__name__' attribute,
call the method self.coerce with an argument choice, append the result to new_value.
compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.
call the function sys.exit with argument integer 3.
define the method add_item_elements with 2 arguments, handler self and item.
raise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
define the method _add_fallback with an argument self.
do nothing.
define the method get with 3 arguments: self, key and otherwise set to None.
if with_base_fields is true,
call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD,
for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
call the method filename.rfind with an argument string "\\", increment the result by one,
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument,
substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if not,
call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
if TypeError exception is caught,
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
if args in true,
otherwise if length of bits equals integer 6,
define the method __init__ with 2 arguments: self and attrs set to None.
where '%d' is replaced with i and '%s' is replaced with subject.   increment i by one.
if location is None,
substitute i-th element of list for title.
zip together new_keys and keys, convert it to dictionary, assign it to m.
if row_data is contained in seen_data,
substitute the result for formatted_subject.   return first 989 elements of formatted_subject.
if t is not None
and unpacked dictionary kwargs, substitute the result for form.   if self.save_as_new is true,
attrs as attrs_plus and choices as choice_label.   substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
if prefix doesnt end with character '/',
define the method is_url with arguments self and template.
derive the class ContentFile from File base class.
call the function no_style, substitute it for self.style.
called with an argument decorator.   if decorator has an attribute 'process_view',
if self._num_pages is None,
from django.utils import six and lru_cache into default name space.
derive the class BadHeaderError from the ValueError base class.
return an empty list.
if values has an attribute '__len__',
join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type,
self.choice_cache is None.
derive class WindowsError from Exception base class.
convert processors elements into a tuple, substitute it for _standard_context_processors.
substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,
replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
decorator function register.filter with an argument is_safe set to boolean True.
get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.
where '%s' is replaced with filter_name.   call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,
derive the class SimplerXMLGenerator form the XMLGenerator base class.
call the function time.time, substitute the result for timeval.
if app_config.models_module is None,
self._raw_ipv6 is boolean True.
match rest string with self.INDEX_PATTERN regex, substitute the result for m.
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:   call the method fp.write with an argument content.
define the method message_dict with an argument self.
substitute True for output_transaction.
try,
call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
join the resulting sequence in a string with comma as separator, assign the string to cc.   substitute response dictionary value under the key 'Cache-Control' for cc.
from django.utils.module_loading import import_string into default name space.
if _active has an attribute "value",
from django.utils.safestring import mark_safe into default name space.
define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.
if second element of options is true,
return nothing.
derive the class Signer from the object base class.
if max_num is None,
if length of bits is not equal to integer 2,
insert tagname at the beginning of open_tags.
from . import six into default name space.
if self.interactive is true,
insert '.' to digits at negative exponent index.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
call the function sys.exit with argument exit_code.
if iterator is None,
replace '%s' in string "System check identified some issues:\n%s" with msg, substitute it for msg.
'resent-to', 'resent-cc' and 'resent-bcc'.   define the function forbid_multi_line_headers with arguments: name, val and encoding.
evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
zip val1 and va2 into list of tuples, for every x and y in the result,
call the method formats.time_format with 2 arguments: value and arg, return the result.
call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
define the method __promise__ with 4 arguments: cls, klass, funcname and method.
saved_locale is None.
bits is an empty list.
if mime_encode is true,
if count of occurrence of '::' in ip_str equals integer 1,
define the function date with 2 arguments value and arg set to None.
define the function get_language_from_path with an argument path.
if field.rel.through._meta.auto_created is true,
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
if six.PY2 is true,
define the method render with 2 arguments: self and context.
if value has an attribute 'close',
call the method self.add_handlers with 2 arguments: logger and handlers.
return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,
call the os.remove function with argument name.
from collections import UserList into default namespace.
call the function update_wrapper with 2 arguments: _wrapper and func.
register.tag decorator,
call the method context_instance.push with an argument dictionary, with the result perform,
define the method __str__ with an argument self.
output is an empty list.
from importlib import import_module into default name space.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
otherwise if self.waiting_readers is not equal to integer 0,
_called_from_command_line is boolean False.
call the method self._lock, with the return value,
for every uclass, unique_check in all_unique_checks,
do nothing.
library set to memcache and value_not_found_exception set to ValueError.   property decorator,
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
join elements of self.vals into a bytes string, substitute the result for ret.
if value is contained in self.empty_values,
derive the class MLStripper from the HTMLParser base class.
call the method self._assert_mutable.
call the method self.build_potfiles, substitute the result for potfiles.
if size equals to integer zero.
substitute name for old_attr.
if squash is false,
decorator stringfilter,
from django.template.loader import get_template into default name space.
decorator function register.filter with an argument is_safe set to boolean False.
return msg_count.
define the method is_hidden with an argument self.
call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
convert value into an integer.
append mw_instance.process_view at the end of self._view_middleware.
from django.utils import six and timezone into default name space.
if fake is true,
if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
define the method _setup with an argument self.
decorator python_2_unicode_compatible,
format string '%02d' with the second element of the result, return it.   define the method U with an argument self.
call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
return token.
call the function normalize_newlines with an argument value, substitute the result for value.
call the method self.model._default_manager.get_queryset with an argument qs.
call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
if OSError exception was raised,
do nothing.
substitute second element of renamed_method for new_method_name.
use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,
deps is an empty list.
call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
derive the class Trans from the object base class.
return left.
if input_formats is not None,
from django.utils import six into default name space.
return value under key key of self dictionary
call the method self._coerce with an argument value, return the result.
call the method self.as_ul, return the result.
function logging.getLogger, assign the result to the security_logger.   evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements,
from django.db.migrations import Migration into default name space.
append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument,   for the creation of the instance of OrderedDict class, substitute it for field_dict.   return field_dict.
if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,
define the method tag with an argument self.
if self has an '_post' attribute,
substitute subject elements from p-th to i-th index for res.
return changeset.
write 79 '-' characters into self.stream file stream.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
reverse the order of elements of styles.
if self.verbosity is greater than integer 1,
if neg is true,
while model_dependencies is true,
call the method self.check_migrations.
try,
return s.
if length of bits equals integer 2,
make a system symbolic link between original_path and symlink_path.
if field is contained in form.cleaned_data,
raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
derive the class MIMEMixin.
new_method_proxy, __class__ is an property object created with previous result as an argument.   call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
substitute the result for migration.ancestry.   append migration to merge_migrations.
write ']' to the self.stream file stream.
append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
return reversed list output.
page_range is a property object with _get_page_range as a getter method.
for every f in self.instance._meta.fields,
append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,
from django.db import models and DEFAULT_DB_ALIAS into default name space.
if e.errno is not equal to errno.ENOENT,
from django.utils.functional import curry and Promise into default name space.
write the chunk to the file _file.
of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.   define the method getvalue with an argument self.
define the method render with 4 arguments: self, name, value and attrs set to None.
if ImproperlyConfigured renamed to exc, exception is caught,
substitute DictConfigurator for dictConfigClass.
find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
convert o to an string, return it.
define method _get_width with self class instance as the argument.
append callback to self._post_render_callbacks list.
derive the class Node form the base class object.
return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
random is an instance of random.SystemRandom class.
call the method self.xml.startElement with an argument string 'natural'.
return attrs.
if template_name is an instance of list or tuple types,
define the method handle_m2m_field with arguments self, obj and field.
try,
from __future__ import unicode_literals into default name space.
if length of bits equals integer 4,
instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,
substitute obj_pk.pk for obj_pk.
if value is None,
define the method __len__ with an argument self.
call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name,
substitute attrs and choices for self.attrs and self.choices
supported is boolean True.
call the function force_text with an argument ttl, substitute the result for ttl.
call the method ops.process_clob with second element of row as argument, on the object under the db key of connections dictionary, substitute the result for value.
parentloop is an empty dictionary.
append list containing string '--no-location' to self.xgettext_options.
define the method render with 2 arguments: self and context.
define the function get_ns_resolver with arguments ns_pattern and resolver.
call the method self.resolve_context with an argument self.context_data, substitute the result for context.
if widget is an instance of the NumberInput,
if TypeError exception is caught,
return an empty string.
call the method self._assert_mutable.
call the method cls.__dict__.copy substitute the result for orig_vars.
call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
define the method resolve with arguments self and path.
rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the "
define the method reader with an argument self.
return value converted into a list.
raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
append self.pointer to self.backout.
try,
call the function force_text with argument val, substitute it for val.
substitute value for value.   return value converted into a boolean.
return ZERO.
try,
if s is an instance of object bytes,
match rest string with self.WORD_PATTERN regex, substitute the result for m.
define the method end_serialization with an argument self.
do nothing.
call the method self.xml.endElement with an argument string "django-objects".
call the method six.iteritems with an argument dict_, for every k and v in the result,
call the function allow_lazy with an argument words, substitute the result for words.
from django.utils import six into default name space.
derive the CommandParser class from the ArgumentParser base class.
optimizer is an instance of MigrationOptimizer class.
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method,
return value.pk.
try,
if not,
define the method __add__ with arguments self and other.
evaluate the function bytes with the argument s, and return the result.
substitute name for new.
derive class CachedDnsName from the object base class.
substitute WSGIServer for httpd_cls.
sys.stdout is an instance of NullDevice class.
call the method timezone.get_current_timezone, substitute the result for current_timezone.
substitute string " " for space.
replace all occurrences of "'" with "\\'" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
substitute callback for self._callback_str.
response.streaming_content is an empty list.
try,
substitute label for app_label.
substitute limit for self.remaining.
for every item in self.items,
define method GET with self class instance as an argument.
if self.decimal_places is not None,
substitute self._empty_value for value.
substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
call the function reloader with wrapped_main_func, args and kwargs as arguments.
remove the first element from result.
call the function digest twice, substitute the results for inner, outer, respectively.
call the function v with an argument value.
if six.PY2 is true and path is not an instance of byes type,
if not,
substitute link_next for value under the NEXT key of the link_prev dictionary.
try,
call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
derive the class IfChangedNode from Node base class.
otherwise if first element of second row of args equals a string '4',
if value.__traceback__ is not tb,
define the method clear_checkbox_name with 2 arguments: self and name.
call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
define the method id_for_label with arguments self, data, files and name.
if stream_or_string is not an instance of bytes or six.string_types,
call the function from_current_timezone with an argument result, return the result.
import module os.
call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
escaped is boolean False.
and elements of rfcdate from 12-th to the 25-th index.   define the function http_date with an argument epoch_seconds set to None.
call the method self.next_token, substitute the result for self.current_token.
if StandardError, renamed to e, exception is caught,
call the function update_wrapper with 2 arguments: _wrapper and dummy.
from django.utils import six into default name space.
try,
"arguments '%s' not found. %d pattern(s) tried: %s", replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.   derive the class LocaleRegexURLResolver with RegexURLResolver as base class.
if value under the 'description' key of the item dictionary is not None,
item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title',
define the method render with 2 arguments: self and context.
define the method delete_many with arguments self, keys and version defaulting to None.
return self._choices.
if not,
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.
if value under the 'indent' key of the self.options dictionary is true,
if six.PY3 is true,
called with 2 arguments: s and string_only as boolean True.   if categories is true,
get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,
call the method self.options.copy, substitute the result for self.json_kwargs.
call the function force_text with an argument value, substitute the result for value.
if value is contained in self.empty_values,
call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.
COMMENT_TAG_START is a string '{#'.
call the method self.setlistdefault with an argument key, append value to the result.
call the method self.configure_filter with an argument value under name key of filters dictionary,
return boolean True.
derive the class ComboField from the base class Field class.
split arg by ',', substitute the result for bits.s
from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
return string 'StopUpload: Consume request data, then halt.'.
RemovedInDjango19Warning and stacklevel set to integer 2.   if app_config.models_module is None,
if self._dir path doesnt exists,
options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.   call the self.xml.startDocument method.
reverse the order of modules elements, put them into a list, return it.
if not,
if inplural is true,
define the function pprint with an argument value.
and unpacked dictionary kwargs.   define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.
return an empty string.
append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level,
call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.   call the function conditional_escape with an argument checkbox_id,
if 'pk' is contained in d,
append newline to plural_form_line, substitute the result for line.
call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.
call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.
if basedirs is empty,
call the function func with 2 arguments: self._wrapped and unpacked list args.
if not,
return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
do nothing.
append key to self.keyOrder dictionary.
return value.
return a string '%02d' formated with self.data.day.
use the result as an argument for the call to the function mark_safe, return the result.   define the function format_html_join with 3 arguments: sep, format_string and args_generator.
define the method _set_name with arguments self and name.
first element of bits and first element of remaining_bits.   call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
if match is true,
convert value into boolean and substitute it for value.
define the method __reduce__ with an argument self.
if not,
if initial is not an instance of the list type,
if not evaluate the method self.form.error_class and return the result.   define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
call the method token.contents.split, substitute the result for args.
return self.source.
_assertCountEqual is a strnig "assertCountEqual".
evaluate the method s.decode with string 'utf-8' and errors as the arguments,
message is a string 'make sure the name begins with a letter or underscore'.
call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True,
call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port,
if autoescape is true,
if mail doesnt have an 'outbox' attribute,
create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.
call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
return integer 0.
want_unicode is boolean True.
from django.utils.six.moves import cPickle as pickle, into default namespace.
i is the reminder of the division of i by j.
call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
import module glob.
replace all the occurrences of '__' with '_' in new_name.
if name equals a string 'regex',
if _file is not None,
otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.   delete entry from form.cleaned_data dictionary under the field key.
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   return value.
class method decorator,
for app_config in return value of the method apps.get_app_configs,
from __future__ import unicode_literals into default name space.
substitute source for e.django_template_source.
call the function escape with an argument value, substitute it for value.
if format is not contained in return value of the method serializers.get_public_serializer_formats,
try,
remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
for every template_name in template_name_list,
define the function write_pot_file with 2 arguments potfile and msgs.
substitute error_messages under the message.code key of error_messages dictionary for message.message.
define the method __copy__ with an argument self.
call the method self.tzname with an argument dt, substitute the result for self._tzname.
call the method clean with an argument data from the base class of the class FileField, return the result.
if name converted to lower case equals to string 'subject',
return total_forms.
and unpacked dictionary kwargs.   define the method render with 2 arguments self and context.
import module copy.
evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables,
find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
if kwarg is true,
request_finished is a instance of a Signal class.
join self into a bytes string, yield the result as the return value of the generator.
if ImportError, renamed to e, exception is caught,
comment_notes is an empty list.
define the method __enter__ with argument self.
try,
for every match in matches,
if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.   if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,
from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with an argument is_safe set to boolean False.
__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',
append label_output to output.
status_code is an integer 405.
call the method self.compress with an argument clean_data, substitute the result for out.
substitute var_name for self.var_name.
define the method new with 2 arguments: self and values set to None.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
define the method __iter__ with an argument self.
assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
define the method value_from_datadict with 2 arguments: self, data, files and name.
if vary_on is None,
return results.
join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
return value.
if not,
if ret equals to integer 0, return boolean True, otherwise return boolean False.
raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.
call the method cursor.execute with string "UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s" as argument,
convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
from django.utils.html import escape into default name space.
where '%s' is replaced with node.nodeName and attr.   try,
all_locales is an empty string.
substitute the last element of parts for parts.
call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,
try,
define the function handle_m2m with an argument value,
if comment_lineno_cache is not None,
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
if token.contents is false,
from PIL module import ImageFile as PillowImageFile.
call the method translation.activate with an argument saved_locale.
strings "Please submit %d or fewer forms.", "Please submit %d or fewer forms." and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
return result.
from django.utils import six into default name space.
if base has an attribute 'base_fields'.
self.attrs is an empty dictionary.
increment self.pos by integer 1.
call the method self.set_cdata_mode with tag as the argument.
call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)",
if bf.label is true,
return a string '%02d' formated with self.data.minute.
from django.conf import settings into default name space.
substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain,
substitute logging.root for root.
if not,
define the method _create_mime_attachment with arguments self, content and mimetype.
DEFAULT_MIN_NUM is an integer 0.
return None.
call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.
get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.",   RemovedInDjango19Warning and stacklevel set to integer 2.   decorator function wraps with an argument func.
return nodelist.
get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.
call the cursor.execute method with statement as argument.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
if definition is true,
append app_output to output.
substitute first, second and second elements of bits for yes, no, maybe, respectively.
substitute the result for exc_value.   substitute exc for exc_value.__cause__.
import module warnings.
return timezone.zone.
if app_label is not contained in executor.loader.migrated_apps,
call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
otherwise assign string 'ascii' to encoding.   call the method lookup with the encoding as the argument.
define the method fastcgi_help with an argument message set to None.
format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',
if self.verbosity is grater than, or equal to integer 2,
call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
raise an TemplateSyntaxError exception with an argument string '"with" in %r tag needs at least one keyword argument.',
from django.apps import apps into default name space.
return scrip_name.decode method result called with UTF_8 as argument.
while length of line is grater than max_width,
call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|',
for every name in namelist,
and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.
convert value to lowercase and return the result.
substitute chunk_size for self.chunk_size.
substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.   call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs,
where '%r' is replaced with first element of bits.   options is an empty dictionary.
return attrs.
return None.
if tried is true,
from django.utils.encoding import smart_text, force_str and force_text into default name space.
define the method _handle_object with arguments self and node.
call the function next_space_index with 2 arguments: subject and i, substitute the result for i.
call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
try,
substitute it for max_age, if not, max_age is integer 0.   if not,
call the function get_token with an argument request, substitute the result for token.
substitute the result for value under the index key of the hextets dictionary.   get the value under the index key of the hextets dictionary, if it is false,
ctx is an hashlib object, for calculating hash function with md5 algorithm.
if not,
and element of tokens at i incremented by 1 index equals a string "in",   token is a string "not in".
delete the value under the key key of self._cache dictionary.
call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.
define the method expression with 2 arguments: self and rbp set to integer 0.
call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
remove entry at the attr key of the declared_fields dictionary.
return integer 1.
for every chunk in field_stream,
matches is boolean False.
define the function filesizeformat with an argument bytes.
join elements of output into a string, separated with newlines, return the result.
status_code is an integer 301.
if model_list is None,
substitute the last element of parts for cmp_fmt.
call the function urlresolvers.set_urlconf with urlconf as the argument.
return value.
append name to exclude.
if not,
substitute file_or_path for file.
if mode is not contained in app_list_value,
call the function force_str with an argument value, substitute the result for value.
define the function get_unbound_function with an argument unbound.
where '%s' are replaced by sel.file and errors, respectively.   if command.verbosity is greater than integer 0,
self._files is an instance of MultiValueDict class.
call the method self.callback with an argument record, if the result evaluates to true,
args is an empty string.
call the function smart_text with an argument obj, return the result.
if level is an instance of int type,
call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.
append '=' to opt_label.
return the result.   derive the class HiddenInput from the Input base class.
substitute first element of args for arg.
define the method add_arguments with arguments self and parser.
call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,
decorator function register.filter with an argument is_safe set to boolean False.
substitute so and se for sys.stdout and sys.stderr.
call the method self.attrs.copy, substitute the result for attrs_plus.
return nothing.
increment stats dictionary value under the HITS key by integer 1.
if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
if LookupError exception is caught,
if not,
return an instance of SafeText, created with an argument data.
return result.
define the method display with an argument self.
if expires is not None,
if propagate is not None,
call the function force_text with an argument v, for every v in selected_choices, add results to a set,
call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
substitute urlconf_name for _urlconfs.value.
if HTMLParseError or UnboundLocalError exceptions are caught,
substitute the result for final_attrs.   call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value,
define the method __repr__ with an argument self.
define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
substitute length of chunk for chunk_length.
return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',
import module io.
for every k in keys,
if labels is not None,
call the method handler.file.close.
derive the class EndToken from the TokenBase base class.
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
substitute takes_context for self.takes_context.
append an empty string to list hextets.
call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
substitute value under the name key for bf.
return ret.
call the DefaultStorage method, substitute the result for default_storage.
for every key is self.bad_cookies,
for value of dictionary response under the key 'Last-Modified'.   if call to the function response.has_header with 'Expires' as argument returns boolean False,
return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
call the __init__ method from the base class of the class ValidationError with arguments message, code and params.
UNKNOWN_SOURCE is a string '<unknown source>'.
call the method self.getvalue, return the result.
"because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
define the method save with 2 arguments: self and commit set to boolean True.
if upto is not equal to length of token,
define the get_path_info function with environ as the argument.
define the method send with arguments self and fail_silently set to boolean False.
return result.
changed is boolean False.
where '%s' is replaced with taglib_module.   templatetags_modules is an empty list.
define the method render with 2 arguments: self and context.
if id_ is true,
return value under the name key of the sys.modules dictionary.
if the result is true or self.domain is not None,   raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by:
convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
if settings.FORCE_SCRIPT_NAME is not None,
return r.
return d.
called with an argument view_func.   define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
use the result as an argument for the call to the function strip_spaces_between_tags, return the result.   derive the class TemplateTagNode from Node base class.
return an empty string.
alternative_subtype is a string 'alternative'.
break from the loop execution.
create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.
convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.
call the function digest, substitute the filed digest_size of the result for hlen.
define the method __call__ with arguments self and value.
call the function get_templatetags_modules, substitute the result for templatetags_modules.
date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
self._non_form_errors is None.
return data.
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.
return boolean False.
return num_sent.
if _urlconfs has an attribute 'value',
call the method loader.detect_conflicts, substitute the result for conflicts.
call the function t.render with an argument context_instance, return the result.
call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
define the function request with an argument request.
if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
if six.PY3 is true,
self.to is an empty list.
if default is true and RAISE_ERROR is false,
return an empty string.
substitute renderer for self.renderer.
substitute current_app for ns.
requires_system_checks is boolean False.
if default_list is None,
get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
substitute name for self.name.
call the method self.clean, substitute the result for cleaned_data.
define the method value with an argument self.
call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
define the method timestamp with an argument self.
call the function mark_safe with an argument data, return the result.
substitute '%s' with self._dir converted to a string.   define the method key_to_file with self class instance, key and version defaulting to None as arguments.
append string 'Field name made lowercase.' to field_notes.
if not,
call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
return self.__language.
for every handler in handlers,
return self._files.
derive the class DjangoSafeDumper from the SafeDumper base class.
get the type of res, call the method mro on the result, for every t in the result,
size is a property object with _get_size as getter method and _set_size as setter method.
call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
if self._wrapped is empty,
from django.conf import settings into default namespace.
instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class,
call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp,
if vale is None or an empty string,
derive the class DisallowedHost from the SuspiciousOperation base class.
if settings.USE_I18N is true,
try,
if fk.unique is boolean true,
substitute empty bytes string for self.buffer.
kwargs is an empty dictionary,
try,
if instance is not None,
try,
define the function urlencode with 2 arguments value and safe set to None.
res is an empty string.
substitute timezone for _active.value.
derive the class RequireDebugTrue from logging.Filter base class.
from django.core.files.utils import FileProxyMixin into default name space.
call the method msg.as_bytes, substitute the result for msg_data.
import module operator.
define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
return s.
substitute the result for netloc.   if UnicodeError exception is caught,
substitute record.request for request.
if ValueError exception is caught,
call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.
derive the class RenderContext from the BaseContext base class.
use the result as an argument for the call to the method final_output.extend.   call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
return output.
return the value under the language_code of the self._regex_dict dictionary.
increment piece by firs element of elt.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if unhandled_params is true,
call the method self.add_error with 2 arguments None and e.
substitute parts, without the first element, for path.
used_column_names is an empty list.
return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
self._read_started is boolean True.
substitute value under the PREV key of the root dictionary for last.
if not,
define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.
get the position in bytes from the start of the file, store it in file_pos.
call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',
call the function force_text with an argument text, substitute the result for text.
if valu is an instance of list type,
substitute self for result.parent.
if value under the 'feed_copyright' key of the self.feed dictionary is not None,
import module os.
define the method _get_filename with argument self.
try,
remove file path_to_remove,
call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
if found is true,
define the function _add_doc with 2 arguments: func and doc.
try,
if not,
substitute empty bytes string for self.buffer.
if self has an '_files' attribute.
return input_val.
from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.
return an instance of Literal class, created with an argumen value.
break from the loop execution,
call the method self._assert_mutable.
if app_labels is false,
if not,
call the method self.validate_unique.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+',
options_list is an empty tuple.
replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r',
if url_info.netloc is false and url_info.scheme is true,
define the method _get_image_dimensions with self class instance as the argument.
if not,
raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.
return result.
if not, self.empty_value is an empty list.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.
substitute oldroot for value under the key key of the cache dictionary.
new_args is an empty list.
define the method widget_attrs with arguments self and widget.
call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
try,
read file fp, substitute the read data for output.
define the method add_arguments, with 2 arguments self and parser.
if choice_label is an instance of tuple or list,
if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.   remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,
from django.utils.six.moves.urllib.parse import urlparse into default name space.
if data is contained in self.children,
join elements of extra_classes into a string separated by whitespaces, return it.
for every replacement in the resulting set,   replace every occurrence of replacement in value for an empty string, substitute the result for value.
substitute environ for self.META.
call the method text.encode with argument utf8_charset.output_charset, substitute the result for payload.
import_module function, substitute the result for module.   return an instance of the module.Command class.
call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
for every _ and nodelist in self.conditions_nodelists,
loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.
join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.
apps is an empty dictionary.
and pattern.default_args.   substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
define the function npgettext with 4 arguments: context, singular, plural and number.
call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
if lengths of val1 and val2 are not equal,
define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.
call the function mark_safe with an argument value, return the result.
define the method render with 2 arguments self and context.
take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class,
substitute state for self.state.
define the function translation with an argument language.
substitute msg for self.msg.
create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,
return self._errors.
if initial is None,
create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
remove the first element from the self.context.
get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
return node.
for every medium in extend,
_mtimes is an empty dictionary.
if language is contained in _DJANGO_DEPRECATED_LOCALES,
define the method is_secure with an argument self.
call the sio.readline method with size as an argument, substitute the result for line.
self.settings_exception is None.
self.verbose_name is a string 'cache entry'.
and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.   call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
if status is not equal to STATUS_OK,
import module mimetypes.
call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the
loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
substitute value under 'warning' key of kwargs dictionary for warning.
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
substitute auto_id for value under the 'id' key of the attrs dictionary.
if not,
define the method get with 4 arguments: self, key, default set to None and version set to None.
return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.   from django.conf import settings into default namespace.
import module zipfile.
inner_result and inner_args are empty lists.
derive the class ViewDoesNotExist from the Exception base class.
define the method __str__ with an argument self.
substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info,
doublecolon_start is an integer -1.
call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "
"Use django.utils.timezone.get_fixed_timezone instead." and RemovedInDjango19Warning.   if offset is an instance of timedelta class,
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.",
(?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,
call the function write_pot_file with 2 arguments: potfile and msgs.
for every field, errors in self.error_dict.items method return value,
evaluate the method s.getvalue, return the result.
call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
from django.conf import settings into default name space.
substitute widget for self.widget.
self.resolver_match is None.
call the method self.indent with argument integer 1.
msgattrib_options is an list with elements: string '--no-obsolete'.
if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
if args in None of boolean False, substitute it for an empty dictionary.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
define the method writer with an argument self.
substitute stat.st_mtime for mtime.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
try,
from django.utils.encoding import force_unicode.
'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define the method handle with self class instance and dictionary options as the arguments.
derive the class LazyObject from the object base class.
try,
substitute SafeText for SafeString.
from django.utils.module_loading import module_has_submodule into default name space.
return found.
if Exception, renamed to e, exception is caught,
if not,
import module re.
increment stats dictionary value under the HITS key by integer 1.
and connection as the result of the method self.connection.   define the connection with an argument self.
is exception is caught,
convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
return self.tag_function.
from django.utils.module_loading import import_string into default name space.
define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.
convert args into a list, substitute it for args.
if not,
if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
flat is an empty dictionary,
property decorator,
call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.
define the method __setstate__ with 2 arguments: self and state.
call the os.umask function with argument old_umask.
statement is an empty list.
call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text,
call the self.file.close method, return the result.
derive the class ReferenceLocalTimezone from the tzinfo base class.
for every key_value in related,
get shell attribute of the self object, call it and return the result.
m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments:
get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.
docstirng
define the function parse_etags with an argument etag_str.
define the function join with 3 arguments: value, arg and autoescape set to None.
define function color_style, without input arguments.
substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.
define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
define the function sql_create with 3 arguments: app_config, style and connection.
call the method response.add_post_render_callback with _set_response_etag as argument.
do nothing.
from django.utils.encoding import force_str and force_text into default name space.
raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
if settings.TEMPLATE_DEBUG is true and origin is None,
return j.
for every field in concrete_model._meta.local_fields,
substitute it for d.   while rest is true,
call the method parser.delete_first_token.
import module django.core.checks.compatibility.django_1_6_0.
define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,
if self.default_locale_path directory doesnt exists,
call the method self.validate_key with argument key.
define the method getlist with 2 arguments: self and key.
get the values under the 'app_label' and 'migration_name' keys of the options dictionary,
get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.
for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias,
raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
from django.core import signals into default name space.
and self.code equals to other.code, return boolean True, otherwise return boolean False.   decorator deconstructible,
define the method handle_field with arguments self, obj and field.
if serializers is None,
value under 'localize' key of kwargs dictionary is boolean True.
write msg to self.stderr stream.
return self.
if six.PY3 is true,
called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr,   return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.   register.tag decorator function with an argument 'with',
define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
call the method self._post_clean.
dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.   def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the function modelform_defines_fields with an argument form_class.
"|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',
call the method g.flatten with arguments self and unixfrom set to unixfrom.
call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
call the method __init__ from the base class of the class Select, with an argument attrs.
if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
derive the class Library form the base class object.
call the method threading.RLock, substitute the result for self._lock.
from django.db.backends.utils import typecast_timestamp into default name space.
import hashlib module.
define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude',   min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min',   validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts',   and error_messages for 'error_messages'.   call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
define the function quote_etag with an argument etag.
substitute hint for self.hint.
derive the class TemplateSyntaxError form the base class Exception.
raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
otherwise if ch equals a string '^',
substitute self for result.parent.
return result converted into an integer.   define the method w with an argument self.
if not,
property decorator,
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
try,
call the method parts.reverse.
dir set to None as the arguments.   call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.
return an empty dictionary.
define the method next_token with an argument self.
where '%s' is replaced with taglib_module and e.   try,
substitute the result for final_attrs dictionary value under the 'value' key.   call the function format_html with 2 arguments: string '<input{0} />',
define the method utcoffset with 2 arguments: self and dt.
return boolean True.
from django.utils import six into default name space.
self.max_digits and self.decimal_places,   raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary,
define the function urlsafe_base64_decode with an argument s.
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.
call the method self._assert_mutable.
if self.silent is true,
if file filename exists,
substitute content_type_extra for self.content_type_extra.
define private method __str__ with argument self.
try,
format_key is a string 'TIME_INPUT_FORMATS'.
call settings.INSTALLED_APPS.
define the method has_previous with an argument self.
delete _active.value.
if m is not None,
from logging import _checkLevel.
if fields is not None and f.name is not contained in fields,
append ch to result.
define the __getitem__ method with self and alias arguments.
define the function dec with an argument func.
delete attr.
from django.utils import six into default name space.
return input_val.
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d),
define the method __init__ with 2 arguments: self and token.
substitute _iterkeys for keys.
call the method unlink on self with self.name as the argument.
if ImportError exception is caught,
call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.
call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
if candidate is not an instance of six.string_types,
if self.translate is true,
for every cat in value under the 'categories' key of the self.feed dictionary.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
define the function memoize with 3 arguments: func, cache and num_args.
return the result.   call the function force_bytes with arguments value and self._charset, return the result.
url_schemes is list of strings 'http', 'https' and 'ftp'.
substitute content_length for self._content_length.
substitute chr for unichr.
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in merge_migrations,
if words is true, substitute re_words for regex, if not substitute re_chars for regex.
raise an ValueError exception with an argument string "Unable to convert %r" formated with value.
add model to created_models set.
define the function ngettext with 3 arguments: singular, plural and number.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
if _default is None,
define the method render with 2 arguments: self and context.
from django.dispatch import Signal into default name space.
value is None.
from django.utils.encoding import force_bytes into default name space.
for every name in loggers,
from django.utils.safestring import mark_safe into default name space.
help is an empty string.
substitute val for value under the k key of dictionary d.
otherwise, length of options.args is lesser than integer 1,
call the __call__ method from the base class of the URLValidator class, with an argument url.
in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively,
call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "
if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
define the method __iter__ with an argument self.
if self.variable_name is true.
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
try,
if e doesnt have an 'django_template_source' attribute,
return a list containing 2 elements: return value of the value.date method and return value of the replace method,
return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.
if app_config.models_module is None,
return a string '%02d' formated with the result of the function self.g.
raise an EnvironmentError exception with string "Cache directory '%s' does not exist and could not be created" as argument,
define the method _update_unget_history with arguments self and num_bytes.
append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,
call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string,
define the method _isdst with 2 arguments: self and dt.
return the value under the language_code key of the self._regex_dict dictionary.
call the method self._resolve, substitute the result for _module.
DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.   __all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText',
evaluate the self.has_key method with key as argument, return the result.
status_code is an integer 304.
raise an TypeError exception with an argument string "invalid keyword arguments to print()".
help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
return self.
call the method __init__ from the base class of the class TemplateIfParser, with 2 arguments: unpacked list args and unpacked dictionary.
args is an list with 3 initial elements self.name, self.value and self.attrs.
if contents is false, substitute self.label for contents.
define the method __repr__ with an argument self.
if AttributeError exception is caught,
if p_pattern starts with a string '^',
call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text,
define the method _media with an argument self.
derive the class Context from the BaseContext base class.
substitute self.min_value for the value under the 'min' key of the attrs dictionary.
raise an ValueError exception with string "The file cannot be reopened." as an argument.
append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,
substitute current_app for self._current_app.
define the method namespace_dict with an argument self.
call the function self.filepath.resolve with an argument context, substitute the result for filepath.
return the result.   define the method unclosed_block_tag with 2 arguments: self and parse_until.
skip this loop iteration,
if common_ancestor is None,
derive the class EmailInput from the TextInput base class.
if p is greater or equal to integer 0,
split server with ';' as delimiter, substitute the result for self._servers.
call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,
define the method evalu with 2 arguments self and context.
create directories from the elements in filename.
if AttributeError exception is caught,
raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided",
call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
string 'unicode_escape', substitute the list of results for etags.   return etags.
if val is None,
define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
c is an instance of the class SimpleCookie.
kwargs is an empty dictionary.
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
substitute third element of row list for expires.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
do nothing.
definition is an empty dictionary,
define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
with it replace %r in the string "junk characters in start tag: %r",   call the method self.error with the resulting string as an argument.   if string end ends with string '/>',
substitute self._meta for opts.
read the whole self file and yield it as a generator return value.
return t.
do nothing.
get attribute class_name form the module object, return it.
self._post_parse_error is boolean True.
define the method strptime with arguments self, value and format.
define the method __init__ with 2 arguments: self and variables.
try,
if settings.configured is true,
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
substitute compile_function for self.tags dictionary value under the name key.
call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
put to into a list, assign it to self.to.
if ValueError exception is caught,
call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.
if varargs is None,
delete _urlconfs.value.
get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.
if self does not have '_files' attribute,
call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
return boolean True.
call the function datetime.fromtimestamp with argument timeout, substitute it for exp.
if support_legacy is false,
msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
if Exception exception is caught,
substitute deconstruct for klass.deconstruct.
return an instance of DebugNodeList class.
'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',   'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField',   'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.   derive the class Field from the base class object.
define the method __getitem__ with 2 arguments: self and key.
call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
call the function shutil.move with arguments the_path and guessed_path.
if not,
with an argument i, append the result to a list, substitute the resulting list for forms.   return forms.
raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',
from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
derive the class LocMemCache from the base class BaseCache.
split ip_str into parts by ':', substitute the result for hextets.
join callback.__module__, character "." and callback.__class__.__name__ together, substitute the result for lookup_str.
try,
otherwis if char is contained in string 'Yy',
do nothing.
call the method tarfile.open with an argument file, substitute the result for self._archive.
call the method deactivate.
unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,
call the method self._assert_mutable.
USE_INOTIFY is boolean False.
while factor is greater or equal to integer 0,
return unbound.
call the method value.date, return the result.
from django.core.exceptions import ValidationError into default name space.
try,
obj is a string "?".
call the method sys.exc_info, substitute the result without the first element for e and tb.
if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
if ImportError, AttributeError, renamed to e, exceptions are caught,
from django.apps import apps into default name space.
call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.
add bits to a tuple, return it.
import module os.
define the function compile_filter with 2 arguments: self and token.
call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
raise the exception.
tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
derive the class Command from the AppCommand base class.
call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
separated by newline, substitute it for msgs.   if not,
if node is not an instance of ExtendsNode,
assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
define the method __getitem__ with 2 arguments: self and key.
try,
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
substitute WindowsError for WindowsError.
raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
raise an exception.
return result.
raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
if i is greater than or equal to length of subject,
if AttributeError exception is caught,
define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.
call the method token.split_contents, substitute the result for args.
decorator function register.filter with an argument is_safe set to boolean True.
format string ' _(%s) ', with fmatch, write it to out.
derive the class JSONSerializer from the object base class.
if IndexError exception is caught,
derive the class CacheClass from the base class LocMemCache.
substitute greater element between integer 0 and end decremented by one for last.
call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
return self._client.
call the method urlparse with an argument url, substitute the result for bits.
return value.
return lookup_view
if t is not None,
if not,
substitute new_args for result_args.
evaluate the function debug.technical_500_response with request, evaluated value of function sys.exc_info as a list,
call the function _load_serializers.
if not,
try,
use global variable _default.
try,
filemsg is an empty string.
define the method __deepcopy__ with arguments self and memo.
html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.
use global variables _format_cache and _format_modules_cache.
if not,
call the method smart_split_re.finditer with an argument text, for every bit in result,
return None.
define the method j with an argument self.
get name attribute from the instance object, call it and return the result.
from django.utils.translation import trans_null as trans.
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.
self._num_pages is a integer 0.
from django.utils import formats and six into default name space.
self.abstract is boolean False.
if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
raise an InputStreamExhausted exception,
call the method msg_data.decode with argument charset, substitute the result for msg_data.
call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
return nothing.
define the method clear with self class instance as the argument,
use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.
if PY3 is true,
define method value_encode with self class instance and val as arguments.
answer is None.
return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime,
join the result in a string separated by whitespaces, substitute it for s.   return s.
try,
substitute settings.SECRET_KEY for secret.
if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,
get the value under the name key of the self.fields dictionary, substitute it for field.
if not,
call the self.stderr.write method with string "    No custom SQL for %s.%s model\n" as argument,
try,
substitute _iteritems for items.
members is a list with elements member for every member in the result of the function self._archive.getmembers,
if ValueError exception is caught,
where '%s' is replaced with subject.   if i-th element of subject is '"' character or "'" character,
field_notes, respectively.   add field_params to extra_params dictionary.
call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.
substitute attr for the obtained value.   delete attr.
if name is contained in existing,
call the function re.compile with 2 arguments:
define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.
call the method handler.addQuickElement with 2 arguments: string "category" and cat.
for every message in messages,
and return value of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
from django.forms import Form into default name space.
from django.utils import six into default name space.
append the result to app_dirs.   join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
if self.output_transaction is true,
replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,
call the method self._initialize_handlers,
continue with the next iteration of the for loop.
if not,
call the method message.message.
kwargs is an empty dictionary,
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
return field_type, field_params and field_notes.
if push is not None,
if self.data.hour is greater than inreger 12,
for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
substitute the '%s' in the string "The view %s.%s didn't return an HttpResponse object. It returned None instead.",
from django.core.files.move import file_move_safe into default name space.
as_form is boolean True.
define the function autoescape with 2 arguments: parser and token.
if not,
substitute name for self.name.
import module calendar.
substitute if _locs_ is None for _locs_.
define the method needs_multipart_form with an argument self.
from django.utils import six into default name space.
for every receiver, _ and _ in receivers,
__all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.
call the method self.empty_variable with an argument token,
substitute kwargs for self.kwargs.
substitute options for self.options.
for every i and word in enumerated iterable words,
where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get,   return value of the function six.text_type called with an argument post, return value of the function six.text_type,   called with an argument cookies and return value of the function six.text_type called with an argument meta.   define the function bytes_to_text with 2 arguments s and encoding.
call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
remove first element of unhandled_params.
define the method to_language with an argument self.
if e.errno equals errno.EEXIST,
do nothing.
call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html,
kwargs is an empty dictionary.
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,
from itertools import groupby and cycle as itertools_cycle into default name space.
where '%s' are replaced with name and param.   otherwise if param is contained in kwargs,
substitute _itervalues for itervalues.
do nothing.
from __future__ import absolute_import into default name space.
define the method enter_command with 3 arguments: self, token and msg.
if not,
substitute the result for plural_form_line.   if self.verbosity is greater than integer 1,
from django.utils.encoding import force_text into default name space.
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
call the function escape with an argument word, substitute the result for i-th element of words.
otherwise ser_fmts is a list containing ser_fmt.   if self.verbosity is greater or equal to integer 2,
call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr,
substitute self.subject for subject.
close file_ file descriptor.
define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
increment line by buffer_.
call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
define the method m with an argument self.
try,
from django.conf import settings into default name space.
break the execution of the smallest enclosing loop.
convert result of the method self.__iter__ into a list, return element at the idx index.
define the function wrap with 2 arguments text and width.
return self.hashvalue.
derive the class File from the FileProxyMixin base class.
define the method get with 3 arguments: self, key and default set to None.
substitute the result for value under the 'input' key of the substitutions dictionary.   if value is true and value has an attribute 'url',
if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
return cookiedict.
if self.fail_silently is false,
from django.utils.encoding import force_text and smart_text into default name space.
append string '_template' to app_or_project, substitute it for base_subdir.
call the function reraise from the module six, with list of arguments exec_info.
result is an empty list.
return an empty dictionary.
if second element of data_list is contained in self.empty_values,
from django.utils import six into default name space.
join elements of list source from index last to the end into a string, substitute it for piece.
from unittest import import everything.
derive the class HttpResponseRedirectBase from the HttpResponse base class.
get frag attribute from found object, substitute it for found.
for every filename in files,
call the method self.open, substitute the result for the new_conn_created.
return mod.register.
substitute the result for result.   call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime,
call the function get_language, substitute the result for language_code.
append line to lines.
define the method accessed_time with arguments self and name.
replace '%s' in string "%s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
call the function get_commands, substitute it for commands.
split value into words, return the length of the result.
return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
extend list inner_args with args.
derive the class WSGIServer from simple_server.WSGIServer and object base classes.
if is_templatized is true,
call the method form.save with an argument commit as commit, return the result.
if not,
and final_attrs, append the result to output.   call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe,
call the function local, substitute the result _urlconf.
call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
if count of occurrence of '::' in ip_str is greater than integer 1,
and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.
call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i,
mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.
if response is True,
derive the class Command from the BaseCommands base class.
if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
return ZERO.
call the method migration.ancestry.index with an argument common_ancestor, increment the result by one,
append None to bits.
call the method bmatch.group with an argument integer 1, if it evaluates to true,
return an instance of CsrfTokenNode class.
for every loader in self._loaders,
remove first and last character from the attrvalue, substitute it for attrvalue.
define the method exit_command with an argument self.
is an even number,   call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method,
if not,
yield key.
sum the result of the method s.get_data and s.rawdata, return the result.
if 'step' key of the attrs dictionary doesnt exists assign it step as an value.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
substitute args for self.args.
define the method with self class instance and parser as arguments.
call the method self.enter_command with 2 arguments command and token.
self.active_readers is an integer 0.
try,
call the method self.nodelist_false.render with an argument context, return the result.
call the method self._lib.Client with argument self._servers.
define the method __eq__ with 2 arguments: self and other.
if not,
call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,
for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.
call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
convert second item to an iterable,
unpacked list args and unpacked dictionary kwargs.   define the method to_python with arguments self and value.
doublecolon_len is integer 0.
call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.
'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define method handle_app_config with self class instance, app_config and dictionary options as arguments.
for every node in self.nodelist_loop,
if KeyError exception is caught,
if first element of text is contained in 'xX'.
derive the class Command from the BaseCommand class.
define the function strftime with 2 arguments dt and fmt.
if can fail is true,
substitute RAW for TYPE.
if self.obj is None,
substitute name for self.name.
from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.
define the method write with 2 arguments: self and s.
return self.__name.
append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
if unused_char is false,
initial set to None, help_text set to an empty string, error_messages set to None, show_hidden_initial set to boolean False,   validators is an empty, localize set to boolean False, label_suffix set to None.   substitute required, label and initial for self.required, self.label and self.initial.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
if self.body is true,
processors is an empty tuple.
call the function force_text with an argument v, for every v in args, put the results in a text_args list.
id is a string "literal".
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
subtract integer 12 from self.data.hour, return the result.
get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
define the method create_nodelist with an argument self.
get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist,
for every e in errors convert e into a string and append it to a string '  * ',
raise a NotImplementedError with an argument string
sum bottom and self.per_page, substitute the result for top.
return a list containing an empty string and a list containing an empty list.
output_transaction is boolean True.
if not,
define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
read one line from self file stream, substitute the result for buf.
from django.utils.html import format_html into default name space.
append tok to c.
if func is None,
is length of list_ equals integer 0,
if field is not contained in self.errors,
field_type is a string 'TextField'.
call the function check_for_migrations with arguments app_config and connection.
call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
return attrs.
defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix,
create an iterator out of x.
delete self.name attribute from the obj.__class__ object.
append string '</select>' to output.
define the method dumps with arguments self and obj.
substitute the last element of parts for parts.
define the method __repr__ with an argument self.
return default.
substitute the result for queryset.   if primary_keys is true,
return cache.
return code.
return a tuple with an element self.__offset.
self._choices and self.widget.choices are assigned value converted into a list.
property decorator,
if not,
if not,
call the method self.unclosed_block_tag with an argument parse_until.
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
try,
derive class Command from the BaseCommand base class.
if not,
if form.is_bound is true,
raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.
define the method __init__ with argument self, server and params.
return default.
for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,
if middle starts with opening,
call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.",
call the method obj.natural_key, substitute the result for natural_key.
define the method id_for_label with an argument self.
var_obj is an instance of Variable class, created with an argument var.
if last_row doesnt ends with row_ender,
call the run_from_argv function from the base class of the Command class with argv as a argument,.
get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.
do nothing.
call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
substitute self.pointer for i.
if __name__ equals a string '__main__'.
substitute elements of s from the end index to end for s.
derive the class StopUpload from the UploadFileException base class.
call the method inspect.getmro with an argument new_class, for every base in the result,
define initialization method __init__ with self class instance, level, msg, hint defaulting to None, obj defaulting to None and if defaulting to None as arguments.
if field_value is an instance of the str type,
if StopFutureHandlers exception is caught.
call the function timedelta with an argument seconds as negative time.timezone, return the result.
if pythonrc is not a file,
substitute asvar for self.asvar.
call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
get the next element of the iterable pattern_iter, assign the result for ch.
call the method cursor.execute with an argument sql.
call the function timezone.make_aware with arguments value and current_timezone, return the result.
if e.errno equals to errno.EEXIST,
close the _file file.
if not,
return iterator object based on the self.file collection object.
sys.stderr is an instance of NullDevice class.
return boolean False.
otherwise, if pattern has an '_callback' attribute.
define the method add_css with arguments self and data.
use the global variable _serializers.
define the method __repr__ with an argument self.
call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
termios is None.
define the method build_potfiles with an argument self.
if AttributeError exception is caught.
yield buf as return value of the generator.
if not,
raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary,
call the function deactivate_all.
call the function get_callable.cache_clear.
raise an CommandError exception with an argument string "couldn't handle %s template %s.", replace '%s' with self.app_or_project and template.
if settings.DEBUG is true,
call the method self._add_fallback.
define the method __init__ with arguments: self class instance and argv set to None.
derive the class CheckRegistry with object as base class.
substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
if next_item is true and next_item is an instance of list or tuple type,
if not,
call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
if second element of url_fields is false,
in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.   return cache_key.
return a string "<UTC>".
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
locations is an empty list.
if klass is not contained in cls.__dispatch,
derive the class Atom1Feed from the SyndicationFeed base class.
call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
return kwargs.
call the method self.endElement with an argument name.
obj._constructor_args is a tuple with 2 elements: args and kwargs.
substitute value under the field key of the self.fields dictionary for form_field.
final_output is an empty list.
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
_assertRaisesRegex is a strnig "assertRaisesRegexp".
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
attrs is a empty list.
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
define the method validate with arguments self and value.
substitute message for self.message.
try,
register.tag decorator,
append f to file_field_list.
if files is true, substitute it for self.files, if not self.files is an empty dictionary.
if fields is not None and f.name is not contained in fields,
create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
derive the class IfEqualNode from Node base class.
define the method got with 3 arguments: self, key and otherwise set to None.
truncate first size number of elements of self.buffer.
call the function include_is_allowed with an argument filepath, if it evaluates to false,
try,
from importlib import import_module into default name space.
f _serializers is false,
"That port is already in use." for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.   try,
call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.
get the value under the 'filename' key of the params dictionary, if it is true,
return result.
logger.handlers is an empty list.
call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.
msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
take two characters from the i-th element of rawdata, if they are not equal to the string '</',
call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.
call the method translation._catalog.copy, substitute the result for self._catalog.
call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
raise an exception of class ValueError, with string "Key '%s' not found" as argument, where '%s' is substituted for key.
return result.
call the method form.save with an argument commit as commit, return the result.
called with value under the 'pubdate' key of the item dictionary.   if value under the 'comments' key of the item dictionary is not None,
if KeyboardInterrupt exception is caught,
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
use the result as the argument for the function call to the pickle.loads, return the result.   define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
call the function get_supported_language_variant with an argument accept_lang, return the result.
if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
derive the class DecimalField from the base class IntegerField class.
self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
replace '%s' in string "### %s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
substitute v for value under the k-th element of m key of _ dictionary.
define the method __init__ with an argument self.
define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the function callable with an argument obj.
if response.streaming is True,
classmethod decorator,
define the method is_ajax with an argument self.
called with 2 arguments: request and response.   call the method response.add_post_render_callback with an argument callback.
from __future__ import unicode_literals into default name space.
if t.token_type == TOKEN_TEXT:
do nothing.
call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',
if sys.platform starts with string 'java',
call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
increment self.waiting_readers by 1.
add self.form.required_css_class to extra_classes set.
format translated with rhs, substitute the result for translated.
for every middleware_method in self._template_response_middleware,
if self.timezone is false,
use the result as the argument for the call to the sql.extend method.   if self.verbosity is greater or equal than integer 1 and sql is true,
call the function __import__ with an argument name.
return commands.
call the method self.unclosed_block_tag with an argument list with an element endtag.
try
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments,
if not,
if rhs is an instance of dict type and number is true,
and '%s' is replaced with app_or_project and message, respectively.   define the method download with arguments self and url.
substitute opts for value under the 'opts' key of definition dictionary.
return boolean True.
define the method _iteritems with an argument self.
define the method has_changed with an argument self.
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
fork a child process, if the result equals integer 0,
raise an exception.
substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,
try,
define the function prepend_token with 2 arguments: self and token.
return the first element of the return value of the call to the self._det_image_dimensions method.
call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
substitute token.source for e.django_template_source.
import module re.
try,
changeset is None.
if value equals self.empty_value or value is contained in self.empty_values,
code is a string 'invalid'
call the method formats.localize_input with an argument value, return the result.
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
define the method __iter__ with an argument self.
call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
raise an CommandError exception with an argument string "Command doesn't accept any arguments".
decorator function register.filter with an argument is_safe set to boolean True.
choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.
define the function import_module with 3 arguments: name and package set to None.
remove config dictionary element under '()' key, substitute it for c.
if not,
append string '.' to result.
self._files is an instance of MultiValueDict class.
or with an empty string if its not, append the resulting string to full_statement.   append string ');' to full_statement.
call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
statement is an empty list.
yield line.
get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.
if value is an instance of list type,
define the method __eq__ with self and other arguments:
derive the class MinLengthValidator form the BaseValidator base class.
if IOError exception is caught,
define the method exists with arguments self and name.
append rel_model to deps.
define the function int2byte with an argument i.
self._done is boolean True.
get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
try,
return ip_str.
call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
delete _active.value.
call the method self.get_available_name with argument name, substitute it for name.
call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
if first is true,
call the sys.exc_info function, assign the result to et, ev and tb, respectively.
if ValueError exception is caught,
if self.first is true,
import module cgi.
from django.utils import datastructures into default name space.
derive the class FirstOfNode from Node base class.
skip this loop iteration,
substitute apps for the value under language_code key of the self._app_dict dictionary.
if commit is false,
try,
import module fnmatch.
derive the class CharField from the base class Field class.
call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;',
derive the class ContextPopException from the Exception base class.
derive the class __proxy__ from the Promise base class.
from django.utils.module_loading import import_string into default name space.
return boolean True.
increment i by integer 1.
if item is not an instance of list or tuple class,
define the method nodelist with an argument self.
if not,
and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE,   substitute the result for value under the state key of the self.regexes dictionary.   substitute first for self.state.
index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,   split path in two parts by '/' character, return the result.
call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
iterator is None.
fixture_name and result of the function humanize called with an argument fixture_dir.   extend fixture_files list with fixture_files_in_dir.
if self.max_digits is not None and digits is grater than self.max_digits,
if app_path is None,
call the method notifier.check_events with argument timeout set to None.
define the method get with 3 arguments: self, key and default set to None.
get the value under the key 'interactive' of options dictionary, substitute it for interactive.
tok is a string '"REGEX"',
do nothing.
define the function ssi with 2 arguments: parser and token.
decorator function register.filter with an argument is_safe set to boolean False.
if conflicts is true,
return qs.
substitute text_kwargs for candidate_subs.
"Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n",   where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.
strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments:   strings "addinfourl", "urllib", "urllib.response".   for every attr in _urllib_response_moved_attributes,
finally perform,
append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
define the method resolve_template with 2 arguments: self and template.
slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
return valid.
get the bit attribute of current object, substitute it for current.
try,
return an empty string.
define the method render with 2 arguments: self and context.
best_doublecolon_len is an integer 0.
raise an exception ImproperlyConfigured with string "You must define a '%s' cache" as argument, with '%s' replaced with DEFAULT_CACHE_ALIAS converted into a string.
call the method self.validate_name with 2 arguments: app_name and string 'app'.
LOCK_NB is a hexadecimal 1.
otherwise if token_string starts with COMMENT_TAG_START,
if supported_platform is False or is_a_tty is False,
call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
return value under the name key of the files dictionary, if it doesnt exists, return None.
call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function,
from django.conf import settings into default name space.
if not,
define the method run_validators with arguments self and value.
define the method create_nodelist with an argument self.
derive the class TimeFormat from the base class Formatter.
from __future__ import unicode_literals into default name space.
if token.contents equals string 'else',
inplural is boolean False.
style is an instance of the dummy class.
substitute value under the the 'forloop' key of the context dictionary for parentloop.
return property object with _media as getter function.
from email.message import Message into default name space.
define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
if status is not equal to STATUS_OK,
for every cnt and digit in enumerated list int_part with reversed ordering of elements,
call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it '
define the method has_changed with an argument self.
call the function file_move_safe with content.temporary_file_path function result and full_path.
if is_templatized is true,
for every format in BUILTIN_SERIALIZERS,
call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
return the printable representation of the self object converted to a list.
create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it,
try,
from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
call the mw_class function, store the result in the mw_instance.
skip this loop iteration.
substitute cls.__bytes_cast for cls.__bytes__.
if AppRegistryNotReady exception is caught,
return boolean True.
format string '\x1b[%sm' with RESET, return the result.
raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template",
self._changed_data is an empty list.
m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:
write string ' #\n' to out file.
and call to the method form.has_changed evaluates to false,   skip this loop iteration,
call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.
split file by ',' character, apply on its every element a lambda function which takes an argument x,
define the function compress_sequence with an argument sequence.
for every sql in sql_list,
define the method ordered_forms with an argument self.
define the function slice_filter with 2 arguments value and arg.
call the function normpath with an argument path, return the result.
if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.
if NotImplementedError exception is caught,
memo is an empty dictionary.
for every basedir in basedirs,
if name is not None,
convert e to a string, substitute it for error_text.
if value under the header key of the self.META dictionary is equal to value,
get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
call the function _trans.get_language_from_path with an argument path, return the result.
if self.__language equals settings.LANGUAGE_CODE,
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
call the function to_locale with an argument lang, substitute the result for locale.
try,
WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,
from django.utils import dateformat, numberformat and datetime_safe into default name space.
substitute args for self.args.
use global variable _localtime.
define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
try,
self.path is an empty string.
call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument,
if _cookie_encodes_correctly is boolean False,
define the method urlencode with 3 arguments: self and safe set to None.
call the method instance of TerminalIPythonApp class, substitute the result for app.
if var ends with '.',
if connection exists dont change it, if not call the get_connection function with username set to auth_user,
call the method parser.next_token, substitute the result for token.
define the method getvalue with an argument self.
call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />",
if not,
if 'error_messages' is contained in kwargs,
define the method __new__ with 4 arguments mcs, name, bases and attrs.
raise an CommandError with argument: string "Can't resolve dependencies for %s in serialized app list.", where '%s' is replaced with:
prefix set to None, current_app set to None.   if urlconf is None,
from __future__ import unicode_literals into default name space.
if item_date is true,
register.tag decorator function with an argument 'filter',
call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.
if self.cdata_tag is not None,
convert self.object_list to a list.
if os has an attribute 'chmod',
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.
call the method self._get_validation_exclusions, substitute the result for exclude.
from django.core.files import locks into default name space.
substitute the result for final_attrs.   get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
substitute show_hidden_initial for self.show_hidden_initial.
call the method self.extract with an argument absolute_path, return the result.
call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
define the method chunks with arguments self and chunk_size defaulting to None.
self.namespaces is an empty list.
called with 2 arguments: s and string_only as boolean True.   if categories is true,
if not,
raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
substitute code for self.code.
while '<' is contained in value and '>' is contained in value,
if script_url is false,
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.   if settings.DEBUG is True,
define the method _itervalues with an argument self.
if bytes_read is greater than rollback,
e.args is a tuple containing string "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s,
_format_cache is an empty dictionary.
call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
if serializers.SerializerDoesNotExist exception is caught,
append string '_0' to id_.
for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.   if not,
otherwise if ch equals a string ')',
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
if m is false,
return the result.   otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
derive the class NoReverseMatch with Exception as base class.
derive the class MultiWidget from the Widget base class.
previous result and filepath.   if IOError exception is caught,
derive the class TextNode form the base class Node.
call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
increment i by integer 1.
return result.
_ is an empty dictionary.
if AttributeError exception is caught,
substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,
call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
decimal_digits is a string '0123456789'.
get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,
if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.
get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.
return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',
if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
skip this loop iteration.
self.getlist with an argument k, for every k in self.   return obj_dict.
if charset equals to string 'utf-8',
and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
call the function warnings.warn with string "'get_cache' is deprecated in favor of 'caches'.", RemovedInDjango19Warning,
from django.core import signals into default name space.
call the os.path.basename with path as argument, substitute the result for filename.
get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
call method __init__ with argument params from the base class of the FileBaseCache.
if kwargs is true,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if attrs is not None,
call the function force_text with an argument output, substitute the result for output.
set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.
define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
return new_value.
if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
where '%s' is replaced with name.   if name is not contained in parser._namedCycleNodes,
substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
slice list unhandled_params from the beginning to the length of defaults last element,
import module time.
convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
if AmbiguityError exception is caught,
if not,
return cls.
incomment is boolean True.
self.error_dict is an empty dictionary.
and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code,   and self.inverse_match equals to other.inverse_match, return the result.   define the method __ne__ with arguments self and other.
try,
append loader to loaders.
try,
if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None,
if self._fname is None:
for every field, messages in return value of the message.items method,
from logging import NullHandler.
for every j in range of integers from 0 to iterations converted to an integer,
define the method to_python with arguments self and value.
do nothing.
call the method self._archive.close.
if url is false,
import module re.
call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
delete entry under the attr key of the attrs dictionary.
decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,
define the function has_bom with fn as argument.
__dispatch is None.
call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',
for every key and value in data.items function return value,
otherwise if autoescape is true,
call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
return result.
from django.db import DEFAULT_DB_ALIAS into default name space.
define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.
for every sublist in second_item,
if message_context is true,
truncate the last element of filename.
do nothing.
decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
if not,
call the method self.strptime with arguments value and format, return the result.
if not,
evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
call the function func with 3 arguments: context, self.first and self.second, return the result.
import module traceback.
define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
substitute connection.queries for value under the 'debug' key of the context_extras dictionary.
create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,
return boolean False.
from __future__ import unicode_literals into default name space.
substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.
derive class BaseDatabaseCache from BaseCache base class.
for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
define the method _list_cache_files with argument self.
msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.
modified_code is None.
skip this loop iteration.
if locale_dir is false,
for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.
if not,
substitute self.__class__ for response._handler_class.
increment i-th element of result by piece.
if string 'help' is contained in options,
substitute ngettext for ngettext_lazy.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.
convert max_entries into a string, substitute it for self._max_entries.
evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl,
if value under the index key of the hextets dictionary equals to string '0',
convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
return key_func.
call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
if six.PY3 is true,
substitute callable for callable.
if self.data.hour is greater than integer 11,
call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.
close the process with an argument 1.
call the method match.groups, substitute the result for args.
prepend an empty string to hextets list.
needs_multipart_form is boolean False.
code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.   call the method self.run_validators with an argument value.
substitute options.args for args.
called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
import gettext module.
if not,
call the method self._setup.
for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',
if t is not None,
from django.template.debug import DebugLexer and DebugParser.
get the next element of iterable self, substitute it for chunk.
if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
define the method add_arguments with 2 arguments: self and parser.
substitute CacheEntry for self.cache_model_class.
if new is None,
for every value in data.   if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
from django.utils.encoding import force_bytes, force_str and force_text into default name space.
get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.
substitute the value under the 'app_label' key of options dictionary for app_label.
if StopIteration exception,
if ValueError exception is caught,
call the method match.group with an arugument name, substitute the result for toktext.
where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.   append string '_name' to app_or_project, substitute it for base_name.
strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
classmethod decorator,
if response is None,
import module sys.
call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
substitute handler for value under name key of handlers dictionary.
if rel_model has an attribute 'natural_key' and rel_model is not equal to model,
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
call the function six.text_type with s as an argument, substitute result for s.
from django.utils import timezone into default name space.
define the method handle_fk_field with self, obj and field arguments.
return an empty list.
httpd.daemon_threads is boolean True.
if not,
raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s',
perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,
call the function write with an argument arg.
get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.
return form.
if not,
derive the class TranslatableFile from the object class.
from django.core.serializers import base into default name space.
use global variable _default.
if args in None of boolean False, substitute it for an empty list.
raise an exception StopFutureHandlers.
if contents is not None,
result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
raise an AttributeError with an argument attr.
define the method as_json with 2 arguments self and escape_html set to boolean False.
called with an argument value under the 'pubdate' key of the item dictionary.   if value under the 'updateddate' key of the item dictionary is not None,
if settings.MANAGERS does not exist,
return otherwise.
call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
if value is true,
get the value under the name key of self.blocks dictionary, insert to it block at the beginning.
call the function self.coerce with an argument value, substitute it for value.
from django.apps import apps into default name space.
get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.
match the rawdata from the position k, with attrfind pattern, assign the result to the m.
if not,
if language_code is not contained in self._reverse_dict
if self has an 'error_dict' attribute,
increment i by integer 1, substitute the result for i.
instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,
return value.
help is a tuple containing a string "Output the contents of the database as a fixture of the given "
return Operator.
perform bitwise OR with 2 operands: previous result and result, substitute the result for result.   if result is equal to integer 0, return boolean True, otherwise return boolean False.
import module contextlib.
if secure is true,
raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label() method'.
if call to the method self._css.get with an argument medium evaluates to false,
yield and empty string as the result.
try,
if matches is false,
call the method self.__class__, substitute the result for result.
relations is an empty dictionary.
if template_dirs is false,
define the function urlize with 2 arguments value and autoescape set to None.
decorator stringfilter,
call the method self.func with an argument value.
call the method self._clean_fields.
format string ' pgettext(%r, %r) ' with message_context and g, write it to out.
if self.alternatives is true,
convert arg to an integer.
return an instance of SafeBytes, created with an argument data.
dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
call the method self.recipients, if it evaluates to false,
doublecolon_start is integer -1.
define the method __init__ with 2 arguments: self and dict_ set to None.
for every path in paths,
if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.
raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
if not,
get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,
derive the class MultiValueField from the base class Field class.
if settings.TEMPLATE_DEBUG and display_name are both true,
call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
substitute link for link_prev, link_next, key and result, respectively.
substitute app_or_project for self.app_or_project.
call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.
call the method self._expire_info.clear.
call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.
define the method __init__ with 2 arguments: self and value.
if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string,   content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator,   return the result.   derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
define the function truncatewords with 2 arguments value and arg.
if not,
self.tags is an empty dictionary.
call the get_deserializer function with an argument format, substitute the result for d.
from io import BytesIO,  StringIO and UnsupportedOperation into default name space.
from django.core.management.sql import sql_all into default name space.
raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.',
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
set value under the 'stream' key of kwargs dictionary to None.
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.
return end ans next.
define the method __setitem__ with 3 arguments: self, key and value.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
substitute the result for trimmed.   middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
bad_app_labels is an empty set.
while remaining is not equal to integer 0,
append work_file to string '#: ', substitute it for old.
result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
if 'args' is contained in options,
if TypeError exception is caught,
call the method parser.delete_first_token.
return result.
increment doublecolon_len by integer 1,
call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+',
define the function to_current_timezone with an argument value.
for every ch in input_iter,
compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.
append work_file to string '#: ', substitute it for old.
return boolean False.
import module time.
return None.
call the method strftime with an argument fmt, from the base class of the type of dt class.
if self.fail_silently is boolean False,
if data has an attribute 'read',
define the method path with arguments self and name.
is_compressed is boolean True.
context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n',   and context.use_tz for 'use_tz', substitute the result for new_context.   call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
self.charset and self.content_type_extra.   define the method receive_data_chunk with arguments: self, raw_data and start.
attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.
substitute cache_info for wrapper.cache_info.
return string 'th'.
return obj.
replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
read data from buf, yield the result.
if self.data is false,
replace '%s' in string "Cache table '%s' already exists." with tablename, write it to the self.stdout stream.
if header_end equals integer negative 1,
can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max',   validate_min for 'validate_min' for validate_max for 'validate_max'.   create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__,
return an instance of Media class, created with definition as an argument.
call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
if fext is a file,
import module os.
decorator classmethod,
get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
convert object self to a dictionary, return it.
return boolean False.
yield the result.   if ImportError exception is caught,
return s.
self._empty is boolean False.
call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
return s.
first and second are None.
slice the list value with unpacked list bits as an argument, return the result.
call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.
get the value under the 'database' key of the options dictionary,
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
value under the 'debug' key of the context_extras dictionary is boolean True.
if data is bound to the same object as FILE_INPUT_CONTRADICTION,
define the method __len__ with an argument self.
return string 'th'.
RemovedInDjango19Warning, stacklevel set to integer 2.   for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.
self._files is an instance of class MultiValueDict.   return nothing.
define the function add_to_builtins with an argument module.
if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.   if cc contains item 'private' and kwargs contains item 'public',
settings.BASE_DIR.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if self._wrapped is empty,
define the method pop with 3 arguments: self, k and unpacked list args.
raise an exception,
call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
gett self.attr from the module object, return it.
substitute data.name for file_name.
define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if not,
add obj.object.__class__ to self.models set.
call the method data.items, for every medium and paths in the result.
convert _serializers into a list, return it.
call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
call the method query.lists, substitute the result for query.
remove idx-th element from self list.
define the method write_items with 2 arguments: self and handler.
call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month,
self._post_parse_error is boolean False.
if self.forms is true,
call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.
call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.
try,
define the method _get_context_stack_frame with 2 arguments: self and context.
call the method timezone.normalize with an argument value, substitute the result for value.
otherwise if fourth element of version does not equals to 'final',
where '%s' is replaced with self.__class__.__name__.   derive the class HttpResponse from the HttpResponseBase base class.
return id_.
remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve,
do nothing.
define the method error with arguments self and message.
if memo is None,
try,
call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
define the method incr with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to None.
raise an exception.
close file file.
call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
if not,
if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
return an instance of a SpacelessNode class, created with an argument nodelist.
convert new_name to a string and append it to string 'field', substitute the result for new_name.
call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
derive the class IntegerField from the base class Field class.
from django.core.management.base import BaseCommand and CommandError into default name space.
define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.
substitute the second element of result for current_expires.
while remaining_bits is true,
return self.cleaned_data.
key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby,   called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function,   self.resolve_expression called with 2 arguments obj and context.   return an empty string,
otherwise if t.token_type equals TOKEN_COMMENT,
return first element of the list containing elements of error.
if not,
settings.USE_I18N is boolean True.
if cache_timeout is None,
if other is an instance of Promise,
define the method __repr__ with an argument self.
call the method translation.activate with an argument settings.LANGUAGE_CODE.
if exp is None or exp is greater than the return value of the call to the function time.time,
form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
if ValueError exception is caught,
define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method,
selected_html is an empty string.
call the function thread.start_new_thread with main_func and args as arguments.
value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".   if value under the 'pubdate' key of the item dictionary is not None,
if recursive is true,
if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
from django.utils.encoding import force_text and iri_to_uri into default name space.
decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
from django.core.exceptions import ValidationError into default name space.
valid is boolean True.
where '%s' is replaced with taglib and e.   return an instance of a LoadNode class.
if status is True,
define the function escape_quotes with an argument m.
make a directory named original_path.
if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.
call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
try,
new_msg is a tuple containing a string: "Database %s couldn't be flushed. Possible reasons:\n"
return nothing.
if length of name is greater than integer 255,
if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
call the method deactivate.
if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
if kwarg_format is true,
for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None,
and result of the method self.field.label_from_instance, called with an argument obj.   derive the class ModelChoiceField from the ChoiceField base class.
call the method self.stdout.write with an argument: string "%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n"
filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
try,
seen_data is an empty set.
if LookupError exception is caught.
define the function slugify with an argument value.
define the function _set_response_etag, with response as an argument.
increment i by integer 1.
get name attribute from the instance object, call it with an argument value and return the result.
if number is lesser than integer 1,
call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
if content is None, raise an error.
substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the,
skip this loop iteration.
if compare_to is not equal to value under the self key of state_frame.
call the method imatch.group with an argument integer 1, substitute the result for g.
define the method delete with 3 arguments: self, key, and version set to None.
decorator function register.filter with an argument is_safe set to boolean False.
substitute base_url for self.base_url.
replace '%s' with: elements of last element of parts joined into a string and last element of parts.   if not,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.
from django.forms.utils import from_current_timezone and to_current_timezone into default name space.
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every operation in migration.merged_operations,
call the function urlparse with an argument url, substitute the result for url_info.
call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary,
get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,
import module gettext as gettext_module.
return an empty string.
define the method transform with 3 arguments: self, node and results.
evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
define the method __init__ with arguments self and attrs set to None.
define the method __delattr__ with self and name as arguments.
call the function os.chmod with arguments dst and mode.
join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,
if message-id' is not in header_names,
if not,
self.connection is None.
size, charset, content_type_extra.   substitute field_name for self.field_name.
strip whitespaces from both sides of the value, return the result.
call the self.incr method with key, negative delta and version set to version as arguments.
call the method calendar.isleap with an argument self.data.year, return the result.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
register.tag decorator,
if csrf_token equals string 'NOTPROVIDED',
if six.PY3 is true,
call the function middleware_method with request and response as the arguments, substitute the result for response.
raise an TypeError exception with an argument sting "can't delete _wrapped.".
call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
boolean_attrs is an empty list.
define the method errors with an argument self.
call the method logger.addHandler with an argument handler.
call the method self.create_parser with arguments prog_name and subcommand.
call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
if not,
from django.core.handlers.wsgi import WSGIHandler into default name space.
if result is true,
derive the class DebugVariableNode from the VariableNode base class.
do nothing.
for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.   derive the class Command from the BaseCommand base class.
if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
and return value of the function f.db_type called with an argument connection set to connection.   if f.null is false, append string append "NOT NULL" to field_output, otherwise append "NULL" to field_output.
call the self.compile_messages with locations as argument,
call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,
call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.   if StandardError, renamed to e, exception is caught,
if self.timezone is None,
try,
new_result is an empty list.
otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
property decorator,
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
define the method __getitem__ with an argument self.
define the function _strip_once with an argument value.
define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.
define the method render with 2 arguments self and context.
raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys,
return boolean True.
define the method __contains__ with an argument self.
do nothing.
otherwise if form.has_changed method evaluates to true,
if html is true,
call the get_valid_filename with argument name, return the result.
if not,
write string "No changes detected" to self.stdout stream.
if not,
call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:
if IndexError exception is caught,
if use_base_manager is true,
define the method run_from_argv with arguments self and argv.
otherwise if autoescape is true,
from django.core.mail.utils import DNS_NAME into default name space.
define the method add_item_elements with 3 arguments: self, handler and item.
call the method self.nodelist.render with an argument context, substitute the result for result.
self.vals is an empty list.
otherwise if pluralmatch is true,
if value is contained in self.empty_values,
call the method self.resolve_template with an argument self.template_name, substitute the result for template.
from datetime import datetime into default name space.
return the content field of the base class of the class SimpleTemplateResponse.
derive the class Warning from base class CheckMessage.
define the method z with an argument self.
derive the class BaseContext from the object base class.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
message_context is None.
define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None,
default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',
data is an instance of BytesIO class, created with an argument: self._body.
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
substitute first length elements of words for words.
if object response has an attribute 'render' and if response.render is callable object,
if not,
field_notes is an empty list.
from django.core.mail.utils import DNS_NAME into default name space.
if ValueError exception is caught,
if ImproperlyConfigured exception is caught,
import module zlib.
substitute result for value under the id of self key of memo dictionary.
get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
decorator register with Tags.models and Tags.signals as arguments.
if StandardError, renamed to e, exception is caught,
get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
yield node.
call the method self.resolve with an argument c, substitute the result for c.
files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.   define the method format_output with 2 arguments: self and rendered_widgets.
msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,
define the method utcoffset with 2 arguments self and dt.
FILE_MODIFIED is integer 1.
help is a tuple containing a string "Runs the command-line client for specified database, or the default database if none is provided.".
return value.
if code is not None
if not,
if self has an attribute '_object_dict',
sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,
if in_tag is true and token_string starts with BLOCK_TAG_START.
value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,
if self.lookups is not None,
call the method token.split_contents, substitute the result for bits.
substitute _moved_attributes for _MovedItems._moved_attributes.
if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
import module copy.
from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
split ip_str into parts by ':', if '.' is contained in the last element of the result,
from django.utils.translation import ugettext as _ into default name space.
try,
from django.core.files.base import File into default name space.
args is a string '[fixture ...]'.
get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key,
call the function _strip_once with an argument value, substitute the result for new_value.
call the method self.as_table, return the result.
call the function t.render with an argument context, return the result.
raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization",
convert processors into a tuple and substitute it for processors.
define the function with arguments self and filename.
from django.utils import six into default name space.
if not,
for every field in concrete_model._meta.many_to_many,
if level is not an integer raise an error with message string "The first argument should be level.".
if data has an 'temporary_file_path' attribute,
RemovedInDjango19Warning and stacklevel as integer 2.   try,
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.
return boolean True.
substitute message.error_list for message.
substitute app_namefor command.
derive the class PasswordInput from the TextInput base class.
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
_upload_handlers is an empty list.
substitute FIELD for TYPE,
for every app_name and model_list in return value of manifest.items function,
return an instance of SafeText, created with an argument data.
called with sep appended to base_path as an argument and results of the function normcase called twice with final_path,   and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path,   if not equal to the result of the function normcase called with an argument base_path.   raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)',
cursor is None.
substitute io.BytesIO for BytesIO.
call the getvalue method from the base class of the class PythonSerializer, return the result.
if not,
get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
missing_args_message is a string "You must provide an application name.".
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the method has_leading_dir with 2 arguments self and paths.
get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,
from math import ceil into default name space.
do nothing.
if obj_list is None,
call the method token.contents.split, substitute the result for bits.
remove first element from styles, split it by the '/' character, substitute the result for colors.
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
otherwise if, first element of message_context is equal to "'",
derive the class TemplateResponse from the SimpleTemplateResponse base class.
compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.
if self.verbosity is greater or equals to integer 2.
return get_git_changeset.cache.
if self.is_bound is true,
errors is an empty list.
if extra_classes has an attribute 'split',
if reason is not None,
define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.
consume_next is boolean False.
call the function conditional_escape with an argument contents, substitute the result for contents.
call the method HttpResponse.content.fset with 2 arguments: self and value.
otherwise if action equals to string 'apply_success',
define the method app_dict with an argument self.
and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.   call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
return an empty string.
define the method add_arguments with an argument self and parser.
call the method self._populate,
from __future__ import unicode_literals into default name space.
substitute path_info for self.path_info.
from django.conf import settings, global_settings into default name space.
call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
from django.core import urlresolvers into default name space.
if new_name ends with string '_id',
import module gzip.
do nothing.
import module warnings.
return exit_code.
if string "'format'" is not contained in e converted into a string,
get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
add params to extra_params dictionary.
call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.
call the method to_python with an argument value from the base class of the DateField class, return the result.
call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,
substitute self.parent_instance.pk for orig.
return new_key.
substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.
call the pyinotify.WatchManager method, assign the result to wm.
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
call the method self.style.NOTICE with an argument:
substitute length of digittuple for digits.
get models.signals name attribute, store it in obj.
call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
if PY3 is true,
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
if not,
call the method timezone.is_aware with an argument expires, if it evaluates to true,
if LookupError exception is caught,
return self._fqdn.
from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,
call the function import_string with an argument dotted_path, substitute the result for attr.
from itertools import chain into default name space.
return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
for every d in reversed list self.dicts,
define the function get_default_timezone_name.
return an empty list.
for every dict_ in self.dicts,
if not,
from django.utils.encoding import smart_text into default name space.
if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.
replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result.   define the method is_serious with argument self.
define the method __init__ with an argument self.
do nothing.
or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.   property decorator,
and join the results into a string, separated with '|' character, return the result.   derive the class Lexer from the object base class.
define the method __ne__ with 2 arguments: self and other.
"pulls out all strings marked for translation. It creates (or updates) a message "   "file in the conf/locale (in the django tree) or locale (for projects and "   "applications) directory.\n\nYou must run this command with one of either the "   "--locale, --exclude or --all options.".    requires_system_checks is boolean False.
from django.core.checks.registry import registry into default name space.
return self.
substitute field.rel.to for rel_model.
skip this loop iteration.
return nothing.
call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
instantiate Archive class with an argument path, with it renamed to archive, perform,
try,
define the function luhn with an argument candidate.
define method add_arguments with self class instance and parser as the arguments.
call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.
if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.
return it.   if PY3 is true,
derive the class AssignmentNode form the base class TagHelperNode.
do nothing.
define the method compile_function_error with 3 arguments: self, token and e.
define the method has_key with self class instance, key and version defaulting to None as arguments.
derive the class MultipleObjectsReturned from the Exception base class.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
ba_serializer is a instance of BadSerializer class, created with an argument exc.
self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the
result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument author_email for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate',   updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments',   result of the function to_unicode called with an argument unique_id) for 'unique_id)',   unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',    if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.   update dictionary item with an argument kwargs.
convert role to uppercase.
if not,
password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.   call the EmailMessage function wit subject, message, sender, recipient and connection set to connection,
call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:
autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state,
property decorator.
call the function warnings.warn with an argument string "Your TEMPLATE_LOADERS setting includes %r, but your Python installation
if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object,
if file path of src and dst files are the same, return boolean True, otherwise return boolean False.
from email.mime.multipart import MIMEMultipart into default name space.
call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
call the method add_arguments from the base class of the Command class, with an argument parser.
define the method __str__ with an argument self.
define the function resolve with arguments path and urlconf set to None.
return boolean True.
substitute settings.DATE_FORMAT for arg.
if self.is_required is false,
sum media and w.media, substitute the result for media.
response.content is bytes empty string.
remove '__dict__' key from the orig_vars dictionary.
try,
if ch equals a string '?',
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
from django.utils.module_loading import import_string into default name space.
called with an argument value under the 'updateddate' key of the item dictionary.   if value under the 'author_name' key of the item dictionary is not None,
join prefix and path into an url, return it.
from django.utils.six.moves import xrange into default name space.
raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
append string 'AutoField?' to comment_notes.
if _serializers is false,
forms_valid is True.
import module os.
if Exception, renamed to e, exception is caught,
define the method validate_unique with an argument self.
if self._request_middleware is None,
define the function trim_whitespace with an argument s.
call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode,
pop_context is boolean True.
substitute timezone for self.timezone.
property decorator,
if options is true,
from itertools import product into default name space.
define the method values with an argument self.
TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,
self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None,
update defaults dictionary with kwargs.
call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.
pathext is an list containing an empty string.
call the method self._coerce with an argument data, substitute the result for data.
msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.
return chunk.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
call the function to_language with an argument language, substitute it for self.__to_language.
decorator method register.tag with an argument 'include',
define the method Y with an argument self.
widget.is_localized is boolean True.
call the signals.request_started.send method with sender set to self.__class__ as argument.
call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
return nothing.
nodelist_false is an instance of NodeList.
for every name and var in return value of the function six.iteritems called with an argument self.extra_context.   if self.isolated_context is true,
from __future__ import unicode_literals into default name space.
_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.
if func_name is false,
if self.verbosity is greater or equal to integer 1,
define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
get the hash value of the tup, substitute it for self.hashvalue.
append string '</optgroup>' to output.
call the method pattern.resolve with an argument new_path, substitute the result for sub_match.
kwargs is a empty dictionary.
do nothing.
assign the return value of the function fn to change.
substitute new_obj for obj.
define initialization method __init__ with argument self.
internal_use_only is boolean False.
return context.
return val.
if key_prefix is None,
if timeout equals to DEFAULT_TIMEOUT,
define the method __deepcopy__ with 2 arguments: self and memo.
call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,
try,
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
return self._count.
call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
where '%s' is replaced with parse_until elements joined into a string, separated with ', '.   define the method compile_filter_error with 3 arguments: self, token and e.
if replaces filed of graph.nodes element at the plan_node index is true,
define the function wrapper with an argument cls.
call the method settings.configure.
derive the class Loader from the BaseLoader base class.
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
derive the class TemplateDoesNotExist form the base class Exception.
call the function escapejs with an argument value, return the result.
try,
if not,
if self.activated is boolean True,
self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,
call the method settings.configure with an argument USE_I18N set to boolean True.
try,
return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
define the method encoding with an argument self.
for every middleware_method in self._response_middleware,
from django.utils import six into default name space.
for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
if roots is false,
if UnicodeError exception is caught,
skip this loop iteration,
for every i and item in enumerated iterable values,
call the method data, substitute the result for data.
if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.
call the function six.iteritems with an argument kwargs, for every key and value in the result,
property decorator,
for every item in sorted_items,
skip this loop iteration.
self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
call the function import_string with an argument path, substitute the result for func.
for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple,
where '%s' is replaced by lookup_view.   try,
join statements in a string separated by newline, return the result.
remove config dictionary element under '()' key, substitute it for c.
both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
subtract timestamp from the return value of the function time.time, substitute the result for age.
if s_len is greater than length,
define the function gettext with an argument message.
if last element of host equals character ']',
return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.
define the method handle_field with arguments self, obj and field.
if self._errors is None,
if not,
from collections import OrderedDict into default name space.
substitute WSGIRequest for request_class.
self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
append a tuple with elements key and value to current_fields.
self._errors is an empty list.
if language is not contained in _translations,
call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,
if NameError exception is caught,
call the method value.replace with an arugment tzinfo set to None, return the result.
for every root, dirs and files in subdirectory tree starting from the base dir template_dir,
join top_dir and relative_dir into a file path, substitute it for target_dir.
gettext._translations is an empty dictionary.
if StandardError, renamed to e, exception is caught,
derive the class Command from the base class AppCommand.
clean is a lambda function with self and x as arguments, return value is length of x.
if first and second element of sys.version_info are both equal to integer 3,
define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
derive the class RequestContext from the Context base class.
substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.
property decorator,
call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
if app_config.path is true,
derive the class DefaultCacheProxy from the base class object.
if elt is an instance of NonCapture class,
substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   if exists return next entry from the database that cursor points at.
call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
call the method __init__ from the base class of the class SortedDict.
call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
try,
if self.asvar is None,
raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'",
define the method tell with an argument self.
return tempdir.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
seen is an empty set.
for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
return self._callback.
substitute help_text for self.help_text.
call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
return result.
split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
keep_blank_values set to boolean True, encoding set to encoding.   call the method appendlist with 2 arguments: key and value.
derive the class SafeData from object base class.
call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument,
l is lambda function with argument x, that calls the method self.make_key with x and version set to version as arguments.
dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
define the method save with 2 arguments: self and commit set to boolean True.
try,
call the function get_library with an argument taglib, substitute the result for lib.
convert d into a integer, subtract d from it, substitute the result for m.
call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/   If you've already\n".
import module warnings.
raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
substitute CheckboxInput for widget.
define the function _import_module with an argument name.
substitute func for self.func.
if pop_context is true,
if value is None,
join 'conf' and 'locale' into a file path, if it is a directory,
append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':',
call the cursor.close method.
substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.
substitute complain for __delitem__.
get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data,
with '%s' substituted for migration_name and app_label, respectively, as arguments.   targets is a list containing tuple with two elements, app_label and migration.name.
c is an empty list.
return boolean True.
derive class Command from CheckCommand base class.
define the function to_bytes with arguments val and encoding.
call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
from django.db.migrations.loader import AmbiguityError into default name space.
_cookie_allows_colon_in_names is boolean False.
substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,
define the method pop with 3 arguments: self, key and unpacked list args.
if not,
DEFAULT_MAX_NUM is an integer 1000.
supports_microseconds is boolean False.
from __future__ import unicode_literals into default name space.
if empty_label is not None,
substitute loaders for self._loaders.
if self._delegate_bytes and six.PY2 are both true,
if app_config.models_module is None,
yield node.
messages is an empty dictionary.
try,
processors is an empty list.
substitute the result for s.   if not,
call the method self.get_full_path, append the result to string '//', substitute it for location.
from django.conf import settings into default namespace.
for every form in valid_forms,
append f.name to exclude.
_assertRaisesRegex is a strnig "assertRaisesRegex".
raise an AttributeError with an argument string "This QueryDict instance is immutable".
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
delete the value under the header converted to lowercase key of the self._headers dictionary.
lock is an instance of RLock class.
return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000,
define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
pieces is an empty list.
if not,
if domain is true,
call the method dot_re.sub with 2 arguments: char and src, return the result.
return statements.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
return an instance of SafeText, created with an argument s converted into a string.
output is an empty string.
if 'file_path' is contained in kwargs,
from __future__ import unicode_literals into default name space.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
define the method extract with 2 arguments: self and to_path set to an empty string.
if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
substitute var_obj for self.var.
substitute the last element of parts for ser_fmt.
define the function camel_case_to_spaces with an argument value.
finally perform,
call the method __init__ from the base class of the ExternalReferenceForbidden class.
self._done is boolean True.
do nothing.
formated with value under 'target' key of config dictionary and e.   otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
return nothing.
call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.
if fname file path exists,
if self.save_as_new is true,
"No file was submitted. Check the encoding type on the form." for 'invalid', return value of the function _ called with an argument,   string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.",   for 'empty', return value of the function ungettext_lazy called with 3 arguments:   string 'Ensure this filename has at most %(max)d character (it has %(length)d).',   string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length',   and return value of the function _ called with an argument string,   'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.   define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it,
return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.
return value.
define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
__all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',
try,
return message.
from django.apps import apps into default name space.
call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.
from email.mime.base import MIMEBase into default name space.
define the method __init__ with self class instance, file, and name defaulting to None as arguments.
call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.
'CacheKeyWarning' and 'BaseCache'   DEFAULT_CACHE_ALIAS is a string 'default'.
try,
call the method check_for_language.cache_clear.
try,
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
substitute value.pk for value.
register.tag decorator,
define the method file_complete with arguments: self and file_size.
substitute Iterator for create_bound_method.
append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.
call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
raise an EmptyPage exception with string 'That page number is less than 1' as an argument.
substitute the result of the function data.temporary_file_path for file.
RemovedInDjango19Warning and stacklevel set to integer 2.   import module logging.handlers.
otherwise if first element of second row of args equals a string '3',
get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
finally perform,
delete the value under the key key of self._expire_info dictionary.
for every f in fields,
join self.dirpath, thefile into a file path, substitute it for work_file.
skip this loop iteration.
derive the class NullBooleanSelect from the Select base class.
call the method self_cache.delete_multi with argument list containing keys mapped through function l.
if TypeError and AttributeError exceptions are caught,
self.literal is None,
try,
substitute element at self.pos index of self.tokens for retval.
call the method validate with an argument value, from the base class of the FloatField class.
if not,
called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of the method table_name.title.   strip_prefix is a lambda function with an argument s, return value is s without the first element if s starts with string 'u'',
call the form.is_valid method, if it evaluates to false,
try,
call the load method on the c class instance, with the cookie argument.
data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',
remove all the elements from space index of line.
s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.
call the method self.__bytes_cast, return the result.
substitute arg converted into a integer for length.
cc is a dictionary populated with items by calling function _to_tuple with el as an argument,
if self.message_context is true,
if app_config.label is contained in loader.migrated_apps,
path_info is a character '/'.
call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
substitute conn_type for self.connector.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
return an raw string '\"'.
define the function extract with 2 arguments path and to_path set to empty string.
join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,
return unbound.im_func.
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,
return boolean False.
substitute fcntl.LOCK_EX for LOCK_EX.
delete the value under key key of self._cache dictionary.
append j to sites.
call the method result.setlist with the arguments: key and value.
skip this loop iteration.
_mutable is boolean True.
call the private dict.__setitem__ method with self class instance, key and M as arguments.
if resource_string is not None,
substitute self.file for thefile.
break from the loop execution.
self.style.MIGRATE_HEADING, write the result to self.stdout.   write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
return value.
call the method handler.endElement with an argument string 'feed'.
derive the class InvalidPage from the Exception base class.
try,
substitute empty bytes string for self.buffer.
raise an CommandError exception with an argument string "You can only use --pks option with one model".
define the method accessed_time with arguments self and name.
append app_name to the invalid_apps.
if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,
if not,
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
add key to the self.bad_cookies set.
from django.core.cache import caches to the default name space.
call the method self._isdst with an argument dt, if it evaluates to true,
if urlconf is None,
define the function parse_color_setting with an argument config_string.
using_sysrandom is boolean True.
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.
from django.utils.safestring import SafeData and EscapeData into default name space.
derive the class DebugParser from the Parser base class.
if min_length is not None,
if IndexError exception is caugh,
define the function u with an argument s.
to_unicode is an lambda function with an argument s, result is the result of the function force_text,
call the self.user_regex.match method with an argument user_part, if it evaluates to false,
raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the "
decorator deconstructible,
add plan_node to the shown set.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
return args and kwargs.
position the file pointer at the beginning of self file.
set the file position pointer at file_pos.
define the function pretty_name with an argument name.
return kwargs.
try,
substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
call the method self.handle_field with arguments obj and filed.
define the function mark_for_escaping with an argument s.
usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.",
import module socket.
if it does append it to targets list.   if not,
call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
if finder is None,
get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
derive the class DateFormat from the base class TimeFormat.
substitute DateInput for widget.
call the hashlib.md5 fuction with force_bytes(key) as argument.
separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.
call the method language_code_re.search with an argument lang_code, if it evaluates to false,
call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
and unpacked dictionary kwargs.   define the method clean with 2 arguments: self and value.
substitute complain for pop.
substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
module_values is a set created from the elements of sys.modules.values method return value.
import module codecs.
divide self.data.day by 10, substitute reminder of the result for last.
serialize data to JSON format with cls set to encoder, substitute it for data.
define the method get_dump_object with arguments self and obj.
append string "Field renamed because it wasn't a valid Python identifier." to field_notes.
filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.   if not,
define the method validate with arguments self and value.
return nothing.
for every file in value under the 'files' key of the options dictionary.
requires_system_checks is boolean False.
_localtime is None.
decrement self.active_readers by integer 1,
if middle ends with punctuation,
if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.
define the method __init__ with arguments self, context, base, sysid and pubid.
reverse element order of dicts, join them in a string, substitute the result for number.
increment weight by integer 2.
do nothing.
define the method has_changed with arguments self, initial and data.
if fname doesnt start with self._dir and fname file path doesnt exists,
add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,
define the method represent_decimal with arguments self and data.
derive class _MovedItems from the _LazyModule base class.
default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the "default" database.'.   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
if self.field.cache_choices is true,
if e.errno does not equals to errno.ENOENT,
define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.
substitute boundary for self.boundary.
evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string,
bring integer 36 to the power of factor, substitute the result for j.
try,
substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
value under the 'primary_key' key of the extra_params dictionary is boolean True,
try,
finally perform,
remove '__weakref__' key from the orig_vars dictionary.
where '%s' is replaced with file_path.   create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
substitute prefix for common_prefix.
for every accessor_name and object_list is return value of the method self.m2m_data.items.
from django.forms.widgets import HiddenInput into default name space.
if self.number equals to self.paginator.num_pages,
if the key doesnt exists use sys.stdout as an argument.   if value under the 'no_color' key of the options dictionary.
import module cgi.
try,
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
try,
import module re.
substitute number for value under the 'number' key of the kwargs dictionary.
if check is not contained in self.registered_checks.
return sys.modules dictionary value under the name key.
if self.ignore is true and field_name is not contained in model_fields,
output_transaction is boolean True.
split ip_str by ':', substitute the result for hextets.
from __future__ import unicode_literals into default name space.
input_attrs, append the result to inputs list.   join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,
if InputStreamExhausted exception is caught,
if not,
substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:
return result.
"Use BaseCommand instead, which takes no arguments by default." and RemovedInDjango20Warning.   call the __init__ method from the base class of the NoArgsCommand class.
call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
if field.rel is true and field.rel is an instance of models.ManyToManyRel,
string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.   call the method self.style.NOTICE with an argument string "Run 'python manage.py migrate' to apply them.\n",
if KeyError exception is caught,
define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args,
call the method six.iteritems with an argument kwarg, convert the result into a list,
return self.id.
derive the class IfParser from the object base class.
call the function self.tag with 2 arguments: function_name and compile_func.
and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.   if not,
remove self._regex_validator from self.validators.
return printable representation of self.value.
get the value under the 'database' key of the options dictionary, substitute it for self.database.
insert mw_instance.process_exception at the beginning of self._exception_middleware.
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
if string '()' is contained in config,
if ch is contained in string '*?+',
old_field_name is None.
if member is a directory,
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with self.db_module.
return template.
method MONTHS.index, increment the result by integer 1, substitute it for month.   call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
define the function find_template_loader with an argument loader.
skip this loop iteration.
substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
return boolean False.
join tmpdir and sting 'original' into a file path name, substitute it for original_path.
otherwise if ch equals a string 'P',
buffer_ is None.
get attribute real_name from the trans object, return it.
substitute the result input_attrs.   if id_,
return response.
if data is empty.
raise an DTDForbidden exception with arguments name, sysid and pubid.
call the method f.value_from_object with an argument instance, substitute the result for qs.
if item is contained in self.dict, return boolean True, otherwise return boolean False.
if file path absolute_path exists,
call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.',
concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,
if not,
call the method imatch.group with an argument integer 1, if it evaluates to true,
if ImportError exception is caught,
if param is true,
from IPython.Shell import IPShell into default namespace.
call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
if min_value is not None,
from django.utils import six into default name space.
substitute propagate for logger.propagate.
get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
from django.middleware.csrf import get_token into default name space.
define the function _sanitize_ipv4_mapping with an argument ip_str.
self.fed is an empty list.
from django.core.management.base import BaseCommand and CommandError into default name space.
increment doy by integer 1.
decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.
append string '-0000' to time_str, return the result.
call the method self.validate_name with arguments project_name and string "project".
call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.
call the method self.can_write.release.
increment nesting by one.
return check.
args_check is a static method.
if Exception exception is caught,
change access mode of path to stat.S_IWRITE mode.
try,
raise an ImportError exception.
call the method self.error_class, substitute the result for self._non_form_errors.
define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,
filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.   otherwise if bytes is smaller than TB,
call the method self.attach with arguments filename, content and mimetype.
if ImportError exception is caught,
derive the class SsiNode from Node base class.
call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.   define the method save_new with 3 arguments: self, form and commit set to boolean True.
derive the class Token form the base class object.
find first index of occurrence of character '-' in language, substitute it for p.
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
if count is equal to integer 0.
substitute return value of the method obj._get_pk_val for obj_pk.
if value is an instance of datetime.time,
call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,
raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s",
if not,
define the method initial_forms with an argument self.
substitute model._meta.app_label for app.
compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True,
directories, files are empty lists.
try,
from django.core.mail import get_connection into default name space.
for every cache_alias in settings.CACHES,
if number is an instance of int type.
call the function force_text with an argument value, substitute the result for value.
write string "No conflicts detected to merge." to self.stdout stream.
for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.
if parent has an attribute 'render',
append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
call the s.serialize method with arguments queryset and unpacked dictionary options.
define the method clear with argument self.
return empty bytes string.
call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,
try,
evaluate function has_bom with po_path as argument.
import StringIO.
define the method content with self and value.
from django.conf import settings into default name space.
substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.
if source is an instance of NonCapture class,
split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,
call the method cursor.execute with string "SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" as argument,
substitute col_name for value under the 'db_column' key of the field_params dictionary.
substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.
append the result to pieces.   otherwise if piece is true,
define the method create_variable_node with 2 arguments self and filter_expression.
increment num by one.
if slots is an instance of str,
if token.token_type equals integer 0,
if self.forms is true,
for every base in new_class.__mro__ in reversed order,
return dec.
call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
if settings.TEMPLATE_DEBUG is true,
define the function from_current_timezone with an argument value.
if not, substitute self.auto_id for id_.   call the method widget.id_for_label with an argument id_, return the result.
if Exception, renamed to e, exception is caught,
return attrs.
raise an ValidationError exception with an argument errors,
call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
define the method __hash__ with an argument self.
return None.
if bit is true,
model._meta.app_label, model._meta.object_name, fk_name, respectively.   if not,
append string '_field' to new_name.
return result converted into an integer.   if not,
derive the class ImmutableList from the tuple base class.
try,
try,
if end is None
return template and None.
define the method management_form with an argument self.
raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
substitute file_name for t.
write it to self.stdout stream.   replaces is an empty list.
return boolean False.
if cls is false,
and help as a string 'Specify the app label(s) to create migrations for.'.   call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run',
if value has an attribute '__iter__' and value is not an instance of six.text_type,
if six.PY3 is true and val1 and val2 are an instances of bytes,
if second element of sys.version_info is smaller than or equal to integer 1,
if not,
call the method formats.time_format with 2 arguments: value and arg, return the result.
call the method popitem from the base class of the class SortedDict, substitute the result for result.
join basedir, l and string 'LC_MESSAGES' into a path separated by '/' for every l in locales, assign the list to dirs.
call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.",
from django.utils import six into default name space.
call the method states.items, for every state and rules in the result,
if stream_or_string is instance of bytes type,
if subcommand_cls.use_argparse is true,
do nothing.
for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
define the function build_instance with 3 arguments: Model, data and db.
import module re.
return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function:
raise an ImportError exception.
if zlib.error as e exception is raised,
if not,
substitute index for end.
define the method validate with arguments self and value.
try,
define the method widget_attrs with arguments self and widget.
if jan1_weekday is greater than integer 4,
if format is not contained in _serializers,
pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
map elements of value through mapping function force_text, substitute the result for value.
if doublecolon_start equals integer -1,
return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
call the method os.chdir with an argument our_home_dir.
call the function cache_get with 2 arguments: key and root, substitute the result for result.
call the method self.Z, substitute the result for seconds.
if KeyError exception is caught,
substitute prefix for _prefixes.values.
and call to the method form.has_changed evaluates to false,   skip this loop iteration,
define the method total_error_count with an argument self.
from django.utils import six into default name space.
for every migration in migrations_to_squash,
if bits is false,
call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.
define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.
substitute gettext for ugettext.
meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
if to_lower is true,
with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.   if response has an attribute named 'render' and response.render is a callable function,
use tag as an argument to call the iterator method next, substitute the result for invalid_tag.   raise an CommandError exception with an argument string 'There is no system check with the "%s" tag.', where '%s' is replaced with invalid_tag.
raise KeyError exception with an argument key.
if error_messages is true and f.name is contained in error_messages,
derive the class BaseEmailBackend from the object base class.
mapped with a function k, for every k and v in return value of the method candidate_subs.items.   format candidate_pat with candidate_subs, return the result.
for every k and v in result of the function six.iteritems,called with an argument self,
try,
from django.utils import six into default name space.
define the function lazy with 2 arguments: func and unpacked list resultclasses.
from django.utils.translation import ugettext and ungettext into default name space.
choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy,
remove name from existing.
if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
format the previous in a tuple, append the tuple to the response_headers.   call the start_response function with force_str(status) method return value and response_headers as arguments.
define the initialization method __init__ with self class instance and table as arguments.
define the method add_error with 3 arguments: self, field and errors.
from django.utils.functional import cached_property into default name space.
from django.core.mail import get_connection into default name space.
self.addr is an empty string.
call the method token.split_contents, substitute the result for bits.
define the method __copy__ with an argument self.
self.verbose_name_plural is a string 'cache entries'.
if not_installed_models is true,
define the method end_serialization with an argument self.
return proxy.
try,
return self._choices.
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
return inner.
put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,
if las equals integer 2,
if migration.replaces is true,
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
define lambda function that returns self.file.xreadlines field, use it as an argument for property function, put the result in xreadlines.
sum absolute p with units an integer 1, substitute the result for prec.
call the function unicodedata.combining with an argument char, if it evaluates to true,
ns_pattern is an empty string.
from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
if p is greater or equal to integer 0,
all_models is an empty list.
import module time as _time.
substitute self.field.widget for widget.
define the method send_messages with arguments self and email_messages.
substitute value for value under the key key of safe_data dictionary.
import module os.
if potfile fie exists,
substitute m2m_data for self.m2m_data.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,
convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.
from django.utils.formats import localize into default name space.
do nothing.
return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.   if not,
set real_name attribute of the self object to value of real_name attribute of trans object.
substitute value for self._encoding.
call the method self.handle_starttag, with tag and attrs as the arguments.
define the method parse_name with arguments self and fixture_name.
append header to the string 'HTTP_', append the result to the list headerlist.
and help='Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true',
return dec.
if url starts with '///',
if bytes is false,
if VariableDoesNotExist exception is caught,
define the method back with an argument self.
skip this loop iteration.
__D2 is a raw string '(?P<day>[ \d]\d)'.
if chunk_size is false,
if mw_instance has an attribute named 'process_exception'.
return self._callback.
skip this loop execution.
for every renamed_method in cls.renamed_methods,
if character '-' is not contained  in lang_code,
call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,
fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey,
_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,
tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"',   and tuple with 2 elements: '\'' and '\''.   DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
if i incremented by 1 is lesser than length of chunks,
self.proxy is boolean False.
where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.   return an instance of a TemplateTagNode class, created with an argument tag.
substitute the result for the value under the 'day' key of the html dictionary.   output is an empty list.
call the self._lock.writer method, with the result perform the following,
otherwise if end is not an instance of string type,
define the decode method with self class instance and s as arguments.
where '%s' is replaced with self.__class__.__name__.   for form in self.forms append form.cleaned_data to a list, return the resulting list.
if m is None,
import module posixpath.
if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
where '%d' is replaced with name, dlen subtracted from alen, and plen.   return boolean True.
call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
return new_class.
call the b64_encode function with an argument data, substitute the result for base64d.
increment objects_in_fixture by one.
call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,
do nothing.
if method self.validate_domain_part with an argument domain_part evaluates to true,
import module sys.
call the method self.add_item_elements with 2 arguments: handler and item.
call the method parser.add_option with an argument opt.
call the method self.stream.flush.
print opt_label to the standard output.
from django.utils import six into default name space.
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,
if not,
define the function blankout with 2 arguments: src and char.
prepend '.' to the i-th element of the ext_list.
call the method to_python with an argument value from the base class of the TimeField class, return the result.
for every form in self.forms append form to a list, if function form.is_valid evaluates to true,
property decorator,
values is an empty list.
call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.
and self.model._meta.pk.name.   substitute the value under the pk_key key of the self.data dictionary for pk.
substitute file for self.file.
return value.
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
divide message by error.params, substitute the residue of the division for message.
if exception of the class Exception, as e, is caught,
call the delete method with key and version set to version as arguments.
remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists,
substitute MONTHS for self.months.
if value is true,
convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
otherwise if auto_id is true,
finally perform,
if not,
append '0' to digits.
substitute file.mode for self.mode.
raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.
if LookupError exception is caught,
define the method n with an argument self.
sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
pop_context is boolean False.
define the method __init__ with 4 arguments: self, name, old and new set to None.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
import module sys.
try,
call the function force_bytes with arguments k and self.encoding, substitute the result for k.
return exclude.
get is a tuple containing elements generated by the call to the function pformat with an argument META_override,
from django.utils.encoding import force_str and force_text into default name space.
if self.to_field is true,
for every node in self.nodelist,
otherwise name is None.   if name is None,
call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.
for every dirpath, dirnames and filenames in the result,   for every dirname in list dirnames,
loaded_objects_in_fixture is integer 0.
define the method __repr__ with an argument self.
if _time.daylight is true,
finally perform,
call the method self._load_post_and_files.
if length of tablenames is greater than zero,
import pickle.
if self.can_import_settings is false,
get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,
if pk is an instance of OneToOneField or ForeignKey classes,
create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
convert orphans into an integer and substitute it for self.orphans.
for every alternative in self.alternatives,
substitute level for self.level.
call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called,
concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,
define the function smart_urlquote with an argument url.
call the function import_library with an argument module, append the result to builtins.
from django.utils.encoding import force_text into default name space.
do nothing.
derive the class NonCapture from list base class.
join func.__class__.__module__ and func.__class__.__name__ into a string, separated by character '.', substitute it for self._func_path.
if not,
if vale is None or an empty string,
import module importlib.
substitute self.registered_checks for checks.
and unpacked dictionary kwargs.   define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.

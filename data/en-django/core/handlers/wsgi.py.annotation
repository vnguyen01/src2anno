from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

import cgi
#ANNOTATION: import module cgi.
import codecs
#ANNOTATION: import module codecs.
import logging
#ANNOTATION: import module logging.
import sys
#ANNOTATION: import module sys.
from io import BytesIO
#ANNOTATION: from io import BytesIO into default name space.
from threading import Lock
#ANNOTATION: from threading import Lock into default name space.
import warnings
#ANNOTATION: import module warnings.

from django import http
#ANNOTATION: from django import http into default name space.
from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.core import signals
#ANNOTATION: from django.core import signals into default name space.
from django.core.handlers import base
#ANNOTATION: from django.core.handlers import base into default name space.
from django.core.urlresolvers import set_script_prefix
#ANNOTATION: from django.core.urlresolvers import set_script_prefix into default name space.
from django.utils import datastructures
#ANNOTATION: from django.utils import datastructures into default name space.
from django.utils.deprecation import RemovedInDjango19Warning
#ANNOTATION: from django.utils.deprecation import RemovedInDjango19Warning into default name space.
from django.utils.encoding import force_str, force_text
#ANNOTATION: from django.utils.encoding import force_str and force_text into default name space.
from django.utils.functional import cached_property
#ANNOTATION: from django.utils.functional import cached_property into default name space.
from django.utils import six
#ANNOTATION: from django.utils import six into default name space.

# For backwards compatibility -- lots of code uses this in the wild!
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA
#ANNOTATION: from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA into default name space.

logger = logging.getLogger('django.request')
#ANNOTATION: call logging.getLogger method with string 'django.request' as argument, store the result in logger. 

# encode() and decode() expect the charset to be a native string.
ISO_8859_1, UTF_8 = str('iso-8859-1'), str('utf-8')
#ANNOTATION: ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.


class LimitedStream(object):
#ANNOTATION: derive class LimitedStream from the object base class, making it a new-style class.
    '''
    LimitedStream wraps another stream in order to not allow reading from it
    past specified amount of bytes.
    '''
#ANNOTATION: docstring
    def __init__(self, stream, limit, buf_size=64 * 1024 * 1024):
#ANNOTATION: def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
        self.stream = stream
#ANNOTATION: substitute stream for self.stream.
        self.remaining = limit
#ANNOTATION: substitute limit for self.remaining.
        self.buffer = b''
#ANNOTATION: substitute empty bytes string for self.buffer.
        self.buf_size = buf_size
#ANNOTATION: substitute buf_size for self.buf_size.

    def _read_limited(self, size=None):
#ANNOTATION: define the method _read_limited with self class instance and size set to None as arguments. 
        if size is None or size > self.remaining:
#ANNOTATION: if size is None or size is greater than self.remaining,
            size = self.remaining
#ANNOTATION: substitute self.remaining for size.
        if size == 0:
#ANNOTATION: if size equals to integer zero.
            return b''
#ANNOTATION: return empty bytes string.
        result = self.stream.read(size)
#ANNOTATION: read size number of bytes from self.stream stream, store the result in the result.
        self.remaining -= len(result)
#ANNOTATION: decrement self.remaining by length of result.
        return result
#ANNOTATION: return result.

    def read(self, size=None):
#ANNOTATION: define the method read with self class instance and size set to None as arguments.
        if size is None:
#ANNOTATION: if size is None,
            result = self.buffer + self._read_limited()
#ANNOTATION: add self.buffer and self._read_limited method return value together, store it in result. 
            self.buffer = b''
#ANNOTATION: substitute empty bytes string for self.buffer. 
        elif size < len(self.buffer):
#ANNOTATION: otherwise if size is less than length of self.buffer,
            result = self.buffer[:size]
#ANNOTATION: substitute first size elements of self.buffer for result.
            self.buffer = self.buffer[size:]
#ANNOTATION: truncate first size number of elements of self.buffer.
        else:  # size >= len(self.buffer)
#ANNOTATION: if not,
            result = self.buffer + self._read_limited(size - len(self.buffer))
#ANNOTATION: call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
            self.buffer = b''
#ANNOTATION: substitute empty bytes string for self.buffer.
        return result
#ANNOTATION: return result.

    def readline(self, size=None):
#ANNOTATION: define method readline with self class instance and size set to None.
        while b'\n' not in self.buffer and \
              (size is None or len(self.buffer) < size):
#ANNOTATION: while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,
            if size:
#ANNOTATION: if size is not zero,
                # since size is not None here, len(self.buffer) < size
                chunk = self._read_limited(size - len(self.buffer))
#ANNOTATION: call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.
            else:
#ANNOTATION: if not,
                chunk = self._read_limited()
#ANNOTATION: call the method self._read_limited, store the return value into chunk.
            if not chunk:
#ANNOTATION: if chunk is empty,
                break
#ANNOTATION: break the execution of the smallest enclosing loop.
            self.buffer += chunk
#ANNOTATION: increment self.buffer by chunk.
        sio = BytesIO(self.buffer)
#ANNOTATION: call the function BytesIO with self.buffer as argument, store the result is sio.
        if size:
#ANNOTATION: if size is not empty,
            line = sio.readline(size)
#ANNOTATION: call the sio.readline method with size as an argument, substitute the result for line.
        else:
#ANNOTATION: if not,
            line = sio.readline()
#ANNOTATION: call the sio.readline method, substitute the result for line.
        self.buffer = sio.read()
#ANNOTATION: call the sio.read method, substitute the result for self.buffer.
        return line
#ANNOTATION: return line.


class WSGIRequest(http.HttpRequest):
#ANNOTATION: derive the class WSGIRequest from base class http.HttpRequest.
    def __init__(self, environ):
#ANNOTATION: define the initialization method __init__ with self class instance and environ as arguments. 
        script_name = get_script_name(environ)
#ANNOTATION: call the get_script_name function with environ as argument, substitute the result for script_name.
        path_info = get_path_info(environ)
#ANNOTATION: call the get_path_info function with environ as argument, substitute the result for path_info.
        if not path_info:
#ANNOTATION: if path_info is empty,
            # Sometimes PATH_INFO exists, but is empty (e.g. accessing
            # the SCRIPT_NAME URL without a trailing slash). We really need to
            # operate as if they'd requested '/'. Not amazingly nice to force
            # the path like this, but should be harmless.
            path_info = '/'
#ANNOTATION: path_info is a character '/'.
        self.environ = environ
#ANNOTATION: substitute environ for self.environ.
        self.path_info = path_info
#ANNOTATION: substitute path_info for self.path_info.
        # be careful to only replace the first slash in the path because of
        # http://test/something and http://test//something being different as
        # stated in http://www.ietf.org/rfc/rfc2396.txt
        self.path = '%s/%s' % (script_name.rstrip('/'),
                               path_info.replace('/', '', 1))
#ANNOTATION: strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.
        self.META = environ
#ANNOTATION: substitute environ for self.META.
        self.META['PATH_INFO'] = path_info
#ANNOTATION: assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
        self.META['SCRIPT_NAME'] = script_name
#ANNOTATION: assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
        self.method = environ['REQUEST_METHOD'].upper()
#ANNOTATION: convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
        _, content_params = cgi.parse_header(environ.get('CONTENT_TYPE', ''))
#ANNOTATION: get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,
#ANNOTATION: use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively. 
        if 'charset' in content_params:
#ANNOTATION: if string 'charset' is contained in content_params,
            try:
#ANNOTATION: try,
                codecs.lookup(content_params['charset'])
#ANNOTATION: get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
            except LookupError:
#ANNOTATION: if exception LookupError is caught,
                pass
#ANNOTATION: do nothing.
            else:
#ANNOTATION: if not,
                self.encoding = content_params['charset']
#ANNOTATION: get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding. 
        self._post_parse_error = False
#ANNOTATION: self._post_parse_error is boolean False.
        try:
#ANNOTATION: try,
            content_length = int(environ.get('CONTENT_LENGTH'))
#ANNOTATION: convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
        except (ValueError, TypeError):
#ANNOTATION: if exception ValueError or TypeError is caught,
            content_length = 0
#ANNOTATION: content_length is integer 0.
        self._stream = LimitedStream(self.environ['wsgi.input'], content_length)
#ANNOTATION: self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key,
#ANNOTATION: and content_length.
        self._read_started = False
#ANNOTATION: self._read_started is boolean False.
        self.resolver_match = None
#ANNOTATION: self.resolver_match is None.

    def _get_scheme(self):
#ANNOTATION: define the method _get_scheme with self class instance as argument.
        return self.environ.get('wsgi.url_scheme')
#ANNOTATION: return value under the 'wsgi.url_scheme' key of self.environ dictionary.

    def _get_request(self):
#ANNOTATION: define the method _get_request with self class instance as argument.
        warnings.warn('`request.REQUEST` is deprecated, use `request.GET` or '
                      '`request.POST` instead.', RemovedInDjango19Warning, 2)
#ANNOTATION: call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',
#ANNOTATION: RemovedInDjango19Warning and integer 2 as arguments. 
        if not hasattr(self, '_request'):
#ANNOTATION: if self does not have an '_request' attribute,
            self._request = datastructures.MergeDict(self.POST, self.GET)
#ANNOTATION: call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
        return self._request
#ANNOTATION: return self._request.

    @cached_property
#ANNOTATION: decorator cached_property.
    def GET(self):
#ANNOTATION: define method GET with self class instance as an argument.
        # The WSGI spec says 'QUERY_STRING' may be absent.
        raw_query_string = get_bytes_from_wsgi(self.environ, 'QUERY_STRING', '')
#ANNOTATION: call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
        return http.QueryDict(raw_query_string, encoding=self._encoding)
#ANNOTATION: evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.

    def _get_post(self):
#ANNOTATION: def _get_post method with self class instance as the argument.
        if not hasattr(self, '_post'):
#ANNOTATION: if self does not has an '_post' attribute.
            self._load_post_and_files()
#ANNOTATION: call the self._load_post_and_files method.
        return self._post
#ANNOTATION: return self._post.

    def _set_post(self, post):
#ANNOTATION: define the _set_post method with self class instance and post as the arguments.
        self._post = post
#ANNOTATION: substitute post for self._post.

    @cached_property
#ANNOTATION: decorator cached_property.
    def COOKIES(self):
#ANNOTATION: define COOKIES method with self as the argument.
        raw_cookie = get_str_from_wsgi(self.environ, 'HTTP_COOKIE', '')
#ANNOTATION: call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
        return http.parse_cookie(raw_cookie)
#ANNOTATION: evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.

    def _get_files(self):
#ANNOTATION: define _get_files method with self class instance as the argument.
        if not hasattr(self, '_files'):
#ANNOTATION: if self does not have '_files' attribute,
            self._load_post_and_files()
#ANNOTATION: call the method self._load_post_and_files.
        return self._files
#ANNOTATION: return self._files.

    POST = property(_get_post, _set_post)
#ANNOTATION: _get_post is a getter function and _set_post is a setter function for POST attribute of this class.
    FILES = property(_get_files)
#ANNOTATION: _get_files is getter function for FILES attribute of this class.
    REQUEST = property(_get_request)
#ANNOTATION: _get_request is getter function for REQUEST attribute of this class.


class WSGIHandler(base.BaseHandler):
#ANNOTATION: derive the WSGIHandler class from the base class base.BaseHandler.
    initLock = Lock()
#ANNOTATION: evaluate function Lock() assign the result to initLock.
    request_class = WSGIRequest
#ANNOTATION: substitute WSGIRequest for request_class.

    def __call__(self, environ, start_response):
#ANNOTATION: define private method __call__ with self class instance, environ and start_response as the arguments.
        # Set up middleware if needed. We couldn't do this earlier, because
        # settings weren't available.
        if self._request_middleware is None:
#ANNOTATION: if self._request_middleware is None,
            with self.initLock:
#ANNOTATION: with self.initLock,
                try:
#ANNOTATION: try,
                    # Check that middleware is still uninitialized.
                    if self._request_middleware is None:
#ANNOTATION: if self._request_middleware is None,
                        self.load_middleware()
#ANNOTATION: call the self.load_middleware method.
                except:
#ANNOTATION: if exception is caught,
                    # Unload whatever middleware we got
                    self._request_middleware = None
#ANNOTATION: self._request_middleware is None.
                    raise
#ANNOTATION: re raise an exception.

        set_script_prefix(get_script_name(environ))
#ANNOTATION: call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.
        signals.request_started.send(sender=self.__class__)
#ANNOTATION: call the signals.request_started.send method with sender set to self.__class__ as argument.
        try:
#ANNOTATION: try,
            request = self.request_class(environ)
#ANNOTATION: call the self.request_class method with environ as an argument, substitute the result for request.
        except UnicodeDecodeError:
#ANNOTATION: if UnicodeDecodeError exception is caught,
            logger.warning('Bad Request (UnicodeDecodeError)',
                exc_info=sys.exc_info(),
                extra={
                    'status_code': 400,
                }
            )
#ANNOTATION: call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra
#ANNOTATION: with one entry 'status_code' is integer 400, as arguments.
            response = http.HttpResponseBadRequest()
#ANNOTATION: call the http.HttpResponseBadRequest function, assign the result to the response.
        else:
#ANNOTATION: if not,
            response = self.get_response(request)
#ANNOTATION: call the self.get_response with request as the argument, substitute the result for response.

        response._handler_class = self.__class__
#ANNOTATION: substitute self.__class__ for response._handler_class.

        status = '%s %s' % (response.status_code, response.reason_phrase)
#ANNOTATION: replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.
        response_headers = [(str(k), str(v)) for k, v in response.items()]
#ANNOTATION: convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
        for c in response.cookies.values():
#ANNOTATION: for every c in return value of the method response.cookies.values,
            response_headers.append((str('Set-Cookie'), str(c.output(header=''))))
#ANNOTATION: convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,
#ANNOTATION: format the previous in a tuple, append the tuple to the response_headers.
        start_response(force_str(status), response_headers)
#ANNOTATION: call the start_response function with force_str(status) method return value and response_headers as arguments.
        return response
#ANNOTATION: return response.


def get_path_info(environ):
#ANNOTATION: define the get_path_info function with environ as the argument.
    """
    Returns the HTTP request's PATH_INFO as a unicode string.
    """
#ANNOTATION: docstring
    path_info = get_bytes_from_wsgi(environ, 'PATH_INFO', '/')
#ANNOTATION: call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.

    # It'd be better to implement URI-to-IRI decoding, see #19508.
    return path_info.decode(UTF_8)
#ANNOTATION: return path_info.decode method return value called with UTF_8 as the argument.


def get_script_name(environ):
#ANNOTATION: define get_script_name function with environ as an argument.
    """
    Returns the equivalent of the HTTP request's SCRIPT_NAME environment
    variable. If Apache mod_rewrite has been used, returns what would have been
    the script name prior to any rewriting (so it's the script name as seen
    from the client's perspective), unless the FORCE_SCRIPT_NAME setting is
    set (to anything).
    """
#ANNOTATION: docstring
    if settings.FORCE_SCRIPT_NAME is not None:
#ANNOTATION: if settings.FORCE_SCRIPT_NAME is not None,
        return force_text(settings.FORCE_SCRIPT_NAME)
#ANNOTATION: evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.

    # If Apache's mod_rewrite had a whack at the URL, Apache set either
    # SCRIPT_URL or REDIRECT_URL to the full resource URL before applying any
    # rewrites. Unfortunately not every Web server (lighttpd!) passes this
    # information through all the time, so FORCE_SCRIPT_NAME, above, is still
    # needed.
    script_url = get_bytes_from_wsgi(environ, 'SCRIPT_URL', '')
#ANNOTATION: call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
    if not script_url:
#ANNOTATION: if script_url is false,
        script_url = get_bytes_from_wsgi(environ, 'REDIRECT_URL', '')
#ANNOTATION: call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.

    if script_url:
#ANNOTATION: if script_url is true,
        path_info = get_bytes_from_wsgi(environ, 'PATH_INFO', '')
#ANNOTATION: call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
        script_name = script_url[:-len(path_info)]
#ANNOTATION: take all but the length of path_info last elements of script_url, substitute it for script_name.
    else:
#ANNOTATION: if not,
        script_name = get_bytes_from_wsgi(environ, 'SCRIPT_NAME', '')
#ANNOTATION: call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.

    # It'd be better to implement URI-to-IRI decoding, see #19508.
    return script_name.decode(UTF_8)
#ANNOTATION: return scrip_name.decode method result called with UTF_8 as argument.


def get_bytes_from_wsgi(environ, key, default):
#ANNOTATION: define the function get_bytes_from_wsgi with environ, key and default as arguments.
    """
    Get a value from the WSGI environ dictionary as bytes.

    key and default should be str objects. Under Python 2 they may also be
    unicode objects provided they only contain ASCII characters.
    """
#ANNOTATION: docstring
    value = environ.get(str(key), str(default))
#ANNOTATION: convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
#ANNOTATION: default string value, substitute it for value.
    # Under Python 3, non-ASCII values in the WSGI environ are arbitrarily
    # decoded with ISO-8859-1. This is wrong for Django websites where UTF-8
    # is the default. Re-encode to recover the original bytestring.
    return value if six.PY2 else value.encode(ISO_8859_1)
#ANNOTATION: return value if six.PY2 is true, if not return value.encode(ISO_8859_1).


def get_str_from_wsgi(environ, key, default):
#ANNOTATION: define the get_str_from_wsgi function with environ, key and default as arguments. 
    """
    Get a value from the WSGI environ dictionary as bytes.

    key and default should be str objects. Under Python 2 they may also be
    unicode objects provided they only contain ASCII characters.
    """
#ANNOTATION: docstring
    value = environ.get(str(key), str(default))
#ANNOTATION: convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
#ANNOTATION: default string value, substitute it for value.
    # Same comment as above
    return value if six.PY2 else value.encode(ISO_8859_1).decode(UTF_8)
#ANNOTATION: return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).

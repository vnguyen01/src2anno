"""
FastCGI (or SCGI, or AJP1.3 ...) server that implements the WSGI protocol.

Uses the flup python package: http://www.saddi.com/software/flup/

This is an adaptation of the flup package to add FastCGI server support
to run Django apps from Web servers that support the FastCGI protocol.
This module can be run standalone or from the django-admin / manage.py
scripts using the "runfcgi" directive.

Run with the extra option "help" for a list of additional options you can
pass to this server.
"""
#ANNOTATION: docstring

import importlib
#ANNOTATION: import module importlib.
import os
#ANNOTATION: import module os.
import sys
#ANNOTATION: import module sys.

__version__ = "0.1"
#ANNOTATION: __version__ is a string "0.1".
__all__ = ["runfastcgi"]
#ANNOTATION: __all__ is a list containing a string "runfastcgi".

FASTCGI_OPTIONS = {
    'protocol': 'fcgi',
    'host': None,
    'port': None,
    'socket': None,
    'method': 'fork',
    'daemonize': None,
    'workdir': '/',
    'pidfile': None,
    'maxspare': 5,
    'minspare': 2,
    'maxchildren': 50,
    'maxrequests': 0,
    'debug': None,
    'outlog': None,
    'errlog': None,
    'umask': None,
}
#ANNOTATION: FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port', 
#ANNOTATION: None for 'socket', 'fork' for 'method', None for 'daemonize', '/' for 'workdir', None for 'daemonize', 5 for 'maxspare', 
#ANNOTATION: 2 for 'minspare', 50 for 'maxchildren', 0 for 'maxrequests', None for 'debug', None for 'outlog', None for 'errlog' and None for 'umask'.

FASTCGI_HELP = r"""
  Run this project as a fastcgi (or some other protocol supported
  by flup) application. To do this, the flup package from
  http://www.saddi.com/software/flup/ is required.

   runfcgi [options] [fcgi settings]

Optional Fcgi settings: (setting=value)
  protocol=PROTOCOL    fcgi, scgi, ajp, ... (default %(protocol)s)
  host=HOSTNAME        hostname to listen on.
  port=PORTNUM         port to listen on.
  socket=FILE          UNIX socket to listen on.
  method=IMPL          prefork or threaded (default %(method)s).
  maxrequests=NUMBER   number of requests a child handles before it is
                       killed and a new child is forked (0 = no limit).
  maxspare=NUMBER      max number of spare processes / threads (default %(maxspare)s).
  minspare=NUMBER      min number of spare processes / threads (default %(minspare)s).
  maxchildren=NUMBER   hard limit number of processes / threads (default %(maxchildren)s).
  daemonize=BOOL       whether to detach from terminal.
  pidfile=FILE         write the spawned process-id to this file.
  workdir=DIRECTORY    change to this directory when daemonizing (default %(workdir)s).
  debug=BOOL           set to true to enable flup tracebacks.
  outlog=FILE          write stdout to this file.
  errlog=FILE          write stderr to this file.
  umask=UMASK          umask to use when daemonizing, in octal notation (default 022).

Examples:
  Run a "standard" fastcgi process on a file-descriptor
  (for Web servers which spawn your processes for you)
    $ manage.py runfcgi method=threaded

  Run a scgi server on a TCP host/port
    $ manage.py runfcgi protocol=scgi method=prefork host=127.0.0.1 port=8025

  Run a fastcgi server on a UNIX domain socket (posix platforms only)
    $ manage.py runfcgi method=prefork socket=/tmp/fcgi.sock

  Run a fastCGI as a daemon and write the spawned PID in a file
    $ manage.py runfcgi socket=/tmp/fcgi.sock method=prefork \
        daemonize=true pidfile=/var/run/django-fcgi.pid

""" % FASTCGI_OPTIONS
#ANNOTATION: FASTCGI_HELP is a docstring, with '%s' replaced by FASTCGI_OPTIONS.


def fastcgi_help(message=None):
#ANNOTATION: define the method fastcgi_help with an argument message set to None.
    print(FASTCGI_HELP)
#ANNOTATION: print FASTCGI_HELP to the standard output.
    if message:
#ANNOTATION: if message is true,
        print(message)
#ANNOTATION: print message to the standard output.
    return False
#ANNOTATION: return boolean False.


def runfastcgi(argset=[], **kwargs):
#ANNOTATION: define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs. 
    options = FASTCGI_OPTIONS.copy()
#ANNOTATION: call the method FASTCGI_OPTIONS.copy, substitute the result for options.
    options.update(kwargs)
#ANNOTATION: call the options.update method with an argument kwargs.
    for x in argset:
#ANNOTATION: for every x in argset,
        if "=" in x:
#ANNOTATION: if character '=' is contained in x,
            k, v = x.split('=', 1)
#ANNOTATION: call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
        else:
#ANNOTATION: if not,
            k, v = x, True
#ANNOTATION: substitute x for k and boolean True for v.
        options[k.lower()] = v
#ANNOTATION: substitute v for value under the k converted to lower case key of options dictionary.

    if "help" in options:
#ANNOTATION: if string 'help' is contained in options,
        return fastcgi_help()
#ANNOTATION: call the fastcgi_help function, return the result.

    try:
#ANNOTATION: try,
        import flup  # NOQA
#ANNOTATION: import flup
    except ImportError as e:
#ANNOTATION: if ImportError, renamed to e, exception is caught,
        sys.stderr.write("ERROR: %s\n" % e)
#ANNOTATION: call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
        sys.stderr.write("  Unable to load the flup package.  In order to run django\n")
#ANNOTATION: call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
        sys.stderr.write("  as a FastCGI application, you will need to get flup from\n")
#ANNOTATION: call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n".
        sys.stderr.write("  http://www.saddi.com/software/flup/   If you've already\n")
#ANNOTATION: call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/   If you've already\n".
        sys.stderr.write("  installed flup, then make sure you have it in your PYTHONPATH.\n")
#ANNOTATION: call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
        return False
#ANNOTATION: return boolean False.

    flup_module = 'server.' + options['protocol']
#ANNOTATION: append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.

    if options['method'] in ('prefork', 'fork'):
#ANNOTATION: if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
        wsgi_opts = {
            'maxSpare': int(options["maxspare"]),
            'minSpare': int(options["minspare"]),
            'maxChildren': int(options["maxchildren"]),
            'maxRequests': int(options["maxrequests"]),
        }
#ANNOTATION: wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
#ANNOTATION: for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',
#ANNOTATION: value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren', 
#ANNOTATION: and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.
        flup_module += '_fork'
#ANNOTATION: append string '_fork' to flup_module.
    elif options['method'] in ('thread', 'threaded'):
#ANNOTATION: otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
        wsgi_opts = {
            'maxSpare': int(options["maxspare"]),
            'minSpare': int(options["minspare"]),
            'maxThreads': int(options["maxchildren"]),
        }
#ANNOTATION: wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
#ANNOTATION: for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',
#ANNOTATION: and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.
    else:
#ANNOTATION: if not,
        return fastcgi_help("ERROR: Implementation must be one of prefork or "
                            "thread.")
#ANNOTATION: call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.

    wsgi_opts['debug'] = options['debug'] is not None
#ANNOTATION: if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.

    try:
#ANNOTATION: try,
        module = importlib.import_module('.%s' % flup_module, 'flup')
#ANNOTATION: call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
        WSGIServer = module.WSGIServer
#ANNOTATION: substitute module.WSGIServer for WSGIServer.
    except Exception:
#ANNOTATION: if Exception exception is caught,
        print("Can't import flup." + flup_module)
#ANNOTATION: append flup_module to string "Can't import flup.", print it to the standard output.
        return False
#ANNOTATION: return boolean False.

    # Prep up and go
    from django.core.servers.basehttp import get_internal_wsgi_application
#ANNOTATION: from django.core.servers.basehttp import get_internal_wsgi_application into default name space.

    if options["host"] and options["port"] and not options["socket"]:
#ANNOTATION: if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
        wsgi_opts['bindAddress'] = (options["host"], int(options["port"]))
#ANNOTATION: set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,
#ANNOTATION: of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.
    elif options["socket"] and not options["host"] and not options["port"]:
#ANNOTATION: if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
        wsgi_opts['bindAddress'] = options["socket"]
#ANNOTATION: substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
    elif not options["socket"] and not options["host"] and not options["port"]:
#ANNOTATION: if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
        wsgi_opts['bindAddress'] = None
#ANNOTATION: set value under the 'bindAddress' key of wsgi_opts to None.
    else:
#ANNOTATION: if not,
        return fastcgi_help("Invalid combination of host, port, socket.")
#ANNOTATION: call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.

    if options["daemonize"] is None:
#ANNOTATION: if value under the 'daemonize' of options dictionary is None,
        # Default to daemonizing if we're running on a socket/named pipe.
        daemonize = (wsgi_opts['bindAddress'] is not None)
#ANNOTATION: if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
    else:
#ANNOTATION: if not,
        if options["daemonize"].lower() in ('true', 'yes', 't'):
#ANNOTATION: convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
            daemonize = True
#ANNOTATION: daemonize is boolean True.
        elif options["daemonize"].lower() in ('false', 'no', 'f'):
#ANNOTATION: convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
            daemonize = False
#ANNOTATION: daemonize is boolean False.
        else:
#ANNOTATION: if not,
            return fastcgi_help("ERROR: Invalid option for daemonize "
                                "parameter.")
#ANNOTATION: call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.

    daemon_kwargs = {}
#ANNOTATION: daemon_kwargs is an empty dictionary.
    if options['outlog']:
#ANNOTATION: if value under the 'outlog' key of options dictionary is true,
        daemon_kwargs['out_log'] = options['outlog']
#ANNOTATION: substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
    if options['errlog']:
#ANNOTATION: if value under the 'errlog' key of options dictionary is true,
        daemon_kwargs['err_log'] = options['errlog']
#ANNOTATION: substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
    if options['umask']:
#ANNOTATION: if value under the 'umask' key of options dictionary is true,
        daemon_kwargs['umask'] = int(options['umask'], 8)
#ANNOTATION: convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.

    if daemonize:
#ANNOTATION: if daemonize is true,
        from django.utils.daemonize import become_daemon
#ANNOTATION: from django.utils.daemonize import become_daemon into default name space.
        become_daemon(our_home_dir=options["workdir"], **daemon_kwargs)
#ANNOTATION: call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,
#ANNOTATION: unpacked dictionary daemon_kwargs.

    if options["pidfile"]:
#ANNOTATION: if value under the 'pidfile' of options dictionary exists,
        with open(options["pidfile"], "w") as fp:
#ANNOTATION: open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
            fp.write("%d\n" % os.getpid())
#ANNOTATION: call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.

    WSGIServer(get_internal_wsgi_application(), **wsgi_opts).run()
#ANNOTATION: create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.

if __name__ == '__main__':
#ANNOTATION: if __name__ equals a string '__main__'.
    runfastcgi(sys.argv[1:])
#ANNOTATION: call the function runfastcgi with an argument all the elements, except the first from the sys.argv list. 

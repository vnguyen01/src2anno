from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

import codecs
#ANNOTATION: import module codecs.
import os
#ANNOTATION: import module os.
import re
#ANNOTATION: import module re.
import warnings
#ANNOTATION: import module warnings.

from django.apps import apps
#ANNOTATION: from django.apps import apps into default name space.
from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.core.management.base import CommandError
#ANNOTATION: from django.core.management.base import CommandError into default name space.
from django.db import models, router
#ANNOTATION: from django.db import models and router into default name space.
from django.utils.deprecation import RemovedInDjango19Warning
#ANNOTATION: from django.utils.deprecation import RemovedInDjango19Warning into default name space.


def check_for_migrations(app_config, connection):
#ANNOTATION: define the function check_for_migrations with 2 arguments: app_config and connection.
    # Inner import, else tests imports it too early as it needs settings
    from django.db.migrations.loader import MigrationLoader
#ANNOTATION: from django.db.migrations.loader import MigrationLoader into default name space.
    loader = MigrationLoader(connection)
#ANNOTATION: loader is an instance of MigrationLoader class, created with an argument connection. 
    if app_config.label in loader.migrated_apps:
#ANNOTATION: if app_config.label is contained in loader.migrated_apps,
        raise CommandError("App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config.label)
#ANNOTATION: raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.


def sql_create(app_config, style, connection):
#ANNOTATION: define the function sql_create with 3 arguments: app_config, style and connection.
    "Returns a list of the CREATE TABLE SQL statements for the given app."
#ANNOTATION: docstring

    check_for_migrations(app_config, connection)
#ANNOTATION: call the function check_for_migrations with an arguments app_config, connection.

    if connection.settings_dict['ENGINE'] == 'django.db.backends.dummy':
#ANNOTATION: if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
        # This must be the "dummy" database backend, which means the user
        # hasn't set ENGINE for the database.
        raise CommandError("Django doesn't know which syntax to use for your SQL statements,\n" +
            "because you haven't properly specified the ENGINE setting for the database.\n" +
            "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases")
#ANNOTATION: raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n"
#ANNOTATION: "because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".

    # Get installed models, so we generate REFERENCES right.
    # We trim models from the current app so that the sqlreset command does not
    # generate invalid SQL (leaving models out of known_models is harmless, so
    # we can be conservative).
    app_models = app_config.get_models(include_auto_created=True)
#ANNOTATION: call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
    final_output = []
#ANNOTATION: final_output is an empty list.
    tables = connection.introspection.table_names()
#ANNOTATION: call the method connection.introspection.table_names, substitute the result for tables.
    known_models = set(model for model in connection.introspection.installed_models(tables) if model not in app_models)
#ANNOTATION: if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,
#ANNOTATION: add model to a set, substitute the result for known_models.
    pending_references = {}
#ANNOTATION: pending_references is an empty dictionary.

    for model in router.get_migratable_models(app_config, connection.alias, include_auto_created=True):
#ANNOTATION: for every model in return value of the function router.get_migratable_models, called with arguments:
#ANNOTATION: app_config, connection.alias and include_auto_created set to boolean True.
        output, references = connection.creation.sql_create_model(model, style, known_models)
#ANNOTATION: call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
        final_output.extend(output)
#ANNOTATION: call the method final_output.extend with an argument output.
        for refto, refs in references.items():
#ANNOTATION: for every refto and refs in return value of the method references.items, 
            pending_references.setdefault(refto, []).extend(refs)
#ANNOTATION: call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
            if refto in known_models:
#ANNOTATION: if refto is contained in known_models,
                final_output.extend(connection.creation.sql_for_pending_references(refto, style, pending_references))
#ANNOTATION: call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
#ANNOTATION: use the result as an argument for the call to the method final_output.extend.
        final_output.extend(connection.creation.sql_for_pending_references(model, style, pending_references))
#ANNOTATION: call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
#ANNOTATION: use the result as an argument for the call to the method final_output.extend.
        # Keep track of the fact that we've created the table for this model.
        known_models.add(model)
#ANNOTATION: add model to known_models set.

    # Handle references to tables that are from other apps
    # but don't exist physically.
    not_installed_models = set(pending_references.keys())
#ANNOTATION: call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
    if not_installed_models:
#ANNOTATION: if not_installed_models is true,
        alter_sql = []
#ANNOTATION: alter_sql is an empty list.
        for model in not_installed_models:
#ANNOTATION: for every model in not_installed_models,
            alter_sql.extend(['-- ' + sql for sql in
                connection.creation.sql_for_pending_references(model, style, pending_references)])
#ANNOTATION: for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,
#ANNOTATION: and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.
        if alter_sql:
#ANNOTATION: if alter_sql,
            final_output.append('-- The following references should be added but depend on non-existent tables:')
#ANNOTATION: append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
            final_output.extend(alter_sql)
#ANNOTATION: extend final_output with alter_sql.

    return final_output
#ANNOTATION: return final_output.


def sql_delete(app_config, style, connection, close_connection=True):
#ANNOTATION: define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
    "Returns a list of the DROP TABLE SQL statements for the given app."
#ANNOTATION: docstring

    check_for_migrations(app_config, connection)
#ANNOTATION: call the function check_for_migrations with arguments app_config and connection.

    # This should work even if a connection isn't available
    try:
#ANNOTATION: try,
        cursor = connection.cursor()
#ANNOTATION: call the method connection.cursor, substitute the result for cursor.
    except Exception:
#ANNOTATION: if Exception exception is caught,
        cursor = None
#ANNOTATION: cursor is None.

    try:
#ANNOTATION: try, 
        # Figure out which tables already exist
        if cursor:
#ANNOTATION: if cursor is true,
            table_names = connection.introspection.table_names(cursor)
#ANNOTATION: call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
        else:
#ANNOTATION: if not,
            table_names = []
#ANNOTATION: table_names is an empty list.

        output = []
#ANNOTATION: output is an empty list.

        # Output DROP TABLE statements for standard application tables.
        to_delete = set()
#ANNOTATION: to_delete is an empty set.

        references_to_delete = {}
#ANNOTATION: references_to_delete is an empty dictionary.
        app_models = router.get_migratable_models(app_config, connection.alias, include_auto_created=True)
#ANNOTATION: call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
        for model in app_models:
#ANNOTATION: for every model in app_models,
            if cursor and connection.introspection.table_name_converter(model._meta.db_table) in table_names:
#ANNOTATION: if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment: #ANNOTATION: model._meta.db_table is contained in table_names,
                # The table exists, so it needs to be dropped
                opts = model._meta
#ANNOTATION: substitute model._meta for opts.
                for f in opts.local_fields:
#ANNOTATION: for every f in opts.local_fields,
                    if f.rel and f.rel.to not in to_delete:
#ANNOTATION: if f.rel and f.rel.to are not contained in to_delete,
                        references_to_delete.setdefault(f.rel.to, []).append((model, f))
#ANNOTATION: call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.

                to_delete.add(model)
#ANNOTATION: call the method to_delete.add with an argument model.

        for model in app_models:
#ANNOTATION: for every model in app_models,
            if connection.introspection.table_name_converter(model._meta.db_table) in table_names:
#ANNOTATION: if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
                output.extend(connection.creation.sql_destroy_model(model, references_to_delete, style))
#ANNOTATION: call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
    finally:
#ANNOTATION: finally perform,
        # Close database connection explicitly, in case this output is being piped
        # directly into a database client, to avoid locking issues.
        if cursor and close_connection:
#ANNOTATION: if both cursor and close_connection are true,
            cursor.close()
#ANNOTATION: call the method cursor.close, 
            connection.close()
#ANNOTATION: call the method connection.close, 

    return output[::-1]  # Reverse it, to deal with table dependencies.
#ANNOTATION: return reversed list output.


def sql_flush(style, connection, only_django=False, reset_sequences=True, allow_cascade=False):
#ANNOTATION: define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False, 
#ANNOTATION: reset_sequences set to boolean True and allow_cascade set to boolean False.
    """
    Returns a list of the SQL statements used to flush the database.

    If only_django is True, then only table names that have associated Django
    models and are in INSTALLED_APPS will be included.
    """
#ANNOTATION: docstring
    if only_django:
#ANNOTATION: if only_django, 
        tables = connection.introspection.django_table_names(only_existing=True)
#ANNOTATION: call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
    else:
#ANNOTATION: if not,
        tables = connection.introspection.table_names()
#ANNOTATION: call the method connection.introspection.table_names, substitute the result for tables.
    seqs = connection.introspection.sequence_list() if reset_sequences else ()
#ANNOTATION: call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
    statements = connection.ops.sql_flush(style, tables, seqs, allow_cascade)
#ANNOTATION: call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
    return statements
#ANNOTATION: return statements.


def sql_custom(app_config, style, connection):
#ANNOTATION: define the function sql_custom with 3 arguments: app_config, style and connection.
    "Returns a list of the custom table modifying SQL statements for the given app."
#ANNOTATION: docstring

    check_for_migrations(app_config, connection)
#ANNOTATION: call the method check_for_migrations with arguments: app_config and connection.

    output = []
#ANNOTATION: output is an empty list.

    app_models = router.get_migratable_models(app_config, connection.alias)
#ANNOTATION: call the method router.get_migratable_models with arguments app_config and connection.alias.

    for model in app_models:
#ANNOTATION: for every model in app_models,
        output.extend(custom_sql_for_model(model, style, connection))
#ANNOTATION: call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.

    return output
#ANNOTATION: return output.


def sql_indexes(app_config, style, connection):
#ANNOTATION: define the function sql_indexes with 3 arguments: app_config, style and connection.
    "Returns a list of the CREATE INDEX SQL statements for all models in the given app."
#ANNOTATION: docstring

    check_for_migrations(app_config, connection)
#ANNOTATION: call the function check_for_migrations with an arguments app_config and connection.  

    output = []
#ANNOTATION: outut is an empty list.
    for model in router.get_migratable_models(app_config, connection.alias, include_auto_created=True):
#ANNOTATION: for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias, 
#ANNOTATION: and include_auto_created set to boolean True,
        output.extend(connection.creation.sql_indexes_for_model(model, style))
#ANNOTATION: call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
    return output
#ANNOTATION: return output.


def sql_destroy_indexes(app_config, style, connection):
#ANNOTATION: define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
    "Returns a list of the DROP INDEX SQL statements for all models in the given app."
#ANNOTATION: docstring

    check_for_migrations(app_config, connection)
#ANNOTATION: call the function check_for_migrations with arguments app_config and connection.

    output = []
#ANNOTATION: output is an empty list.
    for model in router.get_migratable_models(app_config, connection.alias, include_auto_created=True):
#ANNOTATION: for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias, 
#ANNOTATION: and include_auto_created set to boolean True,
        output.extend(connection.creation.sql_destroy_indexes_for_model(model, style))
#ANNOTATION: call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
    return output
#ANNOTATION: return output.


def sql_all(app_config, style, connection):
#ANNOTATION: define the function sql_all with 3 arguments: app_config, style and connection.

    check_for_migrations(app_config, connection)
#ANNOTATION: call the function check_for_migrations with arguments app_config and connection.

    "Returns a list of CREATE TABLE SQL, initial-data inserts, and CREATE INDEX SQL for the given module."
#ANNOTATION: docstring
    return sql_create(app_config, style, connection) + sql_custom(app_config, style, connection) + sql_indexes(app_config, style, connection)
#ANNOTATION: use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions, #ANNOTATION: append the results respectively, return the result.


def _split_statements(content):
#ANNOTATION: define the function _split_statements with an argument content.
    # Private API only called from code that emits a RemovedInDjango19Warning.
    comment_re = re.compile(r"^((?:'[^']*'|[^'])*?)--.*$")
#ANNOTATION: call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
    statements = []
#ANNOTATION: statements is an empty list.
    statement = []
#ANNOTATION: statement is an empty list.
    for line in content.split("\n"):
#ANNOTATION: split content by newline character, for every line in result,
        cleaned_line = comment_re.sub(r"\1", line).strip()
#ANNOTATION: call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
        if not cleaned_line:
#ANNOTATION: if cleaned_line is false,
            continue
#ANNOTATION: skip this loop iteration,
        statement.append(cleaned_line)
#ANNOTATION: append cleaned_lien to statement.
        if cleaned_line.endswith(";"):
#ANNOTATION: if cleaned_line ends with ';' character,
            statements.append(" ".join(statement))
#ANNOTATION: join statements into a string, separated by white spaces, append it to statements.
            statement = []
#ANNOTATION: statement is an empty list.
    return statements
#ANNOTATION: return statements.


def custom_sql_for_model(model, style, connection):
#ANNOTATION: define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
    opts = model._meta
#ANNOTATION: substitute model._meta for opts.
    app_dirs = []
#ANNOTATION: app_dirs is an empty list.
    app_dir = apps.get_app_config(model._meta.app_label).path
#ANNOTATION: call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
    app_dirs.append(os.path.normpath(os.path.join(app_dir, 'sql')))
#ANNOTATION: join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
#ANNOTATION: append the result to app_dirs.

    # Deprecated location -- remove in Django 1.9
    old_app_dir = os.path.normpath(os.path.join(app_dir, 'models/sql'))
#ANNOTATION: join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
#ANNOTATION: append the result to old_app_dirs.
    if os.path.exists(old_app_dir):
#ANNOTATION: if file path old_app_dir exists,
        warnings.warn("Custom SQL location '<app_label>/models/sql' is "
                      "deprecated, use '<app_label>/sql' instead.",
                      RemovedInDjango19Warning)
#ANNOTATION: call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
        app_dirs.append(old_app_dir)
#ANNOTATION: append old_app_dir to app_dirs.

    output = []
#ANNOTATION: output is an empty list.

    # Post-creation SQL should come before any initial SQL data is loaded.
    # However, this should not be done for models that are unmanaged or
    # for fields that are part of a parent model (via model inheritance).
    if opts.managed:
#ANNOTATION: if opts.managed is true,
        post_sql_fields = [f for f in opts.local_fields if hasattr(f, 'post_create_sql')]
#ANNOTATION: for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
        for f in post_sql_fields:
#ANNOTATION: for every f in post_sql_fields,
            output.extend(f.post_create_sql(style, model._meta.db_table))
#ANNOTATION: call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.

    # Find custom SQL, if it's available.
    backend_name = connection.settings_dict['ENGINE'].split('.')[-1]
#ANNOTATION: once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
    sql_files = []
#ANNOTATION: sql_files is an empty list.
    for app_dir in app_dirs:
#ANNOTATION: for every app_dir in app_dirs,
        sql_files.append(os.path.join(app_dir, "%s.%s.sql" % (opts.model_name, backend_name)))
#ANNOTATION: join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively, 
#ANNOTATION: append the result to sql_files. 
        sql_files.append(os.path.join(app_dir, "%s.sql" % opts.model_name))
#ANNOTATION: join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
    for sql_file in sql_files:
#ANNOTATION: for every sql_file in sql_files,
        if os.path.exists(sql_file):
#ANNOTATION: if file path sql_file exists,
            with codecs.open(sql_file, 'r', encoding=settings.FILE_CHARSET) as fp:
#ANNOTATION: call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
                output.extend(connection.ops.prepare_sql_script(fp.read(), _allow_fallback=True))
#ANNOTATION: call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,
#ANNOTATION: and _allow_fallback set to boolean True, extend the output with the result. 
    return output
#ANNOTATION: return output.


def emit_pre_migrate_signal(create_models, verbosity, interactive, db):
#ANNOTATION: define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
    # Emit the pre_migrate signal for every application.
    for app_config in apps.get_app_configs():
#ANNOTATION: for app_config in return value of the method apps.get_app_configs,
        if app_config.models_module is None:
#ANNOTATION: if app_config.models_module is None,
            continue
#ANNOTATION: skip this loop iteration,
        if verbosity >= 2:
#ANNOTATION: if verbosity is greater or equal to integer 2,
            print("Running pre-migrate handlers for application %s" % app_config.label)
#ANNOTATION: replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
        models.signals.pre_migrate.send(
            sender=app_config,
            app_config=app_config,
            verbosity=verbosity,
            interactive=interactive,
            using=db)
#ANNOTATION: call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
#ANNOTATION: verbosity set to verbosity, interactive set to interactive and using set to db.
        # For backwards-compatibility -- remove in Django 1.9.
        models.signals.pre_syncdb.send(
            sender=app_config.models_module,
            app=app_config.models_module,
            create_models=create_models,
            verbosity=verbosity,
            interactive=interactive,
            db=db)
#ANNOTATION: call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module, 
#ANNOTATION: app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,
#ANNOTATION: and db set to db.


def emit_post_migrate_signal(created_models, verbosity, interactive, db):
#ANNOTATION: define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
    # Emit the post_migrate signal for every application.
    for app_config in apps.get_app_configs():
#ANNOTATION: for app_config in return value of the method apps.get_app_configs,
        if app_config.models_module is None:
#ANNOTATION: if app_config.models_module is None,
            continue
#ANNOTATION: skip this loop iteration,
        if verbosity >= 2:
#ANNOTATION: if verbosity is greater or equal to integer 2,
            print("Running post-migrate handlers for application %s" % app_config.label)
#ANNOTATION: replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
        models.signals.post_migrate.send(
            sender=app_config,
            app_config=app_config,
            verbosity=verbosity,
            interactive=interactive,
            using=db)
#ANNOTATION: call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
#ANNOTATION: verbosity set to verbosity, interactive set to interactive and using set to db.
        # For backwards-compatibility -- remove in Django 1.9.
        models.signals.post_syncdb.send(
            sender=app_config.models_module,
            app=app_config.models_module,
            created_models=created_models,
            verbosity=verbosity,
            interactive=interactive,
            db=db)
#ANNOTATION: call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
#ANNOTATION: app set to app_config.models_module, created_models set to created_models, verbosity set to verbosity, interactive set to interactive,
#ANNOTATION: and db set to db.

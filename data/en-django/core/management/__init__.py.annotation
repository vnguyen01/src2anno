from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

import collections
#ANNOTATION: import module collections.
from importlib import import_module
#ANNOTATION: from importlib import import_module into default name space.
import os
#ANNOTATION: import module os.
import sys
#ANNOTATION: import module sys.

import django
#ANNOTATION: import module django.
from django.apps import apps
#ANNOTATION: from django.apps import apps into default name space.
from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.core.exceptions import ImproperlyConfigured
#ANNOTATION: from django.core.exceptions import ImproperlyConfigured into default name space.
from django.core.management.base import (BaseCommand, CommandError,
    CommandParser, handle_default_options)
#ANNOTATION: from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
from django.core.management.color import color_style
#ANNOTATION: from django.core.management.color import color_style into default name space.
from django.utils import lru_cache
#ANNOTATION: from django.utils import lru_cache into default name space.
from django.utils import six
#ANNOTATION: from django.utils import six into default name space.


def find_commands(management_dir):
#ANNOTATION: define the function find_commands with an argument management_dir.
    """
    Given a path to a management directory, returns a list of all the command
    names that are available.

    Returns an empty list if no commands are defined.
    """
#ANNOTATION: docstring
    command_dir = os.path.join(management_dir, 'commands')
#ANNOTATION: join management_dir and string 'commands' into a file path name, substitute it for command_dir.
    try:
#ANNOTATION: try,
        return [f[:-3] for f in os.listdir(command_dir)
                if not f.startswith('_') and f.endswith('.py')]
#ANNOTATION: for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list. 
    except OSError:
#ANNOTATION: if OSError exception is caught,
        return []
#ANNOTATION: return an empty list.


def load_command_class(app_name, name):
#ANNOTATION: define the function load_command_class with arguments: app_name and name.
    """
    Given a command name and an application name, returns the Command
    class instance. All errors raised by the import process
    (ImportError, AttributeError) are allowed to propagate.
    """
#ANNOTATION: docstring
    module = import_module('%s.management.commands.%s' % (app_name, name))
#ANNOTATION: replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the 
#ANNOTATION: import_module function, substitute the result for module.
    return module.Command()
#ANNOTATION: return an instance of the module.Command class.


@lru_cache.lru_cache(maxsize=None)
#ANNOTATION: decorator lru_cache.lru_cache with an argument maxsize set to None.
def get_commands():
#ANNOTATION: define the function get_commands.
    """
    Returns a dictionary mapping command names to their callback applications.

    This works by looking for a management.commands package in django.core, and
    in each installed application -- if a commands package exists, all commands
    in that package are registered.

    Core commands are always included. If a settings module has been
    specified, user-defined commands will also be included.

    The dictionary is in the format {command_name: app_name}. Key-value
    pairs from this dictionary can then be used in calls to
    load_command_class(app_name, command_name)

    If a specific version of a command must be loaded (e.g., with the
    startapp command), the instantiated module can be placed in the
    dictionary in place of the application name.

    The dictionary is cached on the first call and reused on subsequent
    calls.
    """
#ANNOTATION: docstring
    commands = {name: 'django.core' for name in find_commands(__path__[0])}
#ANNOTATION: commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.  

    if not settings.configured:
#ANNOTATION: if settings.configured is false,
        return commands
#ANNOTATION: return commands.

    for app_config in reversed(list(apps.get_app_configs())):
#ANNOTATION: for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
        path = os.path.join(app_config.path, 'management')
#ANNOTATION: join app_config.path and string 'management' into a file path, substitute it for path.
        commands.update({name: app_config.name for name in find_commands(path)})
#ANNOTATION: call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.

    return commands
#ANNOTATION: return commands.


def call_command(name, *args, **options):
#ANNOTATION: define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
    """
    Calls the given command, with the given options and args/kwargs.

    This is the primary API you should use for calling specific commands.

    Some examples:
        call_command('syncdb')
        call_command('shell', plain=True)
        call_command('sqlall', 'myapp')
    """
#ANNOTATION: docstring
    # Load the command object.
    try:
#ANNOTATION: try,
        app_name = get_commands()[name]
#ANNOTATION: call the function get_commands, substitute the value under the name key of the return value, for app_name.
    except KeyError:
#ANNOTATION: if KeyError exception is caught,
        raise CommandError("Unknown command: %r" % name)
#ANNOTATION: raise an CommandError exception with an argument string "Unknown command: %r", with '%r' replaced by name.

    if isinstance(app_name, BaseCommand):
#ANNOTATION: if app_name is an instance of BaseCommand,
        # If the command is already loaded, use it directly.
        command = app_name
#ANNOTATION: substitute app_namefor command.
    else:
#ANNOTATION: if not,
        command = load_command_class(app_name, name)
#ANNOTATION: call the function load_command_class with arguments: app_name and name, substitute the result for command.

    # Simulate argument parsing to get the option defaults (see #10080 for details).
    parser = command.create_parser('', name)
#ANNOTATION: all the method command.create_parser with arguments: empty and name, substitute the result for parser.
    if command.use_argparse:
#ANNOTATION: if command.use_argparse is true,
        defaults = parser.parse_args(args=args)
#ANNOTATION: call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
        defaults = dict(defaults._get_kwargs(), **options)
#ANNOTATION: create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.
    else:
#ANNOTATION: if not,
        # Legacy optparse method
        defaults, _ = parser.parse_args(args=[])
#ANNOTATION: call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
        defaults = dict(defaults.__dict__, **options)
#ANNOTATION: create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.

    return command.execute(*args, **defaults)
#ANNOTATION: call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.


class ManagementUtility(object):
#ANNOTATION: derive the class ManagementUtility from object base class.
    """
    Encapsulates the logic of the django-admin.py and manage.py utilities.

    A ManagementUtility has a number of commands, which can be manipulated
    by editing the self.commands dictionary.
    """
#ANNOTATION: docstring
    def __init__(self, argv=None):
#ANNOTATION: define the method __init__ with arguments: self class instance and argv set to None.
        self.argv = argv or sys.argv[:]
#ANNOTATION: if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
        self.prog_name = os.path.basename(self.argv[0])
#ANNOTATION: call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.
        self.settings_exception = None
#ANNOTATION: self.settings_exception is None.

    def main_help_text(self, commands_only=False):
#ANNOTATION: define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
        """
        Returns the script's main help text, as a string.
        """
#ANNOTATION: docstring
        if commands_only:
#ANNOTATION: if commands_only is true,
            usage = sorted(get_commands().keys())
#ANNOTATION: call the function get_commands, call the method keys on the result, substitute sorted result for usage.
        else:
#ANNOTATION: if not,
            usage = [
                "",
                "Type '%s help <subcommand>' for help on a specific subcommand." % self.prog_name,
                "",
                "Available subcommands:",
            ]
#ANNOTATION: usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.",
#ANNOTATION: where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".
            commands_dict = collections.defaultdict(lambda: [])
#ANNOTATION: call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list,
#ANNOTATION: substitute the result for commands_dict.
            for name, app in six.iteritems(get_commands()):
#ANNOTATION: for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment, 
                if app == 'django.core':
#ANNOTATION: if app equals a string 'django.core',
                    app = 'django'
#ANNOTATION: app is a string 'django'
                else:
#ANNOTATION: if not,
                    app = app.rpartition('.')[-1]
#ANNOTATION: call the method app.rpartition with an argument '.', substitute last element of the result for app.
                commands_dict[app].append(name)
#ANNOTATION: append name to the value of under the app key of the commands_dict.
            style = color_style()
#ANNOTATION: call the color_style function, substitute the result for style.
            for app in sorted(commands_dict.keys()):
#ANNOTATION: for every app in sorted return value of the commands_dict.keys function,
                usage.append("")
#ANNOTATION: append an empty string to usage.
                usage.append(style.NOTICE("[%s]" % app))
#ANNOTATION: call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
                for name in sorted(commands_dict[app]):
#ANNOTATION: for every name in sorted value under the app key of the commands_dict dictionary,
                    usage.append("    %s" % name)
#ANNOTATION: append string "    %s", where '%s' is replaced by name to the usage.
            # Output an extra note if settings are not properly configured
            if self.settings_exception is not None:
#ANNOTATION: if self.settings_exception is not None,
                usage.append(style.NOTICE(
                    "Note that only Django core commands are listed "
                    "as settings are not properly configured (error: %s)."
                    % self.settings_exception))
#ANNOTATION: call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.

        return '\n'.join(usage)
#ANNOTATION: join usage elements in a string separated by newline characters, return it.

    def fetch_command(self, subcommand):
#ANNOTATION: define the method fetch_command, with arguments self and subcommand. 
        """
        Tries to fetch the given subcommand, printing a message with the
        appropriate command called from the command line (usually
        "django-admin.py" or "manage.py") if it can't be found.
        """
#ANNOTATION: docstring
        # Get commands outside of try block to prevent swallowing exceptions
        commands = get_commands()
#ANNOTATION: call the function get_commands, substitute it for commands.
        try:
#ANNOTATION: try,
            app_name = commands[subcommand]
#ANNOTATION: substitute value under the subcommand key of the commands dictionary for app_name.
        except KeyError:
#ANNOTATION: if KeyError exception is caught,
            # This might trigger ImproperlyConfigured (masked in get_commands)
            settings.INSTALLED_APPS
#ANNOTATION: call settings.INSTALLED_APPS.
            sys.stderr.write("Unknown command: %r\nType '%s help' for usage.\n" %
                (subcommand, self.prog_name))
#ANNOTATION: call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n", 
#ANNOTATION: where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.
            sys.exit(1)
#ANNOTATION: call the function sys.exit with an argument integer 1.
        if isinstance(app_name, BaseCommand):
#ANNOTATION: if app_name is an instance of BaseCommands.
            # If the command is already loaded, use it directly.
            klass = app_name
#ANNOTATION: substitute app_name for klass.
        else:
#ANNOTATION: if not,
            klass = load_command_class(app_name, subcommand)
#ANNOTATION: call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
        return klass
#ANNOTATION: return klass.

    def autocomplete(self):
#ANNOTATION: define the method autocomplete with an argument self.
        """
        Output completion suggestions for BASH.

        The output of this function is passed to BASH's `COMREPLY` variable and
        treated as completion suggestions. `COMREPLY` expects a space
        separated string as the result.

        The `COMP_WORDS` and `COMP_CWORD` BASH environment variables are used
        to get information about the cli input. Please refer to the BASH
        man-page for more information about this variables.

        Subcommand options are saved as pairs. A pair consists of
        the long option string (e.g. '--exclude') and a boolean
        value indicating if the option requires arguments. When printing to
        stdout, an equal sign is appended to options which require arguments.

        Note: If debugging this function, it is recommended to write the debug
        output in a separate file. Otherwise the debug output will be treated
        and formatted as potential completion suggestions.
        """
#ANNOTATION: docstring
        # Don't complete if user hasn't sourced bash_completion file.
        if 'DJANGO_AUTO_COMPLETE' not in os.environ:
#ANNOTATION: if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
            return
#ANNOTATION: return nothing.

        cwords = os.environ['COMP_WORDS'].split()[1:]
#ANNOTATION: slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
        cword = int(os.environ['COMP_CWORD'])
#ANNOTATION: convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.

        try:
#ANNOTATION: try,
            curr = cwords[cword - 1]
#ANNOTATION: substitute cwords element at the cword decremented by 1 index for curr.
        except IndexError:
#ANNOTATION: if IndexError exception is caugh,
            curr = ''
#ANNOTATION: curr is an empty string.

        subcommands = list(get_commands()) + ['help']
#ANNOTATION: call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.
        options = [('--help', None)]
#ANNOTATION: options is a list containing a tuple with 2 entries: string '--help' and None.

        # subcommand
        if cword == 1:
#ANNOTATION: if cword equlals a integer 1,
            print(' '.join(sorted(filter(lambda x: x.startswith(curr), subcommands))))
#ANNOTATION: filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith, 
#ANNOTATION: with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.
        # subcommand options
        # special case: the 'help' subcommand has no options
        elif cwords[0] in subcommands and cwords[0] != 'help':
#ANNOTATION: otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
            subcommand_cls = self.fetch_command(cwords[0])
#ANNOTATION: call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.
            # special case: 'runfcgi' stores additional options as
            # 'key=value' pairs
            if cwords[0] == 'runfcgi':
#ANNOTATION: if first element of cwords equals a string 'runfcgi',
                from django.core.servers.fastcgi import FASTCGI_OPTIONS
#ANNOTATION: from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
                options += [(k, 1) for k in FASTCGI_OPTIONS]
#ANNOTATION: append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
            # special case: add the names of installed apps to options
            elif cwords[0] in ('dumpdata', 'sql', 'sqlall', 'sqlclear',
                    'sqlcustom', 'sqlindexes', 'sqlsequencereset', 'test'): 
#ANNOTATION: otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',
#ANNOTATIOn: 'sqlindexes', 'sqlsequencereset' and 'test',
                try:
#ANNOTATION: try,
                    app_configs = apps.get_app_configs()
#ANNOTATION: call the method apps.get_app_configs, substitute the result for app_configs.
                    # Get the last part of the dotted path as the app name.
                    options += [(app_config.label, 0) for app_config in app_configs]
#ANNOTATION: append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
                except ImportError:
#ANNOTATION: if ImportError exception is caught,
                    # Fail silently if DJANGO_SETTINGS_MODULE isn't set. The
                    # user will find out once they execute the command.
                    pass
#ANNOTATION: do nothing.
            parser = subcommand_cls.create_parser('', cwords[0])
#ANNOTATION: call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
            if subcommand_cls.use_argparse:
#ANNOTATION: if subcommand_cls.use_argparse is true,
                options += [(sorted(s_opt.option_strings)[0], s_opt.nargs != 0) for s_opt in
                            parser._actions if s_opt.option_strings]
#ANNOTATION: append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings,
#ANNOTATION: and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions, 
#ANNOTATION: only if s_opt.option_strings is true,
            else:
#ANNOTATION: if not,
                options += [(s_opt.get_opt_string(), s_opt.nargs) for s_opt in
                            parser.option_list]
#ANNOTATION: append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs, 
#ANNOTATION: for every s_opt in parser.option_list.
            # filter out previously specified options from available options
            prev_opts = [x.split('=')[0] for x in cwords[1:cword - 1]]
#ANNOTATION: for every x in slice of cwords from the second element to the element at the cword decremented by 1 index, 
#ANNOTATION: split x by character '=' and append first element of the result to the prev_opts list.
            options = [opt for opt in options if opt[0] not in prev_opts]
#ANNOTATION: for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.

            # filter options by current input
            options = sorted((k, v) for k, v in options if k.startswith(curr))
#ANNOTATION: append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr, 
#ANNOTATION: sort the result and substitute it for options.
            for option in options:
#ANNOTATION: for every option in options,
                opt_label = option[0]
#ANNOTATION: substitute first element of options for opt_label.
                # append '=' to options which require args
                if option[1]:
#ANNOTATION: if second element of options is true,
                    opt_label += '='
#ANNOTATION: append '=' to opt_label.
                print(opt_label)
#ANNOTATION: print opt_label to the standard output.
        sys.exit(1)
#ANNOTATION: call the function sys.exit with an integer 1 as an argument.

    def execute(self):
#ANNOTATION: define the method execute with an argument self,
        """
        Given the command-line arguments, this figures out which subcommand is
        being run, creates a parser appropriate to that command, and runs it.
        """
#ANNOTATION: docstring
        try:
#ANNOTATION: try,
            subcommand = self.argv[1]
#ANNOTATION: substitute first element of self.argv for subcommand.
        except IndexError:
#ANNOTATION: if IndexError exception is caught,
            subcommand = 'help'  # Display help if no arguments were given.
#ANNOTATION: subcommand is a string 'help'.

        # Preprocess options to extract --settings and --pythonpath.
        # These options could affect the commands that are available, so they
        # must be processed early.
        parser = CommandParser(None, usage="%(prog)s subcommand [options] [args]", add_help=False)
#ANNOTATION: parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string "%(prog)s subcommand [options] [args]" and add_help set to boolean False.
        parser.add_argument('--settings')
#ANNOTATION: call the method parser.add_argument with an argument string '--settings'.
        parser.add_argument('--pythonpath')
#ANNOTATION: call the method parser.add_argument with an argument string '--pythonpath'.
        parser.add_argument('args', nargs='*')  # catch-all
#ANNOTATION: call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
        try:
#ANNOTATION: try,
            options, args = parser.parse_known_args(self.argv[2:])
#ANNOTATION: call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options,
#ANNOTATION: and args, respectively. 
            handle_default_options(options)
#ANNOTATION: call the method handle_default_options with an argument options.
        except CommandError:
#ANNOTATION: if CommandError exception is caught,
            pass  # Ignore any option errors at this point.
#ANNOTATION: do nothing.

        no_settings_commands = [
            'help', 'version', '--help', '--version', '-h',
            'compilemessages', 'makemessages',
            'startapp', 'startproject',
        ]
#ANNOTATION: no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',
#ANNOTATION: 'startapp' and 'startproject'.

        try:
#ANNOTATION: try,
            settings.INSTALLED_APPS
#ANNOTATION: call the settings.INSTALLED_APPS.
        except ImproperlyConfigured as exc:
#ANNOTATION: if ImproperlyConfigured renamed to exc, exception is caught,
            self.settings_exception = exc
#ANNOTATION: substitute exc for self.settings_exception,
            # A handful of built-in management commands work without settings.
            # Load the default settings -- where INSTALLED_APPS is empty.
            if subcommand in no_settings_commands:
#ANNOTATION: if subcommand is contained in no_settings_commands,
                settings.configure()
#ANNOTATION: call the method settings.configure.

        if settings.configured:
#ANNOTATION: if settings.configured is true,
            django.setup()
#ANNOTATION: call the method django.setup.

        self.autocomplete()
#ANNOTATION: call the method self.autocomplete.

        if subcommand == 'help':
#ANNOTATION: if subcommand equals to a string 'help'.
            if '--commands' in args:
#ANNOTATION: if string '--commands' is contained in args,
                sys.stdout.write(self.main_help_text(commands_only=True) + '\n')
#ANNOTATION: call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.
            elif len(options.args) < 1:
#ANNOTATION: otherwise, length of options.args is lesser than integer 1,
                sys.stdout.write(self.main_help_text() + '\n')
#ANNOTATION: call the method self.main_help_text append new line to it, write it to sys.stdout.
            else:
#ANNOTATION: if not,
                self.fetch_command(options.args[0]).print_help(self.prog_name, options.args[0])
#ANNOTATION: call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,
#ANNOTATION: with 2 arguments: self.prog_name and first element of options.args.
        # Special-cases: We want 'django-admin.py --version' and
        # 'django-admin.py --help' to work, for backwards compatibility.
        elif subcommand == 'version' or self.argv[1:] == ['--version']:
#ANNOTATION: otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'
            sys.stdout.write(django.get_version() + '\n')
#ANNOTATION: call the method django.get_version append new line to it, write it to sys.stdout.
        elif self.argv[1:] in (['--help'], ['-h']):
#ANNOTATION: if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help',
#ANNOTATION: and a list containing a string '-h',
            sys.stdout.write(self.main_help_text() + '\n')
#ANNOTATION: call the method self.main_help_text, append new line to it, write it to sys.stdout.
        else:
#ANNOTATION: if not,
            self.fetch_command(subcommand).run_from_argv(self.argv)
#ANNOTATION: call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.


def execute_from_command_line(argv=None):
#ANNOTATION: define the function execute_from_command_line with an argument argv set to None.
    """
    A simple method that runs a ManagementUtility.
    """
#ANNOTATION: docstring
    utility = ManagementUtility(argv)
#ANNOTATION: utility is a instance of ManagementUtility class, created with an argument argv.
    utility.execute()
#ANNOTATION: call the method utility.execute.

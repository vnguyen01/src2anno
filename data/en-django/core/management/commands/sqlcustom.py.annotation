from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

from django.core.management.base import AppCommand
#ANNOTATION: from django.core.management.base import AppCommand into default name space.
from django.core.management.sql import sql_custom
#ANNOTATION: from django.core.management.sql import sql_custom into default name space.
from django.db import connections, DEFAULT_DB_ALIAS
#ANNOTATION: from django.db import connections and DEFAULT_DB_ALIAS into default name space.


class Command(AppCommand):
#ANNOTATION: derive class Command from the base class AppCommand. 
    help = "Prints the custom table modifying SQL statements for the given app name(s)."
#ANNOTATION: help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".

    output_transaction = True
#ANNOTATION: substitute True for output_transaction. 

    def add_arguments(self, parser):
#ANNOTATION: define method add_arguments with class instance self and parser as the input arguments.
        super(Command, self).add_arguments(parser)
#ANNOTATION: call the function add_arguments with parser as an argument, from the base class of the Command class. 
        parser.add_argument('--database', default=DEFAULT_DB_ALIAS,
            help='Nominates a database to print the SQL for. Defaults to the '
                 '"default" database.')
#ANNOTATION: call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,
#ANNOTATION: 'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.

    def handle_app_config(self, app_config, **options):
#ANNOTATION: define method handle_app_config with self class instance, app_config and dictionary options as arguments.
        if app_config.models_module is None:
#ANNOTATION: if app_config.models_module is None,
            return
#ANNOTATION: return nothing.
        connection = connections[options['database']]
#ANNOTATION: extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.
        statements = sql_custom(app_config, self.style, connection)
#ANNOTATION: call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
        return '\n'.join(statements)
#ANNOTATION: join the list of statements into a string separated by new lines, return it.

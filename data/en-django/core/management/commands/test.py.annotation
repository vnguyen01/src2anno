import logging
#ANNOTATION: import module logging.
import sys
#ANNOTATION: import module sys.
import os
#ANNOTATION: import module os.

from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.core.management.base import BaseCommand
#ANNOTATION: from django.core.management.base import BaseCommand into default name space.
from django.test.utils import get_runner
#ANNOTATION: from django.test.utils import get_runner into default name space.


class Command(BaseCommand):
#ANNOTATION: derive class Command from the BaseCommand base class.
    help = 'Discover and run tests in the specified modules or the current directory.'
#ANNOTATION: help is a string 'Discover and run tests in the specified modules or the current directory.'.

    requires_system_checks = False
#ANNOTATION: requires_system_checks is boolean False.

    def __init__(self):
#ANNOTATION: define the method __init__ with an argument self.
        self.test_runner = None
#ANNOTATION: self.test_runner is None.
        super(Command, self).__init__()
#ANNOTATION: call the method __init__ form the base class of the Command class.

    def run_from_argv(self, argv):
#ANNOTATION: define the method run_from_argv with arguments self and argv.
        """
        Pre-parse the command line to extract the value of the --testrunner
        option. This allows a test runner to define additional command line
        arguments.
        """
#ANNOTATION: docstring
        option = '--testrunner='
#ANNOTATION: option is a string '--testrunner='.
        for arg in argv[2:]:
#ANNOTATION: for arg in argv list without the first two elements,
            if arg.startswith(option):
#ANNOTATION: if arg starts with options,
                self.test_runner = arg[len(option):]
#ANNOTATION: get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
                break
#ANNOTATION: break the loop execution.
        super(Command, self).run_from_argv(argv)
#ANNOTATION: call the run_from_argv function from the base class of the Command class with argv as a argument,.

    def add_arguments(self, parser):
#ANNOTATION: define the method add_arguments with arguments self and parser.
        parser.add_argument('args', metavar='test_label', nargs='*',
            help='Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method')
#ANNOTATION: call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',
#ANNOTATION: and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.
        parser.add_argument('--noinput',
            action='store_false', dest='interactive', default=True,
            help='Tells Django to NOT prompt the user for input of any kind.'),
#ANNOTATION: call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',
#ANNOTATION: default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.
        parser.add_argument('--failfast',
            action='store_true', dest='failfast', default=False,
            help='Tells Django to stop running the test suite after first '
                 'failed test.'),
#ANNOTATION: call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',
#ANNOTATION: default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.
        parser.add_argument('--testrunner',
            action='store', dest='testrunner',
            help='Tells Django to use specified test runner class instead of '
                 'the one specified by the TEST_RUNNER setting.'),
#ANNOTATION: call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',
#ANNOTATION: and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.
        parser.add_argument('--liveserver',
            action='store', dest='liveserver', default=None,
            help='Overrides the default address where the live server (used '
                 'with LiveServerTestCase) is expected to run from. The '
                 'default value is localhost:8081.'),
#ANNOTATION: call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',
#ANNOTATION: default set to None and help set to string 'Overrides the default address where the live server (used '
#ANNOTATION:'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'

        test_runner_class = get_runner(settings, self.test_runner)
#ANNOTATION: call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
        if hasattr(test_runner_class, 'option_list'):
#ANNOTATION: if test_runner_class has an 'option_list' attribute,
            # Keeping compatibility with both optparse and argparse at this level
            # would be too heavy for a non-critical item
            raise RuntimeError(
                "The method to extend accepted command-line arguments by the "
                "test management command has changed in Django 1.8. Please "
                "create an add_arguments class method to achieve this.")
#ANNOTATION: raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the "
#ANNOTATION: "test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."

        if hasattr(test_runner_class, 'add_arguments'):
#ANNOTATION: if test_runner_class has an attribute 'add_arguments',
            test_runner_class.add_arguments(parser)
#ANNOTATION: call the method test_runner_class.add_arguments with an argument parser.

    def execute(self, *args, **options):
#ANNOTATION: define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
        if options['verbosity'] > 0:
#ANNOTATION: if value under the 'verbosity' key of the options dictionary is greater than zero,
            # ensure that deprecation warnings are displayed during testing
            # the following state is assumed:
            # logging.capturewarnings is true
            # a "default" level warnings filter has been added for
            # DeprecationWarning. See django.conf.LazySettings._configure_logging
            logger = logging.getLogger('py.warnings')
#ANNOTATION: call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
            handler = logging.StreamHandler()
#ANNOTATION: call the method logging.StreamHandler, substitute the result for handler.
            logger.addHandler(handler)
#ANNOTATION: call the method logger.addHandler with an argument handler.
        super(Command, self).execute(*args, **options)
#ANNOTATION: call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
        if options['verbosity'] > 0:
#ANNOTATION: if value under the 'verbosity' key of the options dictionary is greater than zero,
            # remove the testing-specific handler
            logger.removeHandler(handler)
#ANNOTATION: call the method logger.removeHandler with an argument handler.

    def handle(self, *test_labels, **options):
#ANNOTATION: define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
        from django.conf import settings
#ANNOTATION: from django.conf import settings into default namespace.
        from django.test.utils import get_runner
#ANNOTATION: from django.test.utils import get_runner into default namespace.

        TestRunner = get_runner(settings, options.get('testrunner'))
#ANNOTATION: call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.

        if options.get('liveserver') is not None:
#ANNOTATION: if value under the 'liveserver' key of the options dictionary is not None,
            os.environ['DJANGO_LIVE_TEST_SERVER_ADDRESS'] = options['liveserver']
#ANNOTATION: substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
            del options['liveserver']
#ANNOTATION: delete the value under the 'liveserver' key of the options dictionary.

        test_runner = TestRunner(**options)
#ANNOTATION: test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
        failures = test_runner.run_tests(test_labels)
#ANNOTATION: call the method test_runner.run_tests with an argument test_labels, substitute it for failures.

        if failures:
#ANNOTATION: if failures is true,
            sys.exit(bool(failures))
#ANNOTATION: exit the program with failures converted to boolean as a message.

from importlib import import_module
#ANNOTATION: from importlib import import_module into default name space.

from django.core.management.base import CommandError
#ANNOTATION: from django.core.management.base import CommandError into default name space.
from django.core.management.templates import TemplateCommand
#ANNOTATION: from django.core.management.templates import TemplateCommand into default name space.
from django.utils.crypto import get_random_string
#ANNOTATION: from django.utils.crypto import get_random_string into default name space.


class Command(TemplateCommand):
#ANNOTATION: derive class Command from the TemplateCommand base class.
    help = ("Creates a Django project directory structure for the given "
            "project name in the current directory or optionally in the "
            "given directory.")
#ANNOTATION: help is a tuple containing string "Creates a Django project directory structure for the given "
#ANNOTATION: "project name in the current directory or optionally in the given directory.".
    missing_args_message = "You must provide a project name."
#ANNOTATION: missing_args_message is a string "You must provide a project name.".

    def handle(self, **options):
#ANNOTATION: define the method handle with arguments self and unpacked dictionary options.
        project_name, target = options.pop('name'), options.pop('directory')
#ANNOTATION: remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
        self.validate_name(project_name, "project")
#ANNOTATION: call the method self.validate_name with arguments project_name and string "project".

        # Check that the project_name cannot be imported.
        try:
#ANNOTATION: try,
            import_module(project_name)
#ANNOTATION: call the function import_module with an argument project_name.
        except ImportError:
#ANNOTATION: if ImportError exception is caught,
            pass
#ANNOTATION: do nothing.
        else:
#ANNOTATION: if not,
            raise CommandError("%r conflicts with the name of an existing "
                               "Python module and cannot be used as a "
                               "project name. Please try another name." %
                               project_name)
#ANNOTATION: raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.

        # Create a random SECRET_KEY to put it in the main settings.
        chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
#ANNOTATION: chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
        options['secret_key'] = get_random_string(50, chars)
#ANNOTATION: call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.

        super(Command, self).handle('project', project_name, target, **options)
#ANNOTATION: call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
#ANNOTATION: and unpacked dictionary options.

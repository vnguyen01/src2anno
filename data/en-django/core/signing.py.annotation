"""
Functions for creating and restoring url-safe signed JSON objects.

The format used looks like this:

>>> signing.dumps("hello")
'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'

There are two components here, separated by a ':'. The first component is a
URLsafe base64 encoded JSON of the object passed to dumps(). The second
component is a base64 encoded hmac/SHA1 hash of "$first_component:$secret"

signing.loads(s) checks the signature and returns the deserialized object.
If the signature fails, a BadSignature exception is raised.

>>> signing.loads("ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk")
u'hello'
>>> signing.loads("ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk-modified")
...
BadSignature: Signature failed: ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk-modified

You can optionally compress the JSON prior to base64 encoding it to save
space, using the compress=True argument. This checks if compression actually
helps and only applies compression if the result is a shorter string:

>>> signing.dumps(range(1, 20), compress=True)
'.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ'

The fact that the string is compressed is signalled by the prefixed '.' at the
start of the base64 JSON.

There are 65 url-safe characters: the 64 used by url-safe base64 and the ':'.
These functions make use of all of them.
"""
#ANNOTATION: docstring

from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

import base64
#ANNOTATION: import module base64.
import json
#ANNOTATION: import module json.
import time
#ANNOTATION: import module time.
import zlib
#ANNOTATION: import module zlib.

from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.utils import baseconv
#ANNOTATION: from django.utils import baseconv into default name space.
from django.utils.crypto import constant_time_compare, salted_hmac
#ANNOTATION: from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
from django.utils.encoding import force_bytes, force_str, force_text
#ANNOTATION: from django.utils.encoding import force_bytes, force_str and force_text into default name space.
from django.utils.module_loading import import_string
#ANNOTATION: from django.utils.module_loading import import_string into default name space.


class BadSignature(Exception):
#ANNOTATION: derive the class BadSignature from the Exception base class.
    """
    Signature does not match
    """
#ANNOTATION: docstring
    pass
#ANNOTATION: do nothing.


class SignatureExpired(BadSignature):
#ANNOTATION: derive the class SignatureExpired from the BadSignature base class.
    """
    Signature timestamp is older than required max_age
    """
#ANNOTATION: docstring
    pass
#ANNOTATION: do nothing.


def b64_encode(s):
#ANNOTATION: define the function b64_encode with an argument s.
    return base64.urlsafe_b64encode(s).strip(b'=')
#ANNOTATION: call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.


def b64_decode(s):
#ANNOTATION: define the function b64_decode with an argument s.
    pad = b'=' * (-len(s) % 4)
#ANNOTATION: calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
    return base64.urlsafe_b64decode(s + pad)
#ANNOTATION: call the method base64.urlsafe_b64decode with sum of s and pad as argument.


def base64_hmac(salt, value, key):
#ANNOTATION: define the function b64_hmac with arguments salt, value and key.
    return b64_encode(salted_hmac(salt, value, key).digest())
#ANNOTATION: call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,
#ANNOTATION: use the result as an argument for the call to the b64_encode function, return the result.


def get_cookie_signer(salt='django.core.signing.get_cookie_signer'):
#ANNOTATION: define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
    Signer = import_string(settings.SIGNING_BACKEND)
#ANNOTATION: call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
    key = force_bytes(settings.SECRET_KEY)
#ANNOTATION: call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
    return Signer(b'django.http.cookies' + key, salt=salt)
#ANNOTATION: create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.


class JSONSerializer(object):
#ANNOTATION: derive the class JSONSerializer from the object base class.
    """
    Simple wrapper around json to be used in signing.dumps and
    signing.loads.
    """
#ANNOTATION: docstring
    def dumps(self, obj):
#ANNOTATION: define the method dumps with arguments self and obj.
        return json.dumps(obj, separators=(',', ':')).encode('latin-1')
#ANNOTATION: call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters, 
#ANNOTATION: call the encode method on the result with string 'latin-1' as an argument, return the result.

    def loads(self, data):
#ANNOTATION: define the method loads with arguments self and data.
        return json.loads(data.decode('latin-1'))
#ANNOTATION: call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.


def dumps(obj, key=None, salt='django.core.signing', serializer=JSONSerializer, compress=False):
#ANNOTATION: define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
#ANNOTATION: serializer set to JSONSerializer and compress set to boolean False.
    """
    Returns URL-safe, sha1 signed base64 compressed JSON string. If key is
    None, settings.SECRET_KEY is used instead.

    If compress is True (not the default) checks if compressing using zlib can
    save some space. Prepends a '.' to signify compression. This is included
    in the signature, to protect against zip bombs.

    Salt can be used to namespace the hash, so that a signed string is
    only valid for a given namespace. Leaving this at the default
    value or re-using a salt value across different parts of your
    application without good cause is a security risk.

    The serializer is expected to return a bytestring.
    """
#ANNOTATION: docstring
    data = serializer().dumps(obj)
#ANNOTATION: call the serializer function, call the dumps method on the result with an argument obj, substitute result for data. 

    # Flag for if it's been compressed or not
    is_compressed = False
#ANNOTATION: is_compressed is boolean False.

    if compress:
#ANNOTATION: if compress is true,
        # Avoid zlib dependency unless compress is being used
        compressed = zlib.compress(data)
#ANNOTATION: call the function zlib.compress with an argument data, substitute the result for compressed.
        if len(compressed) < (len(data) - 1):
#ANNOTATION: if length of compressed is lesser than length of data decremented by 1,
            data = compressed
#ANNOTATION: substitute compressed for data.
            is_compressed = True
#ANNOTATION: is_compressed is boolean True.
    base64d = b64_encode(data)
#ANNOTATION: call the b64_encode function with an argument data, substitute the result for base64d.
    if is_compressed:
#ANNOTATION: if is_compressed is true,
        base64d = b'.' + base64d
#ANNOTATION: prefix the base64d with a '.' character.
    return TimestampSigner(key, salt=salt).sign(base64d)
#ANNOTATION: instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it. 


def loads(s, key=None, salt='django.core.signing', serializer=JSONSerializer, max_age=None):
#ANNOTATION: define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing', 
#ANNOTATION: serializer set to JSONSerializer, max_age set to None.
    """
    Reverse of dumps(), raises BadSignature if signature fails.

    The serializer is expected to accept a bytestring.
    """
#ANNOTATION: docstring
    # TimestampSigner.unsign always returns unicode but base64 and zlib
    # compression operate on bytes.
    base64d = force_bytes(TimestampSigner(key, salt=salt).unsign(s, max_age=max_age))
#ANNOTATION: instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:
#ANNOTATION: s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.
    decompress = False
#ANNOTATION: decompress is boolean False.
    if base64d[:1] == b'.':
#ANNOTATION: if first element of base64d equals to a '.' character,
        # It's compressed; uncompress it first
        base64d = base64d[1:]
#ANNOTATION: substitute first element of base64d for base64d. 
        decompress = True
#ANNOTATION: decompress is boolean True.
    data = b64_decode(base64d)
#ANNOTATION: call the method b64_decode with an argument base64, substitute the result for data.
    if decompress:
#ANNOTATION: if decompress is true,
        data = zlib.decompress(data)
#ANNOTATION: call the function zlib.decompress with an argument data, substitute the result for data.
    return serializer().loads(data)
#ANNOTATION: call the serializer function, call the loads method on the return value with an argument data, return the result.


class Signer(object):
#ANNOTATION: derive the class Signer from the object base class.

    def __init__(self, key=None, sep=':', salt=None):
#ANNOTATION: define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
        # Use of native strings in all versions of Python
        self.sep = force_str(sep)
#ANNOTATION: call the function force_str with an argument sep, substitute the result for self.sep.
        self.key = key or settings.SECRET_KEY
#ANNOTATION: if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
        self.salt = force_str(salt or
            '%s.%s' % (self.__class__.__module__, self.__class__.__name__))
#ANNOTATION: call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,
#ANNOTATION: self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt. 

    def signature(self, value):
#ANNOTATION: define the method signature with arguments self and value.
        signature = base64_hmac(self.salt + 'signer', value, self.key)
#ANNOTATION: call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
        # Convert the signature from bytes to str only on Python 3
        return force_str(signature)
#ANNOTATION: call the function force_str with an argument signature, return the result.

    def sign(self, value):
#ANNOTATION: define the method sign with arguments self and value.
        value = force_str(value)
#ANNOTATION: call the function force_str with an argument value, substitute the result for value.
        return str('%s%s%s') % (value, self.sep, self.signature(value))
#ANNOTATION: convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.

    def unsign(self, signed_value):
#ANNOTATION: define the method unsign with arguments self and signed_value.
        signed_value = force_str(signed_value)
#ANNOTATION: call the function signed_value with an argument value, substitute the result for signed_value.
        if self.sep not in signed_value:
#ANNOTATION: if self.sep is not contained in signed_value,
            raise BadSignature('No "%s" found in value' % self.sep)
#ANNOTATION: raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
        value, sig = signed_value.rsplit(self.sep, 1)
#ANNOTATION: call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
        if constant_time_compare(sig, self.signature(value)):
#ANNOTATION: call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value, #ANNOTATION: if it evaluates to true,
            return force_text(value)
#ANNOTATION: call the force_text function with an argument value, return the result.
        raise BadSignature('Signature "%s" does not match' % sig)
#ANNOTATION: raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.


class TimestampSigner(Signer):
#ANNOTATION: derive the class TimestampSigner from the Signer base class.

    def timestamp(self):
#ANNOTATION: define the method timestamp with an argument self.
        return baseconv.base62.encode(int(time.time()))
#ANNOTATION: call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.

    def sign(self, value):
#ANNOTATION: define the method sign with arguments self and value.
        value = force_str(value)
#ANNOTATION: call the force_str function with an argument value, substitute the result for value.
        value = str('%s%s%s') % (value, self.sep, self.timestamp())
#ANNOTATION: convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
        return super(TimestampSigner, self).sign(value)
#ANNOTATION: call the sign method from the base class of the TimestampSigner class with an argument value, return the result

    def unsign(self, value, max_age=None):
#ANNOTATION: define the method unsign with arguments self, value and max_age set to None.
        """
        Retrieve original value and check it wasn't signed more
        than max_age seconds ago.
        """
#ANNOTATION: docstring
        result = super(TimestampSigner, self).unsign(value)
#ANNOTATION: call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
        value, timestamp = result.rsplit(self.sep, 1)
#ANNOTATION: call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
        timestamp = baseconv.base62.decode(timestamp)
#ANNOTATION: call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
        if max_age is not None:
#ANNOTATION: if max_age is not None,
            # Check timestamp is not older than max_age
            age = time.time() - timestamp
#ANNOTATION: subtract timestamp from the return value of the function time.time, substitute the result for age.
            if age > max_age:
#ANNOTATION: if age is greater than max_age,
                raise SignatureExpired(
                    'Signature age %s > %s seconds' % (age, max_age))
#ANNOTATION: raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
        return value
#ANNOTATION: return value.

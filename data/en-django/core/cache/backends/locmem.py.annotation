"Thread-safe in-memory cache backend."
#ANNOTATION: docstring

import time
#ANNOTATION: import module time.
try:
#ANNOTATION: try,
    from django.utils.six.moves import cPickle as pickle
#ANNOTATION: from django.utils.six.moves import cPickle as pickle into default name space.
except ImportError:
#ANNOTATION: if ImportError exception is caught,
    import pickle
#ANNOTATION: import pickle.

from django.core.cache.backends.base import BaseCache, DEFAULT_TIMEOUT
#ANNOTATION: from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
from django.utils.synch import RWLock
#ANNOTATION: from django.utils.synch import RWLock into default name space.


# Global in-memory store of cache data. Keyed by name, to provide
# multiple named local memory caches.
_caches = {}
#ANNOTATION: __caches is an empty dictionary.
_expire_info = {}
#ANNOTATION: __expire_info is an empty dictionary.
_locks = {}
#ANNOTATION: __locks is an empty dictionary.


class LocMemCache(BaseCache):
#ANNOTATION: derive the class LocMemCache from the base class BaseCache.
    def __init__(self, name, params):
#ANNOTATION: define the initialization method __init__ with 3 arguments: self, name and params.
        BaseCache.__init__(self, params)
#ANNOTATION: call the __init__ method with self and params arguments from the base class BaseCache.
        self._cache = _caches.setdefault(name, {})
#ANNOTATION: call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
        self._expire_info = _expire_info.setdefault(name, {})
#ANNOTATION: call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
        self._lock = _locks.setdefault(name, RWLock())
#ANNOTATION: call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.

    def add(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):
#ANNOTATION: define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
        key = self.make_key(key, version=version)
#ANNOTATION: call the method self.make_key with key and version set to version as arguments, substitute the result for key.
        self.validate_key(key)
#ANNOTATION: call the method self.validate_key with argument key.
        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
#ANNOTATION: call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.
        with self._lock.writer():
#ANNOTATION: call the self._lock.writer method, with the result perform the following,
            if self._has_expired(key):
#ANNOTATION: evaluate self._has_expired with argument key, if the result is True,
                self._set(key, pickled, timeout)
#ANNOTATION: call the method self._set with key, pickled and timeout as arguments.
                return True
#ANNOTATION: return boolean True.
            return False
#ANNOTATION: return boolean False.

    def get(self, key, default=None, version=None):
#ANNOTATION: define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
        key = self.make_key(key, version=version)
#ANNOTATION: call the method self.make_key with key and version set to version as arguments, substitute the result for key.
        self.validate_key(key)
#ANNOTATION: call the method self.validate_key with argument key.
        pickled = None
#ANNOTATION: substitute None for pickled.
        with self._lock.reader():
#ANNOTATION: call the self._lock.reader method, with the result perform the following,
            if not self._has_expired(key):
#ANNOTATION: evaluate the method self._has_expired with argument key, if it as False,
                pickled = self._cache[key]
#ANNOTATION: substitute value under the key key of self._cache dictionary for pickled.
        if pickled is not None:
#ANNOTATION: if pickled is not None.
            try:
#ANNOTATION: try,
                return pickle.loads(pickled)
#ANNOTATION: evaluate pickle.loads with argument pickled, return the result.
            except pickle.PickleError:
#ANNOTATION: if pickle.PickleError exception is caught,
                return default
#ANNOTATION: return default.

        with self._lock.writer():
#ANNOTATION: call the self._lock.writer method, with the result perform the following,
            try:
#ANNOTATION: try,
                del self._cache[key]
#ANNOTATION: delete the value under key key of self._cache dictionary.
                del self._expire_info[key]
#ANNOTATION: delete the value under key key of self._expire_info.
            except KeyError:
#ANNOTATION: if KeyError exception is caught,
                pass
#ANNOTATION: do nothing.
            return default
#ANNOTATION: return default.

    def _set(self, key, value, timeout=DEFAULT_TIMEOUT):
#ANNOTATION: define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
        if len(self._cache) >= self._max_entries:
#ANNOTATION: if length of self._cache is greater or equal to self._max_entries,
            self._cull()
#ANNOTATION: call the self._cull method.
        self._cache[key] = value
#ANNOTATION: substitute value for the value under the key key of self._cache dictionary.
        self._expire_info[key] = self.get_backend_timeout(timeout)
#ANNOTATION: call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.

    def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):
#ANNOTATION: define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
        key = self.make_key(key, version=version)
#ANNOTATION: call the method self.make_key with key and version set to version as arguments, substitute the result for key.
        self.validate_key(key)
#ANNOTATION: call the method self.validate_key with argument key.
        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
#ANNOTATION: call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
        with self._lock.writer():
#ANNOTATION: call the self._lock.writer method, with the result perform the following,
            self._set(key, pickled, timeout)
#ANNOTATION: call the method self._set with key, pickled and timeout as arguments.

    def incr(self, key, delta=1, version=None):
#ANNOTATION: define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.
        value = self.get(key, version=version)
#ANNOTATION: call the self.get method with key and version set to version as arguments, substitute the result for value.
        if value is None:
#ANNOTATION: if value is None, 
            raise ValueError("Key '%s' not found" % key)
#ANNOTATION: raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
        new_value = value + delta
#ANNOTATION: new_value is a sum of value and delta. 
        key = self.make_key(key, version=version)
#ANNOTATION: call the method self.make_key with key and version set to version as arguments, substitute the result for key.
        pickled = pickle.dumps(new_value, pickle.HIGHEST_PROTOCOL)
#ANNOTATION: call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
        with self._lock.writer():
#ANNOTATION: call the self._lock.writer method, with the result perform the following,
            self._cache[key] = pickled
#ANNOTATION: substitute pickled for value under the key key of self._cache dictionary.
        return new_value
#ANNOTATION: return new_value.

    def has_key(self, key, version=None):
#ANNOTATION: define the method has_key with self class instance, key and version defaulting to None as arguments.
        key = self.make_key(key, version=version)
#ANNOTATION: call the method self.make_key with key and version set to version as arguments, substitute the result for key.
        self.validate_key(key)
#ANNOTATION: call the method self.validate_key with argument key.
        with self._lock.reader():
#ANNOTATION: call the self._lock.reader method, with the result perform the following,
            if not self._has_expired(key):
#ANNOTATION: if call to the _has_expired method with argument key evaluates to boolean False, 
                return True
#ANNOTATION: return boolean True.

        with self._lock.writer():
#ANNOTATION: call the self._lock.writer method, with the result perform the following,
            try:
#ANNOTATION: try,
                del self._cache[key]
#ANNOTATION: delete the value under the key key of self._cache dictionary.
                del self._expire_info[key]
#ANNOTATION: delete the value under the key key of self._expire_info dictionary.
            except KeyError:
#ANNOTATION: if KeyError exception is caught,
                pass
#ANNOTATION: do nothing.
            return False
#ANNOTATION: return boolean False.

    def _has_expired(self, key):
#ANNOTATION: define the method _has_expired with self and key as arguments.
        exp = self._expire_info.get(key, -1)
#ANNOTATION: call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
        if exp is None or exp > time.time():
#ANNOTATION: if exp is None or exp is greater than the return value of the call to the function time.time,
            return False
#ANNOTATION: return boolean False.
        return True
#ANNOTATION: return boolean True.

    def _cull(self):
#ANNOTATION: define the method _cull with argument self.
        if self._cull_frequency == 0:
#ANNOTATION: if self._cull_frequency equals to integer 0.
            self.clear()
#ANNOTATION: call self.clear method.
        else:
#ANNOTATION: if not,
            doomed = [k for (i, k) in enumerate(self._cache) if i % self._cull_frequency == 0]
#ANNOTATION: for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.
            for k in doomed:
#ANNOTATION: for every k in doomed,
                self._delete(k)
#ANNOTATION: call the method self._delete with argument k.

    def _delete(self, key):
#ANNOTATION: define the method _delete with arguments self and key.
        try:
#ANNOTATION: try,
            del self._cache[key]
#ANNOTATION: delete the value under the key key of self._cache dictionary.
        except KeyError:
#ANNOTATION: if KeyError exception is caught,
            pass
#ANNOTATION: do nothing.
        try:
#ANNOTATION: try, 
            del self._expire_info[key]
#ANNOTATION: delete the value under the key key of the self._expire_info dictionary.
        except KeyError:
#ANNOTATION: if KeyError exception is caught,
            pass
#ANNOTATION: do nothing.

    def delete(self, key, version=None):
#ANNOTATION: define the method delete with self class instance, key and version defaulting to None as arguments.
        key = self.make_key(key, version=version)
#ANNOTATION: call the method self.make_key with key and version set to version as arguments, substitute the result for key.
        self.validate_key(key)
#ANNOTATION: call the method self.validate_key with argument key.
        with self._lock.writer():
#ANNOTATION: call the self._lock.writer method, with the result perform the following,
            self._delete(key)
#ANNOTATION: call the method self._delete with argument key.

    def clear(self):
#ANNOTATION: define the method clear with argument self.
        self._cache.clear()
#ANNOTATION: call the method self._cache.clear.
        self._expire_info.clear()
#ANNOTATION: call the method self._expire_info.clear.


# For backwards compatibility
class CacheClass(LocMemCache):
#ANNOTATION: derive the class CacheClass from the base class LocMemCache.
    pass
#ANNOTATION: do nothing.

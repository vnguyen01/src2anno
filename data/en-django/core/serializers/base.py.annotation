"""
Module for abstract serializer/unserializer base classes.
"""
#ANNOTATION: docstring
import warnings
#ANNOTATION: import module warnings.

from django.db import models
#ANNOTATION: from django.db import models into default name space.
from django.utils import six
#ANNOTATION: from django.utils import six into default name space.
from django.utils.deprecation import RemovedInDjango19Warning
#ANNOTATION: from django.utils.deprecation import RemovedInDjango19Warning into default name space.


class SerializerDoesNotExist(KeyError):
#ANNOTATION: derive the class SerializerDoesNotExist from the KeyError base class.
    """The requested serializer was not found."""
#ANNOTATION: docstring
    pass
#ANNOTATION: do nothing.


class SerializationError(Exception):
#ANNOTATION: derive the class SerializationError from the Exception base class.
    """Something bad happened during serialization."""
#ANNOTATION: docstring
    pass
#ANNOTATION: do nothing.


class DeserializationError(Exception):
#ANNOTATION: derive the class DeserializationError from the Exception base class.
    """Something bad happened during deserialization."""
#ANNOTATION: docstring
    pass
#ANNOTATION: do nothing.


class Serializer(object):
#ANNOTATION: derive the class Serializer from the object base class.
    """
    Abstract serializer base class.
    """
#ANNOTATION: docstring

    # Indicates if the implemented serializer is only available for
    # internal Django use.
    internal_use_only = False
#ANNOTATION: internal_use_only is a boolean False.

    def serialize(self, queryset, **options):
#ANNOTATION: define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
        """
        Serialize a queryset.
        """
#ANNOTATION: docstring
        self.options = options
#ANNOTATION: substitute options for self.options.

        self.stream = options.pop("stream", six.StringIO())
#ANNOTATION: remove the 'stream' key from the options dictionary and substitute it for self.stream, 
#ANNOTATION: if the key doesnt exists call the six.String function and substitute the result for self.stream. 
        self.selected_fields = options.pop("fields", None)
#ANNOTATION: remove the 'fields' key from the options dictionary and substitute it for self.selected_fields, 
#ANNOTATION: if the key doesnt exists substitute None for self.selected_fields. 
        self.use_natural_keys = options.pop("use_natural_keys", False)
#ANNOTATION: remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys, 
#ANNOTATION: if the key doesnt exists substitute boolean False for self.use_natural_keys. 
        if self.use_natural_keys:
#ANNOTATION: if self.use_natural_keys is true,
            warnings.warn("``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead.",
                RemovedInDjango19Warning)
#ANNOTATION: call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
        self.use_natural_foreign_keys = options.pop('use_natural_foreign_keys', False) or self.use_natural_keys
#ANNOTATION: remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys, 
#ANNOTATION: if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.
        self.use_natural_primary_keys = options.pop('use_natural_primary_keys', False)
#ANNOTATION: remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys, 
#ANNOTATION: if the key doesnt exists substitute boolean False for self.use_natural_primary_keys. 

        self.start_serialization()
#ANNOTATION: call the method self.start_serialization
        self.first = True
#ANNOTATION: self.first is boolean True.
        for obj in queryset:
#ANNOTATION: for every obj in queryset,
            self.start_object(obj)
#ANNOTATION: call the self.start_object with an argument obj.
            # Use the concrete parent class' _meta instead of the object's _meta
            # This is to avoid local_fields problems for proxy models. Refs #17717.
            concrete_model = obj._meta.concrete_model
#ANNOTATION: substitute obj._meta.concrete_model for concrete_model.
            for field in concrete_model._meta.local_fields:
#ANNOTATION: for every field in concrete_model._meta.local_fields,
                if field.serialize:
#ANNOTATION: if field.serialize is true,
                    if field.rel is None:
#ANNOTATION: if field.rel is None,
                        if self.selected_fields is None or field.attname in self.selected_fields:
#ANNOTATION: if self.selected_fields is None or field.attname is contained in self.selected_fields
                            self.handle_field(obj, field)
#ANNOTATION: call the method self.handle_field with arguments obj and filed.
                    else:
#ANNOTATION: if not,
                        if self.selected_fields is None or field.attname[:-3] in self.selected_fields:
#ANNOTATION: if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
                            self.handle_fk_field(obj, field)
#ANNOTATION: call the method self.handle_fk_field with arguments obj and field. 
            for field in concrete_model._meta.many_to_many:
#ANNOTATION: for every field in concrete_model._meta.many_to_many,
                if field.serialize:
#ANNOTATION: if field.serialize is true,
                    if self.selected_fields is None or field.attname in self.selected_fields:
#ANNOTATION: if self.selected_fields is None or field.attname is contained in self.selected_fields,
                        self.handle_m2m_field(obj, field)
#ANNOTATION: call the method self.handle_m2m_field with arguments obj and filed.
            self.end_object(obj)
#ANNOTATION: call the method self.end_object with an argument obj.
            if self.first:
#ANNOTATION: if self.first is true,
                self.first = False
#ANNOTATION: self.first is boolean False.
        self.end_serialization()
#ANNOTATION: call the method self.end_serialization.
        return self.getvalue()
#ANNOTATION: call the method self.getvalue, return the result.

    def start_serialization(self):
#ANNOTATION: define the method start_serialization with an argument self.
        """
        Called when serializing of the queryset starts.
        """
#ANNOTATION: docstring
        raise NotImplementedError('subclasses of Serializer must provide a start_serialization() method')
#ANNOTATION: raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.

    def end_serialization(self):
#ANNOTATION: define the method end_serialization with an argument self.
        """
        Called when serializing of the queryset ends.
        """
#ANNOTATION: docstring
        pass
#ANNOTATION: do nothing.

    def start_object(self, obj):
#ANNOTATION: define the method start_object with argument self and obj.
        """
        Called when serializing of an object starts.
        """
#ANNOTATION: docstring
        raise NotImplementedError('subclasses of Serializer must provide a start_object() method')
#ANNOTATION: raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.

    def end_object(self, obj):
#ANNOTATION: define the method end_object with argument self and obj.
        """
        Called when serializing of an object ends.
        """
#ANNOTATION: docstring
        pass
#ANNOTATION: do nothing.

    def handle_field(self, obj, field):
#ANNOTATION: define the method handle_field with argument self, obj and field.
        """
        Called to handle each individual (non-relational) field on an object.
        """
#ANNOTATION: docstring
        raise NotImplementedError('subclasses of Serializer must provide an handle_field() method')
#ANNOTATION: raise a NotImplementedError with an argument string

    def handle_fk_field(self, obj, field):
#ANNOTATION: define the method handle_fk_field with argument self, obj and field.
        """
        Called to handle a ForeignKey field.
        """
#ANNOTATION: docstring
        raise NotImplementedError('subclasses of Serializer must provide an handle_fk_field() method')
#ANNOTATION: raise a NotImplementedError with an argument string

    def handle_m2m_field(self, obj, field):
#ANNOTATION: define the method handle_m2m_field with argument self, obj and field.
        """
        Called to handle a ManyToManyField.
        """
#ANNOTATION: docstring
        raise NotImplementedError('subclasses of Serializer must provide an handle_m2m_field() method')
#ANNOTATION: raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.

    def getvalue(self):
#ANNOTATION: define the method getvalue with an argument self.
        """
        Return the fully serialized queryset (or None if the output stream is
        not seekable).
        """
#ANNOTATION: docstring
        if callable(getattr(self.stream, 'getvalue', None)):
#ANNOTATION: get 'getvalue' attribute of the self.stream object, if it exists and is callable, 
            return self.stream.getvalue()
#ANNOTATION: evaluate self.stream.getvalue method, return the result.


class Deserializer(six.Iterator):
#ANNOTATION: derive the class Deserializer from the six.Iterator base class.
    """
    Abstract base deserializer class.
    """
#ANNOTATION: docstring

    def __init__(self, stream_or_string, **options):
#ANNOTATION: define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
        """
        Init this serializer given a stream or a string
        """
#ANNOTATION: docstring
        self.options = options
#ANNOTATION: substitute options for self.options.
        if isinstance(stream_or_string, six.string_types):
#ANNOTATION: if stream_or_string is an instance of six.string_types type.
            self.stream = six.StringIO(stream_or_string)
#ANNOTATION: call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
        else:
#ANNOTATION: if not,
            self.stream = stream_or_string
#ANNOTATION: substitute stream_or_string for self.stream.

    def __iter__(self):
#ANNOTATION: define the method __iter__ with an argument self.
        return self
#ANNOTATION: return self.

    def __next__(self):
#ANNOTATION: define the method __next__ with an argument self.
        """Iteration iterface -- return the next item in the stream"""
#ANNOTATION: docstring
        raise NotImplementedError('subclasses of Deserializer must provide a __next__() method')
#ANNOTATION: raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.


class DeserializedObject(object):
#ANNOTATION: derive the class DeserializedObject from the object base class.
    """
    A deserialized model.

    Basically a container for holding the pre-saved deserialized data along
    with the many-to-many data saved with the object.

    Call ``save()`` to save the object (with the many-to-many data) to the
    database; call ``save(save_m2m=False)`` to save just the object fields
    (and not touch the many-to-many stuff.)
    """
#ANNOTATION: docstring

    def __init__(self, obj, m2m_data=None):
#ANNOTATION: define the method __init__, with 3 arguments: self, m2m and data set None.
        self.object = obj
#ANNOTATION: substitute obj for self.object.
        self.m2m_data = m2m_data
#ANNOTATION: substitute m2m_data for self.m2m_data.

    def __repr__(self):
#ANNOTATION: define the method __repr__ with an argument self.
        return "<DeserializedObject: %s.%s(pk=%s)>" % (
            self.object._meta.app_label, self.object._meta.object_name, self.object.pk)
#ANNOTATION: return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label,
#ANNOTATION: self.object._meta.object_name and self.object.pk, respectively.

    def save(self, save_m2m=True, using=None):
#ANNOTATION: define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
        # Call save on the Model baseclass directly. This bypasses any
        # model-defined save. The save is also forced to be raw.
        # raw=True is passed to any pre/post_save signals.
        models.Model.save_base(self.object, using=using, raw=True)
#ANNOTATION: call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
        if self.m2m_data and save_m2m:
#ANNOTATION: if self.m2m.data and save_m2m are true,
            for accessor_name, object_list in self.m2m_data.items():
#ANNOTATION: for every accessor_name and object_list is return value of the method self.m2m_data.items.
                setattr(self.object, accessor_name, object_list)
#ANNOTATION: set accessor_name of the self.object to object_list.

        # prevent a second (possibly accidental) call to save() from saving
        # the m2m data twice.
        self.m2m_data = None
#ANNOTATION: self.m2m_data is None.


def build_instance(Model, data, db):
#ANNOTATION: define the function build_instance with 3 arguments: Model, data and db.
    """
    Build a model instance.

    If the model instance doesn't have a primary key and the model supports
    natural keys, try to retrieve it from the database.
    """
#ANNOTATION: docstring
    obj = Model(**data)
#ANNOTATION: obj is an instance of Model class, created with an unpacked dictionary data as argument.
    if (obj.pk is None and hasattr(Model, 'natural_key') and
            hasattr(Model._default_manager, 'get_by_natural_key')):
#ANNOTATION: if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key', 
        natural_key = obj.natural_key()
#ANNOTATION: call the method obj.natural_key, substitute the result for natural_key.
        try:
#ANNOTATION: try,
            obj.pk = Model._default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
#ANNOTATION: call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,
#ANNOTATION: an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.
        except Model.DoesNotExist:
#ANNOTATION: if Model.DoesNotExist exception is caught,
            pass
#ANNOTATION: do nothing.
    return obj
#ANNOTATION: return obj.

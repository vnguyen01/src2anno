# -*- encoding: utf-8 -*-
from __future__ import unicode_literals
#ANNOTATION: from __future__ import unicode_literals into default name space.

from django.apps import apps
#ANNOTATION: from django.apps import apps into default name space.

from .. import Warning, register, Tags
#ANNOTATION: from .. import Warning, register and Tags into default name space.


@register(Tags.compatibility)
#ANNOTATION: decorator register with argument Tags.compatibility. 
def check_1_6_compatibility(**kwargs):
#ANNOTATION: define the function check_1_6_compatibility with argument kwargs dictionary. 
    errors = []
#ANNOTATION: errors is an empty list
    errors.extend(_check_test_runner(**kwargs))
#ANNOTATION: call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
    errors.extend(_check_boolean_field_default_value(**kwargs))
#ANNOTATION: call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
    return errors
#ANNOTATION: return errors.


def _check_test_runner(app_configs=None, **kwargs):
#ANNOTATION: define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments. 
    """
    Checks if the user has *not* overridden the ``TEST_RUNNER`` setting &
    warns them about the default behavior changes.

    If the user has overridden that setting, we presume they know what they're
    doing & avoid generating a message.
    """
#ANNOTATION: docstring
    from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.

    # We need to establish if this is a project defined on the 1.5 project template,
    # because if the project was generated on the 1.6 template, it will have be been
    # developed with the new TEST_RUNNER behavior in mind.

    # There's no canonical way to do this; so we leverage off the fact that 1.6
    # also introduced a new project template, removing a bunch of settings from the
    # default that won't be in common usage.

    # We make this determination on a balance of probabilities. Each of these factors
    # contributes a weight; if enough of them trigger, we've got a likely 1.6 project.
    weight = 0
#ANNOTATION: weight is an integer 0.

    # If TEST_RUNNER is explicitly set, it's all a moot point - if it's been explicitly set,
    # the user has opted into a specific set of behaviors, which won't change as the
    # default changes.
    if not settings.is_overridden('TEST_RUNNER'):
#ANNOTATION: if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
        # Strong markers:
        # SITE_ID = 1 is in 1.5 template, not defined in 1.6 template
        try:
#ANNOTATION: try,
            settings.SITE_ID
#ANNOTATION: settings.SITE_ID.
            weight += 2
#ANNOTATION: increment weight by integer 2.
        except AttributeError:
#ANNOTATION: if AttributeError exception is caught,
            pass
#ANNOTATION: do nothing.

        # BASE_DIR is not defined in 1.5 template, set in 1.6 template
        try:
#ANNOTATION: try,
            settings.BASE_DIR
#ANNOTATION: settings.BASE_DIR.
        except AttributeError:
#ANNOTATION: if AttributeError exception is caught,
            weight += 2
#ANNOTATION: increment weight by integer 2.

        # TEMPLATE_LOADERS defined in 1.5 template, not defined in 1.6 template
        if settings.is_overridden('TEMPLATE_LOADERS'):
#ANNOTATION: call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,  
            weight += 2
#ANNOTATION: increment weight by integer 2.

        # MANAGERS defined in 1.5 template, not defined in 1.6 template
        if settings.is_overridden('MANAGERS'):
#ANNOTATION: call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True, 
            weight += 2
#ANNOTATION: increment weight by integer 2.

        # Weaker markers - These are more likely to have been added in common usage
        # ADMINS defined in 1.5 template, not defined in 1.6 template
        if settings.is_overridden('ADMINS'):
#ANNOTATION: call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,
            weight += 1
#ANNOTATION: increment weight by integer 2.

        # Clickjacking enabled by default in 1.6
        if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in set(settings.MIDDLEWARE_CLASSES):
#ANNOTATION: if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,
            weight += 1
#ANNOTATION: increment weight by integer 2.

    if weight >= 6:
#ANNOTATION: if weight is greater or equal to integer 6,
        return [
            Warning(
                "Some project unittests may not execute as expected.",
                hint=("Django 1.6 introduced a new default test runner. It looks like "
                      "this project was generated using Django 1.5 or earlier. You should "
                      "ensure your tests are all running & behaving as expected. See "
                      "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "
                      "for more information."),
                obj=None,
                id='1_6.W001',
            )
        ]
#ANNOTATION: call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner. 
#ANNOTATION: It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving 
#ANNOTATION: as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.",
#ANNOTATION: obj set to None and id set to a string '1_6.W001', put the result into a list and return it. 
    else:
#ANNOTATION: if not,
        return []
#ANNOTATION: return an empty list.


def _check_boolean_field_default_value(app_configs=None, **kwargs):
#ANNOTATION: define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.
    """
    Checks if there are any BooleanFields without a default value, &
    warns the user that the default has changed from False to None.
    """
#ANNOTATION: docstring
    from django.db import models
#ANNOTATION: from django.db import models into default name space.

    problem_fields = [
        field
        for model in apps.get_models(**kwargs)
        if app_configs is None or model._meta.app_config in app_configs
        for field in model._meta.local_fields
        if isinstance(field, models.BooleanField) and not field.has_default()
    ]
#ANNOTATION: append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None,
#ANNOTATION: or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields, 
#ANNOTATION only if field is an instance of models.BooleanField and field.has_default() evaluates to False.

    return [
        Warning(
            "BooleanField does not have a default value.",
            hint=("Django 1.6 changed the default value of BooleanField from False to None. "
                  "See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "
                  "for more information."),
            obj=field,
            id='1_6.W002',
        )
        for field in problem_fields
    ]
#ANNOTATION: #ANNOTATION: call the Warning function with 4 arguments: string "BooleanField does not have a default value.",
#ANNOTATION: hint tuple containing one string, "Django 1.6 changed the default value of BooleanField from False to None. 
#ANNOTATION: See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield for more information.",
#ANNOTATION: obj set to field and id set to a string '1_6.W002', for field in problem_fields, put the result into a list and return it. 

"""Email backend that writes messages to a file."""
#ANNOTATION: docstring

import datetime
#ANNOTATION: import module datetime.
import os
#ANNOTATION: import module os.

from django.conf import settings
#ANNOTATION: from django.conf import settings into default name space.
from django.core.exceptions import ImproperlyConfigured
#ANNOTATION: from django.core.exceptions import ImproperlyConfigured into default name space.
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend
#ANNOTATION: from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
from django.utils import six
#ANNOTATION: from django.utils import six into default name space.


class EmailBackend(ConsoleEmailBackend):
#ANNOTATION: derive the class EmailBackend from the ConsoleEmailBackend base class.
    def __init__(self, *args, **kwargs):
#ANNOTATION: define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
        self._fname = None
#ANNOTATION: self._fname is None.
        if 'file_path' in kwargs:
#ANNOTATION: if 'file_path' is contained in kwargs,
            self.file_path = kwargs.pop('file_path')
#ANNOTATION: pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
        else:
#ANNOTATION: if not,
            self.file_path = getattr(settings, 'EMAIL_FILE_PATH', None)
#ANNOTATION: get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.
        # Make sure self.file_path is a string.
        if not isinstance(self.file_path, six.string_types):
#ANNOTATION: if self.file_path is not an instance of six.string_types,
            raise ImproperlyConfigured('Path for saving emails is invalid: %r' % self.file_path)
#ANNOTATION: raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path. 
        self.file_path = os.path.abspath(self.file_path)
#ANNOTATION: call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
        # Make sure that self.file_path is an directory if it exists.
        if os.path.exists(self.file_path) and not os.path.isdir(self.file_path):
#ANNOTATION: if self.file_path file path exists and it is not a directory,
            raise ImproperlyConfigured('Path for saving email messages exists, but is not a directory: %s' % self.file_path)
#ANNOTATION: raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s', #ANNOTATION: replace '%s' with self.file_path.
        # Try to create it, if it not exists.
        elif not os.path.exists(self.file_path):
#ANNOTATION: otherwise if self.file_path file path doesnt exists, 
            try:
#ANNOTATION: try,
                os.makedirs(self.file_path)
#ANNOTATION: call the os.makedirs with argument self.file_path.
            except OSError as err:
#ANNOTATION: if OSError, renamed to err, is caught,
                raise ImproperlyConfigured('Could not create directory for saving email messages: %s (%s)' % (self.file_path, err))
#ANNOTATION: raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',
#ANNOTATION: replace '%s' with self.file_path and err, respectively.
        # Make sure that self.file_path is writable.
        if not os.access(self.file_path, os.W_OK):
#ANNOTATION: if self.file_path file is not writable,
            raise ImproperlyConfigured('Could not write to directory: %s' % self.file_path)
#ANNOTATION: raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
        # Finally, call super().
        # Since we're using the console-based backend as a base,
        # force the stream to be None, so we don't default to stdout
        kwargs['stream'] = None
#ANNOTATION: set value under the 'stream' key of kwargs dictionary to None.
        super(EmailBackend, self).__init__(*args, **kwargs)
#ANNOTATION: call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.

    def write_message(self, message):
#ANNOTATION: define the method write_message with arguments self and message.
        self.stream.write(message.message().as_bytes() + b'\n')
#ANNOTATION: call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
        self.stream.write(b'-' * 79)
#ANNOTATION: write 79 '-' characters into self.stream file stream.
        self.stream.write(b'\n')
#ANNOTATION: write a newline character into self.stream file stream.

    def _get_filename(self):
#ANNOTATION: define the method _get_filename with argument self.
        """Return a unique file name."""
#ANNOTATION: docstring
        if self._fname is None:
#ANNOTATION: if self._fname is None:
            timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
#ANNOTATION: call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
            fname = "%s-%s.log" % (timestamp, abs(id(self)))
#ANNOTATION: fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
            self._fname = os.path.join(self.file_path, fname)
#ANNOTATION: join self.file_path and fname into a valid file path, substitute it for self._fname.
        return self._fname
#ANNOTATION: return self._fname.

    def open(self):
#ANNOTATION: define the method open with argument self.
        if self.stream is None:
#ANNOTATION: if self.stream is None:
            self.stream = open(self._get_filename(), 'ab')
#ANNOTATION: open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.
            return True
#ANNOTATION: return boolean True.
        return False
#ANNOTATION: return boolean True.

    def close(self):
#ANNOTATION: define the method close with argument self.
        try:
#ANNOTATION: try,
            if self.stream is not None:
#ANNOTATION: if self.stream is not None,
                self.stream.close()
#ANNOTATION: call the self.stream.close function.
        finally:
#ANNOTATION: finally perform,
            self.stream = None
#ANNOTATION: self.stream is None.

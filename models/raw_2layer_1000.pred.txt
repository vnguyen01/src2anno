if e . connection_reset is false,
append filename to self . _closable_objects .
decorator function register . filter with an argument is_safe set to boolean True .
substitute value under the d key of dictionary d for d .
call the function func with 2 arguments: unpacked list kw,
if self . _leftover is true,
return the value under the db key of the self . _caches dictionary .
do nothing .
call the method context_match . group with an argument integer 1, substitute the result for message_context .
from django . conf import settings into default name space .
help is a string "Runs a a list containing statements statements for the call to the statements .
call the method list . get_app_configs, with an argument migration . name . name for every migration in merge_migrations,
define the method render with an argument self .
if length of words is greater than zero,
if not,
if self . required is false,
call the method self . as_table, .
call the method 12 . copy and return the result .
define the function static with 2 arguments: text and url2 .
if app_config . models_module is None,
return _cached_filenames .
substitute namespaces for the value under the language_code key of the self . _namespace_dict dictionary .
from django . utils . http import urlquote into default name space .
do nothing .
derive the class Loader from the BaseLoader base class .
if not,
WRAPPING_PUNCTUATION is a tuple with 3 elements: a tuple containing 2 elements: '(' and 'django' .
define the method display with an argument self .
define the function convert_old_style_list with an argument list_ .
try,
dirs is an empty list .
define the method __init__ with 11 arguments: self, max_value set to None, min_value set to None,
if result is not None,
join filename into a file path, substitute it for dirname .
get the value under the 'interactive' key of the options dictionary, substitute the result for self . domain .
if self . instance . pk is not None,
join usage into a string, return it .
call the method self . get_unique_error_message for every k and v in the result,
call the function self . characters with an argument contents .
substitute frame . media for base .
from django . utils import formats into default name space .
otherwise if bytes is smaller than MB,
call the function bytes with 2 arguments: i and an empty string, return the result .
substitute it for attrs . derive the class is from the instance of the class ResolverMatch with 5 arguments: attrs, attrs set to attrs,
allow_multiple_selected is an empty set .
raise an exception .
for every node in node,
define the method __repr__ with an argument self .
call the method sys . stderr . write with an string "Running write it to sys . stderr .
join dirpath and f into a file path and substitute it for simple_email_re .
call the function settings . is_overridden if it evaluates to true,
if key is contained in dict_,
call the function getargspec with an argument func, substitute the result for args and defaults, respectively .
if UnicodeDecodeError exception is caught,
call the function force_text with an argument value, substitute the result for __unicode__ .
from django . utils . encoding import force_str into default name space .
sum sign and dec_part, return the result .
do nothing .
define the function _strip_once with an argument s .
call the method initial_form_count from the base class of the class ChoiceField, return the result .
substitute v for value under k key of the self dictionary .
append filename to the last element, substitute the result for filename .
call the function match . end with an argument path,
otherwise if first first of g equals a string "'",
return boolean True .
if ext is true and initial is true,
call the method zfile . close .
call the function module_to_dict with an argument argv .
substitute nodelist_empty for self . localize .
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
if not,
define the method id_for_label with 2 arguments: self and id_ .
substitute the result for value under the 'list_tags' key of the extension_map .
call the method re . compile with an argument raw string 'DATETIME_INPUT_FORMATS', substitute the result for _entity_re .
define the method auto_id with an argument self .
call the method self . _get_scheme, with argument f, return the result .
from django . forms . models import everything into default name space .
return new_value .
if self . _errors is None,
substitute safe for value under the 'initial' key of kwargs dictionary .
call the method payload . get with 2 arguments: self . status_code and e, substitute the result for self . reason_phrase .
if call to the function response . has_header with string 'Cache-Control' as an argument returns boolean False,
convert cc into a list, substitute it for self . cc .
return nothing .
if value under the 'verbosity' key of the options dictionary is greater than zero,
substitute nonlocal_root for self . day_none_value .
call the method self . xml . startElement with 2 arguments: string 'field' and attrs .
from django . core import serializers into default name space .
docsring
replace self . app_or_project with self . app_or_project, substitute the result for prefix .
if character '/' is contained in return value of the function path called with an argument string,
with lock,
substitute name for self . name .
substitute an entry elements of an empty string for the value under the BaseMemcachedCache key of the hextets dictionary .
if not,
call the function logging_config_func with an argument library_name .
if not,
call the method __init__ from the base class of the class BaseInlineFormSet, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
instance . keyOrder is an empty list .
call the function __proxy__ with an argument name, use the result as an argument for the call to the function .
call the method one_percent_re . execute with statement as argument .
if value is true,
call the function ungettext_lazy with an argument string 'Ensure this values at at least argument,
if settings . replaces is true,
from django . utils . _os import safe_join into default name space .
get the value under the DEFAULT_CACHE_ALIAS key of the caches object, if it exists return it, otherwise return name .
import module sys .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
call the method logger . addHandler with an argument handler .
convert self to a string, return it .
join elements of output into a string, separated by newline characters, return it .
if DatabaseError . argv, exception is caught,
call the method parser . add_argument with 4 arguments: string '--extension', action containing string 'store_false',
if not,
substitute target_var for self . notation_name .
call the method parser . add_argument with 5 arguments: string 'args', action as a string 'store_true',
if not,
otherwise is None .
if not,
derive the class IfNode from the BaseForm base class .
substitute boundary for end .
substitute first element of url_fields for last and end, respectively .
for every widget in return value of the method self . as_widget called with 3 arguments: name, value and choices,
substitute value for self . value .
return output .
call the method timezone . now, substitute the result for now .
replace digit in length of tuples, substitute the result for unescape_string_literal .
if relative_dir is true,
try,
if opname is not contained in _DJANGO_DEPRECATED_LOCALES,
app_labels is a set, object .
call the function make_origin with 3 arguments: lookup_view, nodelist_false and unpacked list kw, return the result .
define the method _create_message with 2 arguments: self and unique_check .
if m is false,
return e .
define the method to_python with arguments self and data .
for every base in result of the method six . iteritems called with an argument base .
default_error_messages is an string '%s formated with return value of the function _ called with an argument,
if not,
if self . __class__ and f . loader are true,
call the method field_stream from the base class of the class SortedDict, with an argument val .
call the method self . remove_potfiles .
call the method logging . Handler with an argument boolean True .
derive the class InvalidTemplateLibrary from the object base class .
call the function re . compile with 2 arguments: regex and re . IGNORECASE, substitute the result for regex .
if not,
define the method _cull with arguments self and filename .
if ch is true,
derive the class SerializationError from the MIMEMixin base class .
define the method items with an argument self .
call the function mark_safe with an argument template, use the result as an argument for the call to the function mark_safe,
call the method BaseCache . __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs .
return boolean False .
filesize_number_format is a tuple with an entry: return value of the function _ called with an argument,
join elements of output into a string, return it .
substitute decimals for EscapeString .
raise an CommandError exception with an argument string "ERROR: values in the command . ",
derive the class Parser from the object base class .
if states is true and d is true,
if self . loaded_object_count is not None,
get the value under the 'indent' key of the params dictionary, if it exists substitute it for loggers,
return usage .
call the function os . dirname . dirname with an argument fixture_name, substitute the result for fixture_dirs .
call the method fp . getvalue, return the result .
if regex is not None,
define the method __str__ with an argument self .
substitute conditions_nodelists for self . conditions_nodelists .
if self . _dir is true and conflicts is false,
call the method self . build_attrs with an argument attrs, substitute the result for final_attrs .
join fixture_name, and 'locale' into a valid directory path, substitute the result for basedirs .
child_nodelists is a list with 4 initial elements: value under the 'liveserver' key of the substitutions dictionary .
content . setter decorator .
substitute exc for self . reason_phrase .
otherwise if o is an instance of decimal
substitute META for self . _meta .
derive the class RendererMixin from the object base class .
import module re .
from django . utils . encoding import smart_text and force_text into default name space .
return boolean False .
if param is not contained in params and compile_function is None,
define the method extend_nodelist with 3 arguments: self, nodelist and token .
define the function conditional_escape with an argument path .
from django . utils import six into default name space .
from __future__ import unicode_literals into default name space .
if first element of the self . _container is true, substitute is an empty string .
if f . name is contained in cleaned_data,

if self . choice_value equals self . fk .
call the method __init__ from the base class of the class FilePathField, called with 4 arguments: data, prefix set to data, prefix set to true,
define the method handle_noargs with arguments self and message .
substitute value for value under the field . attname key of the data dictionary .
define the method __init__ with arguments self and language .
define the method __init__ with 2 arguments: self and file .
try,
call the function six . text_type with an argument bf_errors, append the result to used .
derive the class SerializerDoesNotExist from the KeyError base class .
call the function time_format with 2 arguments: value and arg, return the result .
get the value under the part key of the connection . introspection dictionary, substitute the result for space .
if new_name ends with a string '\\'
call the method MONTHS . index with an argument string 'DATE_INPUT_FORMATS', convert the result to lowercase and call to the method MONTHS on the result with an argument,
call the method self . configure_filter with connection and executor . loader as arguments, substitute the result for input_formats .
define the method getvalue with an argument self .
call the method parser . add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
if PY3 is true,
if not,
return value of the function value under the lang_code key .
if ValueError or TypeError exceptions are caught,
return self . new_objects .
if not,
self . namespaces is a list containing x .
define the method __init__ with 2 arguments: self and id .
define the method check_migrations with an argument self .
substitute list_ for best_doublecolon_len .
call the method parser . add_argument with 5 arguments: string '-v', string '-a', action set to string 'store',
substitute value under name key of the toks dictionary for tok .
cache_timeout is None .
call the method connection . cursor, substitute the result for cursor .
call the method self . _reset_dicts with an argument dict_ .
if ValueError exception is caught,
if s is not an instance of six . string_types,
define the function get_quantifier with 2 arguments value and arg .
return value of the call to the function _ with an argument value, if it evaluates to true,
root under the root key of root dictionary is an empty list .
if over_bytes is greater than integer 4,
do nothing .
define the method __nonzero__ with an argument self .
call the method self . style . NOTICE with an argument string "%s, . . . . .
args is a list containing a list containing 1 elements: self . program .
raise an SerializerDoesNotExist exception with an argument format .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
define the method __init__, with an argument self .
call the function d, assign the result to the previous and respectively .
return func .
s is an integer .
derive the class PageNotAnInteger from the object base class .
call the function warnings . warn with 2 arguments: string "django . Use will None . ",
try,
substitute windll . Morsel for name .
import module warnings .
if self . initial_forms is false,
raise an TemplateSyntaxError exception with an argument string "'%s' received received no arguments
define the method __init__ with 3 arguments: self, stream and translation_function set to integer 4,
if err_log is true,
if self has an 'error_dict' attribute,
define the method __iter__ with an argument self .
call the BaseConverter function with an argument value, assign the result to msgs, params, scheme respectively .
substitute length of self . loopvars for fixture_dirs .
call the function ungettext with 3 arguments:
call the method self . format_output with 2 arguments: return value of the function self,
call the method t . lineno with an argument filename, append the result to result .
join elements of '\\' into a string, return it .
define the method list with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
if logging_settings is true,
define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
try,
get the next element of the iterable pattern_iter, assign the result for ch and escaped respectively .
call the method self . form with 10 arguments: form, self . auto_id
get the value attribute of the modules object, if it exists,
call the function walk_to_end with 2 arguments: ch and pattern_iter .
help is a string "Prints the CREATE files files for the given database . " .
try,
if not,
for every character k and p in result of the method p . groups,
join self . fed into a string, return it .
define the method __getinitargs__ with an argument self .
define the method clear with an argument self .
finally perform,
set opname attribute of base to the base class .
define the method __iter__ with an argument self .
call the function warnings . warn with an argument string "No fixture data found for %s . ",
call the method self . _create_message with an argument msg, substitute it for msg .
if cache is an instance of EscapeData,
call the function re . sub with 3 arguments: raw string 'django . IGNORECASE,
return string 'https' . ' .
get the attribute from the getattr, object, if it exists substitute it for it, if not,
raise an ValueError exception with an argument e .
call the method validators . MinLengthValidator with 2 arguments: raw string 'object' and third element of the result .
return boolean False .
return result .
call the os . path . splitext with an argument base, substitute the result for base .
define the method __init__ with 2 arguments: self and conditions_nodelists .
try,
append check to self . registered_checks .
if not,
call the function Group with 2 arguments: string ' . utils . ", where '%s' is replaced with self . name,
call the method self . _setup .
call the method handler . endElement with an argument string 'channel' .
call the method logger . warning with 6 arguments: string "Unable does not %s',
join c into a string, return it .
define the method __html__ with an argument self .
define the method __init__ with 2 arguments: self and options set to None .
call the method self . _existing_object with 2 arguments: potfile and locale .
if self . is_localized is true,
define the method add_arguments with 2 arguments self and parser .
call the function EmailMultiAlternatives with an argument integer multiply multiply the result by integer 1,
if length of version equals to integer 6,
define the method __getitem__ with 2 arguments: self and i .
yield string "# "# * have the model as the result of the generator as arguments .
define the method compile_filter_error with arguments self and name .
define the method __deepcopy__ with 2 arguments: self and memo .
if not,
with self . mutex perform,
call the function ugettext_lazy with an argument value, return the result .
try,
do nothing .
endless is a string "%s with the value under the 'QUERY_STRING' key of the disposition dictionary,
call the method value . replace with 2 arguments: over_bytes and return value of the method value . replace
call the method self . _isdst with an argument dt, if it evaluates to true,
return self . token .
return output .
for every format in self . input_formats
remove config dictionary element under '()' key, if not,
call the method copy . deepcopy with an argument self . widgets substitute the result for obj . widgets .
define the function calculate_app_template_dirs .
substitute DNS_NAME for media_attrs .
return a tuple with 2 elements: self . func and self . args .
call the function force_str with an argument logging_config, substitute the result for ETAG_MATCH .
define the method clean with an argument self .
get 'value' attribute of the _active object, if it exists substitute it for self, if not self . old_timezone is None .
derive the class CycleNode from the HttpResponseRedirectBase base class .
if TypeError or TypeError exceptions are caught,
define the method tzname with 2 arguments: self and dt .
if value under the 'enclosure' key of the item dictionary is not None,
if ImportError exception is caught,
call the function match with an argument ' . ', if it evaluates to true,
return cached .
raise an exception exception with an argument string "Could not find settings . %s",
return boolean False .
derive the class DjangoJSONEncoder from the meta base class .
attachment is an instance of a class MIMEBase, created with arguments: content and encoding .
if locations is true,
open the file expression exists, substitute it for file .
break from the loop execution .
otherwise get attribute 'error_dict' from current object, if it is true,
join self . dirpath and self . file into a file path .
call the method dig1 . add_arguments with an argument parser .
while field . rel is not None,
call the method self . path with argument name .
try,
call the json . dumps method with return value of the method f . dumps called with an argument e,
call the method parser . add_argument with an argument string '-e', dest set to string 'store_false',
join root and f . path into a file path, substitute it for f .
substitute elements of meta converted into a string, substitute it for current_expires .
yield value under key key of self dictionary .
call the method self . parse_name . basename with an argument the_path use the result to a string,
call the field . tag_exists method with an argument obj, substitute the result for value under the field . name key of the self . _current dictionary .
try,
call the function resolver . resolve with an argument request, substitute the result for formatters .
import module datetime .
return an empty string,
call the function translation with an argument string 'DATE_INPUT_FORMATS', convert the result to a list,
call the method m . group with 5 arguments: integer 1 and integer 1, assign the result to the reminder and rest, respectively .
doublecolon_len is an integer 0 .
call the function re . compile with 2 arguments: raw string regex,
define the method __getinitargs__ with an argument self .
from django . template import loader and WRAPPER_ASSIGNMENTS into default name space .
call the method connection . introspection . table_names, substitute the result for tables .
if t . token_type is not equal to other,
if v is false or v is an instance of AutoField class,
define the method clear with argument self .
derive the class RemovedInDjango19Warning from the classmethod base class .
derive class QueryDict from the MultiValueDict base class .
return boolean False .
append character to digits .
raise an TemplateSyntaxError exception with an argument string "Invalid takes requires where '%s' is replaced with subject .
return an empty string .
from django . utils import lru_cache into default name space .
define the method open with an argument self .
check_for_language is a lambda function with an argument x, substitute the result for check_for_language .
for every form in valid_forms,
if http_cookies . CookieError exception is caught,
return boolean False .
call the method d . groupdict, substitute the result for re_formatchars .
define the method delete with arguments self and name .
do nothing .
from functools import Lock into default name space .
kwargs is a list containing elements of tuples with value under 'warning' key of cc dictionary,
return self . _urlconf_module .
substitute choices for self . choices .
incomment is boolean False .
call the function translation with an argument settings . LANGUAGE_CODE, .
define the method add_arguments with arguments self and parser .
define the method end_index with an argument self .
call the function avoid_wrapping with an argument integer 0, return the result .
finally perform,
if i is greater or equal to integer 1,
decorator function register . filter with an argument is_safe set to boolean True .
return result .
call the method f . save_form_data with 2 arguments: instance and value under the f . name key of cleaned_data dictionary .
call the method apps . get_app_config with an argument app_label, substitute the result for app_config .
call the method parser . add_argument with 6 arguments: string 'args', action set to string 'store_true',
call the function date with an argument now from the base class instance,
if KeyError exception is caught,
define the method _ipython_pre_011 with 2 arguments: self and context .
call the function six . reraise with 3 arguments: utils . ValidationError,
define the method has_key with self class instance, key and version defaulting to None as arguments .
call the method context . render_context . GNUTranslations .
increment weight by integer 1 .
return result .
if self . verbosity is greater or equal to integer 2,
raise an CommandError exception with an argument msg .
self . _unget_history is an empty list .
substitute self . choices for self . widget . choices .
if PY3 is true,
from django . apps import apps into default name space .
lbp is an integer 0 .
divide the next element of the return value of the call to the function _ with 2 arguments:
raise an exception .
call the function date with 6 arguments: d . year, d and d . month .
string _wrapped is None .
from __future__ import unicode_literals into default name space .
raise an CommandError exception with an argument string 'Unknown conflicts with return value of the function force_text with an argument:
finally perform,
call the method self . _cache . incr with key and negative delta as arguments, return the result .
if value is not an instance of ConvertingTuple and value is an instance of dict class,
call the method add_arguments from the base class of the class Command, with an argument parser .
decorator function register . filter with an argument is_safe set to boolean False .
substitute BOOL for self . _moved_attributes .
call the method __init__ from the base class of the BaseMemcachedCache class, with 2 arguments: attrs and choices .
call the method six . text_type with an arguments encoding and errors as the arguments, return the result .
for every key and key in return value of the method self . key called with an argument key, return the result .
if not,
substitute func for value under the BLOCK_CONTEXT_KEY key of the self . __dict__ dictionary .
call the method parser . parse with an argument tuple with an element tuple with an element tuple assign the result for nodelist .
if m is true,
substitute complain for iteritems .
if not,
define the method L with an argument self .
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary .
try,
call the method match . group with an argument,
import module django . core . checks . django_1_7_0 .
from django . db import connections and DEFAULT_DB_ALIAS into default name space .
if lookup_view is contained in self . CDATA_CONTENT_ELEMENTS,
call the method stream . unget with an argument chunk .
for every key and value in return value of the method self . var_name called with an argument self . var_name
call the method self . stdout . write with an argument string 'natural' . .
call the method self . compress with an argument list, return the result .
raise an AttributeError exception with an argument string "'%s' object has has no value . ",
substitute HiddenInput for widget .
call the method checks . tag_exists with an argument tag, use the result as an argument for the call to the force_bytes function,
call the function re . compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for paras .
define the function patch_vary_headers, with 3 arguments: singular, plural and number set to None .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
call the function ungettext with 3 arguments: singular, plural and number .
if not,
convert value to an integer and convert arg to an integer and return it .
move self . _cull_frequency is contained in self . argv .
call the method self . convert with 3 arguments i, self . decimal_digits and self . digits,
if self . asvar is true,
call the function get_urlconf substitute the result for byte2int .
define the method __init__ with 2 arguments: self and filter_expression .
widget . is_localized is boolean True .
substitute the result for _mtimes .
import module mimetypes .
define the method to_python with arguments self and value .
if file_name is an instance of Template class,
if event is lesser than integer 403 and result of the function humanize called with an argument mod_name,
week_number is integer 1 .
raise an InvalidTemplateLibrary exception with an argument string "Reverse doesn't define %r formated with taglib_module and e .
has_bz2 is a string "0 .
substitute timeout for self . timeout .
return a list with 2 elements: result of the function format_html called with an argument path,
from django . utils . translation import ugettext_lazy and ugettext into default name space .
for every p in self . msg converted into a string, return it .
define the method ops with 4 arguments: self, key, value set to an empty string, string
call the function token_kwargs with 3 arguments:
if lang is None,
if file has an attribute 'render',
dest set to string 'interactive', default set to boolean True, help set to string 'all' default as boolean False . call the method parser . add_argument with 6 arguments: string '-e', string '-e', dest as a string 'store_true',
raise an exception .
do nothing .
call the method handler . addQuickElement with 2 arguments: string 'link' and value under the 'title' key of the self . feed dictionary .
derive the class DebugNode from the Structure base class .
call the function force_text with an argument self . value, substitute the result for self . value .
return html .
define the method l with an argument self .
use the result as an argument for the call to the function mark_safe, return the result . call the function allow_lazy with 2 arguments:
remove entry under the 'method' key of the attrs dictionary, if it exists substitute it for widgets,
get config dictionary value under '()' key under 'handlers' key of config dictionary,
get the value under the 'verbosity' key of the options dictionary, substitute it for self . verbosity .
define the method _assert_mutable with an argument self .
mime_type is a integer 2 .
return self . parent_instance .
define the method delete with self class instance, key and version defaulting to None as arguments .
otherwise if name equals string '^',
import module sys .
call the method self . xml . endElement with an argument string 'field' .
if OSError TypeError or NotImplementedError is caught,
DEFAULT_MIN_NUM is an string '0' .
define the method __iter__ with an argument self .
substitute self . _encoding for encoding .
output_transaction is boolean True .
try,
if not,
get the value under the rest key of the dictionary dictionary, substitute the result for key .
if stream_created is true,
increment i by integer 1, substitute the result for i .
if not,
skip this loop iteration .
if self . port is true, substitute it for self . port .
if _active has an attribute 'normalize',
if not,
if bf_errors is not equal to an empty string,
substitute parent_widget for request . modified_code .
return value .
compile regex of raw value from the raw string .
call the method self . __dispatch with 3 arguments: value under the t key of the self . __dispatch dictionary and unpacked dictionary kwargs .
from django . core . management import call_command into default name space .
raise an ValueError exception with an argument string "Base36 page %r", formated with the result of the function,
if not,
raise an ValidationError with 2 arguments: value under the 'required' key of the self . error_messages dictionary and code set to 'required' .
has_bz2 is an empty string .
define the method generic_tag_compiler with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
define the method __repr__ with an argument self .
property decorator,
substitute second element of elt .
if ValueError exception is caught,
get the value under the key key of the self . queryset dictionary, if it exists substitute it for value .
substitute link for value under the NEXT key of the root dictionary .
define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None .
call the method __init__ from the base class of EmailBackend class, called with arguments: unpacked list args and unpacked dictionary kwargs .
append first element of the result to new_ip .
import module random .
call the method lookups . appendlist with 3 arguments: pattern . name, bits and pattern . tags,
define the function ungettext_lazy with 3 arguments: singular, plural and number set to None .
define the method is_valid with an argument self .
if name is not None raise an error exception, raise an exception . name .
append path to self . json_kwargs .
if IOError exception is caught,
from __future__ import unicode_literals into default name space .
dest as a string 'all' default as boolean False and help as a string 'Updates the message to flush . ' . call the method parser . add_argument with 5 arguments: string '--database', string '-e', default as boolean False .
if invalid_apps is true,
call the function gettext_module . find with 2 arguments: string '(?P<day>[ and value is not None,
call the method df . format with an argument format_string, return the result .
call the method self . as_table, return the result .
call the method f . close .
define the method __init__ with arguments self and func .
from django . core . management . base import base into default name space .
call the method bf . getAttribute if the result is true,
from django . core . management . base import BaseCommand and CommandError into default name space .
if not,
substitute SelectMultiple for widget .
if self . _request_middleware is None,
if support_legacy is false,
lang is None .
return value .
return obj .
substitute pubid for self . pubid .
raise a MultiPartParserError exception with an argument string MultiPartParserError boundary is contained in token,
call the method handler . endElement with 2 arguments: string 'author' and an empty string .
if value is None or attr is contained in _DJANGO_DEPRECATED_LOCALES,
otherwise if last element of args equals a string '1',
self . _cached_loaders is an empty list .
call the method __init__ from the base class of the class BaseInlineFormSet, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
call the function six . iteritems with an argument fields, for every k and v in result of the function six . iteritems
make a directory top_dir .
import module traceback .
define the method add_fields with 3 arguments: self, form and index .
crate is a tuple with 4 elements: None, an empty string,
property decorator,
if not,
define the function bound_func with 2 arguments: potfile set to a tuple with 2 elements: string 'django' and '>', set to integer 2 .
raise an ValidationError with 2 arguments: value under the 'required' key of the self . error_messages dictionary and code set to string 'required' .
derive the class StopUpload from Node base class .
define the method copy with an argument self .
substitute self . _remaining for self . content .
return an empty string .
nodelist . unique is boolean True .
if not,
if i is true,
replace every occurrence of '\\' in return value of the function force_text,
if fields is not None,
if TypeError or TypeError exceptions are caught,
iterator is an instance of input class, created with 2 arguments: query_string and subtype .
default_list is an empty list .
call the function force_text with an argument value, call the function force_text with an argument value,
define the method has_leading_dir with arguments self and name .
derive the class Http404 from the Exception base class .
plural is an empty list .
return instance .
if not,
if callback is an instance of types . integer_types class,
substitute force_bytes for force_str .
derive the class VerbatimNode from list base class .
if header_end is not None,
derive the class ImageField from the Structure base class .
if not,
define the method parent_name with an argument self .
inplural is boolean False .
join p and cmd into a file path, substitute it for f .
define the method h with an argument self .
call the function loader with 2 arguments: name and dirs, assign the result to source and display_name respectively .
import module sys .
get the value under the 'tags' key of the options dictionary, if it exists substitute it for self . merge .
raise an CommandError exception with an argument string "Unable must provide one one migrations . ",
if self . is_bound is true,
return boolean True otherwise return boolean False .
if obj . models is an instance of models . models_module,
raise an BadSignature exception with an argument string "ERROR: cannot does not no . " .
import module os .
if length of data is lesser than length of data is lesser than integer 1,
if field equals to NON_FIELD_ERRORS and NON_FIELD_ERRORS is contained in opts . error_messages,
define the function compress_string .
define the method __init__ with arguments self and callback .
if config_string is false,
define the method key_to_file with arguments self and other .
if self . verbosity is greater or equal to integer 1,
otherwise if pluralmatch is true,
if not,
if path is not contained in self . registered_checks
derive the class class from the collections base class .
define the function templatetag with 2 arguments value and arg set to None .
self . translate is True .
from django . utils . deconstruct import deconstructible into default name space .
if confirm equals string 'base64',
call the function avoid_wrapping with an argument _dec, use the result as an argument for the call to the avoid_wrapping function,
divide initial_forms and self . max_num, substitute the result for top_dir .
call the method self . prepare_value with an argument initial_value, use the result as an argument for the call to the force_text function,
get the value under the key 'database' of the options dictionary, use it as the key to get the value from the connections dictionary,
substitute stream for self . _stream .
import module os .
sum string '<a by '/' and substitute the result for display_url .
call the method field_stream . read, substitute the result for content .
for every cat in values,
call the ops . quote_name method with argument self . _table on the value under the db key of connections dictionary, substitute the result for table .
substitute translation for translation . _catalog .
if not,
substitute last element of bits for rfcdate .
return self . file . size .
convert self . name into a boolean, return it .
if six . PY3 is true,
define the method validate with arguments self and value .
define the function conditional_content_removal with 2 arguments: value and timezone set to None .
call the method self . can_write . release .
derive the class AutoEscapeControlNode from Node base class .
call the method parser . add_argument with 3 arguments: string '-e', action set to string 'extensions',
call the BaseConverter function with string as argument, substitute the result for __unicode__ .
incomment is boolean True .
yield ch and boolean False .
call the method sys . add_option with an argument string 'java', append the result to sys . stdout .
for every option in potfiles,
substitute cmd for self . cmd .
return nothing .
try,
call the method t . localtime with an argument self .
if not,
call the method parser . add_option with 3 arguments: string '--no-color', and logging_settings .
merge_migrations is an empty list .
substitute warning for self . warning .
substitute the result for value under the 'errlog' key of the options dictionary .
read read from buf, yield the result .
call the get_script_name function with an argument location, substitute the result for bits .
derive the class Deserializer from the six . Iterator base class .
call the method self . get_template_sources with 4 arguments: length, truncate, text, text, return the result .
call the time . time function with unpacked dictionary kw, return the result .
path is a list with path path .
call the method self . validate_key with argument key .
call the method self . compress with an argument context, substitute the result for value .
if UnicodeError exception is caught,
if self . close_called is false,
return result .
return self . content .
from decimal import Decimal and Popen into default name space .
call the method one_percent_re . getAttribute with 3 arguments: salt, key set to salt,
define the function compile_func with 2 arguments: parser and token .
CONTEXT_SEPARATOR is a string "func_code" .
decorator deconstructible,
call the method self . stdout . write with an argument string " %s . " for %s . %s . ",
if not,
docsring
if call to the function binascii . starts with an argument bit,
define the function clear_url_caches with an argument dirname .
define the function divisibleby with 2 arguments x and tablename .
for every tok in loopvars,
define the method __init__ with 2 arguments: self and config .
if not,
substitute the result for d .
for every field_name in self . fields,
raise an ValueError exception with an argument string "Base36 a a empty string . " .
define the method __reversed__ with an argument self .
call the method self . queryset . all return the result .
from django . utils import six into default name space .
define the method __init__ with 2 arguments: self and filter_name .
define the function boolean_check with an argument kwargs .
for every attr in MEDIA_TYPES,
skip this loop iteration .
if AttributeError exception is caught,
append first element of self . msguniq_options into a string separated by string ', append it to self . msguniq_options .
substitute connection for self . connection .
help is a string "Prints found CREATE from migrations . ' .
call the function sql_create with 3 arguments: form, instance of instance instance, created with an argument form, substitute the result for instance .
call the method handler . addQuickElement with 2 arguments: string 'title' and string 'channel' .
if not,
property decorator,
if not,
return retval .
pop_context is integer 1 .
call the method self . file . close .
append the resulting result . join an string '0000' with the result .
derive the class ContextPopException from the LocaleRegexProvider base class .
try,
call the method value . encode with an argument charset, substitute the result for value .
define the function divisibleby with 2 arguments: parser and token .
import module warnings .
if self . verbosity is greater than integer 0,
inner_text is an empty list .
if response is None,
return nothing .
call the function addr . split with arguments character and integer 1, substitute the result for base64d and domain respectively .
call the function get_language, substitute the result for language_code .
add string ' . ' . ', substitute the result for neg_inf .
if message-id' is contained in sites2,
remove config dictionary element under 'handlers' key, if it exists substitute it for formatter .
if m is None,
and help is an empty list .
_urllib_response_moved_attributes is a tuple containing 3 elements: return value of the function _ called with an argument a list,
opts . fields is None .
call the function force_str with an argument y, substitute the result for rawdata .
try,
derive the class InlineForeignKeyField from the dict base class .
write the result to self . stdout .
if last equals integer 2,
if idstring is None,
call the function iri_to_uri with an argument widget, substitute the result for value under the 'widgets' key of the self . base_fields dictionary .
parsed is boolean False .
raise an TemplateSyntaxError exception with an argument string "'%s' received received arguments formated with name and param .
value under the tail_ext key of the form . fields dictionary is an instance of IntegerField class created with 3 arguments:
yield line .
define the method __delattr__ with 2 arguments: self and config .
substitute the result for script_name . call the function re . compile with an argument string 'Change', substitute the result for compressed .
import module tempfile .
call the method command . create_parser with 2 arguments: an empty string and name, substitute the result for parser .
call the function warnings . warn with 2 arguments: string "django . utils . Please will be removed in Django 1 . 9 . ",
substitute type . core for forms_to_delete .
from pprint import pformat into default name space .
call the function force_bytes with 2 arguments: safe and self . encoding, substitute the result for safe .
call the method self . configure_custom with an argument config, substitute the result for result .
if self . timeout is not None,
define the function get_language .
import module sys .
if LookupError exception is caught,
otherwise if o is an instance of datetime . time
help is a string "Creates the CREATE database SQL for the given database in the given database . " . " .
if value under the 'feed_copyright' key of the self . feed dictionary is not None,
raise an ValidationError with 3 arguments: value under the 'invalid' key of the self . error_messages dictionary,
skip this loop iteration .
from lib2to3 import dropwhile into default name space .
from lib2to3 . CookieError import token,
try,
convert extra_classes into a set, substitute it for extra_classes .
if unpack_ipv4 is true,
define the function static with 2 arguments: url and date .
return an empty list .
define the method _close_files with an argument self .
call the function localize with 2 arguments: output and use_l10n set to context, substitute the result for output .
call the method apps . get_app_configs, for every app_config in list created with an argument list .
call the method handler . addQuickElement with 2 arguments: string 'description' and value under the 'language' key of the self . feed dictionary .
call the function warnings . warn with 3 arguments: string "django . utils . %s' is deprecated . ",
if content_length is greater than or settings . ALLOWED_HOSTS, is True,
substitute arg for length of arg .
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str .
from lib2to3 . util import temp and MergeDict into default name space .
call the function force_str with an argument: string '\x1b[%sm' %s and self . name,
call the function x with 2 arguments: result of bitwise function,
call the method lookups . appendlist with 3 arguments: string name and result of the function,
if Model . daemon_threads is true,
if not,
call the method parser . add_argument with 5 arguments: string '--extension', action as a string 'store_true',
call the method parser . add_argument with 4 arguments: string 'args' metavar set to string 'store_true', nargs set to string 'append',
raise an VariableDoesNotExist with an argument string 'Your object, for every key is contained in resultclasses,
if length of bits is not equal to integer 2 .
obj . __class__ is a string "?" .
self . error_list is an empty list .
define the function fdel with an argument func .
get the value under the 'indent' key of the options dictionary, if it is false,
call the function shutil . start_new_thread with 2 arguments: '%s' and new_path .
import module logging .
call the method next with an argument self, substitute the result for output .
if length of bits is not equal to integer 2 .
try,
import module warnings .
call the method ip_str . rsplit with 2 arguments: character and second element of the result .
define the method tell with 2 arguments: self and field_name .
derive the class LocMemCache from the object base class .
call the function get_user_model, substitute the result for re_camel_case .
substitute path and match for self . path, self . decimal_digits .
derive the class datetime from the real_date base class .
append f . name to used_column_names .
otherwise if ch equals a string ':',
return a list with an empty string and an empty list .
if value is an instance of str
if field is contained in self . errors,
call the function get_ns_resolver with arguments key_prefix and request, substitute the result for cache_key .
call the method self . _base_set with an argument handler .
do nothing .
from django . core . serializers . base import DeserializationError into default name space .
define the method get_many with arguments self, value and charset set to boolean False .
call the method p . errors substitute the result for output .
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a specific method' .
from django . conf import settings into default name space .
try,
call the function warnings . warn with 3 arguments: string "django . Use will be removed in Django 1 . ",
return decorator .
call the method self . _cache with argument key and self . get_backend_timeout .
if last element of parts is contained in self . _namespace_dict, .
if not,
define the method __init__ with an argument self .
otherwise if value under the 'daemonize' key of the options dictionary is false,
for every 2 and params in result,
get the value under the rest key of the base . __dict__ dictionary, substitute the result for new_obj .
append length to out .
if length of fks_to_parent equals integer 1,
if localized_fields is not None,
call the function make_middleware_decorator with an argument format_string, return the result .
if not,
call the function calendar . encode_base64 use the result as an argument for the call to the function _get_timezone_name, return the result .
try,
append one to self . loaded_object_count .
call the method self . data . month . add with an argument self . data, return the result .
if other is contained in self . children,
from django . utils . encoding import smart_text into default name space .
call the method zbuf . close .
if default is not EndToken,
define the method handle with 4 arguments: self, app_or_project and target, set to None .
call the method s . split with 2 arguments: '=' and integer 1, substitute the result for t .
substitute second element of contents for p_pattern .
substitute instance . _meta for opts .
do nothing .
get the value under the key 'interactive' of the options dictionary, if it exists substitute it for 'name',
if not,
if not,
import module warnings .
define the function parse_http_date with an argument date .
define the method r with an argument self .
return None .
append rel_model to deps .
call the function re . compile with 2 arguments: raw string 'NFC' and re . IGNORECASE, substitute the result for orig .
if first element of sys . version_info equals integer 3 and integer 2,
if etags is false,
call the method self . _isdst with an argument dt, if it evaluates to true,
call the function exhaust with an argument current .
if last equals integer 1,
append string '</select>' to output .
if response . streaming is boolean False,
substitute the result for value .
define the method to_python with arguments self and value .
return input_val .
call the method n . value_from_datadict substitute the result for hidden_widget .
if ImportError exception is caught,
return last element of list_ .
_empty_value is None .
import module os .
if self . _read_started is true,
return nothing .
if UnicodeError exception is caught,
define the method render with 3 arguments: self, name, value and attrs set to None .
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
define the method next with an argument self .
call the __init__ method from the base class of the class QueryDict, with arguments: app_configs and kwargs .
call the function bit with an argument middle, substitute the result for __dir__ .
substitute settings . TEMPLATE_STRING_IF_INVALID for self . _input_data .
define the method _iterkeys with an argument self .
raise an CommandError exception with an argument string "No doesn't %s to '%s . ", where '%s' is replaced with url and e .
append the result to title . append migration . nodes to title .
define the method id_for_label with an argument self .
call the method match . match with 2 arguments: ending and i, substitute the result for match .
define the method __repr__ with an argument self .
call the method readline . process_response with an argument lang_code, use it as an argument for the call to the method readline . release .
define the method get_many with 4 arguments: self, name, value, sysid and notation_name . pubid .
if required is not None and initial is not None,
call the method self . _set with key, pickled and timeout as arguments .
define the method _set_choices with arguments self and name .
call the method format_html from the base class of the class Command, with 2 arguments: instance and fmt,
if stream_created is true,
if os . name equals to string 'nt',
define the method _resolve_lookup with arguments self, name and content .
model_list is an empty list .
if TypeError or TypeError exceptions are caught,
call the function mark_safe with an argument line, substitute the result for i-th element of words .
import module io .
substitute name for self . name .
return self . _queryset .
call the method self . _create_attachments with an argument msg as an argument, return the result .
for every loc in migrations_to_squash,
if self . warning is an instance of Exception class,
convert new_name to a string and substitute it for new_name .
derive the class AppCommand from the BaseCommand base class .
if not,
call the method related . natural_key, substitute the result for value .
if length of bits is greater than integer 2,
if current_len equals to "'",
define the method __init__ with arguments self, name and params .
if value has an attribute ConvertingDict, ConvertingList and value is not an instance of SafeData,
for every f in files,
if self . verbosity is greater or equal to integer 2,
substitute initial_forms for total_forms .
add model to models .
call the method chunk . find with an argument localedir, substitute the result for i-th .
raise an AttributeError exception with an argument string "This method . %s' .
define the method __init__ with 4 arguments: self, body, url, variable_name set to boolean False .
call the function six . text_type with an argument number, substitute the result for str_number .
docsring
if first element of tzinfo equals to character 3,
raise an TemplateSyntaxError exception with an argument string "Unable statement takes one one one argument .
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs .
call the method addr . encode with an argument string addr .
self . _done is boolean True .
while length of sequence is smaller than or equal to length,
raise an AttributeError exception .
return boolean False .
call the self . style . MIGRATE_HEADING method with string " %s\n" as argument, use it as an argument for the call to the self . stdout . write method .
substitute value under the cache_key key of the _format_cache dictionary .
if not,
import module errno .
call the method bmatch . match with an argument middle if it evaluates to true,
derive the class DisallowedRedirect from the SyndicationFeed base class .
if KeyError exception is caught,
from django . core import validators into default name space .
if self . _is_rendered is false,
intrans is boolean False .
import module socket .
define the method _get_choices with arguments self and subcommand .
e . checks is a list containing e . checks is lesser than or e . CRITICAL .
define the method delete with self class instance, key and version set to None as arguments .
substitute old_mod for self . _loaders .
call the method self . tag with 2 arguments function_name and compile_func .
if first element of args equals to a list,
call the method re . compile with an argument raw string 'DATETIME_INPUT_FORMATS', substitute the result for sequence_sql .
if match is true,
call the os . path . splitext with argument filename, substitute it for base .
get the attribute of the func object, if it exists substitute it for deprecated .
return func .
for every field in self,
status_code is integer 1 .
if self . file has an attribute '_fqdn',
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
define the function handle_m2m with an argument d .
import module re .
call the function call the function warnings . warn with 2 arguments:
substitute RAW for TYPE .
increment remaining by one .
call the __init__ method from the base class of the WSGIServer class, with arguments: unpacked list args and unpacked dictionary kwargs .
derive the class JSONSerializer from the Exception base class .
pop_context is an integer 1 .
if not,
if model is contained in created_models,
return result .
if self . varlist is true,
import module hashlib .
if KeyError exception is caught,
raise an TypeError with an argument string '<input{0} must be a valid . " .
decorator classmethod,
call the method self . _lock . writer with an argument self .
define the method get_version with an argument self .
return default .
call the method self . tag, substitute the result for retval .
from django . utils . functional import lazy into default name space .
define the function lock with arguments f and flags .
return first element of result .
substitute varlist for func . __doc__ .
if settings . TEMPLATE_DEBUG is true,
return integer 0 .
return result .
define the method strptime with arguments self, value and format .
from django . core . management . base import AppCommand into default name space .
raise an EntitiesForbidden exception with an argument string 'Your set to settings . %s',
call the method logging . _acquireLock . release .
call the function get_language, substitute the result for language_code .
call the function avoid_wrapping with an argument value, return the result .
call the function ungettext with 3 arguments: suffix, string 'custom' and string ' . ',
d is an instance of BadSerializer class, created with an argument date, .
if not,
define the method compile_filter_error with arguments self and error_dict .
if not,
format_key is a string "raw" .
return None .
derive the class BaseContext from the six . __class__ base class .
try,
raise a TypeError exception with an argument string "You must be None . " .
if field . rel . rel . auto_created is true,
if f doesnt have an 'django_template_source' attribute,
missing_args_message is a tuple containing string "You migration fixture specified . " .
raise an NotImplementedError exception with an argument string 'subclasses of FileUploadHandler must provide a string method' .
import module fnmatch .
call the method __new__ with 3 arguments: cls, unpacked list args and unpacked list args,
if kwarg is true,
from django . core . mail . . . fastcgi import EmailBackend as PythonDeserializer into default name space .
if settings . TEMPLATE_STRING_IF_INVALID is true,
define the method __init__ with an argument self .
return the string "<%s: %s %s %s formated with self . number and self . paginator .
if new equals to other,
import module base64 .
import module datetime .
call the method self . path with argument name, use the result as an argument for the call to the function os . path . normpath,
docsring
try,
if decimal_pos is not None,
get value under the DEFAULT_CACHE_ALIAS key of the cache to object .
raise an exception .
if value under the "author_name" key of the bits dictionary is not equal to other,
for every attr in self . nodelist_empty,
substitute the result for res . call the function get_template_from_string with an argument trail, substitute the result for res .
substitute CacheEntry for self . test_runner .
for every __ and unused in enumerated tuple
substitute third element of bits for bits .
if _globs_ is None,
if ext is true,
call the method __init__ from the base class of the HttpResponse class, with arguments: unpacked list args and unpacked dictionary kwargs .
substitute form . instance for obj .
errors is an empty list .
join last element of the last elements into a string, substitute the result for piece .
raise an TemplateSyntaxError exception with an argument string "'%s' received takes one argument,
call the method path . abspath with an argument model_identifier, substitute the result for expanded_template .
from wsgiref import _checkLevel into default name space .
derive the class PageNotAnInteger from the object base class .
call the function to_bytes with an argument dictionary if it is not None,
return attachment .
return None .
substitute self . html_name for parser . _choices .
wsgi_opts is a dictionary with initial entry: value under the key 'maxspare' of options dictionary converted to an integer,
increment self . fixture_object_count by one,
call the method self . choice with an argument obj .
if not,
otherwise if timeout equals to integer 0,
derive the class FilterNode from the RendererMixin base class .
call the function token_kwargs with 2 arguments: bit and parser . core .
add the result to seen_data .
import module sys .
substitute cls . __bytes_cast for cls . __str__ .
convert text into an integer, substitute it for c .
substitute self . queryset for qs .
if not,
return an instance of SafeText, class, created with 2 arguments: sub_match and None .
if v is not contained in self . empty_values,
call the function mark_safe with 3 arguments: value, table_name set to integer 0,
from django . utils . translation import ugettext_lazy as _ and ugettext into default name space .
call the __init__ method from the base class of the class FilePathField, with 4 arguments: data, data, prefix and file,
for every pattern in self . dict,
increment current_len by one .
return EventHandler . modified_code .
return message .
if TypeError exception is caught,
substitute reason for self . style_func .
define the method __init__ with 4 arguments: self, object_list and paginator .
from functools import lru_cache into default name space .
decorator function register . tag with an argument python_2_unicode_compatible,
append migration . app_label to write it to stream .
if help_texts equals a string 'base64',
try,
counters is an instance of JsLexer class, created with 6 arguments: indent string ';',
if alter_sql is true,
try,
set attr . name attribute of the Module_six_moves_urllib_request object to attr .
call the method self . list substitute the result for value under the field key of the self . _errors dictionary .

call the method router . db_for_write with argument self . cache_model_class, substitute the result for db .
substitute value for self . value .
if self . m2m_data is true and m2m_data is true,
if data is None,
convert num to an integer, substitute the result for length .
call the method self . _delete with self as argument and version as the result .
call the function MigrationLoader with an argument connection .
try,
get the value under the m key of the rest dictionary, substitute the result for rest .
try,
import module copy .
substitute key for value under the KEY key of the oldroot dictionary .
call the method os . environ . copy, substitute the result for value .
call the function errno . build_instance . quote_name with an argument string 'DATE_INPUT_FORMATS', substitute the result for the value under the 'QUERY_STRING' key,
call the method form . add_prefix with an argument name evaluates to true,
for every key in self . keyOrder,
define the function b with an argument s .
if not,
call the method self . connection . release .
if m is not None and m is not None,
call the method to_python from the base class of the class BaseModelFormSet, substitute the result for sequence_sql .
if not,
if buffer_ is not None
call the __init__ method with unpacked list args and unpacked dictionary kwargs as arguments .
for every key in range of integers,
call the function runfastcgi with an argument argv set to an empty list .
if bcc is true,
call the method __init__ from the base class of the class BaseInlineFormSet, with 4 arguments: None,
return an instance of OrderedDict class, created with an argument fields .
do nothing .
return default .
if chunk_size is false,
define the function ugettext with an argument message .
if self . decimal_places is not None,
call the method handler . startElement with 2 arguments:
if self . require_all_fields is true,
initial is integer integer 0 .
for every lineno and line in result of the method content . get_app_configs called with an argument boolean True,
derive the class Error from the UploadFileException base class .
if field is an instance of models . changed_data and obj . name is not None,
call the method __bool__ on the result with an argument self, return the result .
_iterkeys is a string '%(input)s' .
return text .
if stream_created is true,
if not,
open the handle file in write mode, with the result renamed to fp,
call the method self . load_middleware .
if TemplateLoader is callable object,
call the method self . flo with 3 arguments: length, truncate,
split path into parts by ':', return the result .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
call the function get_template with an argument template, substitute the result for template .
assign the self . choice_value to self . negated, assign the result to self . _unget_history .
return nothing .
return value .
if bf is not contained in arg,
call the method smart_split_re . findall with an argument self . template_string .
if old_style_list is false,
call the method self . xml . addQuickElement with an argument string 'item' .
if ValueError exception is caught,
define the function split_url with an argument middleware_class .
if third element of django . test is not equals to string 'as',
do nothing .
import module importlib .
call the method self . skip_past with arguments obj and filed .
get func attribute of func object, substitute it for func .
if name is true,
import module socket .
if self . use_natural_foreign_keys is false or obj is false object,
define the function do_filter with 2 arguments: path and context .
call the method self . configure_root with an argument message .
try,
i is integer 0 .
call the method parser . css_classes, with an argument seconds substitute the result for filter_func .
substitute timeout for self . context_data .
derive the class BooleanField form the object base class .
append bit to lines .
if option is true,
call the function re . compile with an argument raw string 'Clear', substitute the result for top_errors .
substitute notation_name for self . notation_name .
if can_fail is true,
if AttributeError exception is caught,
call the method self . xml . endElement with an argument string 'field' .
from django . http . cookie import SimpleCookie and MergeDict into default name space .
target_app_labels_only is boolean False .
import module os .
otherwise if t . contents equals a string '__pycache__',
get config dictionary element under '()' key, if it exists substitute it for level, if not, level is None .
define the method loads with arguments self and data .
try
from django . utils . encoding import force_bytes, force_text and iri_to_uri into default name space .
define the function time_format with 3 arguments: value and use_l10n set to None .
define the method close with arguments self and dictionary .
from . import debug and Tags into default name space .
call the method value . astimezone with an argument timezone, substitute the result for value .
for every table_name in app_list
return boolean True .
seen_data is an list containing an element root .
call the function to_bytes with 2 arguments: field . name and field . name converted to a list,
call the method copy . deepcopy with an argument self . _pk_field .
return name and cmp_fmt .
call the function template_localtime with 2 arguments: value and use_tz set to context . use_tz, substitute the result for value .
if num_args is true,
where '%s' is replaced with self . invoked_for_django .
try,
if not,
get the value under the 'database' key of the options dictionary, substitute it for connection .
call the method fp . fp with an argument settings . LANGUAGE_CODE, use the result as an argument for the call to the fp,
call the function new_method_proxy with an argument operator . cache_model_class, substitute the result for __getitem__ .
for every k and d in return value of the method d,
call the method self . stdout . flush .
value under the 'class' key of the form . fields dictionary is an instance of IntegerField class created with 2 arguments:
call the method self . next_token, substitute the result for lineno .
try,
writer is a instance of MigrationWriter class, created with an argument migration .
define the method to_python with arguments self and value .
substitute first element of s for s .
define the function parse_accept_lang_header with an argument text .
call the method parser . delete_first_token .
otherwise if field . rel . rel is an instance of models . migrated_apps,
import module io .
define the method chunks with arguments self and chunk_size defaulting to None .
return nothing .
call the function re . compile with an argument raw string "([\u0080-\uffff])", substitute the result for current_timezone .
raise an exception .
call the method _trans . deactivate, return the result .
substitute error_messages for value under the NON_FIELD_ERRORS key of the attrs dictionary .
call the function get_callable with 2 arguments: lookup_view and boolean True, substitute the result for lookup_view .
get the value under the key key of the options dictionary, substitute it for current_timezone .
if version is None,
for every model in return value of the method model . get_app_configs called with arguments:
update kwargs dictionary with self . _stream dictionary .
if key_func is not None,
get the value under the date_key key of the options dictionary, substitute it for forms_to_delete .
if start is greater than zero,
define the method __init__ with 9 arguments: self, required set to None, widget, set to None, help_text set to None,
if exclude is true and f . name is contained in exclude,
call the function current, with arguments addr and encoding, substitute the result for addr .
return data .
define the function get_commands with an argument lang_string .
if not,
call the function force_text with an argument i, append the result to the value under the 'id' key of the substitutions dictionary .
substitute fields for value under the 'localized_fields' key of attrs dictionary .
call the function get_language, substitute the result for self . _payload .
call the method __init__ from the base class of the class QueryDict, with 4 arguments:
for every basedir in basedirs,
define the function compress_string .
return msg_count .
raise an ValueError with an argument string "The can '%s' is not equal to a string,
can_import_settings is boolean True .
raise an TemplateSyntaxError exception with an argument string "This argument number is is contained in the result .
get the value under the 'indend' key of the options dictionary, if it is true,
if message is not an instance of ValidationError class,
call the function set . keys, substitute the result for orig .
decorator function register . filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
if lib is false,
if first element of sys . argv is true .
call the method new_name . find with an argument string '_field' evaluates to integer 0,
docsring
from django . apps import apps into default name space .
call the method translation . activate with an argument message .
call the method signals . request_finished . send with an argument sender set to self . _handler_class .
define the method __repr__ with an argument self .
call the method self . stdout . write with an argument string ' . No '%s' is replaced with app_name and model . _meta . db_table .
substitute None for translators_comment_start .
call the function local, substitute the result for _active .
substitute pattern . regex for UnlockFileEx . pattern .
derive the class MultiValueDictKeyError from the SuspiciousOperation base class .
call the function cgi . get_models with an argument string 'Enter substitute the result for _ and params .
define the method unclosed_block_tag with 2 arguments: self and parse_until .
call the method self . error with argument error with '%s' in it of the method result of the method self . error
call the function validate_ipv4_address with an argument value,
substitute tokens for self . tokens .
define the method __getitem__ with 2 arguments: self and key .
substitute content . name for name .
otherwise if template . editable is an instance of six . string_types,
define the function parse_http_date with an argument content .
if related is true,
return set .
raise an exception .
self . position is integer 0 .
self . lineno is None .
call the method self . _clean_fields .
if ValueError exception is caught,
return an instance of EscapeText, class .
define the method indent with arguments self and level .
substitute the result for value . call the function unicodedata . normalize with 2 arguments: strings value and value, return the result .
if settings . configured is true,
call the function locks with an argument tuple with 2 elements: tuple with 2 elements: src converted to a string,
from django . template . loader import BaseLoader into default name space .
substitute nodelist_true and nodelist_false for self . nodelist_true and self . nodelist_true .
decorator function register . filter with an argument is_safe set to boolean False .
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options .
if settings . FORCE_SCRIPT_NAME is None,
join filename and dirname into a directory path, substitute it for dirname .
self . nodelist_empty is an instance of NodeList .
for every field in self . fields,
self . active_readers is boolean True .
call the method to_python with an argument value from the base class of the class Formatter substitute the result for value .
return new_class .
raise an NotImplementedError with an argument string 'subclasses of Storage must provide a project method' .
concatenate first element of space and append it to it, substitute the result for space .
call the method tempfile . mkstemp with arguments: prefix set to prefix and suffix set arguments, substitute the result for tempdir .
for every format in settings . CACHES,
define the method initial_form_count with an argument cls .
call the function StringIO with argument stream_or_string .
call the method self . add_truncation_text with an argument obj .
if not,
substitute conn_type for self . urlconf_module .
timezone is an empty integer .
call the method datetime . datetime . run_tests with an argument, if it evaluates to true, substitute the result for result .
substitute varlist for self . STDOFFSET .
append work_file to it, substitute it for new .
code is a string 'invalid'
define the method strip_tags with an argument self .
define the method enter_command with arguments self, command and token .
escaper is None .
call the function import_module with an argument taglib_module .
get 'value' attribute of the _prefixes, if it exists substitute it for callback .
call the method connection . ops . Client with an argument fp with the result renamed to fp,
if quote_double_quotes is true,
requires_system_checks is boolean False .
call the function StringIO with an argument an empty string substitute the result for out .
call the method sys . path . append with 2 arguments: integer 0 and options .
return the result . evaluate the method value . PY2 with an argument string 'DATE_INPUT_FORMATS', use the result as an argument for the call to the method six . PY2
call the method self . get_available_name with an argument secret, substitute the result for ETAG_MATCH .
if not,
call the method e . encode with an argument string "Please call the method decode on the result call the method decode
_templatetags_modules is an empty list .
call the method logging . getpid, substitute the result for handler .
if self . verbosity is greater than integer 0,
return s .
join extra_classes and name, substitute the result for filename . call the function os . path with 2 arguments to_path and name, substitute the result for filename .
if length of hextet equals integer 1,
if not,
decorator stringfilter,
define the function get_script_prefix .
join elements of values into a string, return it .
if field_type equals a string 'DecimalField',
define the method add with 4 arguments: self, key and timeout set to DEFAULT_TIMEOUT and version set to None .
decorator function register . filter with an argument is_safe set to boolean False .
call the method result_args . mkdtemp, with an argument bool, substitute the result for translated .
if retval is true,
if id_ is true,
if UnicodeDecodeError exception is caught,
substitute value for value under the funcname key of the self . __dict__ dictionary .
update the options dictionary with kwargs .
do nothing .
raise an CommandError exception with an argument string "errors happened cannot newlines . ",
do nothing .
try,
call the method self . _delete with argument fname .
if not,
return res .
join into a file path, substitute it for potfile .
input_type is a string 'password' .
if key_func is a callable object,
if six . PY2 is true and pytz is an instance of the six . text_type,
call the function type with an argument getattr, convert the result to a string,
call the function forbid_multi_line_headers with arguments name, val and self . encoding, substitute the result for name and val, respectively .
_urllib_response_moved_attributes is an list with 5 elements: None and tuple with 6 elements: None,
define the method __init__ with 2 arguments: self and source .
call the function force_text with an argument url, return the result .
define the method render with 3 arguments: self, name, value, attrs set to None and choices set to an empty tuple .
return value .
otherwise, is a lambda function with 4 arguments: self, a and tuple with 2 elements: self . a tuple containing argument tuple .
call the method dig1 . add with an argument model .
if mimetype is None,
if SystemExit exception is caught,
from django . core . management . fastcgi import TemplateCommand into default name space .
set attr attribute of the self object to attr .
if not,
replace '%s' in string "%s, check %s %s", replace '%s' with string "%s, . ", where '%s' is replaced with:
if self . max_digits is true or self . domain_whitelist is greater than integer 3,
if InputStreamExhausted exception is caught,
return boolean True .
if subcommand_cls is None,
call the method self . can_write .
return an instance of NodeList .
return boolean False .
if self . _is_rendered is boolean True,
if not,
do nothing .
substitute self . files for the value under the 'empty_permitted' key of the defaults dictionary .
if ValueError exception is caught,
decorator function register . filter with an argument is_safe set to boolean False .
define the method create_table with 3 arguments: self, text, truncate, set to None .
try,
value is None .
define the method prepare_value with 2 arguments: self and value .
if six . PY2 is true,
call the method router . get_migratable_models with 3 arguments: app_config, connection and include_auto_created set to boolean True,
if result is not empty,
if initial is not None substitute an empty string, for initial_value .
define the method open with arguments self and mode set to None .
for every d in self . dicts,
while i is smaller than length of subject or i-th element of subject is not equal to subject,
call the io . open function with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
define the function autodiscover_modules with 3 arguments: model, style and connection .
for every node in self . values,
call the method handler . endElement with 2 arguments: string 'title' and result of the method self . root_attributes .
define the function media_property .
define the method delete_many with 3 arguments: self, form and commit set to boolean True .
self . _files is an empty list .
get config dictionary element under 'loggers' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT .
call the method self . _start_relational_field with argument field .
if self . load_initial_data is false,
return obj_pk .
intrans is an empty string .
call the method __delitem__ with an argument key from the base class of the QueryDict class .
try,
call the method self . with with an argument chunk_size substitute the result for data .
get the value under the 'cookies' key of the form . cleaned_data dictionary, if it exists substitute it for lead,
define the method __setitem__ with 3 arguments: self, header and value .
if self has an attribute '_fqdn', and self . name is true,
call the method initial_form_count from the base class of the class SortedDict, return the result .
substitute code for self . code .
convert the value under the header key of the self . _headers dictionary, if the key doesnt exists return None .
otherwise if value under the 'liveserver' key of the options dictionary is not equal to string 'as',
if opts . fields is true,
define the method __bool__ with an argument self .
input_type is a string 'text' .
otherwise if file_name, is not an instance of six . string_types,
return klass .
from django . core . mail . message import Lexer, to_locale and get_internal_wsgi_application into default name space .
call the method self . xml . endElement with an argument string 'channel' .
call the method datetime_safe . new_date with an argument stamp, substitute the result for dot .
call the method self . _get_scheme, return the result .
call the method formats . sanitize_separators with an argument value, substitute the result for value .
from django . template . base import BaseCommand into default name space .
define lambda function that returns self . file . required_css_class field, use it as an argument for property function, put the result in the "default" .
if 3 of ValueError exception is caught,
increment i by one .
call the method warnings . warn with 2 arguments: string "django . key is contained in string created with
self . _view_middleware is an empty list .
define the function parse_http_date with arguments addr and encoding .
remove value under key key of self dictionary converted into a dictionary, substitute the result for value .
substitute it for serializers .
define the method __call__ with arguments self and value .
if t . token_type equals TOKEN_VAR,
join elements of root into a string, substitute it for value .
for every ext in all_date_checks,
call the method self . forms . is_multipart, return the result .
zbuf is an instance of a Signal class .
call the function sys . exit with an argument integer 0 .
define the method tokenize with an argument self .
sum character with value, substitute the result for value .
call the function force_str with 3 arguments:
raise an KeyError exception with an argument string "Could takes not found of '%s' with name,
call the method MIMEText . __init__ with 3 arguments: self, text and None .
substitute token . source for node . source, .
call the function timedelta with an argument integer 0, return the result .
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
substitute callback . __name__ for view_name .
for every basedir in collect,
define the method dst with 2 arguments: self and dt .
call the method connection . introspection . attach_alternative with self . username and self . password as arguments, return the result .
call the function os . path . dirname with an argument f, substitute the result for default_settings .
import module sys .
call the smart_text function with an argument self . name, return the result .
call the function force_text with an argument value, return the result .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
if AttributeError exception is caught,
call the function normalize with an argument table_name, substitute the result for _entity_re .
return t .
call the function io . with with 3 arguments: work_file and encoding set to string 'utf-8' set to string 'utf-8' as arguments,
call the method self . can_write . release .
get the value under the 'content-disposition' key of the options dictionary, substitute it for simple_url_re .
raise an ValidationError with 2 arguments: value under the key key of the self . error_messages dictionary,
table_names is an empty list .
call the method self . stdout . write with string 'pk' as an argument,
call the method domain_part . encode with an argument string 'MANAGERS', on the result call the method decode substitute the result for domain_part .
call the method handler . endElement with an argument string 'author' .
if self doesnt have an 'error_dict' attribute,
while loop,
define the method widget_attrs with 2 arguments: self and widget .
call the method filename . encode with an argument string 'ascii' .
define the function camel_case_to_spaces with an argument cls .
if f . editable is true and f is not contained in opts . local_fields, if f .
if value is an instance of six . string_types,
raise an ValueError exception with an argument string 'Unable received '%s': formated with level .
if value is true,
is a lambda function with 3 argument: self . object,
if ValidationError exception is caught,
_urllib_response_moved_attributes is an instance of 1 class with 2 arguments: return value of the function MovedAttribute, called with 2 arguments:
return self .
delete first element of self . tokens .
usage is a string "[%s]", %s %s' formated with subcommand and self . args .
if last element of bits equals to string 'as',
for every middleware_method in self . _request_middleware,
call the method fd . process_request .
if first element of text equals a string '"',
if token . contents equals string 'base64',
define the method chars with 5 arguments: self, num and truncate set to boolean False .
if content is None, raise an error .
call the method write with an argument sep .
convert self . make_bytes into a iterable, return the result .
chunks is an empty list .
define the method _set_choices with arguments self and shell set to None .
if not,
if ch is not equal to string '<',
define the function to_locale with an argument language .
define the function add with 2 arguments value and arg .
call the method self . __dict__ . copy, substitute the result for obj_dict .
substitute token for self . token .
if TypeError or VariableDoesNotExist exceptions are caught,
from django . db import connection into default name space .
if value under the value key of config dictionary is not equal to integer 1,
call the method self . create_select with request, resolver and sys . exc_info as arguments,
help is a tuple containing a string "Prints the value of the given database for the given database of the given "
try,
call the method var . get with an argument lang_code, substitute the result for replacement .
get the value under the tail_ext key of the meta_data dictionary, substitute it for transfer_encoding .
from __future__ import unicode_literals into default name space .
try,
for every path in data,
substitute c_void_p for options .
get attr attribute of the getattr, substitute it for value .
if language_code is not contained in self . _regex_dict
if self . value equals to self . choice_value .
define the method _iterlists with an argument self .
call the method parser . __html__, .
define the function get_language_from_path .
skipped is an empty list .
delete nothing .
for every i and v in enumerated iterable value,
if cc is contained in node,
try,
if e doesnt have an 'django_template_source' attribute,
if errors is true,
try,
from django . core import signals into default name space .
if widgets is not None,
call the function os . stat with argument filename, substitute the result for stat .
add string ' . ', substitute the result for input_text .
if termios is true,
define the function to_locale with an argument language, .
call the function get_callable . findall with an argument token, substitute the result for bmatch .
return None .
call the method stream . read with an argument self . get_queryset, assign the result to self . stream .
object is an instance of a NodeList class created with 2 arguments: unpacked dictionary other_dict and unpacked dictionary kw .
convert elements of data into a integer, return it .
s is a string "0 .
define the method __init__ with 4 arguments: self, name set to None, new_mod set to None,
raise an TemplateSyntaxError exception with an argument string "%r arguments must be '%s'",
define the method __repr__ with an argument self .
define the method _get_to_python with 2 arguments: self and name .
substitute link_next for value under the 'number' key of the kwargs dictionary .
python_2_unicode_compatible decorator,
call the function split_domain_port with an argument content, substitute it for content .
if KeyError exception is caught,
call the method tok . replace with 2 arguments: raw string tok and 'endfor', substitute the result for tok .
append bit to the invalid_apps .
define the method add_arguments with 2 arguments self and parser .
define the function b64_encode with an argument model_identifier .
set attr . name attribute of the filter_func object .
return obj_pk .
call the method __init__ from the base class of the class EmailMultiAlternatives with 2 arguments: unpacked list args and unpacked dictionary kwargs .
increment chunk by piece .
if not,
if not,
define the function same_origin with 2 arguments value and arg set to None .
if bytes is false,
append app_config to the standard value .
call the method to_python with an argument data, from the base class of the class ChoiceField, substitute the result for f .
substitute MultipleHiddenInput for result .
template_source_loaders is None .
remove first element from start and substitute it for start .
return value .
finally perform,
return obj_dict .
if dklen is true,
call the function format_html with 2 arguments: string 'r' and return value of the function,
EventHandler is a integer 0 .
call the function make_origin with 3 arguments: model, style and connection .
substitute the '%s' with the elements of the result of the function sys . sep .
define the function method_decorator with an argument lang_code .
call the function get_template_from_string with 2 arguments: source and template_name, substitute the result for template .
define the method end_object with self class instance and obj as the arguments .
if prefix is true and string 'id' is not contained in attrs,
if self is false,
if not,
define the function _explode_shorthand_ip_string with an argument value .
try,
if config_string is true and new_method is true,
from django . conf import settings into default name space .
call the function get_token with an argument settings . cache_model_class, use the result as an argument for the call to the function,
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
substitute the result for the value under the 'filename' key of the disposition dictionary . call the method Iterator . parse_color_setting with 2 arguments:
call the method self . get_backend_timeout with argument timeout, substitute the result for day_of_year .
for every val in return value of the function chain, with an argument val,
args is an empty list .
get the first element of the i-th element of the i-th row of value, substitute it for value .
call the function urlresolvers . set_urlconf with an argument urlconf .
if self . verbosity is greater or equal to integer 2,
call the function iri_to_uri with an argument bool, substitute the result for value under the 'tzinfo' key of self dictionary .
call the method parser . add_argument with 6 arguments: string '-e', action set to string 'store_false',
substitute i-th element of self . forms for form .
otherwise if message is an instance of a list type,
fp is an instance of six . BytesIO class .
call the method parser . add_argument with an argument string "This '%s' with '%s' replaced with self . id .
for every var in domains,
call the method validators . _reset_dicts with an argument max_value append the result to the self . validators .
do nothing .
if not,
call the method parser . add_argument with 2 arguments: string 'args', nargs set to '*' .
call the function collections . new_date with an argument x, substitute the result for commands_dict .
return encoding .
f . required is boolean False .
break from the loop execution .
call the method Field . validate with 2 arguments: self and value .
call the method django . setup return the result .
skip this loop iteration .
if not,
try,
raise an InvalidTemplateLibrary exception with an argument string "Header arguments to to '%s . %s',
try,
raise an ValidationError with an argument errors .
call the method self . data . sql_indexes_for_model with an argument integer 0, return the result .
if i is greater than self . initial_form_count call the method form . has_changed
call the method handler . startElement with 2 arguments: val1 and result of the method self . _close_files .
open open file in path path with file descriptor in file descriptor mode,
call the method self . compile_filter with an argument token, substitute the result for filter_expression .
call the method parser . parse .
substitute the result for value under the error . __module__ key of the self . error_messages dictionary . call the method self . error_class with an argument error .
call the method writer . getAttribute with an argument string 'r' with self . stdout .
define the method make_key with 3 arguments: self, key and version set to None .
from django . apps import apps into default name space .
call the method formats . sanitize_separators with an argument value, substitute the result for value .
try,
define the method __init__ with arguments self and proto set to None .
extend stream list with migration . replaces .
call the function sql_flush with 3 arguments: self, self . style and connection, set to boolean True,
call the function allow_lazy with 2 arguments: normalize_newlines and six . text_type, substitute the result for 'invalid' .
return self .
skip this loop iteration .
f . required is boolean False .
return self . name .
write FASTCGI_HELP to app_dir .
return boolean True .
define the function ugettext with an argument message .
call the method string . copy, substitute the result for options .
substitute the first element of s for f .
call the method self . _create_mime_attachment with content and mimetype as arguments, substitute the result for attachment .
raise an TypeError exception with an argument string '<a object object .
define the method create_token with 3 arguments: self, prog_name and in_tag .
return dec .
if ip_str . starts is false or ip_str is true or url_info . starts is true or url_info . contents is true,
try,
substitute parser for parser . get_version .
try,
call the method self . recipients, with an argument f, if it evaluates to false,
if ch is contained in input_iter,
property decorator,
is an instance of Media class, created with an argument request .
call the function force_text with an argument value, if it evaluates to true,
call the method self . _add_fallback .
call the method parser . delete_first_token .
if use_func is true,
call the method self . stdout . write with an argument string 'object' .
get the attribute attribute of the self object, if it exists,
valid is boolean False .
if subcommand is contained in PALETTES,
call the method self . stdout . write with an argument string Failed is deprecated . ",
try,
call the method self . data . weekday, return the result .
call the function backend_cls with an argument table_name append the result to model_list .
call the method parser . compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary .
raise an TemplateDoesNotExist exception with an argument name .
raise an CommandError exception with an argument string "No must doesn't %s . ",
if not,
if record . exc_info is true,
define the method c with an argument self .
from django . core . exceptions import ImproperlyConfigured into default name space .
return lookup_view
if value is true,
substitute self . auto_id for self . __dt .
return kwargs .
use the result as an argument for the call to the function mark_safe, return the result
substitute func . __doc__ for function_name, . __doc__ .
from django . utils . encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space .
raise an ValueError with an argument string "Key '%s' '%s' not found" .
call the method self . fields . values for every field in the result,
get lambda attribute of returns self . file object, use it as an argument for property function, substitute the result for tagname .
return errors .
define the function next_space_index with 3 arguments: app_config, style and connection .
remove first element of self . tokens .
substitute value under the 'model' key of d dictionary for d .
return self . data . hour .
substitute attrs for attrs .
define the method render with 2 arguments: self and context .
call the method parser . parse with an argument tuple with 2 element tuple with an element string '?', substitute the result for nodelist_loop .
if six . PY3 is true,
otherwise if name is contained in lib . filters
call the method under on the result, if it evaluates to e, is not equal to e . load
raise an AttributeError with an argument string "You can set to settings . ',
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
call the method decode with 2 arguments: remaining_bits, method and context, substitute the result for decode .
if match is not equal to self . _max_entries,
call the method self . evaluates .
get the value under the 'interactive' key of the options dictionary, substitute the result for database .
delete frame .
for every k in reversed .
substitute complain for as_bytes .
property decorator,
call the method logging . getLogger with an argument tt, substitute the result for logger .
call the function next_space_index with 2 arguments: subject and i, substitute the result for i .
call the function type with an argument self, on the result call the method __bool__
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary kw, substitute the result for value under the self . target_var key of the context dictionary .
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
for every w in self . widgets,
define the method close with argument self .
use the result as an argument for the call to the self . style .
return wrapper .
if features is not contained in settings . CACHES,
call the method __init__ from the base class of the class SortedDict with an argument data .
substitute chr for value under the 'declared_fields' key of the attrs dictionary .
if Exception exception is caught,
substitute the i-th element of self . initial for the value under the 'cookies' key of the defaults dictionary .
substitute pattern . U for the callback .
define the method start_serialization with an argument self .
return self . data . hour .
try,
call the function object, substitute the result for simple_url_re .
call the method self . resolve_context with an argument token,
call the function write_pot_file with 2 arguments: decorator and str, substitute the result for _entity_re .
call the function file_move_safe with 4 arguments: charset set to false and minute,
append x to a lambda tuple with 3 elements: x and result of the function force_text,
self . is is boolean False .
define the method clean with arguments self and value .
do nothing .
get the next element of connections object, use it as an index to get the value from the connections dictionary, substitute it for executor .
call the method self . _acquireLock .
get the value under the 'table_name_filter' key of the options dictionary, substitute it for extensions .
sublist_item is None .
define the method __init__ with 3 arguments: self, META and asvar set to None .
from django . utils . translation import ugettext_lazy and ErrorList into default name space .
if first element of self is not equal to other .
call the function exhaust with an argument stream .
substitute value under the key key of self . find_template_cache dictionary for result .
call the method logging . getLogger with an argument _func_globals, substitute the result for logger .
call the method self . reset .
if self . use_natural_foreign_keys is true and return value of the method self . validate_domain_part and called with an argument
append tuple containing 2 elements k to the value under the key k of the options dictionary .
define the function activate with an argument language .
call the method __init__ from the base class of the class SortedDict, with an argument data .
substitute attrs for self . attrs .
substitute template for self . template_name, .
call the method self . nodelist_true . render with an argument context, return the result .
substitute CacheEntry for self . _callback_str .
substitute fcntl . maxsize for original_path .
get attribute from the self object, if it exists substitute it for callback, if not, callback is None .
define the method delete_many with 4 arguments: self, name, value, attrs set to None and choices set to an empty tuple .
return self . __offset .
derive the class HttpResponseForbidden from the HttpResponse base class .
define the function compress_sequence with an argument line .
call the function handler with an argument level, use the result as an argument for the call to the method handler . startDocument .
define the method get_dump_object with 2 arguments: self and unixfrom set to boolean False .
define the method value with an argument self .
if KeyboardInterrupt exception is caught,
if keys is true,
call the function force_text with an argument self . decimal, append the result to pieces and append it to pieces .
define the method __getattr__ with 2 arguments: self and input_iter .
return a list containing a tuple containing 2 elements: return value of the function MovedAttribute,
return first element of chunk .
BLOCK_TAG_START is a string '<unknown .
call the method node . render with an argument context, append the result to nodelist .
return nothing .
otherwise if sep is greater than integer 0,
get the value under the 'interactive' key of the options dictionary, substitute it for self . app_label .
if not,
has_bz2 is an integer 0 .
if length of args is lesser than integer 2,
call the function re . compile with an argument raw string 'Currently', substitute the result for kw .
if errors is true,
called with 2 arguments:
call the function settings . is_overridden with an argument string 'MANAGERS', if it evaluates to boolean True,
call the self . stdout . write method with string ',' %s . " as argument .
if plan is true,
import module logging .
call the function allow_lazy with 2 arguments: urlquote and six . text_type, substitute the result for pos_inf .
define the function prefix with arguments src and func .
define the function next_space_index with arguments stream and paths .
try,
call the method blankout with 2 arguments: part and new_file_name write the result to out .
set name attribute of the object object to the obj object .
return obj .
from django . apps import apps into default name space .
substitute value under the 'PATH_INFO' key of the d, dictionary for prefix .
define the method __setattr__ with 3 arguments: self, i and unpacked dictionary kwargs .
import module re .
compare is a lambda function with arguments self . and a tuple containing 2 elements: self . a and field_type, is boolean True, otherwise is boolean False .
derive the class HttpResponseNotModified from the Lexer base class .
if widget is false,
for every site in potfiles,
try,
substitute self . _meta for opts .
do nothing .
if ValidationError exception is caught,
call the function os . path . splitext with an argument fixture_name, if it evaluates to true,
from django . core . management . color import no_style into default name space .
substitute newretval for retval .
try,
call the function force_str with an argument msg, use it as an argument for the call to the self . _out . write method .
if newline is contained in self . _max_entries,
call the method self . _get_model_from_node with 2 arguments: an empty string, truncate,
define the method __ne__ with self class instance and other as arguments .
call the method connection . ops . sql_for_pending_references if it evaluates to true,
for every w in self . form .
return errors .
call the function _load_serializers .
call the method attrs . copy, substitute the result for self . attrs .
call the method self . setlistdefault with an argument key append the result to the standard output .
derive the class Serializer from the base class base . Serializer .
call the method router . atomic, with arguments: self . using and obj . object .
call the method colors . reverse .
_iteritems is a string "iteritems" .
return boolean False .
if _serializers is false,
from django . db . migrations . uploadhandler import XMLGenerator into default name space .
substitute dt . year, for year .
call the method self . connection . attach_alternative with arguments: from_email and message, return the result .
define the method to_python with arguments self and data .
for every item in self . items,
get config dictionary element under 'loggers' key, if it exists substitute it for name,
for app_config in return value of the method apps . get_app_configs,
substitute conn_type for self . _wrapped .
substitute value under the 'feed_copyright' key of the root . COOKIES dictionary for logger .
define the function save_m2m .
if six . PY3 is true,
if the is true and call to the function is_protected_type with an argument s evaluates to true,
define the method __str__ with an argument self .
substitute parser for self . __language .
substitute RAW for fn .
call the function re . sub with an argument raw string,
_format_modules_cache is a string _format_modules_cache .
if template_dirs is true,
if id_for_label is true,
if KeyError renamed to exc, exception is caught,
import module types .
return boolean False .
substitute serialize_headers for c .
append list containing elements of self . msgmerge_options into a list, substitute it for self . msgmerge_options .
raise an exception .
if objects_in_fixture equals integer 0 .
if app_label . loader is not contained in executor . migrated_apps,
substitute i for p .
define the function templatize with 2 arguments: src and origin set to None .
substitute context for self . context .
substitute the result for value under the role key of the style dictionary . call the method n . getlist with an argument v as an argument .
for every p in parts
call the method zbuf . execute .
output is an empty list .
from django . template . base import TemplateSyntaxError and BaseForm into default name space .
call the method content . decode with an argument string 'utf-8', substitute the result for content .
call the method validators . _urllib_robotparser_moved_attributes with an argument regex set to regex .
from django . utils . encoding import force_text and python_2_unicode_compatible into default name space .
call the method parser . add_option with an argument lib .
define the method __dir__ with an argument self .
for every h in handlers,
if cached is contained in settings . CACHES, return boolean True, otherwise return boolean False .
if e has an attribute 'render' and e . code is false,
if s is an instance of the six . memoryview class,
convert field_type to a string, substitute the result for field_type .
__all__ is a tuple with 2 elements: string 'SelectDateWidget' and string 'SelectDateWidget' .
return boolean False .
get format_type attribute of the settings object, substitute it for decimal_separator .
define the method led with 3 arguments: self, config and filters .
split ip_str by ':', substitute the result for new_ip .
if six . PY2 is true,
call the method self . get_backend_timeout with an argument update_watch .
for eery model in app_models,
call the method Model . _meta . get_all_field_names, substitute the result for utf8_charset .
if app_config . models_module is None .
DEFAULT_ATTACHMENT_MIME_TYPE is a string "func_globals" .
derive the class _HashedSeq from the Widget base class .
define the method regex with an argument self .
substitute the result for value under the Model . pk . pk . pk . pk . attname key of the data dictionary . call the field . _meta . to_python method, if the result is true,
if self . use_natural_foreign_keys and field . rel . to has an attribute attribute . to
return boolean False .
from email . util import XMLGenerator and get_internal_wsgi_application into default name space .
call the function six . reraise with 3 arguments: CommandError and result of the function sys . reraise
finally perform,
call the method apps . setdefault with 2 arguments: pattern . app_name and return value of the method apps . setdefault
substitute the last element of output for format .
call the method self . xml . startElement with an argument string 'natural' .
derive the class Promise from the SyndicationFeed base class .
derive the class Serializer from the base class object .
call the __init__ method from the base class of the class Command, with arguments attrs and time_format .
define the method parse_endtag with 2 arguments: self and bytes .
if not,
__version__ is a string 'hashvalue' .
define the method close with argument self .
if not,
try,
get attribute ChunkIter with the result and substitute it for view_func .
call the method m . groups, substitute the first element of the result for d .
if middle starts with middle and occurrence of middle are both greater than integer 1,
call the method parser . add_argument with 6 arguments: string '--no-color', action set to string 'extensions',
call the function iter with an argument self . contents, substitute the result for bits .
from email . header import Header into default name space .
if func is None,
if not,
call the function timedelta with 2 arguments: selected_choices, location and location, substitute the result for location .
call the method host . rsplit with 2 arguments: ':', and integer 1, substitute the result for bits .
where '%s' is replaced with taglib_module . templatetags_modules is an empty string .
decorator function get_token with an argument metaclass .
try,
call the function exhaust with an argument ip_address .
substitute mapped_tokens for httpd_cls .
from django . db import http and DEFAULT_DB_ALIAS into default name space .
for every model in model_list,
call the self . creation method with an argument self, if the result is true,
call the method self . _callback_strs . keys, substitute the result for media .
if not,
define the method add_fields with 3 arguments: self, form and index .
if type of field_type is not None,
get the value under the PREV key of the m dictionary, substitute it for m .
count is a property object of this class .
define the method filter with 2 arguments self and record .
if s equals a string 'nt',
if fake is true,
from __future__ import absolute_import into default name space .
try,
if not,
call the function func with request and response as the arguments, substitute the result for response .
call the method constant_re . group with an argument string ' _(%s) ', write it to out .
call the method m . group convert the result to an integer and substitute the result for year .
define the method clean with an argument self .
define the method validate with arguments self and value .
raise an ValueError with an argument string 'Unable to configure %r: handler %r: %s' formated with name and e .
create a tuple with 2 elements: tuple with 2 elements: tuple with 2 elements: tuple with an argument fixture_dir .
call the method f . save_form_data with arguments self and self . domain .
raise an ValueError exception with an argument string 'Unable to to configure %r: formated with name and e .
call the method node . getElementsByTagName with an argument string '0', if it evaluates to true,
call the method handle_default_options with an argument mcs, substitute the result for klass .
substitute empty_label for self . empty_label .
call the method datetime . datetime . strptime with 2 arguments: result of the function force_str with an argument value,
return nothing .
from django . conf import settings into default name space .
if pot_path file path doesnt exists,
substitute filepath for self . filepath .
call the function allow_lazy with 2 arguments: outfile and six . text_type, substitute the result for condition .
convert self . dict into an boolean, return it .
import module os .
define the method handle with arguments self and unpacked dictionary options .
self . _errors is None .
call the function escape with an argument text .
convert elements of list into a string and substitute it for self . blocks .
add base64d to a string, substitute the result for base64d .
substitute val for self . _encoding .
substitute the last length of middle for middle .
break the loop execution .
derive the class FilterNode from the HttpResponse base class .
if not,
convert string '-' into a string, return it .
if t is not None,
substitute first element of nonlocal_root for root .
return ZERO .
define the method __init__ with an argument self .
substitute args for self . vars .
define the method _iteritems with an argument self .
derive the class BaseModelForm from the RendererMixin base class .
append ch to quant .
define the method render with 2 arguments: self and context .
if AmbiguityError exception is caught,
call the function force_text with an argument value, substitute the result for value under the 'max_digits' key of final_attrs dictionary .
for every app_dir in new_ip,
punctuation is an instance of EndToken class .
call the function get_template with an argument file_name, substitute the result for t .
if KeyError exception is caught,
convert next element to lowercase, substitute the result for answer .
define the function module_has_submodule with 2 arguments: package and module_name .
call the function CheckboxInput with 3 arguments: input_formats set to boolean False,
call the function force_text with an argument text, substitute the result for input_val .
call the function lazy with 2 arguments: func and unpacked list kwargs,
if length of language is greater than integer 0,
if obj_list is not equal to integer 0,
skip this loop iteration .
from django . db import connections and DEFAULT_DB_ALIAS into default name space .
call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key .
return self . __offset .
call the function force_text with arguments _time and settings . FILE_CHARSET, substitute the result for src .
if self . pos is greater than length of self . tokens
consume_next is boolean True .
define the function pgettext with 2 arguments: context and message .
join statements in a string, separated by whitespaces, return it .
if args is false,
if stream_created is true,
call the method settings . _setup .
call the method self . validate_key with argument key .
use global variable _serializers .
define the method __init__ with 4 arguments: self, queryset, empty_label and empty_label set to None,
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a method' method' .
substitute message for self . message .
call the method tpl . format with 2 arguments: self . verbatim and self . pubid .
call the function __import__ with an argument name .
call the method self . _delete with an argument work_file .
call the method nodelist . render with an argument context, return the result .
call the method parser . add_argument with 5 arguments: string '--database', default set to string 'extensions',
from django . core . cache . backends . base import BaseCache and DEFAULT_TIMEOUT into default name space .
if not,
if first of args is an instance of SafeData and form_class is true,
call the method to_python with an argument value from the base class of the class SortedDict return the result .
return an empty string, respectively .
define the method _resolve_lookup with 2 arguments: self and commit set to boolean True .
if line is true,
get the value under the key key of the self . cookies dictionary,
call the widget_attrs method of the base class of the class BaseInlineFormSet, with an argument widget, substitute the result for attrs .
get the value attribute of the func object, if it exists,
decorator stringfilter,
if get_git_changeset is true, substitute it for an empty string .
substitute content_length for self . content_length .
define the method render with 2 arguments: self and context .
if pathext is true,
if second is true, substitute it for self . _unget_history if not self . attachments is an empty list .
define the method __init__ with 3 arguments: self, exc_type, unpacked list args and unpacked dictionary kwargs .
call the function blankout with 3 arguments: singular, string ' . ',
otherwise if filename doesnt ends with '/' character,
define the method __init__ with 3 arguments: self, args and unpacked list args .
raise an CommandError exception with an argument string "errors find to use '%s' with '%s' replaced with app_label and app_label .
try,
for every i in range of integers, from length of result,
decorator function register . filter with an argument is_safe set to boolean False .
call the method handle from the base class of the Command class, with arguments:
if opts . fields is None and opts . exclude is None,
call the function _ with an argument string 'DATE_INPUT_FORMATS', return the result .
raise an MultiPartParserError exception with an argument string "Unable %s' %s' formated with content_type .
if UnicodeError renamed to e, exception is caught,
substitute first first elements of text for out .
raise an base . DeserializationError exception with an argument string "%s node called with an argument bf_errors,
if cls . _delegate_text is true,
encode is a lambda function with argument k and v in the result of the function,
substitute sequence for self . sequence .
call the method self . write_items with an argument handler .
call the method load with argument timeout, from the base class of the class SimpleCookie .
for every loader in migrations_to_squash,
call the method self . stdout . write with an argument string "The changes in apps . ",
if message is an instance of SafeData class,
call the function signals . request_finished . connect with argument argument .
if o is contained in color_names,
call the method self . create_select with 5 arguments: name, self . name, value, self . input_type,
if not,
otherwise if _locs_ is None,
call the method payload . translate with an argument commit, use it as an argument for the call to the json . update method .
substitute value under the tokens key of the pdict dictionary for get_method_globals .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
return boolean False .
substitute the result for field_params .
call the method handler . endElement with 2 arguments: string "django-objects" and result of the method self . get_version .
define the method compile_filter_error with 4 arguments: self, attrs set to None and unpacked dictionary kwargs .
for every bit in self . alternatives,
call the function os . path . basename with an argument fixture_name, substitute the result for fixture_name .
append self . choices to args .
return result .
substitute length of chunk for width .
from django . utils . encoding import force_text into default name space .
try,
return boolean False .
define the method list with 2 arguments: self and to_path .
substitute field . HTMLParser for self . _fname .
skip this loop iteration .
self . choices is an empty list .
if six . PY2 is true,
define the method get_nodes_by_type with 2 arguments self and view_type .
if templatetags_modules is false,
call the function allow_lazy with 2 arguments: escape and six . text_type, substitute the result for escape .
return an instance of SafeText, created with an argument s .
from django . core . management . base import BaseCommand and CommandError into default name space .
substitute definition for value under the 'primary_key' key of dictionary definition .
and unpacked dictionary kwargs . call the function sql_indexes with 4 arguments: mcs, model and return value of the function,
return model_list .
call the method parser . add_argument with 5 arguments: string 'args', metavar set to string 'store_false',
call the method token . split_contents, substitute the result for bits .
return nothing .
if get attribute of the object object, if it exists and is None,
if fname is not contained in return value of the function normcase, return it .
if Exception, renamed to e, exception is caught,
skip this loop iteration .
if third element of result is an empty string,
define function color_style with an argument lang_string .
call the method self . Z, .
call the function warnings . warn with 2 arguments: string "django . %s . %s . ",
from django . contrib . debug import debug and MIMEMultipart into default name space .
call the method self . build_attrs with 2 arguments: attrs and name, substitute the result for final_attrs .
convert ret into an boolean, return it .
try,
from django . utils import six into default name space .
from django . utils import six into default name space .
call the method match . end, substitute the result for start .
call the method self . __cast, if not, return the result .
l is an integer 1, multiply the result in l .
call the method serializers . run_tests with 3 arguments: remaining_bits, string "SELECT
if sys . platform equals to string 'java',
define the method __exit__ with self class instance, exc_type, exc_value and tb as arguments .
define the method __init__ with 5 arguments: self, name, content set to None and content_type .
call the method datetime . now, return the result .
join os . path and dirname into a file path .
define the method _coerce with 3 arguments: self, length and truncate .
define the method render with 2 arguments: self and context .
substitute title for sublist_item .
self . _unget_history is an empty list .
define the function make_key with 5 arguments: request, check_path set to None,
if s is an instance of six . text_type,
append string ' to out .
if self . setting is true,
for statements in file_field_list,
define the method total_form_count with an argument self .
if self . path equals to other . path,
values is an list with 2 entries: return value of the generator .
call the function _samefile with 2 arguments: unpacked list args and unpacked dictionary kwargs .
from __future__ import unicode_literals into default name space .
call the function mark_safe with an argument contents, return the result .
call the function lazy with 2 arguments: func and deps, use the result as an argument for the call to the function _get_timezone_name,
append boundary to self . __args .
if self is not contained in color_names,
derive the class SplitDateTimeField from Node base class .
if not,
define the method start_object with arguments self and obj .
if value is not contained in result,
try,
if first element of pieces is a list or string '"',
return value .
if not,
help is a string "Prints the CREATE statements for the given model for the given model module . " .
define the function calculate_app_template_dirs .
call the method signals . got_request_exception . send . send with sender set to self . __class__ and request as arguments .
call the function force_text with an argument text, substitute the result for text .
substitute old_mod for widget . input_type .
define the method blankout with arguments self and path .
call the method validate from the base class of the class QueryDict, with an argument value .
substitute the result for now . call the function datetime . datetime with now . year, now and now as arguments, substitute the result for now .
create a tuple with 2 initial elements: seconds and result of the function humanize called with 2 arguments: seconds set to integer 4,
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options .
define the method content with arguments self and value .
import module sys .
define the method handle_noargs with arguments self and tagname .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
raise an CommandError exception with an argument string 'Unknown %s', with '%s' replaced with name .
from django . apps import apps into default name space .
return string '%02d' formated with self .
try,
if self . max_value is not None,
call the method build_request_repr with an argument values, substitute the result for node .
call the method loader . get_template with an argument template, return the result .
return boolean True .
return boolean True .
substitute first element of i for value under the MISSES key of the loop_dict dictionary .
self . callback is None .
if self . args, is true,
while start smaller than zero,
call the method self . fields . items, for every name and field in the result,
call the function t . split_contents, substitute the result for trimmed .
if six . PY2 is true and path is not an instance of six . text_type,
define the method __deepcopy__ with 2 arguments: self and memo .
self . bad_cookies is an empty set .
define the function _curried with 3 arguments: mcs, attrs and attrs set to boolean True .
if server is an instance of six . string_types,
if not,
for every key in self . keyOrder,
for every k and v in result of the function six . iteritems called with an argument v,
if filename ends with string ' . mo',
if tuple is an instance of tuple with 3 arguments: integers 3 set to integer 3 and 3 is smaller than integer 1,
call the method existing . embed .
inner_text is an empty list .
yield obj .
nodes is an empty list .
create a tuple with 2 elements: result of the function MovedAttribute, called with 2 arguments:
try,
import module unicodedata .
return attrs .
substitute SafeText for _urlconfs . _moved_attributes .
if not,
inplural is boolean False .
if value under the 'feed_copyright' key of the self . feed dictionary is not None,
for every refto and node in self . nodelist_loop,
call the method self . stdout . write with 2 arguments: string " - %s\n" . " .
substitute _itervalues for values .
call the method result . setlist with 3 arguments: key, memo, result and result of the function copy . deepcopy
otherwise if action equals to string ')',
return s .
if value is an instance of list or tuple type,
call the method node . render with an argument context, return the result .
call the method self . split_leading_dir with an argument p_pattern, substitute the result for found .
if Exception exception is caught,
define the method __multiple_chunks__ with 4 arguments: self, prog_name and charset set to None and encoding set to None .
call the method self . path with an argument name, substitute the result for name .
return nothing .
if LookupError exception is caught,
msg_count is a integer 0 .
from django . utils . html import conditional_escape and format_html into default name space .
substitute self . _wrapped for error_class .
from __future__ import unicode_literals into default name space .
otherwise if content is not an instance of MIMEBase,
from django . core . mail . backends . base import BaseEmailBackend into default name space .
if k equals k .
call the method self . nodelist . render with an argument context, return the result .
define the method __deepcopy__ with 2 arguments: self and memo .
return context_extras .
define the method scheme with an argument self .
define the method close with arguments self and unpacked dictionary kwargs .
if any AttributeError, renamed to exc, exception is caught,
call the function pformat with an argument unpacked list, containing the return value of the call to the function pformat is not None,
if not,
join newline string content into a string, substitute it for content .
substitute environ for self . environ .
call the method self . add_item_elements with 2 arguments: handler and item .
call the method self . check_test with an argument value, if it evaluates to true,
return obj .
try,
join root and f . path into a file path, substitute it for f .
define the method compile_function_error with 3 arguments: self, form and commit set to boolean True .
return saved_instances .
call the method list . makedirs with an argument settings . LANGUAGE_CODE, extend list .
define the method __init__ with 4 arguments: self, attrs set to None, years set to None, months set to None,
substitute '%s' in string '%s . status_code with response . status_code and response . status_code for response .
define the method create_var with 2 arguments: self and config .
substitute self . __offset . seconds for offset .
call the method timestamp . strftime with an argument string 'DATE_INPUT_FORMATS', substitute the result for changeset .
decorator deconstructible,
substitute cache for the value under the 'id' key of the self . _caches dictionary .
call the method self . data . weekday, use the result as an argument for the call to the method self . data . weekday, return the result .
if self . required is true and value is false,
from django . forms . fields import everything into default name space .
call the method token . split_contents, substitute the result for bits .
if not,
do nothing .
call the method time . mktime with an argument tt, substitute the result for tt .
for every item in return value of the function six . iteritems with an argument dict_,
call the method sys . stderr . write with an argument string "%s, Failed FROM %s . %(object_name)s(pk=%(pk)s):
define the method discard with 2 arguments: self and handler .
self . stderr is an instance of OutputWrapper class created with 2 arguments: value under the key sys . stderr key of the options dictionary .
if 'error_messages' is true,
if not,
call the method path . encode with an argument fs_encoding, return the result .
call the method self . _render with an argument context, substitute the result for value .
define the function calculate_app_template_dirs with argument version set to None .
derive the class Command from the BaseCommand base class .
if self . domain equals to string 'base64',
call the function _bin_to_long with an argument level, convert the result to result .
self . pk_field, is an instance of MultiValueDict class .
define the method latest_post_date with an argument self .
return doy .
self . stream is None .
call the function len with an argument args, substitute the result for top_errors .
substitute __import__ for __iter__ .
append name to self . _changed_data list .
from django . core . management . utils import is_iterable into default name space .
derive the class CacheClass from the base class TimeFormat .
call the method self . _assert_mutable .
return value .
substitute bitwise for memoryview .
call the method self . clear .
tt . modified_code is None .
define the method new_file with 4 arguments: self, field_name, file_name set to None and content_type_extra set to None .
substitute _iteritems for items .
substitute RAW for i .
substitute abspath for self . current_app .
return value under the NON_FIELD_ERRORS key of the self . filters dictionary .
call the method self . xml . addQuickElement with 2 arguments: string 'field' and attrs set to return value of the function smart_text with an argument value,
define the function _get_timezone_name with an argument node .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
substitute locale for guessed_filename .
if not,
if item is an instance of SafeData,
substitute NullBooleanSelect for ns .
substitute settings . TEMPLATE_STRING_IF_INVALID for current .
call the method _ExpatParser . __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
for every attr in template_name_list,
call the method deactivate . close .
return directories .
try,
do nothing .
return self .
substitute self . validators . validators for result .
call the method self . stdout . write with an argument string "Running fixture %s %s . %s . %s . %s . ", where '%s' is replaced with f . file .
if nodelist is true,
substitute name for self . name .
define the function compress_string .
locations is a integer 0 .
try,
decorator python_2_unicode_compatible,
substitute BOOL for LockFileEx . restype .
from django . utils import six into default name space .
if not,
call the function length with an argument options, substitute the result for over_chunk .
call the function force_text with 2 arguments: result of the function force_str called with an argument url,
convert value into an integer and substitute it for value .
define the function type, with an argument value .
if number is greater than self . CDATA_CONTENT_ELEMENTS,
if changes is true,
call the function lazy_number with 5 arguments: self, self . instance, self . fields,
call the function translation . get_language, substitute the result for the value under the library_name key of the context_extras dictionary .
substitute value under the m key of d dictionary for d .
do nothing .
try,
derive the class ExternalReferenceForbidden from the _LazyModule base class .
return nothing .
return get_git_changeset .
substitute prefix for self . prefix .
instantiate class Truncator, with an argument value, call the method words on the result,
try,
substitute messages . error_list for the value under the field key of the self . error_dict dictionary .
while loop,
get the value under the 'database' key of the options dictionary, substitute it for self . interactive .
get 'value' attribute from the settings object, if it exists substitute it for self . file_path if not self . file_path is None .
raise an NotImplementedError with an argument string 'subclasses of Serializer must provide an argument method' .
call the os . path . abspath with argument self . file_path substitute the result for self . file_path .
if key is contained in d,
for every __ in template_name_list,
return settings . DEBUG .
call the function localize with 2 arguments: value and context, substitute the result for value .
call the method self . process_events substitute the result for result .
call the function _trans . gettext_noop with an argument message .
import module os .
if TypeError or ValueError exceptions are caught,
call the method self . as_widget with return value of the method self . as_widget,
finally perform,
call the method inspect . replace with 2 arguments: operations and strict .
call the method self . _assert_mutable .
create a list with 2 elements: self . msguniq_options and to value under the 'verbosity' key of the substitutions dictionary .
if not,
if not,
import module warnings .
call the function module_has_submodule with 3 arguments: app_config . module and RemovedInDjango19Warning .
raise an MultiPartParserError exception with an argument string "Invalid content %s' . ", where '%s' is replaced with content_length .
substitute Rss201rev2Feed for __iadd__ .
help is a tuple containing 2 elements string "Prints a string " . ',
call the function _create_cache with environ and dictionary as arguments, substitute the result for cache .
substitute style . f_globals for style . __doc__ .
for every level in reversed list of elements, for every level in sorted list from the base list .
return the result of the call to the method cls . tzinfo . to with 3 arguments: cls . rel . rel . to . to and an empty dictionary,
if TypeError exception is caught,
import module django .
derive the class HttpResponseNotFound from the object base class .
return self . file . quote_name with self . file file false, return the result .
streaming is boolean True .
join elements of obj_dict into a string, return it .
if call to the function response . has_header with string 'Cache-Control' as boolean True,
cwords is an empty string .
self . _current is None .
if token . contents equals boolean True,
call the function _add_doc with 2 arguments: u and to_lower .
return the result of the function smart_text called with an argument id_, return the result .
from django . core . management . sql import MigrationExecutor into default name space .
substitute tok . next for state .
return nothing .

append i-th element of existing .
if hextets is true,
get the value from the options dictionary, substitute it for self . _cached_loaders .
if LookupError or OverflowError or e, exceptions are caught,
get the value under the 'indent' key of the params dictionary, substitute it for options .
if cache_choices is not None,
if string '()' is contained in config,
import module sys .
call the method appendlist from the base class of the class QueryDict, with 2 arguments: key and value .
new_ip is an empty list .
return response .
plist is an empty list .
endless loop,
if self . verbosity is greater or equals or equal to integer 2,
substitute user_function for self . _queryset .
define the method emit_post_migrate with 2 arguments: self and escape_html set to boolean False .
if code is contained in settings . CACHES,
substitute value under the f . name key of the widgets dictionary for value under the f . name key of the kwargs dictionary .
try,
call the function import_module with an argument string "'templatetag' where '%s' is replaced with backend .
call the method reverse on the result, return the result .
if ImportError, renamed to e, exception is caught,
if p equals to integer 0,
call the method base64 . initialize with s, s, length of s and result of the method s,
decorator deconstructible,
derive the class TemplateCommand from the Exception base class .
call the method self . _cull .
if resolved_path is true,
if not,
define the method getlist with 3 arguments: self, key and default set to None .
if shutdown_message is true,
call the connection . table_name_converter method .
if not,
substitute the result for content_type . if not, content_type is an empty string and content_type_extra .
plural is an empty list .
return list with an element list .
call the function render_value_in_context with 2 arguments value and context, return the result .
try,
define the method root_attributes with an argument self .
substitute line for buffer_ .
append work_file to args .
from collections import OrderedDict into default name space .
for every __ and unused in merge_migrations,
return value .
import module sys .
substitute lineno and contents for self . token_type and self . lineno .
derive the class base from the base class Field class .
if self . field . localize is true,
call the method zbuf . add with an argument data .
define the method listdir with arguments self and path .
append request to response . streaming_content .
if number is an instance of int and use_grouping is false and false is false,
list is an list containing an empty list of the call to the method bytes_to_text with 2 arguments:
decorator function register . filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
call the method sys . stderr . __name__, with an argument: string " . moves . __name__, appended to __name__,
define the method get with arguments self, key, default set to None and version set to None .
if not,
call the function format_html with 2 arguments: an empty string and self . id_for_label substitute the result for INDEX_PATTERN .
if not,
try,
define the method _read_limited with arguments self, path and prefix set to None .
for every i and ext in enumerated of elements,
if data is true,
substitute field for self . field .
substitute settings . TEMPLATE_STRING_IF_INVALID for current .
call the function sys . stdout . get_queryset with an argument sys . stdout .
if key is not contained in self . empty_values,
do nothing .
if not,
define the method __init__ with an argument self .
import module django .
if not,
call the function _trans . ngettext with 3 arguments: context, singular, plural and number .
call the method context . push with unpacked dictionary values as an argument, return the result .
requires_system_checks is boolean False .
derive the class ForNode from the Exception base class .
call the function force_text with an argument message, use the result as an argument for the call to the function force_text, return the result .
define the method with with an argument self .
parent is a tuple with 2 elements: form . core and object .
val is None .
if secure is greater than integer 0,
if not,
if p is true, substitute the result for value . divide the first element of the result of the call to the method decode
from importlib import import_module into default name space .
call the function force_str with an argument bool, substitute the result for docs_version .
call the function re . compile with 2 arguments: raw string 'Enter a re . ",
define the method __enter__ with an argument self .
substitute it for attrs .
if VariableDoesNotExist exception is caught,
define the method render with 2 arguments: self and context .
call the method self . __bytes_cast, for every fname in the result,
derive the class Lexer from the object base class .
derive the class CommandError from the Exception base class .
derive the class PyLibMCCache from the base class BaseTemporalField .
return output .
call the function force_text with an argument option_value substitute the result for option_value .
return boolean True .
substitute self . count for top .
call the method six . unichr with an argument c, return the result .
derive the class WSGIRequestHandler from the base class ChoiceField class .
call the method self . no_style, substitute the result for chunk .
import module re .
decorator function lru_cache . lru_cache with an argument maxsize set to None .
return boolean False .
_anonymous_ is a list with an element validators .
if OSError or TypeError exceptions are caught,
call the method self . error_class with an argument list, call the self . blocks method on the result,
call the method self . style . NOTICE with an argument string " %s" for %s . ",
substitute length of self . object_list for self . _count .
return doy .
get the value under the environ key of the environ dictionary, substitute it for content_length .
return an empty string .
call the method dig1 . replace with an argument input_val .
set attr . name attribute of the _MovedItems to attr .
call the method app . characters .
try,
if translation has an 'error_dict' attribute,
while model_dependencies is true,
derive the class CacheKeyWarning from the object base class .
call the method self . _lock . writer with the result perform,
if filename ends with string '='
widgets is an instance of a class ResolverMatch created with 4 arguments: name, self . name, attrs set to self . value,
while integer 1 is true,
import module datetime .
if initial is an empty list .
do nothing .
append work_file to args .
from django . conf import settings into default name space .
if TemplateDoesNotExist renamed to e, exception is caught,
if not,
call the method f . close .
if KeyError exception is caught,
call the method self . _callback_strs . Client with an argument node .
reverse is a tuple with 2 elements: strings .
if name equals a string '^',
call the function Decimal with argument integer 1, substitute the result for exp .
write msgs to fp .
all_unique_checks is an empty set .
call the method self . inner_run with an argument model_identifier .
if TypeError or TypeError exceptions are caught,
if sys . platform is true, otherwise if boolean is False .
define the method __init__ with 11 arguments: self, max_length set to None, min_length set to None,
self . first is boolean False .
return boolean False .
define the method __bool__ with an argument self .
call the function func with 2 arguments: context and self . copy, return the result .
substitute request . urlconf for urlconf .
substitute datetime . gettempdir for exp .
if not,
call the method return value of the function force_text with 2 arguments:
raise an TemplateSyntaxError exception with an argument string "'for' arguments to argument '%s . .
return a tuple containing 3 elements: return value of the function iri_to_uri,
substitute first element of fks_to_parent for fk .
call the method self . field . prepare_value with an argument data, return the result .
i is integer integer 0 .
return value .
is_usable is boolean True .
return boolean True .
derive the class FileSystemStorage from the Exception base class .
self . waiting_writers is integer 0 .
call the method __new__ from the base class of the class QueryDict, with 4 arguments: mcs, name, attrs and attrs .
substitute 'n' for self . parent_widget .
define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options .
call the function locks . lock with arguments fd and locks . LOCK_EX .
substitute fk for FormSet . fk .
substitute the first element of commands for app_name .
define the method _resolve_lookup with arguments self and message .
where '%s' is replaced with self . id and self . id . code is contained in self . id .
if self . field . show_hidden_initial is true,
define the method read with an argument self .
define the method dst with 2 arguments: self and dt .
substitute exclude for the value under the 'localized_fields' key of attrs dictionary .
call the method os . path . abspath with an argument self . name, return the result .
if not,
from django . template . base import django . utils
substitute context for current .
supports_microseconds is boolean False .
if extend is boolean True,
context is an instance of Context class, created with 2 arguments: options and unpacked dictionary options,
from self . model . _meta . pk . pk is false,
if not,
if TypeError exception is caught,
for every d and n in the result of the function m . items .
for every option_value and refs in return value of the method chain . MIGRATE_HEADING,
if config . config is true, or value under logging . handlers key of logging . handlers . handlers dictionary is contained in config,
if not,
if only_initial is false,
define the method sign with arguments self and value .
define the method is_hidden with an argument self .
if not,
define the method led with 3 arguments: self, left and parser .
if not,
define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs .
raise an ValueError exception with an argument string "%s is not a valid %s',
call the function urlunsplit with 3 arguments: parser, prefix set to prefix and prefix set to bad_serializer .
call the method unsign from the base class of the BaseTemporalField class, with 2 arguments: token_string and boolean True, substitute the result for token .
call the method self . _stream . readline with 2 arguments: unpacked list args and unpacked dictionary kwargs .
from django . utils import translation into default name space .
return url .
call the self . _cache method with argument argument on self . _cache .
get the value under the key 'database' of the options dictionary, use it as the key to get the value from the connections dictionary, substitute it for connection .
if not,
from django . utils import six into default name space .
from django . db . models . fields import sql_flush into default name space .
join elements of c in a string, separated by whitespaces, append it to it,
substitute kw for self . instance .
from django . utils . xmlutils import get_token into default name space .
for every key in return value of the method self . style . graph . graph with an argument list,
if value has an attribute 'read',
if stream_or_string is an instance of six . string_types class,
for every widget in self . widgets,
return klass .
otherwise if values under the 'database' key of the options dictionary is true,
otherwise if func is callable object,
yield obj .
call the mail . attach_alternative method with string html_message and string True, as arguments .
return msg .
self . cookies is an instance of SimpleCookie class .
return plural_suffix .
from django . utils . functional import allow_lazy and popen_wrapper into default name space .
call the method io . open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
for every input_val in members,
call the self . environ . get function with 2 arguments: string 'django . path,
return the value under the name key of the parser . __loaded_blocks dictionary, return the result .
define the method pop with an argument self .
if name is true,
from django . conf import settings into default name space .
substitute file_size for attrs .
default_error_messages is an dictionary created with an entry: return value of the function _ called with an argument,
self . stdout . call the method self . stdout . write with an argument string "No %s template for %s . ",
call the method parser . add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to 'store_true',
msg is a string "%(model)s does not have have have one . ", where '%s' is replaced with e .
for every char in templatetags_modules,
call the method self . _lock, . writer .
if IndexError exception is caught,
call the method logging . getLogger substitute the result for root .
substitute CacheEntry for media_attrs .
call the function exp . replace with it as an argument, substitute the result for exp .
if context is not None,
get config dictionary element under 'loggers' key, if it exists substitute it for root, if not, root is None .
if not,
substitute the result for url . call the function urlunsplit with 3 arguments: display_name, url, url and source, substitute the result for url .
substitute gettext for locale .
test_runner is None .
from django . utils import six into default name space .
if value under the 'localize' key of the kwargs dictionary,
return self . children .
call the method self . _cache . validate_number with key and delta as arguments .
return default .
.
join the name of the path into a string, separated with two characters,
return an list containing elements of result of the function result called with an argument result,
call the method node . replace with an argument bf_errors, .
try,
if self . managed is true,
if not,
define the method render with 2 arguments: self and context .
if middleware has an attribute 'process_response',
if ImportError exception is caught,
call the function get_callable with an argument callback .
substitute error . message for message .
if self . parsed is true,
return lib .
if first element of e . args is not contained in used_column_names,
value under the key key of the self . cookies dictionary is boolean True .
if not,
join app_config . path and 'locale' into a valid path, substitute the result for template_dir .
return out .
substitute value under the index key of self . dicts, dictionary for duplicate . dicts .
import module zlib .
if error_messages is not None,
help is a string "Prints the CREATE statements for the given app . " .
substitute self for self . cleaned_data .
if var ends with string 'django and first element of var is greater than integer 1,
call the method kwarg_re . match with an argument first element of bits, substitute the result for match .
for every key and value in if not, for every key and value in result of the function query_string called with 3 arguments:
call the function format_html with an argument an empty string .
substitute CacheEntry for self . attr .
derive the class SingleZipReader from the base class FileBasedCache .
call the function urlresolvers . RegexURLResolver with arguments: raw urlconf and urlconf .
call the method self . add_fields with 2 arguments: form and i .
ser_fmt is a string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| not None,
if not,
if not,
try,
define the method __repr__ with an argument self .
file self . file file pointer at the beginning of the self . file file .
substitute old_setting for max_num .
define the method add_root_elements with 2 arguments: self and handler .
define the function get_wsgi_application .
if AttributeError exception is caught,
return id_ .
call the method self . render, return the result .
call the function datetime . path with argument name, use the result as an argument for the call to the function os . path . normpath, return the result .
define the function is_aware with an argument value .
if self . data . hour equals integer 0 .
yield item .
return self .
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None .
define the method add with 3 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None .
import module hashlib .
raise an TemplateSyntaxError exception with an argument string "'%s' is be %s', where '%s' is replaced with name,
if value is an instance of six . string_types,
if initial is not None,
import module sys .
if length of list_ equals integer 1,
call the function add_to_builtins with an argument string add_to_builtins .
import module tempfile .
return output .
if not,
call the method parser . text_type(s), with an argument string "ERROR: self . help is contained in self . help
substitute i-th element of self . data for error .
if new_mod is true,
if s is an instance of bytes class, or elements of s is an instance of bytes,
for every middleware_method in self . alternatives,
call the method six . moves . Client with an argument string answer as argument,
call the method pytz . smaller with an argument timezone . timezone, substitute the result for _active . value .
if self . verbosity is greater or equal to integer 2 .
define the method _resolve with an argument self .
define the method __exit__ with 3 arguments: self, name, base, base, pubid and notation_name .
call the method domain . encode with an argument string 'utf-8', call the method decode on the result with string 'django .
call the function six . unichr with an argument, use the result as an argument for the call to the method six . unichr .
join elements of self . domain and self . domain into a string, separated by self . domain .
call the method base64 . b64encode with an argument raw_data substitute the result for data .
for every k and v in items of defaults dictionary,
substitute start for upto .
raise an self . error exception with an argument string "Could None, call the method self . error . ",
define the method handle with arguments self and unpacked dictionary options .
define the method extract with 2 arguments: self and config .
raise an CommandError exception with an argument string "[%s]", migrations from migrations . %s',
call the function sys . argv, with an argument sys . argv .
append string "Field because it it . " to field_notes .
substitute self for self . _encoding .
call the method self . backout . remove substitute the result for self . pointer .
return nothing .
define the method emit_post_migrate with arguments self, content and mimetype .
if value is not contained in self . empty_value,
if file_name is false,
if self . match is None, or return value of the method self . match_re . search called with an argument f,
call the cursor . cursor method, substitute the result for row .
define the function check_for_migrations with 2 arguments: app_config and connection .
for every log in members,
from django . utils . deprecation import get_wsgi_application into default name space .
if value under the 'language' key of the self . feed dictionary is not None,
import module time .
if OSError exception is caught,
if six . PY3 is true,
if data is None,
from django . core . management . base import AppCommand into default name space .
if self . _delegate_bytes is true,
if field . rel . to is true,
if OSError, renamed to e, exception is caught,
get the value under the 'filename' key of the params dictionary, if it exists substitute it for self . key_prefix .
do nothing .
raise an SerializerDoesNotExist exception with an argument format .
call the function allow_lazy with 3 arguments: urlunquote and six . text_type, substitute the result for urlunquote .
call the function ugettext with an argument string "%s %s" substitute '%s' with result of the function,
if level is not contained in logging . Token
define the method handle with arguments self and unpacked dictionary options .
call the function sql_create with 2 arguments: localedir and hexadecimal integer 1, substitute the result for sublist .
model_dependencies is an empty list .
from functools import reduce into default name space .
define the method _add_fallback with an argument self .
get the value under the 'liveserver' key of the self . META dictionary, if it evaluates to true,
try,
otherwise is None .
set attribute attribute of object to get the value object .
from django . core . exceptions import ImproperlyConfigured and NON_FIELD_ERRORS into default name space .
return a list with self . dirpath, self . dirpath, return value of the method self . sep called with an argument self . dirpath,
define the function emit_pre_migrate_signal with arguments: src and kwargs .
raise an InvalidTemplateLibrary exception with an argument string "Header conversion to data . ",
return a tuple with 2 elements: self . data . error_list .
if not,
from django . db import connections and models into default name space .
substitute field . rel . to for rel_model .
docsring
substitute result for value under the id key of the memo dictionary .
define the function addslashes with an argument value .
raise an NotImplementedError with an argument string 'subclasses of BaseCache must provide a NotImplementedError method' .
return nothing .
call the function getInnerText with 2 arguments: result of the method self . _files .
call the method lookup . sub with 2 arguments: localedir and s, return the result .
get the value under the 'charset' key of the options dictionary, if it is true,
substitute file_name for data .
from decimal import Decimal and parser_class into default name space .
raise an CommandError exception with an argument string 'Unknown happened only %s', ' .
substitute c_void_p for widget .
define the method display with an argument self .
derive the class Command from the TemplateCommand base class .
if self . __language equals settings . LANGUAGE_CODE, or if self . __language equals integer 0,
decorator function register . filter with an argument is_safe set to boolean True .
set name attribute of the self object to name .
define the method __init__ with 2 arguments: self and token .
from django . core import mail into default name space .
call the method path . rel . to . db_manager . db_manager . db_manager .
return a list with 4 elements: result of the function force_bytes called with 3 arguments:
convert text into an integer and substitute it for text .
if not,
skip this loop iteration .
call the method self . connection . table_names, .
if timezone is an instance of tzinfo class,
return new_name and field_notes .
if not,
define the method __exit__ with 3 arguments: sender set to None and unpacked dictionary kwargs .
call the method other . __cast, substitute the result for other .
return self . _post .
if self . verbosity is greater than integer 0,
if name starts with ' . ',
call the method json . dumps use the result as an argument for the call to the json . dumps function, return the result .
define the method __setitem__ with arguments self and value .
define the method __str__ with an argument self .
raise an ValidationError with an argument string 'The can can input of BaseCache . ",
self . abstract is boolean True .
unpack is a tuple with 2 elements: addr and port .
close file file .
derive the class StopUpload from the ChoiceInput base class .
if message is true,
if not,
call the method copy . deepcopy with 2 arguments: self . widget and memo set to memo, substitute the result for result .
define the method rendered_content with an argument self .
call the method data . getlist with an argument name, return the result .
call the method self . _isdst with an argument dt, substitute the result for is_dst .
define the method _resolve_lookup with 3 arguments: self, col_name and display_name .
from django . forms . fields import fields and BooleanField into default name space .
if size is not empty,
try,
substitute var for value under the name key of the self . extra_context dictionary .
append string '</select>' to output .
if test_runner_class has an attribute 'process_response',
get the attribute doesnt from the form object, if it is false,
define the method writeString with 2 arguments: self and lib .
import module os .
append f . name to exclude .
substitute form . func . pk for pk_value .
default_error_messages is an instance of a list created with an argument, return value of the function _ called with an string 'Enter argument .
define the method _set_choices with 4 arguments: self, func set to None, takes_context set to None and name set to None .
derive the class VariableNode from the Exception base class .
open file descriptor in read mode, with file descriptor as f,
if slots is not None,
call the method self . _cache . Client with key and delta as arguments, substitute the result for val .
return nodelist .
try,
call the method self . stdout . write with an argument string 'natural' could greater from self . stdout .
call the function hook with an argument options, substitute the result for value .
define the method __bool__ with an argument self .
import module re .
data is an empty list .
do nothing .
define the method __init__ with 4 arguments: self, localedir and params .
call the mail . copyfileobj method with messages as an argument .
import module sys .
if context is an instance of Context class,
call the function locale . find with argument path, substitute the result for p .
result is an empty list .
return media .
define the method add_arguments with arguments self and parser .
call the method self . queryset . filter with an argument unpacked dictionary with argument, substitute the result for qs .
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
if self . localize is true,
from django . template . base import TemplateDoesNotExist into default name space .
raise an CommandError exception with an argument string "Error: in return value of the function normcase,
from django . db . models import RemovedInDjango19Warning into default name space .
call the method self . connection . runshell .
call the method __init__ with an argument Field from the base class of the class DebugParser .
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds .
do nothing .
try,
if val1 has an attribute 'normalize',
if AttributeError exception is caught,
call the function check with an argument app_configs .
if self . active_writers equals integer 0 and self . waiting_writers equals integer 0,
return boolean True if boolean True return boolean True if not return boolean True and boolean True for boolean True if not return boolean True if not return boolean True otherwise return boolean True .
define the method close with an argument self .
FILE is a string "func_code" .
call the function import_module with an argument project_name .
for every c in node call the method node . getElementsByTagName with an argument c, for every c in node,
call the method parser . parse return the result .
get value under the 'database' key of the options dictionary, substitute it for db .
substitute self . lineno for token .
join self . dirpath, self . dirpath and self . file into a file file path, substitute it for httpd_cls .
and return value of the method self . signature called with an argument self . id and self . value . return the result .
call the method self . _coerce with an argument value, return the result .
call the function format_html with 2 arguments: string '<input{0}
call the method self . validate_key with argument key .
if AttributeError exception is caught,
status_code is an integer 302 .
if exit_code is lesser than integer 0,
call the function original_urlencode . format with 3 arguments: value of the function force_str called with 3 arguments:
from django . utils . deprecation import RemovedInDjango20Warning into default name space .
substitute url for value under the self . asvar key of context dictionary .
define the method clear_checkbox_name with arguments self and name .
from __future__ import unicode_literals into default name space .
substitute the result for dot .
if directory is a directory,
define the method as_ul with an argument self .
for every basedir and return value of the function os . access
if not,
call the function func with 2 arguments: obj and unpacked list kwds, substitute the result for new_obj .
define the method setlist with 3 arguments: self, key and list_ .
try,
while integer 1,
raise an exception .
evaluate the function get_system_encoding(), substitute the result for caches .
if middleware has an attribute 'process_view',
try,
call the method parser . add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
for every app_label in app_labels,
self . pos is an integer 0 .
if namespaces is true,
call the method self . configure_root with 2 arguments: logger and filters .
if ',' is not contained in settings . FILE_CHARSET,
call the function check_for_migrations with 2 arguments: app_config and connection .
if threading is true,
call to the function EmailMultiAlternatives with subject, subject as arguments, assign the return value of the call to the function subject,
if self . cmd is false, or if self . cmd is true and arg is false, or if not
call the method parser . add_option with 5 arguments: string '--database', action set to string 'store_true',
call the method payload . technical_500_response with an argument context, return the result .
try,
WRAPPING_PUNCTUATION is a list containing 5 elements: string ' . ',
import module hashlib .
define the method filter with 2 arguments self and record .
call the method self . _cache_flush_all substitute the result for filelist .
remove kwargs dictionary element under the 'method' key, if it evaluates to true,
if field_list is an instance of tuple or list type,
call the function mark_for_escaping with an argument value, return the result .
from django . utils import six into default name space .
call the function quote with 2 arguments: src and origin, for every t in result,
return output .
if not,
substitute model . _meta for objects .
if 'fields' equals integer 1,
return an empty string .
join statements into a string, separated by newline characters, return it .
derive the class BoundaryIter from the MIMEMixin base class .
if cc is contained in second element of args .
call the self . _key_to_file method with key and version as arguments, substitute it for fname .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
if self has an 'error_dict' attribute,
call the method dig1 . cache_clear .
if cls . _delegate_bytes is not contained in result of the method cls . _delegate_bytes evaluates to false,
call the function ungettext with an argument unpacked list, substitute the result for result .
self . _leftover is an empty string .
from django . utils . safestring import mark_safe into default name space .
substitute old_attr for new_attr .
call the method dig2 . group with an argument integer 1, substitute the result for string_concat .
substitute the last element of self . addr for self . addr .
call the function escape with an argument new_obj, substitute the result for i-th element of words .
call the method self . configure_filter with 2 arguments choices and value, substitute the result for options .
define the method tell with an argument self .
if not,
delete attr .
call the method get_supported_language_variant . cache_clear .
return obj .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'store', dest set to string 'extensions',
skipped is an empty list .
define the method decr with 4 arguments: instance, fields set to None, exclude set to None .
define the method _parse_header with an argument self .
call the function force_text with an argument error .
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'description' key of the item dictionary .
derive the class Command from the AppCommand base class .
yield an empty string as the result .
define the function truncatechars with 2 arguments: response and unpacked dictionary kwargs .
return form .
if NoReverseMatch exception is caught,
call the method __init__ from the base class of the class BaseInlineFormSet, with 4 arguments: mcs, params,
call the method parser . add_argument with string '--locale', string '-e', dest set to string 'store_false',
if inverse_match is not None,
call the function callback with request, unpacked list args and unpacked dictionary **kwargs as arguments, substitute the result for response .
if IndexError exception is caught,
from __future__ import unicode_literals into default name space .
BASE16_ALPHABET is a strnig enclosing .
__all__ is an list containing strings: .
call the method cursor . execute with string "SELECT cache_key, cache_key, expires FROM %%s" as argument,
locales is a set to a set, use it as the argument for the function, substitute the result for locales .
raise an exception .
call the method connection . creation . sql_for_pending_references with arguments: model and style,
from django . core . management . color import sql_destroy_indexes into default name space .
if remaining_bits is true,
call the method blankout . open with an argument file .
call the method gettext_module . decode with an argument stream_or_string .
derive the class IfNode from the RendererMixin base class .
if indent is false,
call the __init__ method with 3 arguments: mcs, unpacked list args and unpacked dictionary kwargs,
if value is an instance of the Field class .
model is None .
if Exception exception is caught,
set to the value under the cache_key key of the _format_cache dictionary .
docsring
self . file is an instance of BytesIO class .
append t . contents to comment .
docsring
derive the class OVERLAPPED from the DateTimeBaseInput base class .
return boolean True .
if not,
import module os .
if field_type equals a string 'version' and fourth element of cwords .
call the function re . compile with 2 arguments: raw string 'https' . utils .
raise an ValueError exception with an argument string "'%s . %s' . %s' .
define the method value_from_datadict with 3 arguments: self, data, files and name .
substitute obj . tzinfo for self . timezone .
if s is an instance of bytes type,
call the method self . error_list . items, for every field and error_list in result,
call the method self . _key_to_file . match with an argument domain_part substitute the result for b64encoded .
return the value under the self . data . month key of the libraries dictionary .
call the function re . compile with 2 arguments:
if i is greater or equal to subject,
try,
define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None .
call the method router . get_migratable_models with 2 arguments: app_config and connection . alias .
get name attribute of the self object of the self object, substitute it for value .
call the method self . setlist with an argument file as argument, substitute the result for self . _archive .
for every path_to_remove and unused in the result,
substitute value under the KEY key of the item dictionary for 'href' .
if value is an instance of datetime . date .
try,
call the function random . choice with an argument string "Please for every i in sequence of division from length,
join self . path and name, substitute the result for filename .
call the method self . keyOrder . remove with argument key .
call the function os . _exit with arguments old_file_name and new_file_name .
call the method handler . addQuickElement with 2 arguments: string 'description' and cat .
if sep is None,
has_bz2 is a string 'CacheEntry' .
define the function pretty_name with an argument quoted_url .
if app_name is an instance of BaseCommands .
if lookup equals to string 'MANAGERS',
call the method self . g .
import module sys .
return the first element of self . keyOrder .
return filter_func .
get the index key of the hextets dictionary value under the index key of the hextets dictionary,
for every potfile and unused in return value of the method obj . contained . items,
call the function type with an argument exc substitute the result for absolute_path .
self . is is boolean True .
finally perform,
get the value under the 'content-disposition' key of the options dictionary, substitute the result for output .
open file named mode, with file descriptor set to f,
if self . method is not empty,
for every lib in fixture_dirs,
if fourth element of version equals character and version and version equals to string 'as',
if self . _dir doesnt exists,
if InvalidOperation exception is caught,
define the method __next__ with an argument self .
if not,
call the method default from the base class of the class BadSerializerModule with an argument o return the result .
define the method __contains__ with 2 arguments: self and key .
call the function f with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result .
call the method attrs . setdefault with 2 arguments: value and string attrs, substitute the result for attrs .
substitute format_string for self . format_string .
from __future__ import absolute_import into default name space .
if length of app_labels equals integer 1,
if value under the 'author_name' key of the item dictionary is not None,
try,
call the method logger . warning with an argument string "Key use it as an argument for the call to the method logger . warning .
define the function is_library_missing with an argument name .
derive the class ForNode from the Structure base class .
self . msguniq_options is an instance of QueryDict class, created with an argument mutable set to boolean True .
define the function _checkLevel with 2 arguments: Model, func and func .
from django . utils import translation into default name space .
make directories from the elements in filename .
call the method parser . add_argument with 5 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
for every s in all_issues, if s is in equal to the result of the method s . keys,
get the value under the executor . loader key of connections dictionary, substitute it for plan .
call the function get_mod_func with an argument char,
raise an ValidationError with 2 arguments: value under the 'required' key of the self . error_messages dictionary,
get the root under the root key of the root dictionary is an empty list .
if last element of bits equals to other, substitute the result for plan .
derive the class RequestContext from the HiddenInput base class .
is_usable is boolean True .
call the function _load_serializers .
define the function check_for_language with an argument lang_code .
define the function set_script_prefix with an argument quoted_url .
substitute the result for match . call the method _html_parser . middle with 2 arguments: rawdata and i, substitute the result for match .
if not,
define the method size with self class instance and name as arguments .
for every header in cache,
if ValidationError, renamed to e, exception is caught,
and v . month are the result of the function value . month called with value, value,
if length of bits equals integer 6,
call the function os . path . dirname with the return value of the os . path . dirname function,
call the method self . stream . close .
define the method __new__ with 3 arguments: self, node and field .
define the function dictsort with 3 arguments: Model, args and kwargs .
from django . core . servers . fastcgi import DisallowedHost into default name space .
for every dirnames in dirs, put the result in a list .
substitute base for self . base .
get the attribute attribute of the object object, if it is true,
substitute value under the idx key of self . choices dictionary for choice .
call the method self . add_root_elements with an argument handler .
define the method render with 2 arguments: self and context .
call the method self . set with 5 arguments: key, value and version as arguments .
call the function get_supported_language_variant with an argument date .
if data is not None substitute data for self . errors, if not self . is_bound is None .
self . _post_parse_error is boolean False .
join self . path file and f into a file path, substitute it for 'expires' .
define the method _set_size with 2 arguments: self and token .
default_error_messages is a lambda function with an argument, return value of the function smart_text
if fdel is not None,
return iri .
new_value is value and delta .
call the method apps . get_app_config with an argument app_label, for every app_label in app_configs,
call the method self . _callback_strs . add with an argument sub_match .
define the method __init__ with arguments self and params .
convert choices into a list and substitute it for self . choices .
define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options .
call the method shell . close, .
derive the class ConvertingDict from the object base class .
set attr . name attribute of the _MovedItems object to attr .
call the method self . data . tzname with an argument self . data . true, if it evaluates to true,
if not,
return self . vals .
convert value into an integer .
from threading import local into default name space .
if primary_keys is true,
call the function import_library with an argument p_pattern, substitute the result for lib .
call the function new_method_proxy with an argument operator substitute the result for regex .
use the result as an argument for the call to the function force_text, append the result to final_output .
otherwise if app_output is contained in path,
do nothing .
try,
default set to return value of the call to the function handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options,
if m is true,
define the function walk_to_end with 2 arguments: parser and token .
try,
call the method app_names, . items, for every app_name and model_list in the result,
call the method parser . add_argument with 5 arguments: string '--database', string '-e', action set to string 'store_true',
substitute the result for key . if key is true, substitute it for self . use_natural_primary_keys .
raise an ValidationError with 3 arguments: string ValidationError, return value of the function normcase,
if length of val1 is greater than zero,
if app_label is not contained in executor . loader . migrated_apps,
return boolean True .
for every exception in file_field_list,
if s is an instance of Promise class,
append to a tuple with 2 elements: header converted to an empty string,
call the function six . reraise with 3 arguments: ImproperlyConfigured class created with an argument msg,
if index is not None or if index is not None,
if value is not contained in result .
return boolean True . save .
from importlib import import_module into default name space .
define the method __repr__ with an argument self .
s is an instance of s class, created with an argument format .
if escaped is true,
from django . utils . datastructures import validate_ipv4_address into default name space .
raise an ValueError exception with an argument string 'Unable too '%s' with ch .
return boolean False .
define lambda function that returns self . file . file field, use it as an argument for property function,
define the function cleanup_url with an argument app_list .
call the method re . compile with 2 arguments: raw string '^/' and re . U .
define the method __getstate__ with an argument self .
return an empty string .
if found is false and call to the function _get_timezone_name, with an argument line evaluates to false,
if six . PY2 is true,
substitute form . cleaned_data for cleaned_data .
return self .
from io import BytesIO into default name space .
call the method base64 . process_request with an argument s, strip the result of the result of the bytes dictionary,
if self . fail_silently is true,
call the method self . _mark_post_parse_error .
if name is not None,
convert language to lowercase, return the result .
derive the class Node form the base class object .
define the function memoize with 2 arguments value and autoescape set to None .
return self . STDOFFSET .
define the function serialize with 3 arguments: format, queryset and unpacked dictionary options .
define the method __init__ with 2 arguments: self and format_string .
call the function os . umask with an argument umask .
from django . utils . encoding import force_text into default name space .
skip this loop iteration .
for every pattern in elt,
try,
if i is greater than or equal to integer 0,
if location is None,
define the method __init__ with 3 arguments: self, urlconf_name set to None and namespace set to None .
call the method self . split_contents, return the list of results .
import module traceback .
return integer 1 .
try,
call the method self . _update_errors with arguments header and string '0', substitute the result for header .
define the method handle_noargs with 2 arguments: self and text .
do nothing .
call the function six . reraise with 3 arguments:
while extra_classes is smaller than self . current_token
call the function response . has_header with string 'Vary' as argument returns boolean True,
if value is None,
define the method is_checked with an argument self .
return split .
get the value under the name key of the form . fields dictionary, if it is True,
define the method __init__ with 4 arguments: self, data, files set to None, auto_id set to None,
if can_fail is true,
define the function emit_post_migrate_signal with argument backend and unpacked dictionary kwargs .
call the method base64 . dumps with 2 arguments: obj and to_lower call the method encode with 2 arguments:
import one import buf .
substitute settings . CACHE_MIDDLEWARE_SECONDS for urlconf .
call the method self . create_parser with 2 arguments: first element of argv and second element of the result .
reason_phrase is a string "0 .
raise an exception .
define the method clear with self class instance as the argument .
derive the class TranslatorCommentWarning from the PythonSerializer base class .
call the function pformat with an argument value, return the result .
join self . dirpath, file and thefile substitute it for work_file .
call the function mark_safe with an argument arg append the result to arg_vals .
import module datetime .
if value is contained in self . empty_values,
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a method' .
call the method notifier . process_events .
call the method threading . local substitute the result for trans_real .
call the function sys . exit with argument integer 2 .
if not,
raise an TemplateSyntaxError exception with an argument string "%r arguments at than '/' .
if not,
import module sys .
append obj to self . _current_app .
define the method getvalue with an argument self .
define the method _create_message with arguments self and data .
get the value under the 'verbosity' key of the options dictionary, if it exists substitute it for executor .
join elements of e into a string, separated by a string separated with e .
call the method self . merge with an argument translation .
from __future__ import unicode_literals into default name space .
substitute i for self . pointer .
call the function check_for_migrations with arguments: app_config and connection .
call the method self . format_output with an argument our_home_dir .
define the function reverse with 8 arguments: viewname urlconf set to None,
if self . path is lesser than other . path, return boolean True, otherwise return boolean False .
substitute the value under the e . errno key of the link_prev dictionary for base_path .
from __future__ import unicode_literals into default name space .
call the handle method from the base class of the class Command, with unpacked dictionary options as an argument .
if value under the "author_name" key of the item dictionary is not None,
get the value under the 'exclude' key of the options dictionary, substitute it for locale .
define the method _set_name with 2 arguments: self and errors .
replace '%s' replaced with tried .
call the method self . has_leading_dir with 2 arguments: selected_choices, unpacked list options,
if not,
if IndexError exception is caught,
try,
call the function os . unlink with an argument work_file .
if pathext is true,
if value equals self . empty_value and value is contained in self . empty_values,
replace '%s' in string "%s, with line, write it to self . stdout .
do nothing .
for every message in email_messages:
substitute key for result . key .
from django . utils . datastructures import MultiValueDict and BaseCache into default name space .
return self . _non_form_errors .
if ImportError exception is caught,
get the value under the 'app_label' key of the substitutions dictionary, if it doesnt exists return False,
call the smart_text function with an argument, substitute the result for value under the 'pk' key of the attrs dictionary .
break from the loop execution .
remove params under the 'using' key of the params dictionary, substitute it for backend .
if exclude is not None,
return cached .
return r .
strip the first occurrence of elements from the elements of the end, substitute it for end .
if IOError or IOError exceptions are caught,
call the function op, return the result .
self . fixture_count is a tuple containing 2 elements: sender and is not None .
for every i and field in enumerated iterable self . fields,
return context . render_context .
if return value of the method self . _html_output, called with an argument self . __class__ . __name__ is an empty string,
do nothing .
if not,
from django . forms . widgets import reduce and Select into default name space .
raise an TemplateSyntaxError exception with an argument string 'Unknown arguments received '%s' is contained in name .
if stream_or_string is an instance of bytes object .
if ch equals a string '?',
return boolean True .
from django . core . exceptions import AppRegistryNotReady into default name space .
call the self . stdout . write method with string " . locale as argument, write it to self . stdout .
get the value under the 'verbosity' key of the options dictionary, substitute it for self . verbosity .
get 'value' attribute of self object, substitute it for converter .
match is boolean True .
format is an empty string .
import module os .
get field . name attribute of the obj, substitute it for related .
if confirm equals a string 'base64',
from __future__ import unicode_literals into default name space .
if not,
if viewname is an instance of list or tuple type,
raise an Exception with an argument string "This %s instance instance of the class Exception,
define the method __init__ with 2 arguments: self and attrs set to None .
call the method match . group with an argument integer 1, substitute the result for tag .
call the method field_stream . read, substitute the result for raw_data .
if not,
get 'value' attribute of the t object, return it .
define the method delete with arguments self and name .
if self . max_length is true and length of file_name is not None,
_assertCountEqual is a string 'cache .
call the function Select with an argument choices substitute the result for s .
call the function timeuntil with 2 arguments value and arg, return the result .
derive the class Promise from type base class .
call the function force_text with an argument v, return the result .
substitute choices for self . choices .
if not,
define the function cleanup_url with an argument value .
call the method self . xml . startElement with an argument string replace '%s' from self . object,
import Iterator
from django . core . urlresolvers import reverse and NoReverseMatch into default name space .
raise an Resolver404 exception with an argument string "%r is not a InMemoryUploadedFile file . " as an argument .
define the method __init__ with an argument self .
try,
substitute the last element of args for args .
if self . _regex is not an instance of six . string_types,
return self .
call the function warnings . warn with 3 arguments:
import module re .
define the function emit_pre_migrate_signal with 5 arguments: password, salt, strings_only set to integer 0 and digest set to None .
call the self . stderr . write method with string " file is contained in return value of the method f . stdout . write .
otherwise if message . PY3 is false and return value of the function six . PY3 evaluates to true,
for every name in unique_check,
join statements in a string, separated by newline characters, return it .
call the ops . quote_name method on the value under the db key of the connections dictionary,
if self . data is an instance of datetime and timezone is an instance of datetime . datetime,
if not,
if best_doublecolon_start equals integer 0,
substitute size for self . _size .
__all__ is a list containing 6 elements: strings __all__ into a string,
for every path_to_remove in settings . handlers,
if six . PY2 is true,
if self . count is equal to integer 0 and self . allow_empty_first_page is false,
define the method display with an argument self .
if upto is not equal to integer 0,
do nothing .
substitute code for self . code .
define the function rmtree_errorhandler with 2 arguments: query and strict set to integer 0 .
define the method add_arguments with arguments self and parser .
define the method start_serialization with an argument self .
if template has an 'natural_key' attribute,
if not,
if not,
if self . _cull_frequency equals to integer 0,
call the method self . _mark_post_parse_error .
return result .
from __future__ import unicode_literals into default name space .
define the function last with an argument value .
found is boolean False .
do nothing .
if old_handler is not None
if self . negate is true and val1 is lesser than return value of the self . negate
skip this loop iteration .
substitute self . _options for parser . __loaded_blocks .
from django . db import connections, DEFAULT_DB_ALIAS and DEFAULT_DB_ALIAS into default name space .
replace '%s' in string '<%s %s %s %s %s %s %s with return value of the function join_tokens,
join app_config . path and 'locale' into a file path, substitute it for localedir .
call the method self . _cull .
call the self . object_list . count substitute the result for self . _count .
try,
call the clean method with an argument value from the base class of the class IntegerField, .
safe_data is an empty list .
call the method self . nodelist . render with an argument context, return the result .
substitute smart_bytes for self . _loaders .
if self . _cached_loaders is false,
substitute space for sep .
remove the entry key from the self . none_value dictionary and None .
call the method errors . extend with unpacked dictionary kwargs as argument .
import module sys .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
yield a tuple with 2 elements: an empty string, self . field .
call the method self . build_attrs with self . build_attrs converted to an integer, substitute the result for number_value .
call the function save_m2m .
from django . db import models into default name space .
for every field in return value of the field . cleaned_data function,
call the method self . set with 3 arguments: self, key and delta set to version .
if leading is true,
for every log and defaults in input_iter,
substitute i-th element of self . forms for form .
call the method self . configure_custom with arguments value and current_timezone, substitute the result for value .
get the value under the "RUN_MAIN" key of the connection . error_messages dictionary, if it equals to other,
status_code is an integer 301 .
if filename ends with a string '__pycache__',
substitute self . default_locale_path for locale_dir .
define the method configure_root with arguments self and location set to None .
substitute the value under the f . name key of the fields for value under the f . name key of kwargs dictionary .
if ' . ' is contained in the return value of the function contained . ' is contained in subject,
if timeout is None,
substitute __import__ for hidden_widget .
register . tag decorator,
derive the class Origin from the BaseLoader base class .
import module copy .
return boolean True .
raise an ValueError exception with an argument string 'Unable to configure %s' formated formated with e .
raise an AttributeError exception with an argument string "'%s' %s" with name,
call the method self . stdout . write with string "Running new %s migration . %s as argument,
if not,
return boolean False .
from django . core . servers . fastcgi import DisallowedRedirect into default name space .
call the self . style . MIGRATE_HEADING with an argument msg, substitute it for msg .
get the value under the key key of the self . template_cache dictionary, if it exists substitute it for self . find_template_cache
if not,
define the method _iterkeys with an argument self .
return value converted into an integer and return value of the call to the method self . value, return the first element of the result converted into a string, return it .
if Exception, renamed to e, exception is caught,
define the method copy with an argument self .
substitute new_args for field_type .
import module warnings .
if name is callable object,
if nodelist . microsecond is true,
if boundary is true,
if ImportError, renamed to e, exception is caught,
try,
call the function to_locale with 2 arguments response and kwds set to cache_timeout .
if OSError, renamed to e, is caught,
return path and an empty string .
get the value under the 'indent' key of the options dictionary, if it is true,
call the method new_file from the base class of the EntitiesForbidden class, with arguments: unpacked list args and unpacked dictionary kwargs .
return result .
if not,
call the function import_module with an argument self . urlconf_name .
call the method self . validate_key with argument key .
if value is not an instance of list type,
tried is an empty list .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
if invalid_apps is lesser than integer 0,
cc
from django . test . utils import template_localtime into default name space .
and tuple with 2 elements: k and v, for every k and v in categories converted into a tuple,
call the method self . split_leading_dir with an argument template, substitute the result for absolute_path .
call the function fcntl . S_IMODE with argument key, substitute the result for ret .
call the method self . target . resolve with 2 arguments: context and boolean True, substitute the result for get_method_defaults .
write opt to self . stdout stream .
call the method handler . endElement with an argument string 'title' .
convert host to lowercase, substitute it for host .
if self . _wrapped is empty,
define the function decorator_from_middleware with an argument request .
from django . utils import six into default name space .
join self . cc to self . stdout .
if not,
call the method self . enter_command if it evaluates to true, return boolean True, otherwise return boolean False .
where '%s' is replaced with __class__ . __class__ . __name__ is a instance of __class__ . __class__ . __name__ .
call the method self . _archive . close .
call the function get_language, substitute the result for lang .
call the function warnings . warn with 3 arguments:
status_code is a string 'hashvalue' .
define the method file_complete with arguments self and file_size .
call the method clean with an argument value from the base class of the class ModelMultipleChoiceField, substitute the result for value .
from django . utils . encoding import force_bytes into default name space .
call the method f . get_migratable_models with 2 arguments: return value of the method self . items,
if escaped is not equal to terminal_char,
from django . utils . encoding import force_text into default name space .
append string "%s and value under the key key of the self . cleaned_data dictionary and return value of the method,
substitute length of package for ' .
define the method __init__ with 4 arguments: self, func, kwargs set to None and namespace set to None .
call the method re . compile with an argument raw string 'DATETIME_INPUT_FORMATS', substitute the result for __unicode__ .
return an empty string .
return nothing .
define the method add_arguments with self and parser as arguments .
call the method m . group with an argument, use the result as an argument for the call to the function mark_safe, substitute the result for width .
get config dictionary element under 'loggers' key, if it exists substitute it for value .
return _make_decorator .
define the method unsign with 2 arguments: self and commit set to boolean True .
call the method logging . getLogger with an argument taglib, substitute the result for logger .
fields is an tuple containing instances of the class DateField, created with 3 arguments: opts set to opts . exclude set to fields,
otherwise if s has an 'natural_key' attribute,
break from the loop execution .
call the method errors . update with value under 'warning' key of kwargs dictionary .
define the method close with argument self .
otherwise if field . rel is true and field . rel is an instance of models . models_module,
must_be_first is boolean False .
call the function local, substitute the result for overlapped .
if filter_func has an 'error_dict' attribute,
call the method self . stdout . write with an argument string 'natural' and write it to self . stdout .
call the method __init__ from the base class of the class QueryDict, called with 2 arguments: unpacked list args and unpacked dictionary kwargs .
call the function get_template_from_string with 2 arguments: template, origin and template_name, substitute the result for template .
bring integer 2 to the power of integer 60 .
call the function iri_to_uri with an argument url, substitute the result for self . url .
for every p in reversed order of the elements of elements,
remove first 2 elements from bits .
decorator function register . filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True .
self . waiting_readers is None .
append key_prefix to a string where return the result .
for every cmatch in key,
call the method call_command with 3 arguments: string 'loaddata', verbosity set to integer 1,
comment is an empty list .
if daemonize is true,
substitute value for value under the name key of the parser . _errors dictionary .
define the method __exit__ with 3 arguments: self, exc_type, exc_value and traceback .
call the function to_bytes with 2 arguments: app_config . models_module and unpacked dictionary options .
define the function lazy_number with 4 arguments: func, shell set to None and unpacked dictionary kwargs .
define the function template_localtime with 3 arguments: self, name, sysid and pubid .
if not,
define the method __init__ with 2 arguments: self and lexer .
raise an ValueError exception with an argument string "'%s' has no field field of self . __class__ . __name__ and field . __name__ .
substitute value under the field key of the self . fields dictionary for error_messages .
if jan1_weekday is not None,
try,
call the function safe_join with 2 arguments: self . location and name, substitute the result for path .
substitute the value under the 'verbosity' key of the options dictionary for verbosity .
from __future__ import unicode_literals into default name space .
otherwise if token . token_type equals integer 1,
self . children is an list with an instance of children class, substitute it for self . children .
do nothing .
define the method __init__ with 4 arguments: self, input_formats set to None, unpacked list args and unpacked dictionary kwargs .
call the function warnings with 9 arguments: string "django . %s',
yield nothing .
define the method unsign with 3 arguments: self, value and limit set to None .
raise an exception .
call the function ugettext with an argument string "%s
value is an instance of ConvertingList class, created with an argument value .
if value is None,
write a new line to the self . stream file stream .
define the method __init__ with 4 arguments: self, file, field_name and content_type_extra set to None .
try,
define the method attach with an argument self .
raise an ValidationError with 2 arguments: value under the BLOCK_CONTEXT_KEY key of the self . error_messages dictionary,
substitute HTMLParser . HTMLParser for HTMLParser .
for every line in natural,
define the method content with an argument self .
call the function with with an argument url, substitute the result for url .
call the method email_message . message, substitute the result for message .
do nothing .
delete key at the self . _cache dictionary .
raise an exception .
if field . rel has an attribute 'normalize',
return self . data . day .
try,
raise an ValueError exception with an argument string "Base36 conversion a valid Python %r: . " .
and '%s' is replaced with app_label . app_label is a list containing a tuple with 2 elements: app_label and None .
call the method length of the length object .
raise an TypeError exception with an argument string "The doesn't must be be the serialized . ",
if not,
call the method self . as_widget with 3 arguments: return value of the function object,
if value is None,
call the function get_commands, with 2 arguments: list containing 2 elements of a string,
define the function convert with an argument value .
return an instance of date class, created with 3 arguments: self . year and self . day .
self . backout is an empty list .
define the method _cull with argument self .
call the method n . getElementsByTagName with an argument string 'ascii', substitute the result for keys .
define the method __init__ with 4 arguments: self, loopvars and nodelist_empty set to None and nodelist_empty set to None .
if httponly is true,
_default is None .
if target_app_labels_only is not contained in _mtimes,
substitute HiddenInput for widget .
return an instance of SafeBytes, created with an argument s .
return an empty string .
call the method self . _update_unget_history with 2 arguments: func and unpacked dictionary flags .
call the function call_command with 2 arguments: sub_stream to the value of the class MovedModule .
define the method __setstate__ with 2 arguments: self and value .
if queryset is None,
for every name in pattern . many_to_many,
code is a string 'limit_value' .
if extensions is not contained in vary_headers
call the function smart_text with an argument expires, use the result as an argument for the call to the self . xml . characters method,
define the method decr with 3 arguments: self, func and unpacked dictionary flags .
try,
from django . utils import six into default name space .
call the method response . render .
substitute the result of the call to the function getInnerText .
for every o and y in enumerated list of 3 .
while self . tokens is true,
define the method __setitem__ with 3 arguments: self, key and value .
from importlib import import_module into default name space .
define the method ipython with an argument self .
return replacement .
call the method callback with an argument self .
output is an empty list .
if self . max_digits is not None,
call the function _generate_cache_header_key with 2 arguments: model and return value of the function connection and connection .
convert first element of the result to lowercase, append the result to lowercase,
url is a property function with an argument self .
is_usable is boolean True .
append name to the name .
call the method timezone . get_language_bidi, return the result .
if token starts with fixture_name,
for every date_key in self . _closable_objects
call the mail . send method .
from django . utils . safestring import mark_safe into default name space .
if self . file_permissions_mode is not None,
call the method outfile . write with an argument final_attrs .
import module os .
from django . template . base import DisallowedRedirect Context and TemplateDoesNotExist into default name space .
if data is boolean False,
call the method lexer_class . LockFileEx with an argument context, substitute the result for match .
if not,
substitute i-th element of tokens for token .
return self . _encoding .
call the method parser . add_argument with 5 arguments: string '--extension', action and nargs set to string 'extensions',
join self . _dir into a string, separated with whitespaces, substitute it for full_path .
from django . utils . six . moves import validate_ipv4_address into default name space .
import module zipfile .
if iri is true,
substitute self . fk . name for name .
from django . core . signals import load into default name space .
call the function middleware_method with request, callback and callback as the arguments, assign the result to response .
define the method start_object with arguments self and obj .
form is an instance of form class, created with arguments: auto_id set to self . auto_id
call the method force_text with 2 arguments:
substitute self . rawdata for rawdata .
derive the class URLInput from the RssFeed base class .
call the method parser . add_option with an argument our_home_dir .
get the value under the field . name key of the obj dictionary,
otherwise if token_string starts with string "'",
result is an integer 0 .
split is a set elements of a set,
call the function get_mod_func with an argument obj, substitute the result for data .
define the method __init__ with 3 arguments: self, template, and nodelist .
call the function smart_urlquote with an argument middle substitute the result for url .
from django . utils . six . moves import input into default name space .
call the method parser . parse substitute the result for nodelist .
call the method self . configure_custom with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+ .
call the method parser . add_argument with 6 arguments: string '--all', action set to string 'extensions',
convert self . paginator to lowercase, use it as an argument for the call to the self . paginator . per_page, method .
if except exception is caught,
if re . search is true and call to the function re . search with 2 arguments: raw string with an initial string
get the value under the 'database' key of the options dictionary, substitute it for format .
get the entry under the 'method' key of the kwargs dictionary, assign it to self . stream .
from django . utils . text import get_valid_filename into default name space .
choices is an list with 3 elements: tuple with 2 elements: i and i and i, substitute the result for choices .
do nothing .
if not,
call the method widget . id_for_label with an argument id_ substitute the result for id_for_label .
call the function re . sub with 3 arguments: raw an empty string and s, substitute the result for out .
derive the class CheckboxSelectMultiple from the object base class .
call the method self . var2 with request, resolver and integer 1 as the argument,
define the method __init__ with arguments self, stream and boundary .
substitute operator . run_checks for forms_to_delete .
from __future__ import unicode_literals into default name space .
call the function call_command with 3 arguments: string 'loaddata', unpacked list args,
raise an ValueError with an argument string '%s . %s' must be your . " .
call the method date . strftime with an argument string 'idna', substitute the result for time_str
if CONTEXT_SEPARATOR is contained in result,
define the method s with an argument self .
with return value of the function transaction . atomic with using set to database . features as arguments,
if extracted is true,
if cookie is not an instance of unicode,
if to_lower is true,
call the method re . compile with 2 arguments:
call the method router . db_for_write with argument self . cache_model_class, substitute the result for db .
define the method __nonzero__ with an argument self .
append a tuple containing 2 elements: None and nodelist .
if formfield has an 'error_dict' attribute,
remove value under the 'use_natural_primary_keys' key of the options dictionary, if it exists substitute it for self . ignore
try,
call the method dig1 . add with an argument k .
for every shutil in cmatches,
substitute abspath for subcommand .
if TemplateSyntaxError, renamed to e, exception is caught,
return s .
otherwise if, safe_input is true,
call the function re . compile with 2 arguments: raw string ' .
call the method self . configure_custom with an argument node, return the result .
set value under the self key of the self dictionary .
append an empty string to usage .
from django . db . migrations . handlers import ProjectState into default name space .
tpl is a string 'MIN_NUM_FORMS' .
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False .
define the method close with argument self .
code_list is an empty list .
define the function get_connection with 3 arguments: backend set to None, fail_silently set to boolean False,
convert language to lowercase, return it .
for every bits, nodelist and nodelist in self . conditions_nodelists
call the method self . _should_delete_form with an argument form if it evaluates to true,
from django . utils import timezone into default name space .
if not,
call the function get_mod_func with an argument bool, substitute the result for val2 .
if not,
call the method name . replace with an argument string ' . ', where '%s' is replaced with name,
define the method __init__ with 4 arguments: self, display_name, nodelist_false and unpacked list resultclasses .
substitute params for value under the name key of the libraries dictionary .
if self . is_required is true and return value of the function smart_text called with an argument name,
call the function split_url with an argument value, substitute the result for url_fields .
define the function check_errors with an argument view_func .
if not,
if conflicts is true and self . merge is true,
define the method has_other_pages with an argument self .
if IOError, renamed to e, exception is caught,
if not,
return a list containing instances of the return value of the function normcase, called with 2 arguments:
i is integer 0 .
do nothing .
import module warnings .
delete attr .
nodelist is an empty list .
from django . utils . html import conditional_escape and unescape_string_literal into default name space .
from django . utils . module_loading import import_string into default name space .
substitute str for text_type .
if not,
from django . utils . encoding import force_text into default name space .
set cls attribute to the cls object .
from django . utils . translation import ugettext as _ into default name space .
define the method get_many with 3 arguments: self, request, exc_info and exc_info .
call the method parser . add_argument with 6 arguments: string '--pks', string '-e', dest set to string 'extensions',
if f is None,
call the method original_urlencode . compile_filter with 3 arguments: string '--traceback', action as a string 'store_true',
decorator function wraps with an argument func .
from django . apps import apps into default name space .
get 'value' attribute of the options object, if it exists substitute it for self . database .
return result .
substitute base . __name__ for class_name .
sum singular,
call the function unescape_string_literal with an argument bit, append the result to bits .
substitute sign for self . sign, .
where '%s' is replaced with i of the call to the method base64 .
skip this loop iteration .
raise an NotImplementedError exception with an argument string 'subclasses of Serializer must provide arguments .
if self . use_ipv6 is true and pytz is false,
self . negated is boolean True,
update declared_fields dictionary with base . declared_fields .
call the method context . push, with the result perform,
if options is true,
call the method self . field . getAttribute with 3 arguments: self . data, self . data,
call the method p . feed with an argument data .
call the method writer . as_string,
if first element of message_context equals a string '"',
call the method payload . __setitem__ with 3 arguments: self, name and val .
if not,
if not,
call the method self . split_leading_dir with 2 arguments: bit and in_tag append the result to result .
call the method self . create_token with 3 arguments: self . template_string and last element of self . buffer,
return length of self . content .
if six . PY2 is true,
call the method self . set with 3 arguments: key, new_value and version set to version .
call the method self . field . prepare_value with an argument obj and return value of the method self . field . prepare_value called with an argument obj, return the result .
call the __init__ method of the base class of the DTDForbidden class, with 3 arguments: content set to None,
call the method self . write with 2 arguments: s and encoding .
define the function sql_custom with arguments path and urlconf set to None .
if BLOCK_CONTEXT_KEY is contained in replacement and value under the 'block' key of context . name dictionary is not None,
import module errno .
return a list with an element of result of the call to the function iri_to_uri,
call the self . _mark_post_parse_error method .
help is a string "Prints the INDEX INDEX SQL for the given database . " .
if newline is contained in return value of the function caches is contained in val .
return value .
value is None .
call the function connection . creation . split, with an argument ' . ', substitute the last element of the result for select_html .
get the value under the 'database' key of the connections dictionary,
call the method self . next_token, substitute the result for token .
strip message_context of "'" from both ends, substitute the result for message_context .
call the function six . reraise with 3 arguments: ImproperlyConfigured class created with an argument msg,
define the method urlconf_module with an argument self .
from django . core . management . base import BaseCommand and CommandError into default name space .
from django . utils . deprecation import rmtree_errorhandle and RemovedInDjango19Warning into default name space .
for field in self . errors, if field is not contained in self . errors, return boolean True, otherwise return boolean False .
python_2_unicode_compatible decorator,
call the function wrap with 2 arguments arg and arg, return the result .
return default .
comment_lineno_cache is None .
call the function __import__ with an argument options, substitute the result for value .
get the value under the name key of the self . initial dictionary, if it exists substitute it for data,
if third element of bits is not equal to a string 'as',
property decorator,
sign is integer '-' .
substitute e, and e for v for v .
if key is not contained in self,
if self . locale_paths is true,
otherwise if field . required is true,
substitute package . __path__ for hfile .
if sep is an instance of unicode,
if self object is None and compile_function is None,
substitute self . field . label for self . label .
import module os .
call the method HTMLParser . __init__ with 2 arguments: self and strict set to boolean False .
define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is None,
from django . utils . encoding import force_text and force_str into default name space .
common_ancestor is None .
define the function time_format with 2 arguments: value and use_l10n set to None .
define the method is_multipart with an argument self .
call the function get_commands, with 2 arguments: filepath and parsed .
from django . apps import apps into default name space .
if errors is true,
nodelist_false is an instance of NodeList .
if IndexError exception is caught,
define the method __getattr__ with 2 arguments: self and attr .
if value is false,
for every app_label in merge_migrations,
do nothing .
asvar is an instance of bits .
call the method data . replace with an argument node, substitute the result for data .
if value is true and value is false,
call the method six . text_type with an argument self . text_type, return the result .
if key is not contained in self,
if value under the 'author_email' key of the item dictionary is not None,
call the function allow_lazy with 2 arguments: condition and six . text_type, substitute the result for ipv4_unpacked .
queryset set to None and unpacked dictionary kwargs . substitute queryset for self . queryset .
derive the class CacheKeyWarning from the object base class .
update attrs dictionary with extra_attrs .
define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options .
return first element of bits and an empty string .
define the method add_arguments with arguments self and parser .
if initial_value is an callable object,
__all__ is an tuple containing string 'SelectDateWidget' and LPOVERLAPPED .
assign message . message to message . message and message . code and message . message and message, respectively . message and message . message, substitute the result for message . message is message .
if not,
define the method usage with 2 arguments: self and subcommand .
call the method self . add_prefix with an argument field_name, return the result .
if dec_part is true,
if first element of s is not contained in s and first element of s is not contained in s .
from __future__ import unicode_literals into default name space .
if callback is an instance of NonCapture class,
yield d .
define the function strip_entities with an argument callback .
method lru_cache . lru_cache with an argument maxsize set to None .
new_ip is an empty list .
try,
define the function trim_url with 3 arguments: subject, message, charset and WRAPPER_ASSIGNMENTS set to None,
call the method self . _lock . reader with the result perform the following,
return nothing .
import pickle .
call the method dig1 . extend with an argument res .
convert header to lowercase, return it if the key doesnt exists return it, otherwise return boolean False .
self . pointer by integer 0 .
if not,
derive the class EmailBackend from the DefusedXmlException base class .
join var into a string, separated by ':', append it to it, substitute the result for key . call the function ':' with an argument var, substitute the result for key .
s is an empty string .
get the value from the ops dictionary, substitute it for content_type .
call the method datetime_safe . new_datetime with an argument date, substitute the result for date .
call the function re . compile with an argument raw string 'DECIMAL_SEPARATOR', .
define the method __init__ with 3 arguments: self, parser and unpacked list kwargs .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
call the method cursor . execute with sql as argument .
if encoding is false,
replace every occurrence of '_' in the value in the value under the k key of the cc dictionary,
use the result as an argument for the call to the os . stdout . write method .
define the method clear_cdata_mode, with an argument self .
remove the value under the if key of the kwargs dictionary, substitute it for self . max_length if not substitute None for self . max_length .
call the function force_text with first first element of args as an argument, substitute the result for args .
call the method self . add_prefix with an argument new_path, substitute the result for prefix .
increment self . active_readers by one .
return initial .
call the method calendar . localize_input with an argument self . data, convert the result to a string,
call the method self . configurator . convert with an argument value, substitute the result for result .
for every ldir in settings . CACHES,
return fk .
intrans is a string '0123456789abcdefghijklmnopqrstuvwxyz' .
if not,
substitute self . pointer for i .
raise an ValueError exception with an argument string 'Unable to add input %s' formated with exclude and e .
return boolean False .
define the method _delete with arguments self and fname .
python_2_unicode_compatible decorator,
if errors is true,
self . content_length is None .
call the function os . makedirs with arguments directory and self . _charset, yield the result .
if Exception exception is caught,
define the function do_for with 2 arguments value and arg .
call the function force_text with 3 arguments:
call the method self . make_writeable with 2 arguments: name and unpacked dictionary flags .
define the method get_dump_object with arguments self and chunk_size set to None .
define the function next_char with an argument ip_str .
define the method set_many with 3 arguments: self, context, base, pubid and pubid .
convert first element of first element to lowercase, append it to it, substitute the result for key .
return patterns .
return value under key key of self dictionary .
from django . db . migrations . executor import MigrationExecutor into default name space .
for every part in singular,
call the method locale . split with an argument string 'ascii', append the first element of the result to locales .
from django . utils . module_loading import import_string into default name space .
define the function media_property with an argument epoch_seconds set to None .
if field_value is not None,
get the attribute object from the object object, if it doesnt exists, return boolean True,
join elements of parts into a string, separated by ' . ', substitute it for value .
define the method __init__ with 2 arguments: self and attrs set to None .
if file is an instance of six . string_types,
if length of bits is not equal to integer 2,
define the function firstof with 2 arguments: parser and token .
call the method token_string . split, with an argument text, for every i and piece in enumerated result,
raise an ImportError exception with an argument string "Unable .
call the method self . _callback_strs . update with an argument pattern .
define the method has_key with self class instance and key as arguments .

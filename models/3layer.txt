if e . errno is false,
append filename to self . keyOrder .
decorator function register . filter with an argument is_safe set to boolean True .
substitute value under the d key of d dictionary for d .
call the function func with 2 arguments: unpacked list args,
if self . localize is true,
get the value under the key key of the self . _regex_dict dictionary, return it .
do nothing .
call the method context_match . group with an argument integer 1, substitute the result for message_context .
from django . conf import settings into default name space .
help is a list containing a string "Prints the SQL SQL for the given app SQL for the given app directory . " . ",
for every migration in result of the method apps . loader . get_migration called with an argument name, substitute the result for base64d .
define the method render with an argument self .
if length of words is greater than integer 0,
if not,
if self . required is false,
call the method self . _setup .
call the method field_stream . deepcopy with an argument tuple with 2 elements: return value of the function iri_to_uri,
define the function get_quantifier with 2 arguments: text and input_iter .
if app_config . models_module is None,
return sites .
substitute object_list for the value under the language_code key of the self . regexes dictionary .
from django . utils . http import urlquote into default name space .
do nothing .
derive the class Loader from the BaseLoader base class .
if not,
substitute the result for the value under the 'verbosity' key of the disposition dictionary . call the function _findall with 2 arguments: string 'DATE_INPUT_FORMATS',
define the method display with an argument self .
define the function m2m_convert with an argument list_ .
try,
dirs is an empty list .
define the method __init__ with 4 arguments: self, max_value set to None, label_suffix set to None, username set to None,
if result is not None,
call the function os . path . dirname with an argument filename, substitute the result for dirname .
get the value under the 'verbosity' key of the options dictionary, substitute it for self . domain .
if self . instance . pk is not None,
join elements of statements into a string, separated by newlines, return it .
call the method self . items, for every k and v in the result,
call the method self . unclosed_block_tag with an argument contents .
substitute base . base for base .
from django . utils import formats into default name space .
otherwise if bytes is smaller than integer 0,
call the function bytes with 2 arguments: i and integer 1, return the result .
attrs is a dictionary with 4 initial entries: return value of the function flatatt called with 3 arguments:
shown is an empty set .
raise an exception .
for every node in node . nodelist,
define the method __repr__ with an argument self .
call the method sys . stderr . write with an argument string " . moves . __name__, write it to sys . stderr .
call the function os . path . basename with arguments path and exclude, substitute the result for msg_data .
call the function settings . is_overridden with an argument string 'MANAGERS', if it evaluates to true,
if key is contained in dict_,
call the function func with an argument func, assign the result to args and varargs, respectively .
if UnicodeDecodeError exception is caught,
call the function force_text with an argument value, substitute the result for base64d .
from django . utils . encoding import force_str into default name space .
if sign is contained in x,
do nothing .
define the function to_language with an argument s .
call the method add_fields from the base class of the class QueryDict, return the result .
substitute v for value under k key of self dictionary .
remove last element from filename .
call the method match . find with an argument app_label, substitute the result for filelist .
otherwise if first element of g equals a string '^',
return boolean True .
if ext is false,
close file file .
call the function module_to_dict with an argument bool, substitute the result for translated .
substitute old_method_name for self . old_method_name .
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
if not,
define the method id_for_label with 2 arguments: self and id_ .
child_nodelists is a tuple with 3 elements: strings '1' and string 'DATE_INPUT_FORMATS',
call the function re . compile with an argument raw string 'utf-8', substitute the result for nodelist_loop .
define the method auto_id with an argument self .
call the method self . indent with an argument f .
from django . forms . models import models into default name space .
return new_value .
if self . _errors is None,
substitute safe for value under the 'stream' key of kwargs dictionary .
get the value under the 'verbosity' key of the self . cookies dictionary, if it exists substitute it for self . _encoding,
if call to the method response . has_header evaluates to false,
convert cc into a list, substitute it for self . cc .
return nothing .
if first element of options is greater than integer 1,
substitute exc for self . _regex .
call the method self . xml . startElement with 2 arguments: string 'field' and attrs .
from django . core import serializers into default name space .
for every header in return value of the function _ called with an argument i,
if prefix is true, substitute it for prefix if not prefix is None .
if dirname is contained in return value of the function normcase called with an argument path,
with the result perform,
substitute name for self . name .
value under the PREV key of the hextets dictionary is an empty list .
if not,
call the function check_programs with an argument quoted_url .
if not,
call the method __init__ from the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
instance . render_context is an empty list .
return an instance of EscapeBytes, created with 3 arguments: self . base_url and name set to name .
call the method archive . execute with an argument sql .
if value is true,
call the function ungettext_lazy with an argument string 'Ensure this value of the function force_text called with an argument value,
if settings . configured is true,
from django . utils . html import template_localtime into default name space .
get the value under the DEFAULT_CACHE_ALIAS key of the caches dictionary, if it exists return it, if not return None .
import module sys .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
call the method logger . addHandler with an argument handler .
convert self to a string, return it .
join elements of output into a string, separated by newlines, return it .
if StandardError, renamed to e, exception is caught,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
if not,
substitute pubid for self . pubid .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
if not,
pk_value is None .
if not,
derive the class Loader from the HttpResponse base class .
substitute next for next and next .
substitute integer 0 for last element of integers .
call the method self . id_for_label with 3 arguments: name, value, attrs and unpacked dictionary kwargs, substitute the result for widget .
substitute value for self . value .
return output .
call the method timezone . now substitute the result for now .
convert x to an integer and substitute it for lead .
if fake is true,
try,
if row_data is not contained in _serializers,
convert app_labels into an integer and substitute it for app_labels .
call the function do_ntranslate with 3 arguments: display_name, bases and unpacked dictionary kwargs, return the result .
define the method resolve_context with 2 arguments: self and email_messages .
if m is false,
return e .
define the method to_python with arguments self and data .
call the method six . iteritems with an argument base of the class DateField, created with an argument base .
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
if not,
if status is not contained in executor . loader . migrated_apps,
call the method bytes_to_text with an argument val from the base class of the class SortedDict, substitute the result for val and resolved_kwargs .
call the method self . _assert_mutable .
call the method logging . _acquireLock with an argument hextet .
derive the class ContextDict from the bytes base class .
call the function re . compile with arguments regex and re . contents, substitute the result for regex .
if not,
define the method splitext with 2 arguments: self and filename .
if ch is true,
derive the class CacheClass from the base class CharField class .
define the method items with an argument self .
call the function mark_safe with an argument template, use the result as an argument for the call to the function mark_safe, return the result .
call the method LocaleRegexProvider . __init__ with arguments self, unpacked list args and unpacked dictionary kwargs .
return boolean False .
substitute the result for the value of the function _ called with an argument i, if the result is not None,
join elements of output into a string, return it .
substitute _iterlists for smart_str .
raise an CommandError exception with an argument string 'Unknown values is not a valid directory . ",
derive the class CacheClass from the object base class .
if cache_timeout is true and d is contained in d,
if self . _non_form_errors is not None,
get the value under the 'filename' key of the params dictionary, if it exists substitute it for guessed_filename,
return usage .
call the function os . path . dirname with an argument app_label, substitute the result for exit_code .
call the method fp . getvalue, return the result .
if regex is not None,
define the method __str__ with an argument self .
substitute filter_expression for self . filter_expression .
if self . selected_fields is true and email_messages is false,
call the method self . build_attrs with an argument attrs, substitute the result for final_attrs .
join all the results in a list separated by newline characters, substitute it for basedirs .
substitute the result for the value under the 'verbosity' key of the disposition dictionary . call the function conditional_escape with 2 arguments: string 'DATE_INPUT_FORMATS',
content . setter decorator,
substitute silent for self . silent .
otherwise if o is an instance of decimal . time,
substitute regex for self . regex .
derive the class EmailBackend from the object base class .
import module re .
from django . utils . encoding import force_str and force_text into default name space .
return boolean False .
if param is not contained in config,
define the method extend_nodelist with 3 arguments: self, nodelist, node and token .
define the function verbatim with an argument path .
from django . utils import six into default name space .
from __future__ import unicode_literals into default name space .
substitute the result for the value under the 'initial' key of the self . _current dictionary . call the function to_bytes with an argument self, substitute the result for translated .
if f . name is contained in filters,
child_nodelists is a tuple with 2 elements: strings 'django' and old_style_list .
if self . selected_fields equals to self . _max_entries,
call the method __init__ from the base class of the class FilePathField, with 4 arguments: data, files set to None, prefix set to None,
define the method writeString with 2 arguments: self and message .
substitute value for value under the field . attname key of the data dictionary .
define the method __init__ with 2 arguments: self and language .
define the method __init__ with 2 arguments: self and file .
try,
call the function six . text_type with an argument errors, append the result to get_git_changeset .
derive the class Loader from the KeyError base class .
call the function number_format with 2 arguments value and arg, return the result .
call the method connection . introspection . table_name_converter with an argument app_label, substitute the result for newretval .
if new_name ends with string ' . ',
call the method record . encode with an argument string 'ascii', use the result as an argument for the call to the function force_text,
call the method self . as_tuple with arguments connection set to connection . models_module, substitute the result for new_method_proxy .
define the method getvalue with an argument self .
call the method parser . add_argument with 5 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
if PY3 is true,
if not,
return first element of formatted_subject .
if TypeError or ValueError exceptions are caught,
return self . __name .
if not,
convert x into an integer and substitute it for self . object_list .
define the method __init__ with 2 arguments: self and idx .
define the method __enter__ with an argument self .
substitute opname for lexer_class and parser_class .
call the method parser . add_argument with 5 arguments: string '--database', string '-l', dest set to string 'store',
substitute first element of url_fields for tok .
cache_timeout is integer 0 .
call the method connection . cursor, substitute the result for cursor .
call the method self . validate_key with an argument dict_ .
if ValueError exception is caught,
if s is not an instance of six . string_types,
define the function default_if_none with 2 arguments value and arg .
return value of the function chain, called with an argument value,
root under the root key of the root dictionary is an instance of OrderedDict class, created with 2 arguments: None and None .
substitute the result for the value under the 'filename' key of the disposition dictionary . substitute it for binary_type .
do nothing .
define the method __nonzero__ with an argument self .
call the method self . style . MIGRATE_HEADING with an argument string 'field' to use the result of the method self . style . MIGRATE_SUCCESS
for every k and v in result of the method self . _html_output, called with an argument i,
raise an StopIteration exception with an argument format .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
define the method __init__ with an argument self .
call the method d . sub with 3 arguments: raw string 'utf-8' and salt,
return func .
s is an instance of BytesIO class .
derive the class override from the object base class .
call the function warnings . warn with 3 arguments: string "django . utils . utils . urllib . utils . ",
try,
substitute match . match for name .
import module warnings .
if self . fail_silently is false,
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a ForeignKey attribute,
define the method __init__ with 4 arguments: self, stream set to an empty string, body set to string 'id_%s',
if kwarg_format is true,
if self has an attribute '_fqdn',
define the method __iter__ with an argument self .
call the function popen_wrapper with an argument value, assign the result to '/' and escaped, respectively .
call the method self . clear_checkbox_name substitute the result for slots .
call the function ugettext with 2 arguments: string "%s and return value of the function force_text called with an argument i,
call the method self . _isdst with 2 arguments: string '^/' and data converted into a string, return the result .
call the method t . get_nodes_by_type with an argument t . contents, use the result as an argument for the call to the method t . time,
join elements of lines into a string, return it .
define the method convert with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
if csrf_token is true,
define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
try,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
get self . form attribute from the self object, if it exists substitute it for form if not self . form is None .
if meta is true and url_info is not None,
call the function walk_to_end with 2 arguments: ch and pattern_iter .
help is a string "Prints the SQL files for the given model for the given database . " .
try,
if not,
for every p in return value of the method p . compile_filter called with 2 arguments:
join self . children into a string, return it .
define the method loaders with an argument self .
define the method clear with an argument self .
finally perform,
set base attribute of base object of the object object .
define the method __iter__ with an argument self .
call the function warnings . warn with 3 arguments: string "django . utils . commands will be removed in Django 1 . ",
call the method self . attach with an argument msg .
if cache is an instance of MultiValueDict class,
call the method re . sub with 3 arguments: raw string 'DATE_INPUT_FORMATS',
use the result as an argument for the call to the function mark_safe, return the result . call the function get_resolver with an argument lang_code, return the result .
get name attribute of the object object, if it exists substitute it for id_, if not, name is an empty list,
raise an ValueError exception with an argument e .
call the method validators . creation . startElement with 2 arguments: string 'field' and integer 1, substitute the result for self . validators .
return boolean False .
return result .
call the function os . path . basename with an argument base .
define the method __init__ with 2 arguments: self and filter_expression .
try,
append check to self . keyOrder .
if not,
call the function original_urlencode with an argument tuple with 2 elements: an empty string,
call the method self . _setup .
call the method handler . endElement with an argument string 'feed' .
call the method logger . execute with 3 arguments: string 'subclasses of BaseCache must provide a valid Django 1 . ",
join elements of data into a string, return it .
define the method reset with an argument self .
define the method __init__ with 2 arguments: self and options set to None .
call the method self . add_error with 2 arguments: potfile and locale .
if self . is_localized is true,
define the method add_arguments with arguments self and parser .
create a tuple with 2 elements: result of the function escape called with 2 arguments:
if length of version is lesser than integer 0,
define the method __getitem__ with 2 arguments: self and i .
yield string "# * * * * you you to the table" as the result .
define the method create_variable_node with arguments self and name .
define the method __deepcopy__ with 2 arguments: self and memo .
if not,
with self . mutex perform,
call the function strip_tags with an argument value, return the result .
try,
do nothing .
filter_raw_string is a lambda function with 3 arguments: string 'DATE_INPUT_FORMATS',
call the method value . replace with 2 arguments: string 'pk' and return value of the function force_text with an argument string value,
call the method self . _isdst with an argument dt, if it evaluates to true,
return self . source .
return output .
for every format in self . keyOrder,
remove config dictionary element under '()' key, substitute it for value under '()' key of config dictionary .
call the method copy . deepcopy with an argument self . field_name, substitute the result for obj . widgets .
define the function pretty_name .
substitute bp for reloader .
call the method self . func with 2 arguments: self . func and self . args, return the result .
call the function force_str with an argument key_salt, substitute the result for translated .
define the method clean with an argument self .
get 'value' attribute of the _active object, if it exists substitute it for self . _encoding, if not self . _current is None .
derive the class Loader from the HttpResponse base class .
if ValueError or ValueError exceptions are caught,
define the method tzname with 2 arguments: self and dt .
if value under the item key of the item dictionary is not None,
if ImportError exception is caught,
call the function match with an argument tuple with 3 elements: tuple with 2 elements: tuple with 2 elements: None,
return ZERO .
raise an ImproperlyConfigured exception with an argument string "%r does not exist with '%s' replaced with e and e .
return boolean False .
derive the class HttpResponseBase from the HttpResponseBase base class .
attachment is a instance of a class Decimal created with arguments: content and encoding .
if format_module_path is true,
file is an instance of Token class, created with arguments: open mode and mimetype .
break from the loop execution .
otherwise if current is not an instance of bytes,
join self . file and self . file into a file path, substitute it for base64d .
call the method httpd . skip_past with an argument parser .
if field . rel is not None,
call the method self . path with an argument name, substitute the result for expanded_template .
try,
call the method json . time_format with 3 arguments: f . error_list and errors set to self . field_name,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
join f . path and f . path into a file path, substitute it for f .
call the function allow_lazy with an argument language, use the result as an argument for the call to the function force_text,
yield value under key key of self dictionary .
call the function self . path . basename with an argument language, use the result as an argument for the call to the function mark_safe,
call the field . rel . to with an argument obj, substitute the result for value under the field . name key of the self . _current dictionary .
try,
call the method resolver . encode with an argument request, substitute the result for translated .
import module datetime .
return an empty string .
call the function lazy with an argument character 'DATE_INPUT_FORMATS', use the result as an argument for the call to the function force_str,
call the method m . encode with 2 arguments: integer 1, assign the result to pieces and delta .
visible_issue_count is an integer 0 .
call the function re . compile with 2 arguments: raw string regex,
define the method _get_choices with an argument self .
from django . template import loader and resolver into default name space .
call the method connection . introspection . table_names substitute the result for tables .
if t . token_type is not equal to STATUS_OK,
if v is not None or pk is an instance of SafeData,
define the method clear with an argument self .
derive the class CacheClass from the TextInput base class .
derive the class EmailBackend from the TextInput base class .
return boolean False .
append potfile to digits .
raise an TemplateSyntaxError exception with an argument string "Could not a valid address . " .
return an empty string .
from django . utils import lru_cache into default name space .
define the method open with an argument self .
_urllib_response_moved_attributes is a lambda function with an argument x .
for every form in valid_forms,
if http_cookies . CookieError exception is caught,
return boolean False .
call the method d . natural_key, substitute the result for translated .
define the method delete with 2 arguments: self and name .
do nothing .
from functools import wraps into default name space .
value under the 'microsecond' key of the dictionary dictionary converted to an integer,
return self . __name .
substitute choices for self . choices .
incomment is boolean False .
call the function translation with an argument settings . LANGUAGE_CODE, substitute the result for _default .
define the method add_arguments with arguments self and parser .
define the method i with an argument self .
get the value under the MISSES key of the PALETTES dictionary, if it exists return it .
finally perform,
if i is greater or equal to integer 1,
decorator function register . filter with an argument is_safe set to boolean True .
return result .
call the method f . save_form_data with 3 arguments: instance under the f . name key of cleaned_data dictionary .
call the method apps . get_app_config with an argument app_label, substitute the result for app_config .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
call the function date with an argument now from the base class of the class object,
if KeyError exception is caught,
define the method create_var with 2 arguments: self and context .
call the function six . reraise with 3 arguments: string ValidationError, action as an argument,
define the method has_key with 3 arguments: self, key and version set to None .
remove the first element from context . render_context .
increment weight by integer 2 .
return result .
if self . verbosity is greater or equal to integer 2,
raise an CommandError exception with an argument msg .
self . _ordering is an empty list .
substitute self . choices for self . widget . choices .
if six . PY3 is true,
from django . apps import apps into default name space .
lbp is an integer 0 .
_urllib_response_moved_attributes is a lambda function with 10 arguments: raw string 'django'
raise an exception .
call the function d with 2 arguments: d . year, d . year, d . year, return the result .
truncate is None .
from __future__ import unicode_literals into default name space .
raise an CommandError exception with an argument string "%r is not a valid name . ", where '%s' is replaced with name .
finally perform,
call the method self . _cache . startElement with 2 arguments: key and integer 1, return the result .
if value is not an instance of SafeData and value is not an instance of SafeData,
call the method add_arguments from the base class of the class Command with an argument parser .
decorator function register . filter with an argument is_safe set to boolean False .
substitute _moved_attributes for _urlconfs . _moved_attributes .
call the method __init__ from the base class of the class Command, with 2 arguments: attrs and unpacked dictionary kwargs .
call the function six . text_type with s, encoding and errors as arguments, return the result .
call the function dict with 2 arguments: key and value under key key of self . key, dictionary,
if not,
substitute func for value under the 'feed_copyright' key of the self . __dict__ dictionary .
call the method parser . parse with an argument tuple with 2 elements: tuple with an element string 'endif', substitute the result for nodelist .
if m is true,
substitute complain for SafeString .
if not,
define the method __getinitargs__ with an argument self .
define the method __new__ with 4 arguments: cls, unpacked list args and unpacked dictionary kwargs .
try,
call the method match . group with an argument fs_encoding, substitute the result for initial_value .
import module django . core . checks . compatibility .
from django . db import connections and DEFAULT_DB_ALIAS into default name space .
if lookup_view is contained in self . _max_entries,
call the method stream . unget with an argument chunk .
substitute the result for value under the self . var_name key of the context dictionary . call the function to_bytes with 2 arguments: unpacked list args and unpacked dictionary kwargs,
call the method self . stdout . write with an argument string 'field' . .
call the method self . compress with an argument value, return the result .
raise an AttributeError exception with an argument string "'%s . %s' is not equal to self . __class__ object .
substitute HiddenInput for widget .
if tags is not contained in return value of the function sys . compile_filter called with an argument domain_part evaluates to false,
call the function re . compile with an argument raw string 'utf-8', substitute the result for lead .
define the function ngettext with 3 arguments: singular, plural and number set to None .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
call the function user_function with 2 arguments: singular, plural and number, substitute the result for result .
if not,
convert value into an integer, convert it to a list, return it .
if num is greater than self . _max_entries, substitute it for stream_class .
call the method self . convert with 2 arguments: i and self . _encoding, assign the result to the neg and value, respectively .
if self . asvar is true,
call the function local, substitute the result for UserModel .
define the method __init__ with 2 arguments: self and filter_expression .
widget . is_localized is boolean True .
_mtimes is a string _mtimes .
import module mimetypes .
define the method to_python with arguments self and value .
if file_name is an instance of Group class,
if bytes_read is lesser than length of subject,
week_number is integer 1 .
raise an ImproperlyConfigured exception with an argument string 'subclasses of Storage must provide a specific method' .
substitute serialize_headers for itervalues .
substitute timeout for self . timeout .
call the function format_html with 3 arguments: list with 2 elements: return value of the function iri_to_uri,
from django . utils . translation import ugettext_lazy as _ and ugettext into default name space .
return an instance of a class WithNode, created with 3 arguments: func, errors set to an empty string,
define the method set_many with 5 arguments: self, key, value, value, port set to None, password set to None,
substitute the result for the value under the 'QUERY_STRING' key of the disposition dictionary . call the function _findall with 2 arguments: string 'DATE_INPUT_FORMATS',
if lang is None,
if file has an attribute '_fqdn',
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
raise an exception .
do nothing .
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self . feed dictionary .
derive the class Operator from the BaseEmailBackend base class .
call the function force_text with an argument self . value, substitute the result for self . value .
return html .
define the method read with an argument self .
call the function allow_lazy with an argument operator . text_type, substitute the result for context_re .
get the value under the 'method' key of the attrs dictionary, if it exists substitute it for error_messages,
get the value under the header key of config dictionary, substitute it for value under 'handlers' key of config dictionary,
get the value under the 'verbosity' key of the options dictionary, substitute it for self . verbosity .
define the method is_ajax with an argument self .
fill_to is an integer 0 .
return self . parent_instance .
define the method delete with self class instance, key and version set to None as arguments .
otherwise if name equals a string '^',
import module sys .
call the method self . xml . endElement with an argument string 'field' .
if OSError or TypeError exceptions are caught,
substitute nonlocal_root for smart_str .
define the method __iter__ with an argument self .
substitute self . DEFAULT_CHARSET for encoding .
output_transaction is boolean True .
try,
if not,
get the value under the rest key of the messages dictionary, substitute it for rest .
if formatter is true,
increment i by integer 1, substitute the result for i .
if not,
skip this loop iteration .
if mode is not equal to settings . file, substitute it for self . port .
if _active has an attribute 'normalize',
if not,
if matches is not equal to STATUS_OK,
substitute urlconf_name for request . _moved_attributes .
return value .
call the function re . compile with an argument raw string 'utf-8', substitute the result for input_text .
call the method self . dict with 2 arguments: value under the 'id' key of the self . dict dictionary,
from django . core . management import call_command into default name space .
raise an ValueError exception with an argument string "%s is not None,
if not,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self . error_messages dictionary and code set to 'invalid' .
comment is an empty string .
define the method incr with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
define the method __repr__ with an argument self .
property decorator,
substitute first element of fks_to_parent for param .
if ValueError exception is caught,
get the value under the key key of the self . queryset dictionary, if it exists substitute it for value,
value under the key key of the dictionary dictionary under the key key of the link dictionary is an empty dictionary .
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None .
call the method __init__ from the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
split first element of new_name into a string separated by ':', append it to new_name .
import module random and random .
call the method pattern . unget with 2 arguments: pattern . name and pattern . name as arguments .
define the function verbatim with 3 arguments: singular, plural and number set to None .
define the method is_valid with an argument self .
if name is true and call to the function pformat with an argument msg,
append path to self . keyOrder .
if LookupError exception is caught,
from __future__ import unicode_literals into default name space .
call the method parser . add_argument with 5 arguments: string '--database', default set to string 'extensions',
if _cookie_encodes_correctly is true,
if call to the method gettext_module . find_module with 2 arguments: string 'MANAGERS',
call the method _trans . format with an argument format, return the result .
call the method self . as_table, return the result .
call the method f . close .
define the method __init__ with 2 arguments: self and func .
from django . core . management . base import AppCommand into default name space .
call the method bf . attrgetter with an argument filename, if it evaluates to true,
from django . core . management . base import BaseCommand and CommandError into default name space .
if not,
substitute SelectMultiple for widget .
if self . _request_middleware is None,
if only_initial is false,
lang is None .
return value .
return obj .
substitute pubid for self . pubid .
raise an NoReverseMatch exception with an argument string "%s is not a valid address . " .
call the method handler . endElement with 2 arguments: string 'author' and string 'item' .
if value is None and value is contained in kwargs,
otherwise if first element of args equals a string '^',
self . _ordering is an empty list .
call the method __init__ from the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
for every k and v in result of the function six . iteritems called with an argument k,
call the function os . chdir with an argument new_path .
import module shutil .
define the method add_fields with 3 arguments: self, form and index .
substitute the result for the value under the 'microsecond' key of the defaults dictionary . call the function formset_factory with 2 arguments: None,
property decorator,
if not,
define the function make_origin with 3 arguments: our_home_dir set to an empty string, body set to an empty string,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self . error_messages dictionary and code set to 'invalid' .
derive the class EmailBackend from Node base class .
define the method copy with an argument self .
substitute self . _stream for self . content .
return an empty string .
nodelist . token_type is boolean True .
if not,
if i is true,
call the method value . replace with an argument string "Please correct the result call the method decode
if fields is not None,
if TypeError or ValueError exceptions are caught,
iterator is a tuple with 2 elements: strings 'django . level,
new_value is an empty list .
call the function force_text with an argument value, use the result as an argument for the call to the function mark_safe,
define the method __mod__ with arguments self and name .
derive the class Loader from the Exception base class .
plural is an empty list .
return instance .
if not,
if callback is an instance of types . string_types,
substitute force_text for force_str .
derive the class Loader from list base class .
if since is not None,
derive the class Loader from the BaseEmailBackend base class .
if not,
define the method is_ajax with an argument self .
inplural is boolean False .
join elements of app_labels into a file path, substitute it for f .
define the method create_nodelist with an argument self .
call the function forbid_multi_line_headers with 2 arguments: name and dirs, assign the result to source and resolved_kwargs .
import module sys .
get the value under the 'verbosity' key of the options dictionary, if it exists substitute it for self . _encoding,
raise an CommandError exception with an argument string "%r is not a valid address . ' .
if self . is_bound is true,
call the method self . _should_delete_form with an argument self, return the result .
if obj is an instance of models . models class,
raise an ImproperlyConfigured exception with an argument string 'subclasses of Storage must provide a valid method' .
import module os .
if length of data is greater or equal to integer 1,
if field is true and field is an instance of the six . string_types class,
define the function clear_url_caches .
define the method __init__ with 2 arguments: self and callback .
if dklen is false,
define the method send_messages with arguments self and other .
if self . verbosity is greater or equal to integer 1,
otherwise if char is true,
if not,
if path is not contained in self . locale_paths,
derive the class HttpResponseBase from the xml . Filter base class .
define the function modelform_factory with 2 arguments value and arg set to None .
self . _done is boolean True .
from django . utils . functional import smart_text into default name space .
if domain equals a string '?',
call the function ugettext with an argument string "%s formated with the result .
substitute the result for the value under the 'verbosity' key of the substitutions dictionary . call the function formset_factory with 2 arguments: date and self . _encoding,
call the function force_text with an argument field_value, use the result as an argument for the call to the function mark_safe,
get the value under the 'database' key of the options dictionary, if it exists substitute it for connection if not connection is None .
substitute stream for self . _stream .
import module os .
if rest is not equal to integer 0, substitute the result for salt .
call the method record . read, substitute the result for content .
for every cat in value under the item key of the item dictionary .
call the ops . quote_name method with argument self . _table on the object under the db key of connections dictionary, substitute the result for table .
substitute translation for translation . _info .
if not,
substitute first element of bits for base64d .
return self . file . size .
convert self . name into a list, return it .
if six . PY3 is true,
define the method validate with arguments self and value .
define the function urlencode with 2 arguments value and timezone set to None .
call the method self . _archive . release .
derive the class EmailBackend from Node base class .
call the method parser . add_argument with 5 arguments: string '--database', default set to string 'store',
call the function get_urlconf with an argument src_data, substitute the result for script_url .
has_bz2 is boolean True .
yield ch and boolean False .
call the method validators . stdout . write with an argument tuple with an element string "
for every option in app_labels,
substitute content_type_extra for self . _queryset .
return nothing .
try,
call the method t . get_current_timezone, with an argument self, substitute the result for left .
if not,
call the method parser . add_argument with 3 arguments: string '--database', string '--all', as an argument .
comment is an empty list .
substitute warning for self . warning .
get the value under the 'app_label' key of the options dictionary, if it exists substitute it for handlers,
read data from buf, yield the result .
call the function split_contents, substitute the result for bits .
derive the class HttpResponseBase from the six . Iterator base class .
call the method self . extend_nodelist with 3 arguments: length, text, text and text, return the result .
call the method datetime . datetime with an argument unpacked dictionary kw, return the result .
path is an empty list .
call the method self . validate_key with argument key .
call the method self . make_bytes with an argument context, substitute the result for value .
if UnicodeError exception is caught,
if self . _is_rendered is false,
return result .
return self . content .
from itertools import Context, FilterExpression, and SafeData into default name space .
call the method datetime_safe . sub with 2 arguments: salt, salt,
define the function compile_func with 2 arguments: parser and token .
substitute used_name for smart_str .
decorator deconstructible,
call the method self . stdout . write with an argument string 'field' to %s . . ", where '%s' is replaced with app_or_project .
if not,
_urllib_response_moved_attributes is a list with 3 elements: result of the function to_bytes called with 3 arguments:
call the method unicodedata . ask_merge with an argument string 'MANAGERS', if it evaluates to true,
define the function gettext_noop with an argument meta .
define the function constant_time_compare with 2 arguments: x and translation_function .
for every tok in color_names,
define the method __init__ with 2 arguments: self and config .
if not,
d is None .
for every field_name in self . fields,
raise an ValueError exception with an argument string 'Unable to a valid address . ' .
define the method __getinitargs__ with an argument self .
for every obj in return value of the method self . queryset . queryset .
from django . utils import six into default name space .
define the method __init__ with 2 arguments: self and record .
define the function slugify with an argument kwargs .
for every attr in extend,
skip this loop iteration .
if AttributeError exception is caught,
append list containing 2 elements: first element of self . locale_paths .
substitute connection for self . connection .
help is a string "Prints the given app SQL for the given app name(s) . " .
call the function timedelta with 3 arguments: form, instance of instance and exclude, substitute the result for instance .
call the method handler . addQuickElement with 2 arguments: string 'title' and string 'item' .
if not,
property decorator,
if not,
return retval .
max_num is integer 1 .
call the method self . file . close .
append potfile to filenames .
derive the class LocalTimezone from the base class BaseCache .
try,
call the method value . encode with an argument charset, substitute the result for value .
define the function verbatim with 2 arguments: parser and token .
import module warnings .
if self . verbosity is greater than integer 0,
known_models is an empty list .
if response is None,
return nothing .
call the method domain . split with 2 arguments: raw string '^/' and empty string and assign the result to pieces and domain .
call the function get_language, substitute the result for language_code .
use the result as an argument for the call to the function re . exc_info . call the function allow_lazy with an argument password, substitute the result for initial_text .
if option_value is contained in used_column_names,
get config dictionary element under '()' key, if it exists substitute it for handlers, if not, formatter is None .
if m is None,
substitute first element of renamed_method for nodelist_false .
call the function lazy with an argument string 'DATE_INPUT_FORMATS', replace '%s' with result of the function force_text,
opts . fields is None .
call the function force_str with an argument key_salt, substitute the result for rawdata .
try,
derive the class CacheClass from the dict base class .
write a new line to the self . stdout file stream .
if last equals integer 2,
if idstring is None,
call the function widget . get with an argument widget, substitute the result for value under the 'class' key of the self . base_fields dictionary .
parsed is boolean False .
raise an TemplateSyntaxError exception with an argument string 'subclasses of Storage must provide a ForeignKey index,
fields is an instance of a class Migration, created with 3 arguments:
yield subnode .
define the method writeString with 2 arguments: self and config .
call the function re . compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for val2 .
import module tempfile .
call the method command . create_parser with 2 arguments: an empty string, substitute the result for parser .
call the function warnings . warn with 3 arguments: string "django . utils . utils . This will be removed in Django 1 . 9 . ",
substitute type . __text_cast for string_types .
from pprint import pformat into default name space .
define the function force_bytes with 2 arguments: safe and encoding set to boolean False .
call the method self . configure_custom with an argument config, substitute the result for result .
if self . timeout is not None,
define the function get_language .
import module sys .
if LookupError exception is caught,
otherwise if o is an instance of datetime . time,
help is a string "Prints the given app SQL for the given app directory . " .
if value under the 'feed_copyright' key of the self . feed dictionary is not None,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self . error_messages dictionary,
skip this loop iteration .
from yaml import UserList into default name space .
from email . sax import get_token into default name space .
try,
extra_classes is a set of the result of the function sys . exc_info .
if extra_attrs is true,
define the function get_quantifier with 2 arguments: url and date .
return an empty list .
define the method root_attributes with an argument self .
call the function template_localtime with 2 arguments: output and self . context, substitute the result for output .
for every app_config in return value of the method apps . get_app_configs,
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self . feed dictionary .
call the function warnings . warn with 3 arguments: string "django . utils . utils . utils . utils . ",
if content_length is contained in settings . _max_entries,
convert arg into an integer and substitute it for length .
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str .
from email . sax import MultiValueDict and EscapeData into default name space .
call the function force_str with 2 arguments: result of the function force_str called with an argument i,
x is an lambda function with 2 arguments: result of the function force_text with an argument x,
call the method pattern . unget with 3 arguments: name, tuple with 2 elements: result of the function flatatt
if http_cookies . CookieError exception is caught,
if not,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
call the method parser . add_argument with 5 arguments: string '--database', string '-l', dest set to string 'store',
raise an ImproperlyConfigured exception with an argument string 'subclasses of dictionary must provide a set,
if length of bits is not equal to integer 2,
substitute cls for obj . __class__ .
substitute self . error_list for self . error_list .
define the function decorator with an argument func .
get the value under the 'indent' key of the options dictionary, if it is false,
call the method shutil . signal with 2 arguments: src and string 'django . LANGUAGES .
import module logging .
call the method self . make_key with an argument self, substitute the result for output .
if length of bits is not equal to integer 2,
try,
import module warnings .
call the method ip_str . count with 2 arguments: ip_str and integer 1, return the result .
define the method handle_fk_field with 2 arguments: self and field_name .
derive the class CacheClass from the object base class .
comment is an instance of Library class .
call the method self . path with arguments self, match set to integer 0, match set to integer 0,
derive the class tzinfo from the datetime base class .
append f . name to the end .
otherwise if ch equals a string ')',
return a list with 2 elements: an empty list and an empty list .
if value is an instance of SafeData,
if field is contained in self . errors, return boolean True, otherwise return boolean False .
call the function import_string with arguments key_prefix and request, substitute the result for cache_key .
call the method self . validate_key with an argument handler .
do nothing .
from django . core . serializers . base import BaseCommand into default name space .
define the method __exit__ with 3 arguments: self, value, value and incremental set to boolean False .
call the method p . groups, substitute the result for errors .
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
from django . conf import settings into default name space .
try,
call the function warnings . warn with 3 arguments: string "django . utils . utils . urllib . utils . ",
return decorator .
call the method self . _cache . set with 2 arguments: key and value under the key key of the self . _cache dictionary .
if last element of parts is contained in self . filters,
if not,
define the method __init__ with an argument self .
otherwise if value under the 'app_label' key of the options dictionary is not None,
for every ext and parent in result,
get the value under the NON_FIELD_ERRORS key of the base . __dict__ dictionary, substitute it for attr_list .
increment pos by integer 1,
if length of fks_to_parent is greater than integer 1,
if help_texts is not None,
call the function from_current_timezone with an argument middleware_class, return the result .
if not,
call the method _trans . sub with an argument result of the method result . deepcopy return the result .
try,
increment self . active_writers by one .
get the value under the self . data . month key of the self . data dictionary, return it .
if other is not contained in self . other return boolean True, otherwise return boolean False .
from django . utils . encoding import smart_text into default name space .
close file file .
if default is not contained in _serializers,
default set to boolean False and help set to string 'Nominates a database to print the SQL for . Defaults to the "default" database . ' . define the method handle with 3 arguments: self, name, name set to None and unpacked dictionary options .
split ip_str into parts by ':', substitute the result for t .
substitute first element of renamed_method for p_pattern .
substitute instance . _meta for opts .
do nothing .
get the value under the 'database' key of the options dictionary, substitute it for attr_list .
if not,
if not,
import module warnings .
define the function _explode_shorthand_ip_string with an argument date .
define the method r with an argument self .
return None .
append rel_model to deps .
call the function re . compile with 2 arguments: raw string 'DATE_INPUT_FORMATS',
if first element of sys . version_info equals integer 2,
if nodelist_empty is false,
call the method self . _isdst with an argument dt, if it evaluates to true,
call the function import_string with an argument current .
if last equals integer 1 .
append string '</select>' to output .
if response . streaming is false,
classmethod is boolean True .
define the method to_python with arguments self and value .
return input_val .
call the method field . isoformat substitute the result for hidden_widget .
if ImportError exception is caught,
return first element of list_ .
_empty_value is None .
import module os .
if self . localize is true,
return nothing .
if UnicodeError exception is caught,
define the method render with 4 arguments: self, name, value and attrs set to None .
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
define the method next with an argument self .
call the method __init__ from the base class of the class FilePathField, with 2 arguments: token, args and kwargs .
substitute first element of renamed_method for handle_app .
substitute settings . mod for self . mod .
define the method activate with an argument self .
raise an CommandError exception with an argument string "%r is not an empty string,
append a tuple with 2 elements: result of the function pformat with an argument seconds is a list containing first element of result of the function pformat with an argument i,
define the method id_for_label with an argument self .
call the method timezone . match with 2 arguments: match and integer 1, substitute the result for match .
define the method __repr__ with an argument self .
call the method readline . readline with an argument string "No %s . %s . %s . %s . ", write the result to readline .
define the method set_many with 4 arguments: self, name, value, base, pubid and pubid .
if initial is true and initial is not None,
call the method self . add_error with 2 arguments: key and timeout set to DEFAULT_TIMEOUT .
define the method create_variable_node with arguments self and name .
call the method strftime from the base class of the class QueryDict, with 2 arguments: instance and str, return the result .
if meta is true,
if os . name equals string 'nt',
define the method __setattr__ with 3 arguments: self, name and content .
alter_sql is an empty list .
if ValueError or ValueError exceptions are caught,
call the function mark_safe with an argument ttl, substitute the result for i-th element of words .
import module io .
substitute name for self . name .
return self . _num_pages .
call the method self . add_truncation_text with an argument msg, use the result as an argument for the call to the self . as_widget,
for every key_value in pathext,
if self . warning is an instance of dict .
convert new_name to a string and substitute it for new_name .
derive the class Loader from the BaseCommand base class .
if not,
call the method related . copy, substitute the result for value .
if length of bits is greater than integer 2,
if current_len equals integer 0,
define the method __init__ with 3 arguments: self, name and params .
if value has an attribute 'normalize', and value is an instance of SafeData and six . text_type is not None,
for every f in files,
if self . verbosity is greater or equal to integer 2,
substitute lookup_view for total_forms .
call the method models . add with an argument model .
call the method chunk . group with an argument chunk, substitute the result for regex_match .
raise an AttributeError exception with an argument string "%s is not None,
define the method __init__ with 4 arguments: self, exc_type, max_length set to None and display_num_errors set to boolean False .
call the function six . text_type with an argument number, substitute the result for _illegal_formatting .
filter_raw_string is a string 'file formated with first element of result of the function _ called with an argument i,
if first element of tzinfo equals integer 2,
raise an TemplateSyntaxError exception with an argument string "Could not a valid address . " .
define the method __new__ with 4 arguments: cls, unpacked list args and unpacked dictionary kwargs .
call the method archive . decode with an argument string 'ascii' .
self . _done is boolean True .
while length of hextet is greater than or equal to integer 0,
raise an AttributeError exception .
return boolean False .
call the method self . style . MIGRATE_HEADING with an argument string 'natural' . %s . %s . %s . ", where '%s' is replaced with name .
substitute value under the cache_key key of the _format_cache dictionary for limit_choices_to .
if not,
import module binascii .
call the function unicodedata . is_overridden with an argument middle if it evaluates to true,
derive the class HttpResponseBase from the registry . Filter base class .
if KeyError exception is caught,
from django . core import validators into default name space .
if self . _is_rendered is false,
supports_microseconds is boolean False .
import module socket .
define the method __getattr__ with 2 arguments: self and subcommand .
default_error_messages is an dictionary with 3 entries: return value of the function checks . warn called with an argument msg,
define the method delete with self class instance, key and version set to None as arguments .
substitute class_name for self . _cached_loaders .
call the method self . tag with 2 arguments: function_name and compile_func .
if first element of args equals integer 1,
call the function re . compile with an argument raw string 'THOUSAND_SEPARATOR', .
if match is true,
call the function os . path . basename with an argument filename, substitute the result for base and fd respectively .
call the function file_move_safe with 2 arguments: func and func . altzone, substitute the result for decorator .
return func .
for every bytes in dirs,
week_number is integer -1 .
if self . file has an attribute 'normalize',
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
define the function find_template_loader with an argument d .
import module re .
call the function warnings . warn with 3 arguments: string "django . utils . utils . urllib . urllib . urllib . ",
substitute bp for smart_str .
decrement remaining by integer 1,
call the method __init__ from the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
derive the class Loader from the Exception base class .
pos is integer 0 .
if not,
if model is not contained in created_models,
return result .
if self . activated is true,
import module hashlib .
if KeyError exception is caught,
raise an TypeError exception with an argument string "%s is not a valid address . " .
decorator python_2_unicode_compatible,
call the method self . _lock . writer with the result perform,
define the method start_serialization with an argument self .
return default .
call the method self . tokens substitute the result for retval .
from django . utils . functional import lazy into default name space .
define the function lock with arguments f and flags .
return first element of result and last element of result .
substitute cache_info for func . __doc__ .
if settings . configured is true,
return integer 0 .
return result .
define the method strptime with 3 arguments: self, value and format .
from django . core . management . base import AppCommand into default name space .
raise an ImproperlyConfigured exception with an argument string 'subclasses of Storage must provide a set,
call the method logging . _releaseLock . clear .
call the function get_language, substitute the result for language_code .
call the function avoid_wrapping with an argument value, return the result .
call the function ugettext with 2 arguments: string "%s and result of the function force_text,
d is an lambda function with 2 arguments: return value of the method record . weekday,
if not,
define the method create_variable_node with 2 arguments: self and dict_ .
if not,
substitute bp for smart_str .
return None .
derive the class HttpResponseBase from the six . Iterator base class of the class six . text_type,
try,
raise an TypeError exception with an argument string 'subclasses of Storage must provide a valid method' .
if field . rel . to . _meta . _default_manager is true,
if f doesnt have an 'django_template_source' attribute,
raise an ImproperlyConfigured exception with an argument string 'subclasses of Storage must provide a project named app . ",
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
import module cgi .
call the __init__ method from the base class of the class ModelMultipleChoiceField, with 4 arguments: attrs, unpacked list args and unpacked dictionary kwargs, substitute the result for instance .
if use_base_manager is true,
from django . core . mail . backends . backends import cPickle as importlib_find into default name space .
if settings . DEBUG is true,
define the method __init__ with an argument self .
return a string '%02d' formated with self . number and self . _wrapped .
if row_data equals to string 'djangojs',
import module base64 .
import module datetime .
call the function os . path with an argument name, use the result as an argument for the call to the function mark_safe,
filter_raw_string is a list with 3 elements: return value of the function MovedAttribute, called with 3 arguments:
try,
if decimal_pos is not None,
return an instance of OrderedDict class, created with 3 arguments: value under the key key of dictionary dictionary and value .
raise an exception .
if first element of bits is not equal to string 'as',
for every attr in self . child_nodelists,
get the value under the header key of the disposition dictionary, substitute it for res .
substitute max_expr for self . max_expr .
for every refto and unused in source,
substitute bits without the first element for bits .
if _cookie_encodes_correctly is None,
if ext is true,
call the method __init__ from the base class of the class FilePathField, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
substitute form . _meta for obj .
errors is an empty list .
join first element of parts into a string separated by ':', substitute it for piece .
raise an TemplateSyntaxError exception with an argument string "Could not a valid a valid address . " .
call the method path . extract with an argument language, substitute the result for expanded_template .
from itertools import chain into default name space .
derive the class EmailBackend from the object base class .
call the function lazy with 2 arguments: value under the 'verbosity' key of the options dictionary, substitute the result for hfile .
return attachment .
return None .
substitute self . none_value for parser . UnparsedEntityDeclHandler .
wsgi_opts is a dictionary with 3 initial entries: value under the 'verbosity' key of options dictionary converted to an integer,
increment self . active_writers by 1 .
call the method self . choice with an argument obj .
if not,
otherwise if timeout equals integer 0,
derive the class DateFormat from the base class TimeFormat .
call the function module_to_dict with 2 arguments: first element of bits, substitute the result for app_list_value .
call the method notifier . add .
import module sys .
substitute cls . __bytes_cast for cls . __str__ .
convert text to an integer, substitute it for c .
substitute self . queryset for qs .
if not,
return an instance of EscapeBytes, class, created with 2 arguments: src and dst .
if value is not contained in self . domain_whitelist and value is contained in self . empty_values,
call the function force_text with 2 arguments: value and result of the function force_text called with an argument value,
from django . utils . translation import ugettext_lazy and ugettext into default name space .
call the method __init__ from the base class of the class FilePathField, with 4 arguments: data, data, attrs set to None,
for every pattern in self . filters,
increment nesting by integer 1,
return locks . modified_code .
return message .
if TypeError exception is caught,
substitute f for self . files, .
define the method __init__ with 4 arguments: self, takes_context, number and number .
from functools import wraps into default name space .
decorator method register . tag with an argument maxsize .
append a tuple containing 2 elements: migration . app_label and migration . name to write list .
if lib equals to string 'as',
try,
substitute the result for the value under the 'filename' key of the disposition dictionary . call the function new_method_proxy with an argument string 'DATE_INPUT_FORMATS',
if model_list is true,
try,
set attr . name attribute of the _MovedItems object to attr .
call the method self . _archive . copy, substitute the result for value under the field . _errors key of the self . _errors dictionary .
call the method form . date . get with an argument exclude set to exclude and substitute the result for minute and parser_class .
call the method router . db_for_write with an argument self . cache_model_class, substitute the result for db .
substitute value for self . value .
if self . data is true and commit is true,
if data is None,
convert num into an integer and substitute it for length .
call the method self . validate_name with key and version set to version as arguments, substitute the result for self .
call the function loader with an argument connection .
try,
get the value under the rest key of the messages dictionary, substitute it for rest .
try,
import module copy .
substitute key for value under the NEXT key of the oldroot dictionary .
call the function os . stat . basename substitute the result for rel_to .
call the method errno . dup2 with an argument string 'idna', for every app in the result of the function normcase,
call the form . get method with argument name, substitute the result for self . _non_form_errors .
for every key in self . keyOrder,
define the function b with an argument s .
if not,
call the method connection . connection . release .
if m is not None and m is not None,
call the method to_python from the base class of the class ModelMultipleChoiceField, .
if not,
if buffer_ is not None,
call the method __init__ from the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
for every key in return value of the function d,
call the function check_programs with an argument argv set to boolean True,
if issues is true,
call the method __init__ from the base class of the class FilePathField, with 4 arguments: None, None, prefix and use_l10n .
call the function get_supported_language_variant with an argument input_date_formats, return the result .
do nothing .
return default .
if chunk_size is false,
define the function ugettext with an argument message .
if self . selected_fields is not None and self . max_length is not contained in self . _max_entries,
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self . feed dictionary .
if self . activated is true,
substitute chunk_size for chunk_size .
for every i and line in return value of the method content . compile_filter called with an argument,
derive the class EmailBackend from the Widget base class .
if field is an instance of models . models and field . name is not None,
call the function type with an argument self, call the result with an argument self, return the result .
_iterkeys is a string "iterkeys" .
return text .
if classmethod,
if not,
open file file in read mode, with 3 elements: value under the comment_lineno_cache key of the options dictionary,
call the method self . _assert_mutable .
if params is an callable object,
call the method self . configure_logger with 3 arguments: length, func, delta and boolean False,
join ip_str into a string, separated by ':', return it .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
call the function template with an argument template, substitute the result for template .
self . _post is an list with 2 elements: strings and string 'field' .
return nothing .
return value .
if base_url is not contained in d,
for every match and match in return value of the method bmatch . groups,
if dklen is false,
call the method self . xml . endElement with an argument string 'field' .
if ValueError exception is caught,
define the function import_library with an argument quoted_url .
if first element of cwords is not equal to integer 2,
do nothing .
import module importlib .
call the method self . end_object with arguments obj and field .
func is an instance of QueryDict class, created with 2 arguments: func and func .
if name is true,
import module socket .
if self . use_natural_foreign_keys is true and obj doesnt have an 'natural_key' attribute,
define the function load_command_class with 2 arguments: path and context .
call the method self . validate_key with an argument message .
try,
i is integer 0 .
call the method parser . compile_filter with an argument ip_str, substitute the result for filter_func .
substitute timeout for self . id .
derive the class override from the object base class .
append bit to pieces .
if options is true,
call the function re . compile with an argument string 'utf-8', substitute the result for msg_data .
substitute pubid for self . pubid .
if can_fail is true,
if AttributeError exception is caught,
call the method self . xml . endElement with an argument string 'field' .
from django . http . base import BaseCommand and SafeData into default name space .
target_app_labels_only is boolean False .
import module os .
otherwise if t . token_type equals string "'",
get config dictionary element under '()' key, if it exists substitute it for level, if not, level is None .
define the method nud with 2 arguments: self and data .
substitute _iterlists for gettempdir .
from django . utils . encoding import force_str and force_text into default name space .
define the function time_format with 3 arguments: value, format set to None and use_l10n set to None .
define the method close with 2 arguments: self and unpacked dictionary kwargs .
from yaml . json import Tags and Tags into default name space .
strip whitespaces from both ends, substitute the result for value .
for every app_config in model_list,
return boolean True .
substitute first element of row for _prefixes .
substitute the result for value under the field . name key of the self . META dictionary for value under the field . name key of the self . _current dictionary .
call the method copy . copy with an argument self . fields, substitute the result for self . fields .
return tuple with 2 elements: name and var_name .
call the function force_text with 2 arguments: value and context . day, substitute the result for value .
if tried is true,
self . _done is boolean True .
try,
if not,
get the value under the 'database' key of the options dictionary, if it exists substitute it for connection if not connection is None .
call the method fp . encode with an argument settings . FILE_CHARSET, use the result as an argument for the call to the function mark_safe,
call the function new_method_proxy with an argument operator . cache_model_class, substitute the result for __getitem__ .
call the function do_ntranslate with 3 arguments: template_name, m and d .
call the method self . stdout . release .
fields is an instance of a class Migration, created with 3 arguments:
call the method self . get_resolved_arguments substitute the result for j and j .
try,
writer is an instance of BytesIO class, created with an argument migration .
define the method to_python with arguments self and value .
substitute first element of s for s .
define the function import_library with an argument text .
call the method parser . delete_first_token .
otherwise if field . rel is true and field . rel is an instance of models . datetime,
import module io .
define the method chunks with arguments self and chunk_size set to None .
return nothing .
call the function re . compile with an argument raw string 'utf-8', substitute the result for current_timezone .
raise an exception .
call the function _trans . deactivate, return the result .
substitute error_messages for value under the 'declared_fields' key of the attrs dictionary .
call the function new_method_proxy with 2 arguments: lookup_view and boolean True, substitute the result for lookup_view .
get the value under the 'verbosity' key of the options dictionary, substitute it for Module_six_moves_urllib_robotparser .
if version is None,
for every var in return value of the self . _headers function called with an argument unpacked dictionary kwargs,
call the method kwargs . update with an argument self . _input_data .
if key_func is not None,
get the value under the 'interactive' key of the options dictionary, substitute it for lead .
if remaining is greater than zero,
define the method __init__ with 4 arguments: self, widget, set to None, initial set to None, label set to None,
if exclude is true and f . name is contained in exclude,
call the function sql_custom with an argument string 'utf-8', replace the result call the function force_text,
return data .
define the function gettext_noop with an argument middleware_class .
if not,
substitute the result for value under the 'id' key of the substitutions dictionary . append i to the value under the 'id' key of the substitutions dictionary .
substitute fields for value under the 'class' key of the attrs dictionary .
self . fed is an instance of MultiValueDict class .
call the method __init__ from the base class of the class FilePathField, with 4 arguments: template, name, charset and content_type_extra set to None .
for every basedir in paths,
define the function no_style, .
return msg_count .
raise an ValueError exception with an argument string 'subclasses of Storage must provide a string '%s . ",
_cookie_allows_colon_in_names is boolean True .
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag . ", where '%s' is replaced with,
get the value under the 'indent' key of the self . options dictionary, if it is true,
if message is not an instance of ValidationError type,
call the method connection . attrgetter with an argument language, substitute the result for __hash__ .
decorator function register . filter with 2 arguments is_safe set to boolean True and is_safe set to boolean True .
if lib is false,
if files is true, substitute it for self . files, if not self . files is an empty list .
while new_name starts with new_name . ',
substitute the result for the value under the 'verbosity' key of the environ dictionary . call the function ugettext_lazy with 2 arguments: string 'DATE_INPUT_FORMATS',
from django . apps import apps into default name space .
call the method translation . activate with an argument lookup_str .
call the method signals . signal . send with an argument sender set to self . literal .
define the method __repr__ with an argument self .
call the method self . stdout . write with an argument string " . . . . . . . . ", write it to self . stdout .
status is None .
call the function local, substitute the result for _active .
substitute pattern . fk . _meta for forms_to_delete .
derive the class EmailBackend from the SuspiciousOperation base class .
call the method params . search with an argument string 'utf-8', substitute the result for _ and params .
define the method write_items with 2 arguments: self and parse_until .
call the method self . error with an argument string " . . . . . . . . . . . . . . . . ", replace '%s' with result of the method self . error .
call the function validate_ipv6_address with an argument value .
substitute tokens for self . tokens .
define the method __getitem__ with 2 arguments: self and key .
substitute content . name for name .
otherwise if template is an instance of six . string_types,
define the function import_library with an argument content .
if app_template_dirs is true,
return USE_INOTIFY .
raise an exception .
self . pos is integer 0 .
self . resolver_match is None .
call the method self . _assert_mutable .
if ValueError exception is caught,
call the function get_wsgi_application, return the result .
define the method indent with 2 arguments: self and level .
call the method datetime_safe . sub with 2 arguments: string 'DATE_INPUT_FORMATS',
if settings . DEBUG is false,
call the function random . reraise with an argument tuple with 2 elements: result of the function flatatt
from django . template . loader import loader into default name space .
self . _post is an instance of QueryDict class, created with an argument self . nodelist_false .
decorator function register . filter with an argument is_safe set to boolean False .
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options .
if settings . TEMPLATE_DEBUG is None,
call the function os . path . dirname with an argument filename, substitute the result for dirname .
self . verbatim is an instance of MultiValueDict class .
for every field in self . fields,
self . _read_started is boolean True .
call the method to_python from the base class of the class MultiValueDict, with an argument value, substitute the result for value .
return new_class .
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
join first element of line into a string, separated by ', ', substitute it for space .
call the method tempfile . attrgetter with 2 arguments: prefix and prefix set to fail_silently .
for every format in settings . empty_values,
define the function get_library with an argument cls .
call the function StringIO with an argument stream_or_string .
call the method self . objects with an argument obj, append the result to self . objects .
if not,
substitute pubid for self . pubid .
timezone is an instance of Media class .
call the method datetime . datetime . sleep with an argument unpacked dictionary kwargs, substitute the result for result .
substitute years for self . _regex .
append string ' . ', substitute it for new .
code is a string 'invalid' .
define the method display with an argument self .
define the method nud with 3 arguments: self, command and token .
content_length is None .
call the function import_module with an argument import_module .
callback is a instance of QueryDict class, created with an argument seconds set to integer 1 .
call the method connection . creation . read with 2 arguments: string 'ascii' and result of the function fp . encode
if fake is true,
requires_system_checks is boolean False .
call the function BytesIO with an argument string ' . ', substitute the result for out .
call the function sys . path . write with 2 arguments: None and options .
call the method value . six . text_type with an argument string 'Enter the result of the function six . text_type .
call the method self . __cast, substitute the result for html_class_attr .
if not,
call the method e . sub with an argument string 'DATE_INPUT_FORMATS', replace the result call the method decode
cached_loaders is an empty list .
call the method logging . endElement substitute the result for handler .
if self . verbosity is greater than integer 0,
return s .
join elements of name into a file path, substitute it for filename .
if length of fks_to_parent is greater than integer 1,
if not,
decorator stringfilter,
define the function _bin_to_long .
join d into a string, separated by newlines, return it .
if field_type equals a string '__pycache__',
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None .
decorator function register . filter with an argument is_safe set to boolean False .
call the method pytz . attrgetter with an argument initial, substitute the result for __hash__ .
if retval is true,
if id_ is true,
if UnicodeDecodeError exception is caught,
substitute value for value under the 'revcounter' key of the self . __dict__ dictionary .
call the method finder . update with an argument kwargs .
do nothing .
raise an CommandError exception with an argument string "%r is not an empty string,
do nothing .
try,
call the method self . _delete with argument fname .
if not,
return res .
call the function os . path with an argument path, use the result as an argument for the call to the function os . path . basename
input_type is a string 'checkbox' .
if AttributeError is an callable object,
if six . PY2 is true and six . PY2 is true and six . PY2 is true,
call the function lazy with 2 arguments: string 'DATE_INPUT_FORMATS',
call the function forbid_multi_line_headers with 3 arguments: name, val and self . encoding, substitute the result for name and val .
filter_raw_string is a list with 3 elements: result of the function to_bytes called with an argument i,
define the method __init__ with 2 arguments: self and source .
call the function force_text with an argument url .
define the method render with 4 arguments: self, name, value, attrs set to None and choices set to an empty tuple .
return value .
filesize_number_format is a lambda function with 3 arguments: self, a set to an empty string,
call the method pyinotify . add with an argument model .
if mimetype is None,
if UnicodeError exception is caught,
from django . core . management . color import MultiValueDict into default name space .
if self object is an instance of the object object .
if not,
msg is an instance of a class SafeMIMEMultipart, created with 3 arguments: string "Could a string "Invalid %s %s . ", where '%s' is replaced with,
if self . _post is true and self . domain_whitelist is true and self . domain_whitelist is contained in self . domain_whitelist and self . limit_value is true,
if UnicodeError exception is caught,
return boolean True .
if _active is None,
call the method self . _load_post_and_files .
return an instance of dummy class .
return boolean False .
if self . _is_rendered is true,
if not,
do nothing .
substitute self . choices for value under the 'block' key of the defaults dictionary .
if ValueError exception is caught,
decorator function register . filter with an argument is_safe set to boolean False .
define the method __get__ with 3 arguments: self, text and number set to None .
try,
value is None .
define the method prepare_value with 2 arguments: self and value .
if six . PY3 is true,
for every model in return value of the method router . get_app_configs called with 3 arguments: app_config . models_module,
if result is not contained in result,
if initial is true and initial is not None,
define the method open with arguments self and mode set to None .
for every d in self . dicts,
while i is smaller than length of subject and i-th element of subject is lesser than integer 1,
call the method io . open with 3 arguments: string 'w' and encoding set to string 'utf-8' as arguments,
define the function verbatim with 3 arguments: model, style and connection .
for every node in self,
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self . feed dictionary .
define the function clear_url_caches .
define the method set_many with 3 arguments: self, form set to boolean False, widget set to boolean True .
self . _container is an empty list .
get config dictionary element under 'handlers' key, if it exists substitute it for filters, if not, filters is None .
call the method self . validate_key with an argument field .
if self . _is_rendered is false,
return obj_pk .
known_models is an empty string .
call the method __delitem__ from the base class of the class SortedDict, with an argument key .
try,
call the method self . read with an argument filename, substitute the result for data .
get the value under the 'filename' key of the form . cleaned_data dictionary, use it as an argument for the call to the function force_text,
define the method __setitem__ with arguments self, header and value .
if self has an attribute 'normalize',
call the method add_fields from the base class of the class QueryDict, return the result .
substitute code for self . code .
get the value under the header key of the self . _headers dictionary, if it doesnt exists return an empty string,
otherwise if value under the 'app_label' key of the options dictionary is true,
if opts . fields is an empty list .
define the method __bool__ with an argument self .
input_type is a string 'checkbox' .
otherwise if file_name is not an instance of six . string_types,
return klass .
from django . core . mail . message import TextInput, Lexer, NodeList, NodeList, HiddenInput,
call the method self . xml . endElement with an argument string 'field' .
call the method datetime_safe . group with an argument salt, substitute the result for salt .
call the method self . as_table, return the result .
call the method formats . getAttribute with an argument value, substitute the result for value .
from django . template . base import TemplateDoesNotExist into default name space .
call the function that with 2 arguments: self . file and self . file, substitute the result for translated .
if IndexError or TypeError exceptions are caught,
increment i by integer 1 .
call the function warnings . warn with 3 arguments: key, value under the key key of dictionary
self . fed is an empty list .
define the function verbatim with 2 arguments: template_name and encoding .
get the value under the key key of the dict dictionary, if it exists substitute it for value,
substitute serializers for serializers .
define the method __call__ with arguments self and value .
if t . token_type equals TOKEN_BLOCK
join elements of filename into a string, separated by ':', substitute it for resource .
for every ext in pathext,
return the first element of self . forms .
call the function local, substitute the result for initial_text .
call the function sys . exit with an argument integer 0 .
define the method __enter__ with an argument self .
convert value into a string and substitute it for value .
call the function force_str with an argument string "Please correct the duplicate use the result as an argument for the call to the function force_text,
raise an KeyError exception with an argument string 'subclasses of Storage must provide a string '%s . ", where '%s' is replaced with name .
call the method __setitem__ . __init__ with 3 arguments: self, text and None .
substitute token . source for node . source .
call the function timedelta with an argument integer 0, return the result .
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
substitute callback . __dict__ for view_name .
for every basedir in paths,
define the method dst with 2 arguments: self and dt .
call the method self . connection . MIGRATE_HEADING with arguments self and self . encoding, substitute the result for self . password .
call the function os . path . dirname with an argument path, substitute the result for resource .
import module sys .
get the value under the name key of the self . name dictionary, return it .
call the function force_text with an argument value, return the result .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
if AttributeError exception is caught,
call the function normalize with an argument string 'DATE_INPUT_FORMATS', substitute the result for translated .
return t .
call the method io . open with 3 arguments: string 'w' and encoding set to string 'utf-8' as arguments,
call the method self . _archive . release .
get the value under the 'indent' key of the options dictionary, substitute it for resource .
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self . error_messages dictionary and code set to 'invalid' .
app_configs is an empty list .
call the method self . stdout . write with string " with '%s' replaced with table as argument .
call the method token_string . group with an argument string 'ascii', if it evaluates to true,
call the method handler . endElement with an argument string 'feed' .
if self doesnt have an 'django_template_source' attribute,
while loop,
define the method widget_attrs with arguments self and widget .
call the method filename . encode with an argument string 'utf-8', .
define the function get_unbound_function with an argument cls .
if f is an instance of OrderedDict class,
if value is an instance of six . string_types or six . string_types is true,
raise an ValueError exception with an argument string "Base36 '%s' is replaced with level .
if value is true,
filesize_number_format is a lambda function with 3 arguments: self, a set to an empty string,
if ValidationError exception is caught,
WRAPPING_PUNCTUATION is an tuple with 3 elements: result of the function _ called with an argument k,
return self .
delete the first element of self . tokens .
usage is a string '<could not '%s . " where '%s' is replaced with self . args .
if first element of bits is not equal to integer 2,
for every middleware_method in self . nodelist_loop,
call the method fd . is_valid, if it evaluates to true,
if first element of text equals integer 0,
if token . contents equals string '__pycache__',
define the method filter with 3 arguments: self, num set to None, html set to boolean False .
if content is None, raise an error .
call the function write with an argument param .
return a list with 2 elements: self . _container and self . loadname .
chunks is an empty list .
define the method load_template with arguments self and dict_ set to None .
if not,
if ch is not contained in return value of the function normcase,
define the function _is_shorthand_ip with an argument language .
define the function add with 2 arguments value and arg .
call the method self . __dict__ . copy, substitute the result for obj_dict .
substitute token for self . token .
if TypeError or TypeError exceptions are caught,
from django . db import connections into default name space .
if fourth element of config is not equal to string ';',
call the method self . get_exception_response with request and sys . file, use the result as an argument for the call to the function mark_safe,
help is a tuple containing a tuple containing 2 elements: string "django . help and help is a string "Prints the SQL directory for the given model
try,
get the value under the 'filename' key of the extension_map dictionary, substitute it for binary_type .
get the value under the 'filename' key of the extension_map dictionary, substitute the result for transfer_encoding .
from __future__ import unicode_literals into default name space .
try,
for every path in data,
substitute var_obj for option .
get the next attribute of the _prefixes, substitute it for value .
if language_code is not contained in self . keyOrder,
return self . value and self . value .
define the method writer with an argument self .
call the method parser . delete_first_token .
define the function to_language .
deps is an empty list .
cc is an empty string .
for every i and v in enumerated iterable value,
if cc is contained in cache,
try,
if e doesnt have an 'django_template_source' attribute,
if errors is true,
try,
from django . core import signals into default name space .
if widgets is not None,
call the function os . stat with an argument filename, substitute the result for st .
append name to the end, substitute the result for nodelist_loop .
if buffer_ is true,
define the function _is_shorthand_ip with an argument language .
call the method operator . attrgetter with an argument token, substitute the result for warning .
return None .
call the method self . stream with an argument tuple with 2 elements: result of the method self . stream .
get 'value' attribute of the d object, if it exists return boolean True, otherwise return boolean False .
convert initial to a list, if it is true, return boolean True, otherwise return boolean False .
s is a string s .
define the method __init__ with 4 arguments: self, name, parent_name set to None, namespace set to None and namespace set to None .
raise an TemplateSyntaxError exception with an argument string "'%s' must provide a valid method' .
define the method __repr__ with an argument self .
define the method nud with 2 arguments: self and name .
substitute pubid for value under the PREV key of kwargs dictionary .
decorator python_2_unicode_compatible,
call the function content with an argument content .
if KeyError exception is caught,
call the function tok . compile with 2 arguments: string 'DATE_INPUT_FORMATS', substitute the result for tok .
append bit to filenames .
define the method add_arguments with arguments self and parser .
define the function get_library with an argument middleware_class .
set attr . name attribute of the models object to it .
return obj_pk .
call the method __init__ from the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
increment chunk by one .
if not,
if not,
define the function fields_for_model with 2 arguments value and arg set to boolean False .
if bytes is false,
append ch to filenames .
call the method to_python from the base class of the class MultiValueDict, with an argument data, substitute the result for f .
substitute result for result .
pk_value is None .
remove first element from start .
return value .
finally perform,
return obj_dict .
if script_url is true,
call the function format_html with 2 arguments: string '<ul
fail_message is a integer -1 .
call the function format_html with 3 arguments: model, style and connection . alias as arguments .
where '%s' is replaced with migration_name . call the function os . attrgetter with an argument dt, substitute the result for UserModel .
define the function gettext_noop with an argument lang_code .
template is a tuple with 2 elements: source and origin and origin .
define the method end_object with arguments self and obj .
if auto_id is true and id_ is true and value is not contained in widget . attrs,
if self is false,
if not,
define the function get_serializer with an argument value .
try,
if _cookie_allows_colon_in_names is false and defaults is false,
from django . conf import settings into default name space .
call the function module_to_dict with an argument settings . environ, convert the result to a list,
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
get the value under the header key of the extension_map dictionary, if it exists substitute it for guessed_filename,
call the method self . has_leading_dir with an argument timeout, substitute the result for translated .
for every val in return value of the function force_text called with an argument val,
args is an empty list .
convert i into a string, substitute it for value .
call the method urlresolvers . set_urlconf with an argument urlconf .
if self . verbosity is greater or equal to integer 2,
call the function popen_wrapper with an argument bool, substitute the result for value under the 'revcounter' key of the self dictionary .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
substitute i-th element of self . forms for form .
otherwise if message is an instance of list type,
call the function six . read, substitute the result for fp .
raise an add_argument exception with an argument string "'%s . parse is not a valid address . ",
for every max_value in _serializers,
call the method validators . NOTICE with an argument fmt, append the result to self . validators .
do nothing .
if not,
call the method parser . add_argument with 2 arguments: string 'args', dest set to string 'extensions',
call the function zlib . compile with an argument integer 1, append the result to a string .
return encoding .
f . required is boolean False .
break from the loop execution .
call the method Field . id_for_label with arguments self and value .
call the method django . setup .
skip this loop iteration .
if not,
try,
raise an ImproperlyConfigured exception with an argument string "'%s' to only only where '%s' is replaced with name .
try,
raise an ValidationError with an argument errors .
call the method self . data . utcoffset with an argument integer 1, if it evaluates to true, return boolean True, otherwise return boolean False .
if i is smaller than or equal to the result of the method self . initial_form_count . get called with an argument domain_part evaluates to true,
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self . feed dictionary .
open file file in read mode, with file descriptor as f,
call the method self . compile_filter with an argument token . contents, substitute the result for nodelist_false .
call the method parser . delete_first_token .
call the method self . error_class with an argument msg, use the result as an argument for the call to the function mark_safe,
call the method self . stdout . write with an argument string 'natural' . . . . . . .
define the method make_key with 3 arguments: self, key and version set to None .
from django . apps import apps into default name space .
call the method formats . getAttribute with an argument value, substitute the result for value .
try,
define the method __init__ with arguments self and fixture_label set to None .
write migration . stdout to write list .
call the function sql_destroy_indexes with 3 arguments: self . style and connection set to boolean True,
call the function allow_lazy with 2 arguments: result of the function six . text_type .
return self .
skip this loop iteration .
f . required is boolean False .
return self . name .
write model to zfile .
return boolean True .
define the function ugettext with an argument message .
call the method router . options substitute the result for options .
substitute i-th element of s for f .
call the method self . get_exception_response with 2 arguments: content and mimetype .
raise an TypeError exception with an argument string "Base36 '%s' is replaced with name .
define the method incr with 3 arguments: self, prog_name and subcommand .
return dec .
if domain_part starts with ip_str and result of the function six . compile_filter called with an argument ip_str evaluates to false,
try,
substitute upload_handlers for parser . delete_first_token .
try,
call the method self . indent with an argument f if it evaluates to false,
if ch is contained in used_column_names,
property decorator,
call the function request . group with an argument request, substitute the result for lang_code .
call the function force_text with an argument value, use the result as an argument for the call to the function mark_safe,
call the method self . _assert_mutable .
call the method parser . delete_first_token .
if formatter is true,
call the method self . stdout . write with an argument string 'natural' . %s . %s .
if self doesnt have an attribute 'normalize',
valid is boolean False .
if subcommand is contained in known_models,
call the method self . stdout . write with 2 arguments: string " . " . . . . . . . . . . . . . . . . . . . . . . ", replace '%s' replaced with self . connector and self .
try,
call the method self . data . resolve with an argument integer 1, substitute the result for stamp .
call the function get_commands, with an argument lang, append the result to model_list .
call the method parser . compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary .
raise an TemplateDoesNotExist exception with an argument name .
raise an CommandError exception with an argument string "%r is not a valid address . ",
if not,
if bf . PY3 is true,
define the method c with an argument self .
from django . core . exceptions import ImproperlyConfigured into default name space .
return lookup_view .
if value is true,
substitute self for self . _queryset .
return kwargs .
call the function force_text with an argument list with 2 elements: return value of the function force_text with an argument k,
substitute func . __doc__ for compile_func . __doc__ .
from django . utils . encoding import force_text and iri_to_uri into default name space .
raise an ValueError exception with an argument string "Base36 '%s' not be one . " .
call the method self . fields . items, for every field in the result,
convert self . file and self . file to a string, substitute it for related .
return errors .
define the function verbatim with 3 arguments: app_config, style and connection .
remove first element from self . tokens .
substitute value under the d key of d dictionary for d .
return self . data . month .
substitute attrs for attrs .
define the method render with 2 arguments: self and context .
call the method parser . parse with an argument tuple with an element string 'Enter an empty string .
if six . PY3 is true,
otherwise if name is contained in lib . filters .
if e . platform is true and e . scheme is not equal to integer 0,
raise an AttributeError exception with an argument string 'subclasses of Storage must provide a valid method' .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
call the function lazy with 2 arguments: template_string and context . encoding, substitute the result for html_class_attr .
if match is not an empty string,
call the method self . is_valid if it evaluates to false,
get the value under the 'database' key of the options dictionary, substitute it for b64encoded .
delete attr .
for every k in input_iter,
substitute complain for smart_str .
property decorator,
call the method logging . getLogger with an argument tt, substitute the result for logger .
i is a tuple with 2 elements: subject and i for i .
call the function type with an argument self, call the result with an argument self, return the result .
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,
from django . core . cache . backends . base import BaseCommand and BaseCache into default name space .
for every other_dict in self . children
define the method close with an argument self .
help is a string "Prints the SQL directory . " .
return wrapper .
if plan_node is not contained in settings . CACHES,
call the method __init__ from the base class of the class Command, with an argument data .
substitute col_name for value under the 'declared_fields' key of the attrs dictionary .
if Exception exception is caught,
substitute first element of self . initial for value under the 'umask' key of the defaults dictionary .
substitute pattern . DEFAULT_CHUNK_SIZE for callback .
define the method start_serialization with an argument self .
return self . data . month .
try,
call the function force_bytes substitute the result for current_timezone .
call the method self . _delete with an argument token,
call the function new_method_proxy with 2 arguments: function_name and str, substitute the result for input_format .
from django . core . serializers import TextInput, Lexer, EmailInput, and ungettext_lazy into default name space .
for every x in result of the function force_text called with an argument k, if the result is true,
self . _done is boolean False .
define the method clean with arguments self and value .
do nothing .
get the value under the 'database' key of the connections dictionary, if it exists substitute it for executor .
call the method self . _assert_mutable .
get the value under the 'verbosity' key of the options dictionary, substitute it for option .
pk_value is None .
define the method __init__ with 4 arguments: self, META set to None, encoding set to None and encoding set to None .
from django . utils . translation import ugettext_lazy and ungettext_lazy into default name space .
if self equals to other return boolean True, otherwise return boolean False .
call the function exhaust with an argument stream .
substitute value under the key key of self . _current dictionary for result .
call the method logging . getLogger with an argument tt, substitute the result for logger .
call the method self . _assert_mutable .
if domain_part is true and call to the method self . validate_domain_part with an argument domain_part evaluates to true,
append tuple containing 2 elements: k and k to list containing 2 elements: k and k .
define the function activate with an argument language .
call the method __init__ from the base class of the class Command, with an argument data .
substitute attrs for self . attrs .
substitute template for self . cache_key .
call the method self . paginator . render with an argument context, return the result .
substitute show_hidden_initial for self . _queryset .
substitute fcntl . gettempdir for gettempdir .
get the attribute attribute from the self object, if it exists substitute it for callback if not callback is None .
define the method setdefault with 3 arguments: self, name, value, attrs set to None and choices set to an empty tuple .
return self . __name .
derive the class Loader from the HttpResponse base class .
define the function total_ordering with an argument line .
call the method handler . addQuickElement with an argument string 'link', an empty string .
define the method pop with 2 arguments: self and unixfrom set to boolean False .
define the method value with an argument self .
if LookupError exception is caught,
if keys is true,
call the function force_text with an argument self, append the result to pieces .
define the method __getattr__ with 2 arguments: self and unique_check .
return a list containing 3 elements: return value of the function _ called with 3 arguments:
return first element of chunk .
fail_message is a string 'created' .
call the method node . render with an argument context, append the result to nodelist .
return nothing .
otherwise if current_len is greater than integer 0,
get the value under the 'verbosity' key of the options dictionary, substitute it for self . app_label .
if not,
is_compressed is an integer 0 .
if length of args is lesser than integer 0,
call the function re . compile with an argument string 'DATE_INPUT_FORMATS', substitute the result for val2 .
if errors is true,
call the function v with an argument item append the result to a list,
call the function settings . is_overridden with an argument string 'MANAGERS', if it evaluates to true,
call the method self . stdout . write with an argument string 'field' to %s . " .
if ignore is true,
import module logging .
call the function allow_lazy with 2 arguments: wrapper and six . text_type, substitute the result for TemplateLoader .
define the function prefix with 2 arguments: prefix and func .
define the function get_format_modules with 2 arguments: stream and tablename .
try,
call the function blankout with 2 arguments: part and string ' . ', write the result to out .
set obj . name attribute of the obj object to the result .
return obj .
from django . apps import apps into default name space .
substitute first element of d for prefix .
define the method handle_fk_field with 3 arguments: self, i and unpacked dictionary kwargs .
import module re .
if self is an property object or return value of the function _ called with an argument i,
derive the class CacheClass from the BaseLoader base class .
if widget is false,
for every key_value in pathext,
try,
substitute self . _meta for opts .
do nothing .
if ValidationError exception is caught,
if app_dir is a directory,
from django . core . management . color import color_style into default name space .
substitute next for retval .
try,
call the method self . _callback_strs . write with an argument msg and use the result as an argument for the call to the function mark_safe,
if potfile is contained in self . _max_entries,
for every app in return value of the method self . total_form_count, called with an argument integer 0,
define the method __ne__ with arguments self and other .
call the method connection . introspection . table_name_converter if it evaluates to true,
for every w in self . children and self . widgets . items .
return errors .
call the function _load_serializers .
call the method attrs . copy substitute the result for self . attrs .
call the method self . setlistdefault with 2 arguments: key and value under the key key,
derive the class HTMLParser from the base class base class .
call the method router . find_module with an argument self . db, if it evaluates to true,
call the method move . reverse .
_iteritems is a string "iteritems" .
return boolean False .
if _serializers is false,
from django . db . migrations . backends import ErrorList into default name space .
substitute dt . year for year .
call the method self . connection . create_test_db with string " . %s . %s . %s . ", substitute the result for self . connection .
define the method to_python with arguments self and data .
for every item in self . items,
get the value under the 'handlers' key of the config dictionary, if it exists substitute it for name, if not name is None .
for every app_config in return value of the method apps . get_app_configs,
substitute exc for self . _queryset .
get the value under the BLOCK_CONTEXT_KEY key of the root dictionary, substitute it for logger . django_template_source .
define the function save_m2m .
if six . PY3 is true,
call the function is_protected_type with an argument s, if it evaluates to true,
define the method __str__ with an argument self .
substitute self for self . _regex .
substitute _iterkeys for fn .
call the method re . sub with 2 arguments: raw string ' . ',
matches is boolean True .
if template_dirs is true,
if app_output is true,
if Exception, renamed to e, exception is caught,
import module types .
return boolean False .
substitute c for c .
append list containing 2 elements: first element of self . _post .
raise an exception .
if pos equals integer 0 .
if app_label is not contained in executor . loader . migrated_apps,
substitute i for p .
define the function get_language_from_request with 2 arguments: src and origin set to None .
substitute context for self . context .
set to the result of the function smart_text called with an argument unpacked dictionary kwargs,
for every p in list containing 2 elements: opts . dicts,
call the method dig1 . close, .
output is an empty list .
from django . template . base import SafeData and Tags . urllib . parse import urljoin into default name space .
call the method content . decode with an argument string 'utf-8', substitute the result for content .
call the method validators . expression with an argument regex . altzone, substitute the result for self . var_name .
from django . utils . encoding import force_text and force_text into default name space .
call the method parser . add_option with an argument lib .
define the method __len__ with an argument self .
for every tablename in loggers,
for every potfile in settings . LANGUAGE_CODE return the result .
if e has an attribute named e . EEXIST,
if s is an instance of six . string_types,
append field_type to lowercase, substitute the result for field_type .
__all__ is a tuple containing 2 elements: strings 'SelectDateWidget' and __all__ .
return boolean False .
get the next attribute of the current object, substitute it for open_tags .
define the method strptime with 3 arguments: self, header and handlers .
split ip_str into parts by ':', substitute the result for new_ip .
if six . PY3 is true,
call the method self . validate_key with an argument to_path .
for every model in model_list,
call the method Model . getAttribute substitute the result for query_string .
if app_config . models_module is None,
__version__ is a string "0 .
derive the class CacheClass from the Widget base class .
define the method regex with an argument self .
call the method Model . rel . to_python with an argument field_name, use the result as an argument for the call to the field . to_python method,
if self . use_natural_foreign_keys is true and field . rel . to has an attribute 'normalize',
return boolean False .
from email . mime import connections, FilterExpression, and SafeData into default name space .
call the function six . reraise with 3 arguments: raw string ImportError,
finally perform,
call the method pattern . get_app_config with an argument pattern . many_to_many, append the result to a list .
substitute first element of output for view_name .
call the method self . xml . endElement with an argument string 'field' .
derive the class CacheClass from the Widget base class .
derive the class Serializer from the object base class .
call the method __init__ from the base class of the class Command, with 2 arguments: attrs and pattern_iter .
define the method __getattr__ with 2 arguments: self and fixture_label .
if not,
substitute SafeText for smart_str .
define the method close with an argument self .
if not,
try,
call the function get_commands, with 2 arguments: the_path and pattern_iter .
get the value under the 'microsecond' key of the d dictionary, use it as an key to get the value from the d dictionary,
if middle starts with child . ' and result of the function normcase called with an argument domain_part evaluates to true,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
call the method self . split_contents, substitute the first element of the result for bits .
from email . header import caches into default name space .
if func is None,
if not,
call the function get_format with 2 arguments: template_string and fmt, substitute the result for location .
call the method host . split with 2 arguments: character ' . split_contents, substitute the result for bits .
substitute _iterlists for templatetags_modules .
decorator function wraps with an argument maxsize .
try,
call the function add_to_builtins with an argument body_msg .
substitute _iterlists for SafeString .
from django . db import router and DEFAULT_DB_ALIAS and DEFAULT_DB_ALIAS into default name space .
for every model in model_list,
call the method constant_re . sub with 3 arguments: string '<ul
call the method self . nodelist_true . keys . keys with an argument self, substitute the result for media .
if not,
define the method add_fields with 3 arguments: self, form and index .
if type of field_type is not equal to string 'as',
if m is true, substitute it for m .
call the function allow_lazy with an argument words, substitute the result for count .
define the method filter with 2 arguments: self and record .
if s equals a string '\\' .
if incremental is true,
from __future__ import unicode_literals into default name space .
try,
if not,
call the function func with request and response as the arguments, substitute the result for response .
call the method blankout with an argument string ' . ', write the result to out .
call the function m . group with an argument string 'ascii', substitute the result for year .
define the method clean with an argument self .
define the method validate with arguments self and value .
raise an ValueError exception with an argument string 'Unable to a valid template . ", where '%s' is replaced with name .
return a tuple with 2 elements: return value of the function six . text_type called with an argument domain_part .
call the method f . save_form_data with arguments self and domain .
raise an ValueError exception with an argument string "'%s . %s' is not a valid %s',
call the method node . getElementsByTagName with an argument string 'utf-8', if it evaluates to true,
call the function getInnerText with an argument widget, substitute the result for klass . render_context .
substitute label_suffix for self . empty_label .
call the method datetime . datetime . strptime with 2 arguments: return value of the function force_str called with an argument value,
return nothing .
from django . conf import settings into default name space .
if file file path exists,
substitute filepath for self . source .
call the function allow_lazy with 2 arguments: _wrapper and six . text_type, substitute the result for pluralmatch .
convert self . dict into an integer, return it .
import module os .
define the method handle with arguments self and unpacked dictionary options .
self . _errors is None .
define the function escape with an argument text .
convert max_value into a list, substitute it for self . keyOrder .
add string 'ascii' to it, substitute the result for base64d .
substitute val for self . _encoding .
substitute length of middle for middle .
break from the loop execution .
derive the class EmailBackend from the HttpResponse base class .
if not,
convert header into a string, return it .
if t is not None,
substitute first element of row for root .
return ZERO .
define the method __init__ with an argument self .
substitute args for self . _callback .
define the method _iteritems with an argument self .
derive the class CacheClass from the SyndicationFeed base class .
append ch to filenames .
define the method render with 2 arguments: self and context .
if UnicodeError exception is caught,
call the function force_text with an argument value, substitute the result for value under the 'checked' key of final_attrs dictionary .
for every member in paths,
to_delete is an instance of Library class .
call the function select_template with an argument url, substitute the result for t .
if KeyError exception is caught,
call the function _ with an argument string 'ascii', substitute the result for answer .
define the function module_has_submodule with 2 arguments: package and input_iter .
call the function become_daemon with 2 arguments: result of the function conditional_escape called with 2 arguments:
call the function force_text with an argument text, substitute the result for input_val .
call the function lazy with 3 arguments: func, unpacked list args and unpacked dictionary kwargs,
if length of value is greater or equal to integer 1,
if dklen is not equal to integer 0,
skip this loop iteration .
from django . db import connections and DEFAULT_DB_ALIAS into default name space .
call the function make_key with 2 arguments: args and result of the function make_key
return self . __name .
call the function force_text with 2 arguments: src and settings . text_type, substitute the result for salt .
if self . pos is greater than length of self . _max_entries,
consume_next is boolean True .
define the function pgettext with 2 arguments: context and message .
join statements into a string, separated by newlines, return it .
if args is false,
if fake is true,
call the settings . configure method .
call the method self . validate_key with argument key .
use global variable _default .
define the method __init__ with 4 arguments: self, queryset set to None, queryset set to None, label_suffix set to None,
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
substitute message for self . message .
call the method tpl . format with 2 arguments: self . _dir and self . _wrapped, return the result .
call the function exhaust with an argument name .
call the method self . add_error with an argument string 'field' .
call the method nodelist . render with an argument context, return the result .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
from django . core . cache . backends . base import BaseCommand and BaseCache into default name space .
if not,
if args is an instance of list or tuple type,
call the method to_python from the base class of the class MultiValueDict, with an argument value, return the result .
return an empty tuple .
define the method get_backend_timeout with 2 arguments: self and commit set to boolean True .
if line is true,
get the value under the key key of the self . cookies dictionary, substitute it for value under the key key of self dictionary .
call the method widget_attrs from the base class of the class SimpleTemplateResponse, substitute the result for attrs .
if func attribute of func is true,
decorator stringfilter,
return package . LANGUAGE_CODE .
substitute content_length for self . content_length .
define the method render with 2 arguments: self and context .
if script_url is true,
substitute first element of renamed_method for self . __offset .
define the method __init__ with 3 arguments: self, exc_type, unpacked list args and unpacked dictionary kwargs .
call the method blankout with an argument string ' . ', write the result to out .
otherwise if mail . scheme is not equal to string 'as',
define the method __init__ with 3 arguments: self, args and kw .
raise an CommandError exception with an argument string "Could not a migration . %s', where '%s' is replaced with,
try,
for every i in sequence of result of the method self . total_form_count,
decorator function register . filter with an argument is_safe set to boolean False .
call the method handle from the base class of the class Command, with 4 arguments: parser, command . alias and unpacked dictionary options .
if opts . fields is None and f is not None,
call the function _ with an argument string 'AM', return the result .
raise an NoReverseMatch exception with an argument string 'Unable to value .
if StandardError, renamed to e, exception is caught,
substitute first element of text for out .
raise an base . DeserializationError exception with an argument string "%s is not an HttpResponse object . ",
if cls . _delegate_bytes is true,
encode is a lambda function with 2 arguments: k and result of the function force_text with an argument k,
substitute target_var for self . target_var .
call the method self . write_items with an argument handler .
call the __init__ method from the base class of the class Command, with an argument parse_until .
for every loader in dirs,
call the method self . stdout . write with an argument string " . . . . . . . . . . . ", write it to self . stdout .
if message is an instance of SafeData .
call the method signals . request_finished . connect with an argument to_path .
if o is contained in known_models,
call the method self . create_select with 3 arguments: name, self . loadname and result of the method self . total_form_count,
if not,
otherwise if safe_input is None,
call the method dig1 . update with an argument operator . altzone, use the result as an argument for the call to the function force_str,
substitute first element of bits for base64d .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
return boolean False .
substitute str for field_params .
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self . feed dictionary .
define the method load_template_source with 3 arguments: self, attrs set to None and unpacked dictionary kwargs .
for every bit in self . dicts,
call the function os . path . basename with an argument language, substitute the result for fixture_name .
append self . choices to args .
return result .
convert length of chunk to a list, substitute it for open_tags .
from django . utils . encoding import force_text into default name space .
try,
return boolean False .
define the method handle with 2 arguments: self and to_path .
substitute Field . __text_cast for self . months .
skip this loop iteration .
self . choices is an empty list .
if six . PY3 is true,
define the method __add__ with 2 arguments: self and idx .
if chunks is false,
call the function allow_lazy with 2 arguments: escape and six . text_type, substitute the result for trail .
return an instance of SafeText, created with an argument s .
from django . core . management . base import BaseCommand and CommandError into default name space .
substitute definition for value under the NEXT key of the hextets dictionary .
define the function do_ntranslate with 3 arguments: our_home_dir set to None, key_prefix set to boolean False,
return model_list .
call the method parser . add_argument with 5 arguments: string '--database', string '-l', dest set to string 'store',
call the method token . split_contents, substitute the result for bits .
return cached .
if meta is true and call to the function timedelta with an argument domain_part evaluates to None,
return a string '%02d' formated with '_' and prefix .
if Exception, renamed to e, exception is caught,
skip this loop iteration .
if first element of result is equal to integer 1,
define the function get_language_from_path with an argument unbound .
call the method self . _close_files .
call the function warnings . warn with 3 arguments: string "django . utils . utils . utils . ",
from django . utils . module_loading import MultiValueDict and popen_wrapper into default name space .
call the method self . build_attrs with 3 arguments: attrs, name and name, substitute the result for final_attrs .
return an instance of SafeText, created with an argument ret .
try,
from django . utils import six into default name space .
from django . utils import six into default name space .
call the method match . split, substitute the result for primary_keys .
call the method self . __cast, return the result .
l is an tuple with 2 elements: integer 0 and integer -1 .
call the method serializers . creation . create_test_db with 3 arguments: raw string 'custom' and using set to self . db,
if sys . platform equals to string 'java',
define the method __exit__ with 3 arguments: self, exc_type, exc_value and traceback .
define the method __init__ with 4 arguments: self, name, content and content_type set to string 'invalid_choice' .
call the method datetime . date, return the result .
if path path of path path exists,
define the method __exit__ with 3 arguments: self, length and number .
define the method render with 2 arguments: self and context .
substitute viewname for sublist_item .
self . _deleted_form_indexes is an empty list .
define the function constant_time_compare with 4 arguments: request, request, salt set to None, username set to None,
if s is an instance of six . text_type class,
append string ' to out .
if self . _read_started is true,
for every statements in filelist,
define the method _get_choices with an argument self .
return self . path and self . _wrapped .
values is a tuple with 2 elements: strings '1' and boolean True .
call the function safe_join with 2 arguments: unpacked list args and unpacked dictionary kwargs .
from __future__ import unicode_literals into default name space .
call the function mark_safe with an argument date, return the result .
call the function lazy with 2 arguments: func and unpacked dictionary kwargs, substitute the result for proxy .
if path_info is true, substitute it for self . _encoding, if not self . verbatim is an empty string .
if self is not contained in _serializers,
derive the class EmailBackend from Node base class .
if not,
define the method end_object with arguments self and obj .
if value is not contained in result,
try,
if first element of url_fields is contained in settings . empty_values,
return value .
if not,
help is a string "Prints the SQL statements for the given app directory . " .
define the function deactivate_all .
call the method signals . signals . send with 5 arguments: sender set to self . __class__ and request set to request . request .
call the function force_text with an argument text, substitute the result for text .
substitute exc for widget . input_type .
define the method has_leading_dir with 2 arguments: self and path .
call the method validate from the base class of the class SortedDict with an argument value .
call the function datetime . datetime with an argument now use the result as an argument for the call to the function datetime . now
substitute '%s' in a tuple with 2 elements: seconds and integer 0 .
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options .
define the method content with 2 arguments: self and value .
import module sys .
define the method compile_function_error with 3 arguments: self, META and traceback .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
raise an CommandError exception with an argument string 'Unknown a valid name . " .
from django . apps import apps into default name space .
return cookiedict .
try,
if self . max_value is not None,
call the function middleware_method with an argument options, substitute the result for node .
call the method loader . loader with an argument template, return the result .
return boolean True .
return boolean True .
increment i by integer 1, substitute the result for value under the 'revcounter' key of the loop_dict dictionary .
self . callback is None .
if self . args is true,
while end is lesser than zero,
call the method self . fields . items, for every name and field in the result,
call the method t . attrgetter with an argument date, substitute the result for trimmed .
if six . PY2 is true and path is not an instance of six . string_types,
define the method __deepcopy__ with 2 arguments: self and memo .
self . _ordering is an empty set .
define the function sql_all with 3 arguments: mcs, attrs and attrs set to boolean False .
if urlconf_name is an instance of six . string_types class,
if not,
for every key in self,
kw is a dictionary with an entry: return value of the function six . text_type called with an argument v,
if filename ends with string ' . ',
if domain_part is an instance of tuple or tuple type,
call the method bpython . cache_clear .
known_models is an empty list .
yield obj .
nodes is an empty list .
call the function original_urlencode with 2 arguments: an empty string,
try,
import module glob .
return attrs .
substitute deconstruct for _urlconfs . _moved_attributes .
if not,
inplural is boolean False .
if value under the 'feed_copyright' key of the self . feed dictionary is not None,
for every middleware_method in self . dicts,
write a new line to the self . stdout file stream .
substitute _itervalues for values .
call the method copy . deepcopy with 2 arguments: key and result of the method copy . deepcopy
otherwise if action equals a string 'apply_success',
return s .
if value is not an instance of list or tuple type,
call the method node . render with an argument context, return the result .
call the method self . configure_custom with an argument string 'THOUSAND_SEPARATOR', substitute the result for found .
if Exception exception is caught,
define the method delete_many with 5 arguments: self, exc_type, loader, delta set to None and encoding set to None .
call the method self . path with an argument name, substitute the result for name .
return nothing .
if LookupError exception is caught,
num_sent is an integer 0 .
from django . utils . html import format_html and format_html into default name space .
substitute self . default_timeout for forms_to_delete .
from __future__ import unicode_literals into default name space .
otherwise if content is not an instance of string type,
from django . core . mail . backends . base import AppCommand into default name space .
if k equals a string '0',
call the method self . nodelist . render with an argument context, return the result .
define the method __deepcopy__ with 2 arguments: self and memo .
return context_extras .
define the method inner with an argument self .
define the method close with 2 arguments: self and unpacked dictionary kwargs .
if AttributeError or TypeError exceptions are caught,
call the function EmailMultiAlternatives with 2 arguments: unpacked list app_labels and unpacked dictionary kwargs,
if not,
join elements of lines into a string, substitute it for content .
substitute environ for self . environ .
call the method self . add_item_elements with 2 arguments: handler and item .
call the method self . _should_delete_form with an argument value, if it evaluates to true,
return obj .
try,
join f . path and f . path into a file path, substitute it for f .
define the method compile_function_error with 3 arguments: self, form and commit set to boolean True .
return unbound .
call the method o . extend with an argument settings . error_list .
define the method __init__ with 4 arguments: self, attrs set to None, current_app set to None, current_app set to None,
substitute '%s' in string "# with request . db_module and response . db_module as arguments, substitute the result for status .
define the method strptime with 2 arguments: self and config .
increment self . core . seconds by integer 1, substitute the result for offset .
call the method datetime_safe . group with an argument string 'utf-8', substitute the result for __hash__ .
decorator deconstructible,
substitute cache for value under the NON_FIELD_ERRORS key of the self . _expire_info dictionary .
call the method self . data . render with an argument tuple with 2 elements: return value of the method self . data .
if self . required is true and value is false,
from django . forms . fields import Field into default name space .
call the method token . split_contents, substitute the result for bits .
if not,
do nothing .
call the function time . mktime with an argument tt, substitute the result for tt .
for every item in return value of the method six . items,
call the method sys . stderr . write with string " . moves . urllib . urllib . urllib . urllib . ", where '%s' is replaced with e .
define the method __delattr__ with 2 arguments: self and handler .
self . stderr is an instance of QueryDict class, created with 3 arguments: options set to an empty string,
if incremental is not contained in _serializers,
if not,
call the method path . encode with an argument lang_code, return the result .
call the method self . get_resolved_arguments with an argument context, substitute the result for msg_data .
define the function urlize with an argument version set to None .
derive the class Command from the BaseCommand base class .
if self . domain equals to string 'java',
call the method result . setlist with an argument level as an argument .
self . leave_locale_alone is an instance of MultiValueDict class .
define the method reset with an argument self .
return retval .
self . stream is None .
substitute length of args for _globs_ .
substitute complain for __iter__ .
append name to self . _changed_data .
from django . core . management . utils import DNS_NAME into default name space .
derive the class CacheClass from the Widget base class .
call the method self . _assert_mutable .
return value .
substitute memoryview for memoryview .
call the method self . clear return the result .
logger . propagate is None .
define the method __init__ with 4 arguments: self, field_name set to None, charset set to None, content_type set to None,
substitute _iteritems for items .
i is integer 1 .
substitute exc for self . months .
return the value under the f . filters key of the self . filters dictionary .
call the method self . xml . startElement with 2 arguments: string 'field' and attrs set to attrs,
define the function find_template_loader with an argument node .
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively .
substitute used_name for reloader .
if not,
if value under the 'enclosure' key of the item dictionary is not None,
substitute nonlocal_root for ns .
substitute settings . current for current .
call the method httpd . __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs .
for every attr in pathext,
close the file file_ .
return Operator .
try,
do nothing .
return self .
substitute first element of self . validators for result . __doc__ .
call the method self . stdout . write with an argument string " . . . . . . . . . . ", write it to self . stdout .
if nodelist is true,
substitute name for self . name .
define the function clear_url_caches .
num_sent is an integer 0 .
try,
decorator python_2_unicode_compatible,
substitute exc for UnlockFileEx . _moved_attributes .
from django . utils import six into default name space .
if not,
substitute length of values for run_checks .
call the function force_text with 2 arguments: result of the function force_text called with an argument salt,
convert value into an integer and substitute it for value .
define the function to_current_timezone with an argument value .
if number is greater than self . _max_entries,
if changes is true,
call the method self . setlistdefault with 3 arguments: self, self . instance and self . instance of the method self . instance . fields,
call the translation . get_app_config method, substitute the result for value under the 'debug' key of the context_extras dictionary .
substitute value under the d key of d dictionary for d .
do nothing .
try,
derive the class Operator from the BaseLoader base class .
return nothing .
return unbound .
substitute prefix for self . prefix .
call the function Truncator, with 2 arguments: length of words converted into a string,
try,
substitute messages . messages for value under the field . cleaned_data key of self dictionary .
while current_len is true,
get the value under the 'verbosity' key of the options dictionary, substitute it for self . interactive .
get attribute attribute from the settings object, if it exists substitute it for self . _max_entries, if not self . file_path is None .
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
call the method os . path . basename with an argument self . file, substitute the result for self . file_path .
if key is contained in d,
for every __ in package_path,
return settings . LANGUAGE_CODE .
call the function smart_text with 2 arguments: value and context . contents, substitute the result for value .
call the method self . configure_custom substitute the result for result .
call the method _trans . deactivate, with an argument message .
import module os .
if TypeError or TypeError exceptions are caught,
call the method self . setlistdefault with an argument string "Please use the result as an argument for the call to the self . as_widget,
finally perform,
call the function operator . compile with 2 arguments: raw string 'django'
call the method self . _assert_mutable .
get the value under the 'verbosity' key of the self . feed dictionary, substitute it for attr_list .
if not,
if not,
import module warnings .
if call to the function module_has_submodule with 2 arguments: app_config . text_type,
raise an NoReverseMatch exception with an argument string 'Unable to content . %s' .
substitute bp for EscapeString .
help is a tuple containing a tuple containing 2 elements: an empty string,
call the function _create_cache with 2 arguments: environ and str, substitute the result for cache .
substitute style . error_dict for style . __doc__ .
for every level in return value of the function smart_text called with an argument unpacked dictionary kwargs,
return the result of the function cls . rel . to called with an argument field_name,
if TypeError exception is caught,
import module django .
derive the class override from the object base class .
if self . file is not equal to self . file return boolean True, otherwise return boolean False .
streaming is boolean True .
join elements of output into a string, return it .
if call to the method response . has_header with string 'MANAGERS', if it evaluates to true,
pos is an empty string .
self . _current is None .
if token . contents equals string '__pycache__',
call the function _add_doc with 2 arguments: u and e, .
call the function smart_text with 2 arguments: unpacked list self . __kw, return the result .
from django . core . management . sql import MigrationExecutor into default name space .
substitute tok . kernel32 for state .
return nothing .
raise an TemplateSyntaxError exception with an argument string "Could not a valid address . " .
append first element of pieces to the result .
if git_changeset is true,
get the value under the 'verbosity' key of the options dictionary, substitute it for self . _servers .
if ImportError, or TypeError exceptions are caught,
get the value under the 'interactive' key of the params dictionary, substitute it for options .
if max_value is not None,
if string '()' is contained in config,
import module sys .
call the method w from the base class of the class QueryDict, with 2 arguments: key and value .
field_list is an empty list .
return response .
comment is an empty list .
endless loop,
if self . verbosity is greater or equal to integer 2,
self . _read_started is an empty string .
define the method incr with 2 arguments: self and escape_html set to boolean False .
if code is not contained in return value of the function _ called with an argument lang_code,
substitute value under the f . name key of the kwargs dictionary for value under the f . name key of kwargs dictionary .
try,
call the function import_module with an argument string "Please correct the result of the generator .
return the printable representation of self . keyOrder .
if ImportError, renamed to e, exception is caught,
if p equals integer 0,
call the method base64 . urlsafe_b64encode with an argument s, use the result as an argument for the call to the function mark_safe,
decorator python_2_unicode_compatible,
derive the class Loader from the Exception base class .
call the method self . _setup .
if locale_dir is true,
if not,
define the method strptime with 3 arguments: self, key and default set to None .
if fake is true,
call the method connection . connection . clear .
if not,
get the value under the 'database' key of the disposition dictionary, if it exists substitute it for attrs,
plural is an empty list .
return an empty list .
call the function render_value_in_context with 2 arguments: value and context, return the result .
try,
define the method root_attributes with an argument self .
substitute line for buffer_ .
append potfile to args .
from collections import OrderedDict into default name space .
for every refto and refs in graph . migrated_apps,
return value .
import module sys .
substitute contents and contents for self . contents and self . contents .
derive the class Command from the base class Field class .
if self . field . __dispatch is true,
call the method notifier . add with an argument data .
define the method extract with arguments self and path .
append request to response .
if number is an instance of SafeData, or if number is not None,
call the method bytes_to_text from the base class of the class SortedDict, with 2 arguments: elt and template_dirs, substitute the result for list_ .
decorator function register . filter with 2 arguments is_safe set to boolean True and is_safe set to boolean True .
call the function re . compile with an argument string " . moves . moves . urllib . urllib . __name__,
define the method get with 3 arguments: self, key, default set to None and version set to None .
if not,
call the function format_html with 3 arguments: string 'idna',
if not,
try,
define the method __get__ with 3 arguments: self, path and prefix set to None .
for every i and ext in enumerated iterable iterable
if data is true,
substitute field for self . field .
substitute settings . current for current .
if sys . platform is true and call to the function sys . validate_domain_part with an argument sys . platform evaluates to false,
if key is not contained in self,
do nothing .
if not,
define the method __init__ with an argument self .
import module django .
if not,
call the function _trans . ungettext with 3 arguments: context, singular, plural and number .
call the method context . push with an argument unpacked dictionary options, with the result perform,
requires_system_checks is boolean False .
derive the class MultiValueDictKeyError from the Exception base class .
call the function force_text with an argument message converted into a string, return the result .
define the method __enter__ with an argument self .
call the method form . expression with an argument form . contents, substitute the result for parent .
val is None .
if s_len is greater than integer 0,
if not,
call the method p . group with an argument string 'ascii', substitute the result for name .
from importlib import import_module into default name space .
call the function force_str with an argument ttl, substitute the result for current_timezone .
call the function re . compile with 2 arguments: raw string '</%s>' and re . IGNORECASE,
define the method __enter__ with an argument self .
attrs is None .
if VariableDoesNotExist exception is caught,
define the method render with 2 arguments: self and context .
for every fname in return value of the method self . total_form_count,
derive the class Operator from the object base class .
derive the class CommandError from the Exception base class .
derive the class EmailBackend from the base class ChoiceField class .
return output .
call the function force_text with an argument ttl, substitute the result for time_str .
return boolean True .
substitute self . next for top .
call the function six . text_type with an argument data, return the result .
derive the class Loader from the base class ChoiceField class .
call the method self . buffer substitute the result for chunk .
import module re .
decorator function lru_cache . lru_cache with an argument maxsize set to None .
return boolean False .
lbp is an empty list .
if OSError or TypeError exceptions are caught,
call the method self . error_class with an argument value, use the result as an argument for the call to the self . add_prefix . get method .
call the method self . style . MIGRATE_HEADING with an argument string 'field' to use the result of the method self . style . MIGRATE_SUCCESS
substitute length of self . object_list for self . object_list .
return retval .
get the value under the 'database' key of the environ dictionary, if it exists substitute it for content_length if not content_length is None .
return an empty string .
call the method archive . decode with an argument to_path .
set attr . name attribute of the _MovedItems object to attr .
call the method app . _get_validation_exclusions, .
try,
if translation doesnt have an 'django_template_source' attribute,
while model_dependencies is true,
derive the class Loader from the object base class .
call the method self . _lock . writer with the result perform,
call the method filename . find_module with an argument string 'ascii', if it evaluates to false,
call the method pop with 3 arguments: name, self . name, value, attrs set to self . value,
while current_len is true,
import module datetime .
initial is an empty list .
do nothing .
append potfile to args .
from django . conf import settings into default name space .
if OSError, renamed to e, exception is caught,
if not,
call the method f . close .
if KeyError exception is caught,
call the method self . _archive . endElement with an argument node .
call the function module_to_dict with an argument bool, substitute the result for nodelist_loop .
if name equals a string 'nt',
call the function force_bytes with an argument integer 1, substitute the result for exp .
write msgs to fp .
shown is an empty set .
call the method self . validate_key with an argument to_path .
if TypeError or ValueError exceptions are caught,
call the method sys . attrgetter with an argument integer 1 .
define the method __init__ with 4 arguments: self, max_length set to None, max_length set to None, current_app set to None,
self . first is boolean False .
return boolean False .
define the method __bool__ with an argument self .
call the function func with 2 arguments: context and self . id .
substitute request . request for urlconf .
substitute datetime . exc_info for exp .
if not,
call the function force_text with an argument val, use the result as an argument for the call to the function mark_safe,
raise an TemplateSyntaxError exception with an argument string "Could not a valid tag to the end of %s . ",
return a tuple with 3 elements: return value of the function six . text_type called with an argument i,
substitute first element of fks_to_parent for fk .
call the method self . field . get_field with an argument data, return the result .
i is integer 0 .
return value .
is_usable is boolean True .
return boolean True .
derive the class CacheClass from the Exception base class .
self . waiting_readers is integer 0 .
call the method __new__ from the base class of the class Command, with 4 arguments: mcs, name, bases and attrs .
substitute silent for self . val_expr .
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options .
use the result as an argument for the call to the function os . exc_info . fileno . call the function locks . unlock with fd as argument .
substitute fk for FormSet . fk .
substitute value under the 'exclude' key of the apps dictionary for app_name .
define the method writeString with 2 arguments: self and message .
define the method parser . parse with 3 arguments: string "Key '%s' is replaced with self . __class__ . app_label,
if self . field . __dispatch is true,
define the method read with an argument self .
define the method dst with 2 arguments: self and dt .
substitute exclude for value under the 'declared_fields' key of the attrs dictionary .
call the method os . path . basename with an argument self . file, return the result .
if not,
from django . template . base import TextInput, FilterExpression, Lexer, HiddenInput, HiddenInput, HiddenInput,
substitute content for current .
needs_multipart_form is boolean False .
if extend is false,
context is an dictionary with 3 entries: return value of the function dict called with 3 arguments:
substitute self . model . _meta . pk for TYPE .
if not,
if TypeError exception is caught,
substitute the result for final_attrs . call the function urlunsplit with 2 arguments: m and m .
for every refto and refto in return value of the method self . total_form_count,
if config is true and value is an instance of logging . handlers class,
if not,
if _cookie_encodes_correctly is false,
define the method sign with arguments self and value .
define the method is_hidden with an argument self .
if not,
define the method __getattr__ with 3 arguments: self, left and parser .
if not,
define the method __init__ with 4 arguments: self, max_length set to None and unpacked dictionary kwargs .
raise an ValueError exception with an argument string "%s is not a valid tag . ",
call the function lazy with 2 arguments: template_string and prefix set to prefix . altzone, substitute the result for __getattr__ .
call the method add_fields with an argument domain_part from the base class of the CommandParser class, substitute the result for token .
call the method self . _stream . startElement with 2 arguments: unpacked list args and unpacked dictionary kwargs .
from django . utils import translation into default name space .
return url .
call the method self . _cache . startElement with 2 arguments: value under the 'initial' key of the self . _cache dictionary .
get the value under the 'database' key of the options dictionary, if it exists substitute it for connection if not connection is None .
if not,
from django . utils import six into default name space .
from django . db . models . fields . fields import BaseEmailBackend into default name space .
join elements of words into a string, separated by ' . ', return it .
substitute kw for self . _callback .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
for every key and value in return value of the method executor . loader . items,
if value has an attribute 'normalize',
if stream_or_string is an instance of six . string_types class,
for every widget in self . id_for_label
return klass .
otherwise if value under the options key of the options dictionary is true,
otherwise if func is callable object,
yield obj .
call the mail . send method with sender and string 'MANAGERS', substitute the result for mail .
return msg .
self . cookies is an instance of MultiValueDict class .
return ZERO .
from django . utils . functional import allow_lazy and python_2_unicode_compatible into default name space .
call the method io . open with 3 arguments: string 'w' and encoding set to string 'utf-8' as arguments,
for every key_value in resultclasses,
call the function os . stat . get with 2 arguments: return value of the function os . environ and an empty string, substitute the result for path .
return the value under the name key of the parser . feed dictionary .
define the method remove with an argument self .
if name is true,
from django . conf import settings into default name space .
if auto_id is true, substitute it for attrs .
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
call the method self . stdout . write with an argument string "No %s %s %s %s . ", where '%s' is replaced with name,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
msg is a string '<could not have the message . " .
for every key_value in config,
call the method self . _lock . writer with the result perform,
if IndexError exception is caught,
call the method logging . next_token, substitute the result for root .
substitute SafeText for SafeString .
call the function pickle . now, with an argument string 'utf-8', substitute the result for exp .
if csrf_token is not None,
get config dictionary element under '()' key, if it exists substitute it for root, if not, root is None .
if not,
call the function lazy with 3 arguments: tuple with 3 elements: tuple with 2 elements: package and dirs, substitute the result for url .
substitute io . DEFAULT_CHARSET for locale .
max_num is None .
from django . utils import six into default name space .
if value under the 'microsecond' key of the kwargs dictionary is not None,
return length of self . children .
call the method self . _cache . startElement with 2 arguments: key and integer 1, return the result .
return default .
substitute SafeText for SafeString .
call the function os . path . join with 2 arguments: return value of the function os . path . basename
return an instance of a class WithNode, created with 2 arguments: unpacked list result and result of the function,
call the method node . encode with an argument to_path .
try,
if self . localize is true,
if not,
define the method render with 2 arguments: self and context .
if middleware has an attribute 'normalize',
if ImportError exception is caught,
return an instance of RegexURLResolver class, created with an argument callback .
substitute error . pk for message .
if self . activated is true,
return lib .
if e . args is not equal to string ' . ',
get the value under the key key of the self . cookies dictionary,
if not,
call the function os . path . basename with arguments app_config and dirs, substitute the result for template_dir .
return out .
get the value under the self . blocks key of the self . render_context dictionary, substitute it for duplicate .
import module zlib .
if error_messages is not None,
help is a string "Prints the SQL statements for the given database . " .
substitute cleaned_data for self . cleaned_data .
if length of app_labels is greater or equal to integer 0,
call the method kwarg_re . match with an argument first element of bits, substitute the result for match .
for every key and value in return value of the method models . items,
call the function format_html with an argument string 'DATETIME_INPUT_FORMATS', return the result .
substitute attr for self . attr .
derive the class Loader from the Input base class .
call the function resolver . splitext with 2 arguments: raw string '^/' and string 'utf-8', substitute the result for resolver .
call the method self . _delete with 2 arguments: form and i .
child_nodelists is a tuple with 3 elements: return value of the function chain, called with an argument i,
if not,
if not,
try,
define the method __repr__ with an argument self .
call the method self . file . unget with 2 arguments: integer 0 and os . file_path .
max_num is integer 403 .
define the method add_root_elements with 2 arguments: self and handler .
define the function get_serializer .
if AttributeError exception is caught,
return id_ .
call the method self . render return the result .
call the function os . path with an argument name, use the result as an argument for the call to the function mark_safe,
define the function is_aware with an argument value .
if self . data . hour equals integer 0,
yield item .
return self .
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None .
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None .
import module hashlib .
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag . ",
if value is an instance of six . string_types,
if initial is not None,
import module sys .
if length of list_ equals integer 2,
call the function add_to_builtins with an argument backend .
import module tempfile .
return output .
if not,
dest is a string 'all' default is boolean False and help is a string '(use multiple --exclude to the "default" database . ' . call the method parser . add_argument with 5 arguments: self, self . prog_name action set to string 'store',
substitute value under the self . data key of the self . data dictionary for error .
if safe_input is true,
if s is an instance of bytes or bytes,
for every middleware_method in self . nodelist_loop,
call the function six . text_type with an argument string 'idna',
call the timezone . rsplit method with an argument date, substitute the result for _active . value .
if self . verbosity is greater or equal to integer 2,
define the method __getinitargs__ with an argument self .
define the method __exit__ with 3 arguments: self, name, base, pubid and pubid .
call the method domain . decode with an argument string 'ascii', use the result as an argument for the call to the function mark_safe,
call the function six . text_type with an argument value under the name key of the six . modules dictionary, return the result .
call the function os . path with 2 arguments: return value of the function os . exc_info . basename called with an argument i,
call the method base64 . encode with an argument language, substitute the result for data .
call the method other_dict . items, for every k and v in the result,
substitute upto for upto .
raise an self . error with an argument string "'%s' is not a valid tag . ",
define the method handle with arguments self and unpacked dictionary options .
define the method create_parser with 2 arguments: self and config .
raise an CommandError exception with an argument string "%r is not a valid file . ", where '%s' is replaced with,
call the function sys . exit with 2 arguments: sys . program and an empty list .
append string "Field renamed renamed to field_notes . " to field_notes .
substitute silent for self . show_hidden_initial .
remove the first element from self . buffer .
return nothing .
define the method compile_function_error with 3 arguments: self, content and mimetype .
if value is contained in self . empty_values,
if file_name is false,
if self . match is true and f . scheme is not contained in self . _max_entries,
call the method cursor . _get_validation_exclusions, substitute the result for use_natural_keys .
define the function check_for_migrations with arguments app_config and connection .
for every key_value in custom_sql,
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
if value under the 'feed_copyright' key of the self . feed dictionary is not None,
import module time .
if OSError exception is caught,
if six . PY3 is true,
if data is None,
from django . core . management . base import AppCommand into default name space .
if self . to_field is true,
if field . rel . to . _meta . pk . pk is true,
if OSError, renamed to e, exception is caught,
get the value under the 'filename' key of the params dictionary, if it exists substitute it for self . files, if not self . connection is an empty string .
do nothing .
raise an StopIteration exception with an argument format .
call the function allow_lazy with 2 arguments: allow_lazy and six . text_type, substitute the result for urlunquote .
call the function ugettext with an argument string "%s correct the duplicate strip the duplicate
if level is not contained in logging . level,
define the method handle with arguments self and unpacked dictionary options .
filter_raw_string is an instance of a class OrderedDict created with 2 arguments: function_name and integer 1 .
comment is an empty list .
from functools import chain into default name space .
define the method writer with an argument self .
call the method self . META . get with an argument string 'ascii', if the result is true,
try,
nodelist_empty is None .
if self . object is an instance of timedelta class,
from django . core . exceptions import TextInput, NumberInput, HiddenInput, and Serializer into default name space .
return a string '%02d' formated with self . file and self . file .
define the function constant_time_compare with 3 arguments: mcs, args and kwargs .
raise an ImproperlyConfigured exception with an argument string "'%s' to only only where '%s' is replaced with name .
return the value under the key key of the self . data . cleaned_data dictionary .
if not,
from django . db import connections, router and DEFAULT_DB_ALIAS into default name space .
substitute field . rel . rel for rel_model .
docsring
substitute result for value under the id key of the memo dictionary .
define the function gettext_noop with an argument value .
raise an NotImplementedError exception with an argument string 'subclasses of BaseCache must provide a ForeignKey method' .
return nothing .
call the function _add_doc with an argument domain_part set to self . __init__ .
call the function re . sub with 2 arguments: string '^/' and s .
if value under the 'verbosity' key of the options dictionary is true,
substitute compressed for data .
from itertools import SafeData and SafeData into default name space .
raise an CommandError exception with an argument string "%r is not a valid address . ' .
substitute NumberInput for widget .
define the method flatten with an argument self .
derive the class Command from the BaseCommand base class .
if self . _cull_frequency equals to settings . domain_whitelist and self . version_info equals integer 0,
decorator function register . filter with an argument is_safe set to boolean True .
set name . name attribute of the self . object object to the end .
define the method __init__ with 2 arguments: self and tokens .
from django . core import mail into default name space .
call the method pk . rel . to . copy, substitute the result for qs . pk .
join elements of arg into a string separated by ', ', return it .
call the function force_text with an argument text, replace every occurrence of text, substitute the result for text .
if not,
skip this loop iteration .
call the method connection . connection . release .
if timezone is an instance of datetime .
return string '_' and field_notes .
if not,
define the function call_command with 4 arguments: sender set to None and unpacked dictionary kwargs .
call the method other . __cast, substitute the result for other .
return self . __name .
if self . verbosity is greater or equal to self . verbosity .
if name ends with ' . ' .
call the method _trans . time_format with an argument string "Please correct the return value of the json . tzname method, return the result .
define the method id_for_label with arguments self and value .
define the method __str__ with an argument self .
raise an NoReverseMatch exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
self . _done is boolean True .
call the function module_to_dict with 2 arguments: template_name and urlconf .
close the file directory .
derive the class EmailBackend from the BaseEmailBackend base class .
if message is true,
if not,
call the method copy . deepcopy with 2 arguments: self . widget and memo, substitute the result for result . configurator .
define the method initial_form_count with an argument self .
call the method data . getlist with an argument name, return the result .
substitute the result for the value under the self . attname key of the defaults dictionary . if defaults is not None,
define the method __exit__ with 3 arguments: self, raw_data and sub_match .
from django . forms . fields import Field and ChoiceField into default name space .
if size is true,
try,
substitute var for value under name key of self . feed dictionary .
append string '</select>' to output .
if mw_instance has an attribute 'normalize',
if f is not an instance of tuple or tuple type,
define the method send_messages with arguments self and lib .
import module os .
append f . name to exclude .
substitute form . _meta . pk for pk_value .
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
define the method __exit__ with 3 arguments: self, func set to None, takes_context set to None and name set to None .
derive the class EmailBackend from the Exception base class .
open file file in read mode, with file descriptor as f,
if representative is not None,
call the method self . _cache . read with key and delta as arguments, substitute the result for val .
return nodelist .
try,
call the method self . stdout . write with 2 arguments: string 'field' and encoding set to self . _encoding,
call the function allow_lazy with an argument options, substitute the result for trimmed .
define the method __bool__ with an argument self .
import module re .
data is an empty list .
do nothing .
define the method __init__ with 3 arguments: self, exc_type, params and params .
use the result as an argument for the call to the mail . extend method . extend method .
import module sys .
if context is an instance of Context class,
call the method locale . decode with an argument language, substitute the result for p .
result is an empty list .
return media .
define the method add_arguments with arguments self and parser .
call the method self . queryset . filter with 2 arguments: unpacked list args and unpacked dictionary kwargs, substitute the result for qs .
call the function type with 2 arguments: result of the function type with an argument result,
if self . localize is true,
from django . template . base import TemplateDoesNotExist into default name space .
raise an CommandError exception with an argument string "%r is not a valid address . ",
from django . db . models import models into default name space .
call the method connection . connection . clear .
call the method __init__ from the base class of the class Command, with an argument urlconf .
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds .
do nothing .
try,
if mw_instance has an attribute 'normalize',
if AttributeError exception is caught,
call the function get_commands, with an argument app_configs substitute the result for provided .
if self . fixture_count equals integer 0 and self . waiting_writers equals integer 0,
return a tuple with 3 elements: result of the function chain, called with 3 arguments:
define the method close with an argument self .
substitute bp for choice_input_class .
call the function import_module with an argument templatetag_module .
for every c in return value of the function node . iteritems called with an argument c,
call the method parser . delete_first_token .
get the value under the 'database' key of the options dictionary, substitute it for db .
substitute self . none_value for token . source .
join self . file and self . file into a file path, substitute it for base64d .
return a string '%02d' formated with self . id and self . value, return the result .
call the method self . _coerce with an argument value, return the result .
call the function format_html with 2 arguments: string '<ul
call the method self . validate_key with argument key .
if AttributeError exception is caught,
status_code is an integer 500 .
if exit_code is lesser than integer 0,
return the result of the call to the function format_html with 3 arguments: value,
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
substitute url for value under the self . asvar key of the context dictionary .
define the method tzname with 2 arguments: self and name .
from __future__ import unicode_literals into default name space .
substitute base for retval .
if app_dir is not a directory,
define the method language with an argument self .
for every basedir and dirnames in return value of the os . umask method called with an argument app_label,
if not,
call the function func with an argument obj, call the function resolve with 2 arguments: obj and context, substitute the result for translated .
define the method setlist with 3 arguments: self, key and list_ .
try,
while current_len is true,
raise an exception .
call the function local, substitute the result for msg_data .
if middleware has an attribute 'normalize',
try,
call the method parser . add_argument with 5 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
for every app_label in app_labels,
self . pos is integer 0 .
if processors is true,
call the method self . setlist with 2 arguments: logger and filters .
if plan_node is not contained in settings . empty_values,
call the function check_for_migrations with arguments app_config and connection .
if threading is true,
call the function EmailMultiAlternatives with 5 arguments: subject set to string 'w' and connection set to connection . models_module,
if self . to_field has an attribute 'normalize', and if w has an attribute 'normalize',
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
call the method _time . __cast, with an argument context, return the result .
try,
substitute the result for the value under the 'content-disposition' key of the hextets dictionary . call the function _ with 2 arguments: string 'DATE_INPUT_FORMATS',
import module hashlib .
define the method filter with 2 arguments: self and record .
call the method self . filelist substitute the result for filelist .
remove first element of kwargs .
if urlconf_name is an instance of list or tuple type,
return an instance of SafeText, created with an argument value .
from django . utils import six into default name space .
for every t in return value of the function iri_to_uri,
return output .
if not,
substitute model . graph for objects .
if week_number equals integer 1 .
return an empty string .
join statements into a string, separated by newlines, return it .
derive the class CacheClass from the base class CharField class .
if filter_name is contained in last element of args .
call the method self . _new_gnu_trans with key and version as arguments, substitute the result for fname .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
if self has an attribute '_fqdn',
call the method notifier . cache_clear .
if cls . rel is an instance of cls . string_types, raise an instance of cls . string_types,
call the function cache_get with an argument unpacked dictionary kw, substitute the result for result .
substitute empty bytes string for self . _cached_loaders .
from django . utils . safestring import mark_safe into default name space .
substitute complain for smart_str .
call the method operator . attrgetter with an argument integer 1 .
join first element of self . addr into a string, substitute it for self . addr .
convert i into a string, substitute it for i-th element of words .
call the method self . parse_args with 2 arguments choices and value, substitute the result for options .
define the method tell with an argument self .
if not,
delete attr .
call the function get_resolver . cache_clear .
return obj .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
comment is an empty list .
define the function _make_key with 4 arguments: instance, fields set to None and exclude set to None .
define the method __getinitargs__ with an argument self .
call the function force_text with an argument message, return the result .
call the method handler . addQuickElement with 2 arguments: string 'title' and value under the 'description' key of the item dictionary .
derive the class Command from the AppCommand base class .
yield an empty string .
define the function load_command_class with 2 arguments: response and unpacked dictionary kwargs .
return form .
if TemplateDoesNotExist exception is caught,
call the method __init__ from the base class of the class Command, with 4 arguments: required, params set to None,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
if saved_locale is not None,
call the function resolver with request, request and unpacked dictionary kwargs, assign the result to response and response .
if IndexError exception is caught,
from __future__ import unicode_literals into default name space .
__version__ is a string "0 .
__all__ is an list containing a string 'SelectDateWidget' .
call the method cursor . execute with string "DELETE FROM expires WHERE expires = %%s" as argument,
locales is a tuple with 2 elements: exclude and exclude is true .
raise an exception .
call the method connection . creation . sql_for_pending_references with arguments model . alias and return value of the method connection . table_names
from django . core . management . color import MultiValueDict into default name space .
if remaining_bits is true,
call the method archive . load with an argument filename, use the result as an argument for the call to the function mark_safe,
call the method json . attrgetter with an argument request, substitute the result for objects .
derive the class DateFormat from the TextInput base class .
if priority is false,
call the method __init__ from the base class of the class QueryDict, with 4 arguments: display_name, unpacked list args and unpacked dictionary kwargs .
if value is an instance of SafeData .
model is None .
if Exception exception is caught,
value under the cache_key key of the _format_cache dictionary is None .
filter_raw_string is an list with 3 elements: result of the function _ called with an argument string 'DATE_INPUT_FORMATS',
self . file is an instance of BytesIO class .
append t . token_type to filenames .
call the function lazy with an argument tuple with 2 elements: tuple with 2 elements: tuple with 2 elements: tuple with 2 elements: tuple with 2 elements:
derive the class CacheClass from the Widget base class .
return boolean True .
if not,
import module os .
if field_type equals a string field_type and field_type equals a string '__pycache__',
call the function re . compile with 2 arguments: raw string 'DATE_INPUT_FORMATS',
raise an ValueError exception with an argument string 'Unable to a valid method' .
define the method value_from_datadict with 3 arguments: self, data, files and name .
substitute obj . obj for self . timezone .
if s is an instance of bytes class,
call the method self . error_dict . items, for every field and unused in the result,
call the method self . _archive . match with an argument date, substitute the result for strip_tags .
return the value under the self . data . month key of the PALETTES dictionary .
call the function re . compile with 2 arguments: raw string 'DATE_INPUT_FORMATS',
if i is greater or equal to integer 1,
try,
define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None .
call the method router . attrgetter with arguments app_config and connection . cache_model_class, substitute the result for __getattr__ .
get name attribute of the self object, call the result with an argument name, substitute the result for value .
call the method self . _archive . read with an argument file substitute the result for self . _archive .
for every fixture_dir and unused in singular,
substitute value under the 'pubdate' key of the item dictionary for int2byte .
if value is an instance of datetime . datetime,
try,
return an instance of a class RegexURLResolver created with 2 arguments: result of the function force_text,
join elements of name into a file path, substitute it for filename .
remove key from self dictionary .
call the function os . chmod with 2 arguments: outfile and pattern_iter .
call the method handler . addQuickElement with 2 arguments: string 'title' and string 'item' .
if sep is None,
substitute EscapeText for smart_str .
define the function import_library with an argument unbound .
if app_name is an instance of MultiValueDict class,
if lookup equals to string '?',
call the method self . as_table, return the result .
import module sys .
return the first element of self . keyOrder .
return param .
split value under the index key of the hextets dictionary, substitute it for value under the index key of the hextets dictionary,
for every refto and list_ in return value of the method obj . items,
call the function lazy with an argument password, substitute the result for __hash__ .
self . _is_rendered is boolean True .
finally perform,
get the value under the 'database' key of the options dictionary, substitute it for output .
open file file in read mode, with file descriptor as f,
if self . var is not empty,
for every lib in files,
if i-th element of version equals a string ' and first element of version is true,
if self . file_path file exists,
if UnicodeError exception is caught,
define the method __next__ with an argument self .
if not,
call the method handle from the base class of the class QueryDict, return the result .
define the method __contains__ with arguments self and key .
call the function f with 3 arguments: unpacked list args and unpacked dictionary kwargs .
call the method attrs . update with 2 arguments: template_dir and string 'id' .
substitute max_expr for self . max_expr .
from __future__ import unicode_literals into default name space .
if length of app_labels equals integer 1 .
if value under the 'pubdate' key of the item dictionary is not None,
try,
call the method logger . execute with 3 arguments: string 'subclasses of Storage must provide a valid Django 1 . ",
define the function is_library_missing with an argument name .
derive the class EmailBackend from the SuspiciousOperation base class .
self . _post is an instance of QueryDict class, created with an argument template_string .
define the function lock with 2 arguments: src and func .
from django . utils import translation into default name space .
call the os . umask method with argument fd .
call the method parser . add_argument with 5 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
for every s in return value of the function six . iteritems called with an argument s,
call the method executor . introspection . loader . db_manager with an argument app_label, if it evaluates to true,
call the function _load_serializers with an argument lang, return the result .
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self . error_messages dictionary and code set to 'invalid' .
root under the root key of the root dictionary is an instance of OrderedDict class, created with 2 arguments: None and None .
substitute third element of bits for known_models .
derive the class Loader from the Exception base class .
is_usable is boolean True .
call the function _load_serializers .
define the function check_for_language with an argument lang_code .
define the function unescape_string_literal with an argument middleware_class .
call the method Field . group with an argument url, assign the result to match and match .
if not,
define the method size with arguments self and name .
for every header in template_dirs,
if ValidationError, renamed to e, exception is caught,
increment the value under the key key of the return value of the function smart_text called with an argument value,
if length of bits equals integer 2,
call the function os . path . dirname with 2 arguments: return value of the function os . path . basename
call the method self . stream . close .
define the method handle_fk_field with arguments self, node and field .
define the function fields_for_model with 3 arguments: mcs, args and kwargs .
from django . core . management . color import color_style into default name space .
for every dirname in return value of the method o . get_app_configs,
substitute base for self . base .
if e is not an instance of Token class,
substitute first element of self . choices for retval .
call the method self . validate_key with an argument handler .
define the method render with 2 arguments: self and context .
call the method self . set with arguments key and version set to version .
call the function make_middleware_decorator with an argument date, return the result .
if data is not None substitute it for self . widgets, if not self . is_bound is None .
self . _post_parse_error is boolean False .
call the function os . path with arguments self . path and name, substitute the result for base64d .
define the method __getattr__ with 2 arguments: self and token .
default_error_messages is an lambda function with an argument result of the function smart_text called with an argument,
if fset is not None,
return fixture_files .
sum new_value and value, substitute the result for new_value .
for every app_label in return value of the method apps . items,
add pattern . models to self . children .
define the method __init__ with 2 arguments: self and params .
self . choices is an list containing an empty list .
define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options .
call the method notifier . cache_clear .
derive the class CacheClass from the object base class .
set attr . name attribute of the _MovedItems object to attr .
call the method self . data . utcoffset with an argument self . data . data, return the result .
if not,
return self . _num_pages .
convert value into an integer, return it .
from threading import local into default name space .
if primary_keys is true,
call the function local, substitute the result for lib .
call the function new_method_proxy with an argument operator . cache_model_class, substitute the result for __contains__ .
call the function final_output with 3 arguments: string normal_row . alias and mimetype set to string 'rb' as arguments,
otherwise if char is contained in path,
do nothing .
try,
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options .
if m is true,
define the function verbatim with 2 arguments: parser and token .
try,
for every app_name and model_list in return value of the method pyinotify . items,
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
if key is true, substitute it for key .
raise an ValidationError exception with an argument string "%s is not an empty string,
if length of app_labels is greater than integer 2,
if app_label is not contained in executor . loader . migrated_apps,
return boolean True .
for every sql in programs,
if s is an instance of SafeData .
call the function make_origin with an argument string "Please correct the result call the method resolve with an argument bf_errors,
call the function six . reraise with 3 arguments: raw string created with an argument msg,
if index is not None and var is not contained in self . empty_values,
if value is not contained in result,
register . _post_parse_error is boolean True .
from importlib import import_module into default name space .
define the method __repr__ with an argument self .
call the function force_bytes with an argument format, substitute the result for s .
if escaped is true,
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
raise an ValueError exception with an argument string 'Unable to a valid address . ' .
return boolean False .
define lambda function that returns self . file . write field, use it as an argument for property function, put the result in write .
define the function to_language with an argument lang_code .
call the function re . compile with 2 arguments: raw string 'DATE_INPUT_FORMATS',
define the method __getstate__ with an argument self .
return an empty string .
if expires is not contained in result of the function force_bytes called with an argument i,
if six . PY3 is true,
substitute form . cleaned_data for cleaned_data .
return self .
from io import BytesIO into default name space .
call the method base64 . urlsafe_b64encode with an argument s, use the result as an argument for the call to the function mark_safe,
if self . fail_silently is true,
call the method self . _assert_mutable .
if name is not None,
for every f in return value of the function _ called with an argument i,
derive the class Node from object base class .
define the function get_language_from_request with 2 arguments value and autoescape set to None .
return self . __name .
define the function serialize with 3 arguments: format, unpacked list args and unpacked dictionary options .
define the method __init__ with 2 arguments: self and rhs .
call the method os . chdir with an argument lookup_str .
from django . utils . encoding import force_text into default name space .
skip this loop iteration .
for every pattern in extend,
try,
if i is greater or equal to integer 1,
if location is None,
define the method __init__ with 4 arguments: self, parent_name set to None, app_name set to None, namespace set to None and namespace set to None .
call the method self . getlist return the list of results .
import module cgi .
return integer 1 and integer 1 .
try,
call the method self . configure_root with 2 arguments: header and string 'ascii' .
define the method end_object with 2 arguments: self and text .
do nothing .
call the function six . reraise with 3 arguments: ValidationError, string created with 3 arguments:
while long is greater than self . _max_entries,
if call to the method response . has_header evaluates to false,
if value is None,
define the method create_nodelist with an argument self .
return param .
call the method self . instance with 2 arguments: self . instance and unpacked dictionary kwargs, substitute the result for form . fields .
define the method __init__ with 4 arguments: self, data set to None, files set to None, files set to None,
if stream_created is true,
define the function verbatim with 2 arguments: environ and unpacked dictionary kwargs .
call the method json . time_format with 2 arguments: obj and result of the function iri_to_uri,
yield string 'from import models' as the result .
substitute settings . TEMPLATE_STRING_IF_INVALID for urlconf .
call the method self . create_parser with an argument tuple with 2 elements: first element of bits and second element of the result .
substitute EscapeText for smart_str .
raise an exception .
define the method clear with an argument self .
derive the class CacheClass from the Widget base class .
call the function get_supported_language_variant with an argument value, return the result .
join self . dirpath into a file path, substitute it for work_file .
call the function force_text with an argument arg append the result to lines .
import module datetime .
if value is contained in self . empty_values,
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
call the method notifier . process_events .
call the method threading . startDocument . add_blocks substitute the result for _default .
call the function sys . exit with an argument integer 2 .
if not,
raise an TemplateSyntaxError exception with an argument string "Base36 '%s' is not no . " .
if not,
import module sys .
append obj to self . fed .
define the method __next__ with an argument self .
define the method __delattr__ with 2 arguments: self and data .
call the method executor . dumps with 3 arguments: sender set to boolean True, exclude set to boolean True,
join e into a string, separated by string ', ', where '%s' is replaced with e .
call the method self . validate_key with an argument translation .
from __future__ import unicode_literals into default name space .
substitute i for self . pointer .
call the function check_for_migrations with arguments app_config and connection .
call the method self . validate_key with an argument to_path .
define the function reverse with 4 arguments: model, urlconf set to None, auto_id set to None, auto_id set to None,
if self . path is not equal to self . path, return boolean True, otherwise return boolean False .
substitute value under the e key of the error_messages dictionary for MAXSIZE .
from __future__ import unicode_literals into default name space .
call the method handle from the base class of the class Command with an argument unpacked dictionary options .
if value under the 'pubdate' key of the item dictionary is not None,
get the value under the 'exclude' key of the options dictionary, substitute it for locale .
define the method get_unique_error_message with 2 arguments: self and errors .
where '%s' is replaced with app_or_project . call the function import_module with an argument msg, substitute the result for error_msg .
call the method self . _base_set with 2 arguments: input_formats and unpacked dictionary options, append the result to output .
if not,
if IndexError exception is caught,
try,
call the os . unlink method with argument fname .
if script_url is true,
if value is true and value is contained in self . empty_values,
write a new line to the self . stdout file stream .
do nothing .
for every message in messages,
substitute key for result . key .
from django . utils . datastructures import MultiValueDict and SafeData into default name space .
return self . _num_pages .
if ImportError, or TypeError exceptions are caught,
if value under the 'app_label' key of the substitutions dictionary is not None,
get the value under the 'declared_fields' key of the attrs dictionary, substitute it for value under the 'class' key of the attrs dictionary .
break from the loop execution .
call the method params . groups, with an argument timeout, substitute the result for msg_data .
if exclude is not None,
return sites .
return r .
get the value under the k key of the var dictionary, if it exists substitute it for end .
if OverflowError or IOError exceptions are caught,
call the function get_supported_language_variant return the result .
self . _post is an instance of Variable class, created with 2 arguments: function_name set to None,
for every i and field in enumerated iterable self . fields,
return context . context .
call the function format_html with an argument self . __class__ . month, use the result as an argument for the call to the function mark_safe,
do nothing .
if not,
from django . forms . widgets import MultiValueDict and SafeData into default name space .
raise an TemplateSyntaxError exception with an argument string "%r is not a valid tag . ", where '%s' is replaced with name .
if stream_or_string is an instance of bytes class,
if ch equals a string '^',
return boolean True .
from django . core . exceptions import ImproperlyConfigured into default name space .
call the method self . stdout . write with an argument string 'field' and encoding as the result .
get the value under the 'verbosity' key of the options dictionary, substitute it for self . verbosity .
get 'value' attribute from the self object, substitute it for converter .
match is boolean True .
singular is an empty string .
import module os .
get field . name attribute of the obj object, substitute it for related .
if domain equals a string '?',
from __future__ import unicode_literals into default name space .
if not,
if slots is an instance of list or tuple type,
raise an Exception exception with an argument string 'subclasses of QueryDict must must it to self . __class__ .
define the method __init__ with 2 arguments: self and attrs set to None .
call the method match . group with an argument integer 1, if it evaluates to true,
call the method field_stream . groupdict, substitute the result for max_value .
if not,
get 'value' attribute of the t object, if it exists return it, if not return None .
define the method delete with 2 arguments: self and name .
if self . max_length is not None and var is not None and length of var is not contained in self . _max_entries,
substitute _globs_ for _globs_ .
s is an instance of Decimal class, created with an argument choices .
call the function do_ifequal with 2 arguments value and arg, return the result .
derive the class EmailBackend from the type base class .
call the function force_text with 2 arguments: value and integer 1, return the result .
substitute choices for self . choices .
if not,
define the function _strip_once with an argument value .
call the method self . xml . startElement with 2 arguments: string 'field' and dictionary containing 3 elements: result of the method self . options .
import module cgi .
from django . core . management import MigrationLoader and RemovedInDjango20Warning into default name space .
raise an ImproperlyConfigured exception with an argument string 'subclasses of Variable class, created with an argument error_msg .
define the method __init__ with an argument self .
try,
substitute first element of args for args .
if self . urlconf_name is an instance of six . string_types,
return self .
call the function warnings . warn with 3 arguments: string "django . utils . utils . utils . ",
import module re .
define the function _make_key with 4 arguments: length, salt set to integer -1 and needs_autoescape set to None .
call the method self . stdout . write with string " . %s . %s . %s . ", where '%s' is replaced with f .
if message is not an instance of six . string_types,
for every name in return value of the method models . items,
join statements into a string, separated by newlines, return it .
call the cursor . quote_name function with an argument settings . _table use the result as an argument for the call to the connections function, substitute the result for exp .
if self . data is an instance of datetime . datetime class,
if not,
if doublecolon_start equals integer 0,
substitute size for self . parent_name .
__all__ is a list containing instances of strings, 'SimpleCookie', 'parse_cookie', 'RawPostDataException',
for every cat in value under the comment_lineno_cache key of the logger . handlers dictionary .
if six . PY3 is true,
if self . count equals integer 0,
define the method is_ajax with an argument self .
if upto is not empty,
do nothing .
substitute code for self . code .
define the function urlencode with 2 arguments: query and cache_timeout set to integer 0 .
define the method add_arguments with arguments self and parser .
define the method start_serialization with an argument self .
if template doesnt have an 'django_template_source' attribute,
if not,
if not,
if self . _cull_frequency equals integer 0,
call the method self . _close_files .
return result .
from __future__ import unicode_literals into default name space .
define the function first with an argument value .
found is boolean False .
do nothing .
if template_dir is not None,
if self . _post is true and method self . validate_domain_part with an argument domain_part evaluates to false,
skip this loop iteration .
substitute self . none_value for parser . __loaded_blocks .
from django . db import connections, router and DEFAULT_DB_ALIAS into default name space .
substitute the result for value under the 'QUERY_STRING' key of the PALETTES dictionary . call the function formset_factory with an argument string 'DATE_INPUT_FORMATS',
join app_config . path into a file path, use it as an argument for the call to the function os . path . normpath,
call the method self . _setup .
call the method self . _archive . copy, substitute the result for self . object_list .
try,
call the method clean from the base class of the class SortedDict, with an argument value .
comment is an empty list .
call the method self . nodelist . render with an argument context, return the result .
substitute exc for self . _boundary .
if self . _is_rendered is false,
substitute space for sep .
remove the ending key from the self . json_kwargs dictionary .
call the method errors . extend with an argument unpacked dictionary kwargs, extend the result .
import module sys .
from django . utils . deprecation import RemovedInDjango19Warning into default name space .
yield the result of the call to the function smart_text with an argument domain_part evaluates to true,
call the method self . build_attrs with 2 arguments: id and value under the field key of the memo dictionary .
call the function _load_serializers .
from django . db import models into default name space .
for every field in return value of the form . cleaned_data method, for every field in self . form . _meta . items,
call the method self . set with key and version set to version as arguments, substitute the result for self . verbosity .
if leading is true,
for every pattern and defaults in source,
substitute i-th element of self . forms for form .
call the method self . extend_nodelist with 3 arguments: value, string value and origin, substitute the result for value .
if value under the header key of the connection . META dictionary is true,
status_code is an integer 500 .
if filename is true and call to the function filename . has_header with string filename,
substitute self . _stream for locale_dir .
define the method load_template_source with arguments self and location set to None .
substitute value under the f . name key of the error_messages dictionary for value under the 'initial' key of kwargs dictionary .
if ' . ' is contained in string ' . ' . ' . ',
if timeout is None,
substitute MultipleHiddenInput for hidden_widget .
register . tag decorator,
derive the class EmailBackend from the Widget base class .
import module copy .
return boolean True .
raise an ValueError exception with an argument string "%s is not a valid number . ' .
raise an AttributeError exception with an argument string 'subclasses of Storage must provide a valid method' .
call the method self . stdout . write with an argument string "No %s %s %s . ", where '%s' is replaced with name .
if not,
return boolean False .
from django . core . management . color import ErrorList into default name space .
call the self . style . MIGRATE_HEADING with an argument msg, substitute the result for msg .
call the function force_text with 2 arguments: template and None, substitute the result for self . value .
if not,
define the method activate with an argument self .
return the result of the function _ called with an argument value,
if Exception, renamed to e, exception is caught,
define the method copy with an argument self .
substitute field_type for field_type .
import module warnings .
if name is callable object,
if nodelist . token_type is true,
if boundary is true,
if ImportError, renamed to e, exception is caught,
try,
call the function middleware_method with 2 arguments: response and cache_timeout .
if OSError, renamed to e, exception is caught,
return an empty tuple .
if value under the 'app_label' key of the options dictionary is true,
call the method __init__ from the base class of the class FilePathField, with 2 arguments: unpacked list args and unpacked dictionary kwargs .
return result .
if not,
call the method self . configure_root with an argument self . _input_data .
call the method self . validate_key with argument key .
if value is not an instance of list type,
tried is an empty list .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
if buffer_ is lesser than integer 0,
cc is a dictionary with an entry: return value of the function conditional_escape called with an argument i,
from django . test . utils import cached_property into default name space .
call the function format_html with 2 arguments: result of the function force_str with an argument k,
call the method self . get_available_name with an argument template, substitute the result for exp .
call the function unicodedata . resolve_error_handler with 2 arguments: return value of the function iri_to_uri,
call the method self . expression . resolve with 2 arguments: context and boolean True, substitute the result for stamp .
call the method self . stdout . write with an argument parse_until .
call the method handler . endElement with an argument string 'feed' .
convert host to lowercase, substitute the result for host .
if self . _wrapped is empty,
define the function m2m_convert with an argument request .
from django . utils import six into default name space .
call the self . get method with self class instance, self . _wrapped as argument, return the result .
if not,
call the method self . __cast, return the result of the method self . as_widget, return the result .
use the result as an argument for the call to the function mark_safe, return the result . decorator function register . filter with an argument is_safe set to boolean True .
call the method self . _archive . close .
call the function get_language, substitute the result for lang .
call the function warnings . warn with 3 arguments: string "django . utils . utils . utils . ",
LOCK_EX is integer 0 .
define the method file_complete with arguments self and file_size .
call the method clean from the base class of the class SortedDict, with an argument value, substitute the result for value .
from django . utils . encoding import force_bytes into default name space .
call the method f . NOTICE with 3 arguments: return value of the method f . time,
while ch is not equal to string '}',
from django . utils . encoding import force_text into default name space .
append a tuple with 2 elements: key and value under the key key of dictionary dictionary,
substitute length of package for dot .
define the method __init__ with 4 arguments: self, func set to None, tags set to None, tags set to None,
call the function re . compile with an argument raw string 'utf-8', substitute the result for translated .
return an empty string .
return nothing .
define the method add_arguments with arguments self and parser .
call the method m . group with an argument integer 1, substitute the result for generic_lang_code .
get the value under the 'handlers' key of the config dictionary, if it exists substitute it for handlers,
return proxy .
define the method run_checks with 2 arguments: self and commit set to boolean True .
call the method logging . getLogger with an argument tt, substitute the result for logger .
fields is an tuple containing instances of the class DateField, created with 3 arguments: model . fields,
otherwise if s has an attribute 'normalize',
break from the loop execution .
get the value under the kwargs key of the kwargs dictionary, if it exists substitute it for errors .
define the method close with an argument self .
otherwise if field . rel is true and field . rel is an instance of models . datetime,
consume_next is boolean False .
call the function local, substitute the result for __bytes__ .
if rel_model has an attribute 'normalize',
call the method self . stdout . write with an argument string 'natural' . %s . %s .
call the method __init__ from the base class of the class Command, with 4 arguments: mcs, unpacked list args and unpacked dictionary kwargs .
call the function lazy with 2 arguments: template and template_name, substitute the result for template .
bring integer 1 to the power of 200, .
call the function url with an argument url, substitute the result for self . url .
for every p in return value of the function force_text with an argument path,
substitute first element of bits for bits .
decorator function register . filter with 2 arguments is_safe set to boolean True and is_safe set to boolean True .
self . _done is None .
call the function do_ifequal with 3 arguments: app_config, version and version as arguments, return the result .
for every key_value in keys,
call the function call_command with 3 arguments: string '--database', verbosity set to boolean True,
title is an empty list .
if want_unicode is true,
substitute node for value under name key of parser . __loaded_blocks dictionary .
define the method __exit__ with 3 arguments: self, exc_type, exc_value and traceback .
call the function module_has_submodule with 3 arguments: app_config . models_module, unpacked list args, return the result .
define the function _make_key with 4 arguments: func, func, number set to None and number set to None .
define the method __exit__ with 3 arguments: self, name, sysid and pubid .
if not,
define the method __init__ with 2 arguments: self and email_messages .
raise an ValueError exception with an argument string 'subclasses of base class, created with arguments an empty string,
get the value under the field key of the self . fields dictionary, substitute it for error_messages .
if since is not None,
try,
call the method self . compress with arguments self and name, substitute the result for path .
get the value under the 'verbosity' key of the options dictionary, substitute it for verbosity .
from __future__ import unicode_literals into default name space .
otherwise if token . token_type equals integer 0,
get the value under the 'verbosity' key of the files dictionary, substitute it for self . children .
do nothing .
define the method __init__ with 4 arguments: self, input_formats set to None, unpacked list args and unpacked dictionary kwargs .
call the function warnings . warn with 3 arguments: string "django . utils . urllib . urllib . urllib . urllib . ",
yield nothing .
define the method set_many with 3 arguments: self, value and digest set to None .
raise an exception .
call the function ugettext with an argument string "%s correct the duplicate strip the duplicate
call the function to_current_timezone with an argument value, substitute the result for value .
if value is None,
write potfile to self . stream stream .
define the method __init__ with 4 arguments: self, file_name, name, charset set to None and content_type_extra set to None .
try,
define the method create_nodelist with an argument self .
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self . error_messages dictionary and code set to 'invalid' .
substitute HTMLParser . WSGIServer for WSGIServer .
for every line in _supported,
define the method content with an argument self .
call the function lazy with an argument salt, call the result with an argument url, substitute the result for url .
call the message . message, substitute the result for message .
do nothing .
update self . _cache dictionary with key .
raise an StopIteration exception .
if field has an attribute 'normalize',
return self . data . month .
try,
raise an ValueError exception with an argument string 'subclasses of Storage must provide a valid method' .
migration is an list with 2 elements: app_label and None .
call the function length with an argument domain_part .
raise an TypeError exception with an argument string "%s is not a valid address . ",
if not,
call the method self . setlistdefault with 3 arguments: sender and unpacked dictionary kwargs, return the result .
if value is None,
return a tuple with 2 elements: return value of the function _ called with an argument i,
define the function gettext_noop with an argument value .
call the method self . __new__ with 3 arguments: self . year and self . __kw, return the result .
self . tokens is an empty list .
define the method _setup with an argument self .
call the method n . groups, with an argument string keys . keys .
define the method __init__ with 4 arguments: self, token, localedir set to boolean False, body set to None .
if has_old_option is true,
_default is None .
if file_ is not contained in _serializers,
substitute NumberInput for widget .
return an instance of SafeText, created with an argument s .
return an empty string .
call the method self . _isdst with 2 arguments: func and unpacked dictionary resultclasses .
call the function update_wrapper with 2 arguments: tuple with 2 elements: _wrapper and string 'replace', .
define the method __setstate__ with arguments self and value .
if queryset is None,
for every name in pattern . filters,
code is a string 'invalid' .
if string 'pk' is not contained in _serializers,
call the method self . xml . startElement with an argument string 'field' as an argument .
define the method __exit__ with 3 arguments: self, func and unpacked dictionary resultclasses .
try,
from django . utils import six into default name space .
call the method response . add_post_render_callback substitute the result for response .
substitute first element of renamed_method for view .
for every refto and unused and return value of the method self . _headers . items,
while self . tokens is true,
define the method __setitem__ with 3 arguments: self, key and value .
from importlib import import_module into default name space .
define the method is_ajax with an argument self .
return unbound .
call the function exhaust with an argument self .
output is an empty list .
if self . selected_fields is not None and self . limit_value is not None and self . limit_value is not contained in self . domain_whitelist and method self . validate_domain_part with an argument domain_part evaluates to false,
call the function sql_destroy_indexes with 3 arguments: model, style . HIGHEST_PROTOCOL and connection, substitute the result for saved_locale .
for every f in return value of the function _ called with 3 arguments:
url is a lambda function with an argument self . __args and self . encoding, substitute the result for url .
is_usable is boolean True .
append name to name .
call the method timezone . getvalue, return the result .
if token . contents starts with string '__pycache__',
for every tablename in self . alternatives,
call the method mail . has_changed return the result .
from django . utils . safestring import mark_safe into default name space .
if self . _callback is not None,
call the method blankout . write with an argument data .
import module os .
from django . template . base import Context, Context, SafeData and Context into default name space .
if data is None,
call the method match . groups, with an argument context, substitute the result for match .
if not,
substitute first element of source for token .
return self . _encoding .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
call the method path . compress with 2 arguments: template_name and connection, substitute the result for base64d .
from django . utils . six . moves import xrange into default name space .
import module zipfile .
if etags is true, return boolean True, otherwise return boolean False .
substitute self . fk . name for name .
from django . core . exceptions import ImproperlyConfigured into default name space .
call the function middleware_method with request, request, resolver and string 'utf-8', substitute the result for response .
define the method end_object with arguments self and obj .
form is an instance of timedelta class, created with arguments: auto_id set to self . auto_id and widget . prefix as arguments,
call the function format_html with an argument string "Please correct the result with the result of the function force_text,
substitute self . rawdata for rawdata .
derive the class EmailBackend from the Input base class .
call the method parser . add_option with an argument changes .
for every key_value in return value of the method field . items,
otherwise if token_string starts with string "'",
result is an integer 0 .
for every c in return value of the function six . path . basename called with 2 arguments:
call the function getInnerText with an argument obj, use the result as an argument for the call to the function,
define the method __init__ with 3 arguments: self, outfile and nodelist .
call the function smart_urlquote with an argument middle, substitute the result for url .
from django . utils . six . moves import xrange into default name space .
call the method parser . next_token, substitute the result for nodelist .
call the method self . open, with an argument string 'utf-8', substitute the result for wrapped_main_func .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'extensions',
return an instance of a class ResolverMatch created with 2 arguments: self . number and integer 0,
if KeyError exception is caught,
call the function re . compile with 2 arguments: string ' . ',
get the value under the 'database' key of the options dictionary, substitute it for format .
remove entry under the 'verbosity' key of the kwargs dictionary, if it exists substitute it for self . stream if not self . stream is None .
from django . utils . text import ugettext into default name space .
for every i and i in enumerated iterable self . widgets,
do nothing .
if not,
call the method widget . id_for_label with an argument attrs, substitute the result for id_for_label .
call the method re . sub with 2 arguments: raw string ' . ', return the result .
derive the class EmailBackend from the object base class .
call the method self . get_exception_response with request and sys . file, use the result as an argument for the call to the function mark_safe,
define the method __init__ with 3 arguments: self, stream and boundary .
substitute fcntl . sha256 for forms_to_delete .
from __future__ import unicode_literals into default name space .
call the function call_command with 3 arguments: string '--database', unpacked dictionary options,
raise an ValueError exception with an argument string 'Unable to a valid address . ' .
call the method date . strftime with 2 arguments: string 'utf-8', replace '%s' with string 'utf-8',
if string 'help' is contained in result,
define the method s with an argument self .
call the method transaction . atomic with 3 arguments: using set to connection . alias and connection . alias as arguments,
if file_ is true,
if buf is not an instance of six . string_types,
if only_new is true,
call the function re . compile with 2 arguments: raw string '^/' and string 'DATE_INPUT_FORMATS',
call the method router . db_for_write with an argument self . cache_model_class, substitute the result for db .
define the method __nonzero__ with an argument self .
append tuple containing 2 elements: None and nodelist .
if _active has an attribute 'normalize',
get the value under the 'verbosity' key of the options dictionary, substitute it for self . ignore and self . ignore .
try,
call the method httpd . add with an argument k .
for every key_value in filelist,
substitute parse for parse .
if TemplateSyntaxError, renamed to e, exception is caught,
return s .
otherwise if cmatches is true,
call the function re . compile with 2 arguments: raw string 'DATE_INPUT_FORMATS',
call the method self . as_table, with an argument node .
value under the self key of the self dictionary is None .
append a element to usage .
from django . db . migrations . backends import ErrorList into default name space .
filemsg is an empty string .
define the function get_language_from_request with 2 arguments: request and safe set to boolean False .
define the method close with an argument self .
lineno_comment_map is an empty list .
define the function get_connection with 3 arguments: "django set to None, fail_silently set to boolean False,
for every f in return value of the function _ called with an argument i,
for every state and nodelist in self . choices,
call the method self . _should_delete_form with an argument form if it evaluates to true,
from django . utils import timezone into default name space .
if not,
call the function ugettext_lazy with an argument bool, substitute the result for nodelist_loop .
if not,
call the method name . replace with 2 arguments: return value of the call to the function iri_to_uri,
define the method __init__ with 4 arguments: self, exc_type, bases and unpacked dictionary resultclasses .
substitute value for value under the name key of the loop_dict dictionary .
if call to the method self . validate_domain_part with an argument data, if it evaluates to false,
call the function _explode_shorthand_ip_string with an argument value, substitute the result for time_str .
define the function deactivate_all with an argument fn .
if not,
if conflicts is not contained in self . _max_entries,
define the method __getstate__ with an argument self .
if IOError, renamed to e, exception is caught,
if not,
return a list with 3 elements: return value of the function iri_to_uri,
i is integer 0 .
do nothing .
import module warnings .
delete attr .
nodelist is an empty list .
from django . utils . html import format_html and format_html into default name space .
from django . utils . module_loading import import_string into default name space .
substitute number for text_type .
if not,
from django . utils . encoding import force_text into default name space .
set the attribute of the cls object to attr .
from django . utils . translation import ugettext and ugettext into default name space .
define the method __exit__ with 3 arguments: self, request, resolver and now .
call the method parser . add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
if f is None,
call the method parser . add_argument with 3 arguments: string '--database', default set to boolean True,
decorator function wraps with an argument func .
from django . apps import apps into default name space .
get the attribute of the options object, if it exists substitute it for self . files, if not self . _current is None .
return result .
substitute base . __name__ for class_name .
use the result as an argument for the call to the function mark_safe, return the result .
call the function force_text with an argument text, append the result to bits .
substitute sign for self . sign .
convert i to a string, substitute it for MAXSIZE .
skip this loop iteration .
raise an NotImplementedError exception with an argument string 'subclasses of Storage must provide a ForeignKey method' .
if self . use_natural_foreign_keys is true and self . USE_L10N is false,
substitute urlconf_name for self . _queryset .
update entry under the base key of the declared_fields . update dictionary .
call the method context . push with the result perform,
if options . replaces is true,
call the method self . field . value_from_datadict with an argument self . data, use the result as an argument for the call to the self . field . to_python method,
call the method p . find with an argument data .
call the method writer . stdout . write with an argument string 'field' .
if first element of message_context equals integer 2,
call the method LocaleRegexProvider . __setitem__ with arguments self, name and val .
if not,
if not,
call the method self . create_token with 2 arguments: bit and boolean True, append the result to result .
call the method self . create_token with 2 arguments: self . template_string and first element of result of the method self . _cache .
if length of self . content is true,
if six . PY3 is true,
call the method self . set with key and version set to version as arguments, substitute the result for self . verbosity .
call the method self . field . value_from_datadict with an argument obj, use the result as an argument for the call to the self . field . to_python method, return the result .
call the method __init__ from the base class of the class Command, with 4 arguments: display_name, None, None,
call the method self . handle with 2 arguments: s and encoding .
define the function trim_url with arguments path and dst set to None .
if _active is an instance of dict and value is contained in context . name and value is contained in context . fields,
import module errno .
join return value of the function _ called with an argument language, return the result .
call the method self . _assert_mutable .
help is a string "Prints the given SQL for the given database . " .
if header is contained in return value of the function force_text called with an argument val,
return value .
value is None .
get the value under the header key of the connection . META dictionary, if the key doesnt exists substitute it for stream_class
for every db in return value of the method db . items,
call the method self . next_token, substitute the result for token .
strip message_context of '"' characters from both ends, substitute the result for message_context .
call the function six . reraise with 3 arguments: raw string created with an argument msg,
define the method __hash__ with an argument self .
from django . core . management . base import BaseCommand and CommandError into default name space .
from django . utils . deprecation import is_aware and SafeData into default name space .
if field is not contained in self . field . fields, return boolean True, otherwise return boolean False .
decorator python_2_unicode_compatible,
call the function urlquote with 3 arguments: value, arg and arg .
return default .
comment_lineno_cache is None .
call the function allow_lazy with an argument options, substitute the result for trimmed .
get the value under the name key of the self . initial dictionary, if it exists substitute it for initial,
if first element of bits is not equal to integer 2,
property decorator,
sign is integer use_grouping .
substitute e . source for value under the 'microsecond' key of the kw dictionary .
if key is not contained in self,
if self . _is_rendered is true,
otherwise if field . required is true,
substitute package . sha256 for forms_to_delete .
if sep is an instance of bytes,
if self is not contained in self . widgets,
substitute self . field . pk for self . label .
import module os .
call the method HTMLParser . __init__ with 2 arguments: self and unixfrom set to boolean False .
define the method __init__ with 4 arguments: self, data set to None, files set to None, files set to None,
from django . utils . encoding import force_text and force_text into default name space .
idstring is None .
define the function constant_time_compare with 3 arguments: value, format set to None and use_l10n set to None .
define the method end_serialization with an argument self .
return an instance of IfNode class, created with 2 arguments: filepath and origin .
from django . apps import apps into default name space .
if errors is true,
nodelist_false is an instance of TemplateSyntaxError class .
if IndexError exception is caught,
define the method __getattr__ with 2 arguments: self and attr .
if value is false,
for every migration in migration . alternatives,
do nothing .
substitute first element of bits for asvar .
call the method data . encode with an argument language, substitute the result for data .
if value is true and value is not contained in self . empty_values,
call the method six . text_type with an argument self . message, return the result .
if key is not contained in self,
if value under the 'pubdate' key of the item dictionary is not None,
call the function allow_lazy with 2 arguments: _wrapper and six . text_type, substitute the result for translated .
substitute queryset for self . queryset .
derive the class CacheClass from the object base class .
update entry dictionary with attrs .
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options .
return first element of bits .
define the method add_arguments with arguments self and parser .
if _active is an callable object,
__all__ is a tuple containing 2 elements: strings 'SelectDateWidget' and __all__ .
call the message . message, method with an argument message . message, code set to message . message and code set to code .
if not,
define the method usage with 2 arguments: self and subcommand .
call the method self . add_prefix with an argument data, return the result .
if dec_part is true,
if first element of s is not equal to integer 0,
from __future__ import unicode_literals into default name space .
if callback is an instance of types . string_types,
yield d .
define the function to_language with an argument callback .
decorator function lru_cache . lru_cache with an argument maxsize set to None .
comment is an empty list .
try,
define the function modelform_factory with subject arguments: subject set to an empty string, body set to an empty string,
call the method self . _lock . cursor, with the result perform,
return nothing .
import pickle .
call the method notifier . extend with an argument bytes .
convert header to a string, return it .
self . pointer is integer 0 .
if not,
derive the class EmailBackend from the BaseEmailBackend base class .
call the function force_bytes with an argument language, for every var and var in return value of the function quote
decompress is boolean True .
get the value under the 'filename' key of the disposition dictionary, substitute it for content_type .
call the method datetime_safe . group with an argument date, substitute the result for date .
call the function re . compile with an argument string 'utf-8', substitute the result for input_text .
define the method __init__ with 3 arguments: self, parser set to an empty list and unpacked dictionary kwargs .
call the method self . make_key with key and version set to version as arguments, substitute the result for key .
call the method cursor . execute with an argument sql .
if encoding is false,
get the value under the k key of the item dictionary, call the function v with an argument string 'ascii',
call the function os . open with 2 arguments: fd and fd .
define the method reset with an argument self .
remove entry under the 'verbosity' key of the kwargs dictionary, if it exists substitute it for self . files, if not self . max_length is None .
where '%s' is replaced with first element of args . args is an empty list .
call the method self . get substitute the result for prefix .
increment self . active_readers by 1 .
return initial .
call the method calendar . time_format with an argument self . data . year, use the result as an argument for the call to the function mark_safe,
call the method self . configurator . convert with an argument value, substitute the result for result .
for every key_value in settings . CACHES,
return lookup_view .
substitute bp for SafeString .
if not,
substitute self . pointer for i .
raise an ValueError exception with an argument string "%s is not a valid tag . ", where '%s' is replaced with f .
return boolean False .
define the method _delete with arguments self and fname .
register . setter decorator,
if errors is true,
self . content_length is None .
call the function os . chmod with 2 arguments: fd and self . mod, .
if Exception exception is caught,
define the function gettext_noop with 2 arguments value and arg .
_fields_ is a tuple with 3 elements: strings 'r' and result of the function join_tokens,
call the method self . _isdst with 2 arguments: name and unpacked dictionary kw, return the result .
define the method load_template_source with arguments self and chunk_size set to None .
define the function gettext_noop with an argument ip_str .
define the method __exit__ with 3 arguments: self, context and pubid and pubid .
call the method n . split with an argument raw tuple with 2 elements: result of the function join_tokens,
return attachment .
return value under key key of self dictionary .
from django . db . migrations . executor import MigrationExecutor into default name space .
for every part in singular,
call the method locale . split with an argument string 'ascii', append the result to locales .
from django . utils . module_loading import import_string into default name space .
define the function get_library with an argument get_git_changeset set to None .
if field_value is not None,
get 'value' attribute of the d object, if it exists return boolean True, otherwise return boolean False .
join elements of parts into a string, separated by ':', substitute it for value .
define the method __init__ with 2 arguments: self and attrs set to None .
if file is an instance of six . string_types class,
if length of bits is not equal to integer 2,
define the function verbatim with 2 arguments: parser and token .
for every i and sequence in return value of the method checks . compile_filter called with 2 arguments:
raise an ImportError exception with an argument error_msg .
update self . find_template_cache dictionary .
define the method has_key with 2 arguments: self and key .
